<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2021.114117</article-id><article-id pub-id-type="publisher-id">CSA-41985</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20210400000_76615481.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于潜在特征空间的低秩表示算法
  Low-Rank Representation Algorithm Based on Latent Feature Space
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>周</surname><given-names>翊航</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>null</addr-line></aff><aff id="aff2"><label>1</label><addr-line>广东工业大学计算机学院，广东 广州</addr-line></aff><pub-date pub-type="epub"><day>13</day><month>04</month><year>2021</year></pub-date><volume>11</volume><issue>04</issue><fpage>1140</fpage><lpage>1148</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   现有的大多低秩表示算法都是直接使用原始数据矩阵作为特征字典，然而原始数据中的冗余特征和噪声信息很可能会导致算法效果不佳。针对这种情况，本文提出一种基于潜在特征空间的低秩表示算法，通过正交字典来学习原始数据的潜在表示，然后利用潜在表示作为字典进行低秩表示学习，从而避免原始数据中的不利影响。 Most of the existing low-rank representation algorithms directly use the original data matrix as the feature dictionary, but the redundant features and noise information in the original data may cause the algorithm to perform poorly. In response to this situation, a low-rank representation algorithm based on the latent feature space is proposed. The latent representation of the original data is learned through an orthogonal dictionary, and then the latent representation is used as a dictionary for low-rank representation learning, so as to avoid the adverse effects of the original data. 
  
 
</p></abstract><kwd-group><kwd>潜在特征，正交字典，低秩表示, Latent Features</kwd><kwd> Orthogonal Dictionary</kwd><kwd> Low-Rank Representation</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>现有的大多低秩表示算法都是直接使用原始数据矩阵作为特征字典，然而原始数据中的冗余特征和噪声信息很可能会导致算法效果不佳。针对这种情况，本文提出一种基于潜在特征空间的低秩表示算法，通过正交字典来学习原始数据的潜在表示，然后利用潜在表示作为字典进行低秩表示学习，从而避免原始数据中的不利影响。</p></sec><sec id="s2"><title>关键词</title><p>潜在特征，正交字典，低秩表示</p></sec><sec id="s3"><title>Low-Rank Representation Algorithm Based on Latent Feature Space</title><p>Yihang Zhou</p><p>School of Computers, Guangdong University of Technology, Guangzhou Guangdong</p><p><img src="//html.hanspub.org/file/38-1542123x4_hanspub.png" /></p><p>Received: Mar. 28<sup>th</sup>, 2021; accepted: Apr. 21<sup>st</sup>, 2021; published: Apr. 28<sup>th</sup>, 2021</p><p><img src="//html.hanspub.org/file/38-1542123x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>Most of the existing low-rank representation algorithms directly use the original data matrix as the feature dictionary, but the redundant features and noise information in the original data may cause the algorithm to perform poorly. In response to this situation, a low-rank representation algorithm based on the latent feature space is proposed. The latent representation of the original data is learned through an orthogonal dictionary, and then the latent representation is used as a dictionary for low-rank representation learning, so as to avoid the adverse effects of the original data.</p><p>Keywords:Latent Features, Orthogonal Dictionary, Low-Rank Representation</p><disp-formula id="hanspub.41985-formula53"><graphic xlink:href="//html.hanspub.org/file/38-1542123x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2021 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/38-1542123x7_hanspub.png" /> <img src="//html.hanspub.org/file/38-1542123x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>随着社会经济的发展和科学技术的进步，人们获取信息的手段和渠道被大为拓宽。但是当我们在使用的特定数据时，往往会由于缺乏先验知识或者成本过高而难以进行人工标注。在这种数据没有标签的情况下，很自然地，我们会借助计算机来辅助完成一些任务。在机器学习中，这种根据类别未知的训练数据集来解决模式识别中的各种问题，称之为无监督学习。</p><p>“大数据”的迅猛发展推动了高维数据的处理需求，同时其也成为了无监督学习领域的研究热点之一。高维数据含有丰富的信息，对样本的描述更加充分，理论上这类高维数据应有助于机器学习到更好的模型。然而，高维的数据同样带来了算法复杂性的提升，不仅需要大量的空间来存储这些数据，而且还需要花费大量的时间来进行模型的训练，严重制约了算法的应用，特别是对于如视频跟踪等实时性要求比较严格的应用场景。此外，高维的数据尽管信息量丰富，但是却含有大量的冗余特征，甚至部分数据由于不规范的采集方式或恶劣的采集环境会出现大量的噪声或低分辨率等现象，给数据分析和模型学习带来了极大的挑战。如果直接对这样的大数据进行分析，不仅效率低下，而且由于冗余特征和噪声数据的存在难以学习到一个鲁棒的机器模型。为解决这一问题，人们在数据分析前对数据进行降维，提取出少量最有价值的紧凑信息进行分析，不仅节约了存储空间和处理时间，而且可以学习到鲁棒的模型。子空间学习作为一种经典的降维方法，由于其简单高效的特点而被广泛地研究使用。其主要含义是指通过寻找合适的投影，实现高维特征向低维子空间的映射，使得在降低维度的同时减少信息损耗。</p><p>近年来涌现了许多高效的子空间学习方法。其中低秩表示方法由于较低的计算复杂度和其出色的性能，而广受研究和关注。但是大多数低秩表示方法都是直接将原始数据作为特征字典来进行学习的，这样的实验结果很大程度上会受到原始数据中错误信息的影响。于是我们为了解决这个问题，提出基于潜在特征空间的低秩表示方法。</p></sec><sec id="s6"><title>2. 算法提出</title><sec id="s6_1"><title>2.1. 相关算法</title><p>给定原始数据的特征矩阵 X = [ x 1 , x 2 , ⋯ , x n ] ∈ R m &#215; n ，其中列向量 x i 表示一个样本。则低秩表示算法(Low-Rank Representation，LRR) [<xref ref-type="bibr" rid="hanspub.41985-ref1">1</xref>] 的模型可以用如下目标函数表示：</p><p>min Z , E ‖ Z ‖ * + λ ‖ E ‖ 2 ， 1   s . t .   X = X Z + E (1)</p><p>其中， Z ∈ R n &#215; n 为表示系数矩阵，E为重构误差。 ‖   ⋅   ‖ 2 , 1 表示 l 2 , 1 范数，其可以引导矩阵列稀疏。LRR算法将原始特征矩阵作为字典，通过对原始特征矩阵进行重构，来学习一个具有低秩约束的表示系数矩阵。这样Z通常可以揭示样本点之间的相似性关系，从而用来做无监督的聚类分析。</p></sec><sec id="s6_2"><title>2.2. 算法引入</title><p>在一般情况下，LRR算法可以取得不错的聚类效果。然而在实际应用中，受到各种环境和人为等各种因素的影响，我们所得到的数据往往包含冗余特征和噪声信息。所以直接将原始特征矩阵作为字典，学习得到的表示系数矩阵通常会受到其中的不利因素的影响。为此，我们提出潜在特征空间学习方法，来减少这种负面影响：</p><p>X = P H X + E 1   s . t .   P T P = I (2)</p><p>其中 P ∈ R m &#215; k 为正交字典， H ∈ R k &#215; m 为转换矩阵， E 1 为重构误差。通过这种方式，我们可以利用原始数据重构，学习转换矩阵H，进而获得原始特征的潜在表示 H X 。这样可以使得潜在特征在显式地保留原始数据的主要信息同时还能过滤噪声信息 E 1 。</p><p>进一步，我们结合低秩表示方法，并将 H X 作为特征字典，可以得到基于潜在特征空间的低秩表示方法(Low-Rank Representation Algorithm Based on Latent Feature Space, LRRLFS)，其目标函数为：</p><p>min P , H , Z , E 1 , E 2 ‖ Z ‖ * + λ 1 ‖ H X ‖ F 2 + λ 2 ( ‖ E 1 ‖ 2 , 1 + ‖ E 2 ‖ 2 , 1 )                                 s . t .   X = P H X + E 1 , H X = H X Z + E 2 , P T P = I (3)</p><p>其中 ‖ H X ‖ F 2 作为正则化项，一方面可以使得学习得到的潜在特征表示更为紧凑，另一方面可以在一定程度上防止模型过拟合。</p></sec><sec id="s6_3"><title>2.3. 算法优化</title><p>显然目标函数(3)并不是一个凸优化问题。但是我们可以采用交替直接最小化(Alternating Direction Minimization, ADM) [<xref ref-type="bibr" rid="hanspub.41985-ref2">2</xref>] 技巧来对其进行优化。首先，引入辅助变量J和K来分别代替Z和 H X 。那么目标函数表达式变为如下形式：</p><p>min P , H , Z , E 1 , E 2 , J , K ‖ J ‖ * + λ 1 ‖ H X ‖ F 2 + λ 2 ( ‖ E 1 ‖ 2 , 1 + ‖ E 2 ‖ 2 , 1 ) s . t .   X = P K + E 1 , H X = H X Z + E 2 , P T P = I , J = Z , K = H X (4)</p><p>接着，我们将上式(4)转化为增强拉格朗日问题(Augmented Lagrange Multiplier, ALM)：</p><p>L ( P , H , Z , E 1 , E 2 , J , K ) =       ‖ J ‖ * + λ 1 ‖ H X ‖ F 2 + λ 2 ( ‖ E 1 ‖ 2 , 1 + ‖ E 2 ‖ 2 , 1 ) + Φ ( Y 1 , X − P K − E 1 )                 + Φ ( Y 2 , H X − H X Z − E 2 ) + Φ ( Y 3 , J − Z ) + Φ ( Y 4 , K − H X )                 s . t .   P T P = I (5)</p><p>其中 Φ ( ⋅ , ⋅ ) 的定义为 Φ ( A . B ) = μ 2 ‖ B ‖ F 2 + T r ( A T B ) 。A表示拉格朗日乘数， μ &gt; 0 为惩罚因子。我们可以将上式(5)分解为多个子问题，并通过固定其他变量来更新单个变量。这样多次迭代之后，便能得到模型的近似解。具体子问题如下：</p><p>1) P步骤：固定其他变量，更新P。</p><p>P * = arg min P Φ ( Y 1 , X − P K − E 1 )   s . t .   P T P = I (6)</p><p>定理1对于最小化问题 min C ‖ A − B C ‖ F 2   s . t . C T C = C C T = I ，其最优解为 C * = U V T ，其中U和V分别表示对 B T A 进行奇异值分解(Singular Value Decomposition，SVD)分解后的左右奇异矩阵。</p><p>根据定理1 [<xref ref-type="bibr" rid="hanspub.41985-ref3">3</xref>]，我们将式(6)转化为类似的形式：</p><p>P * = arg min P Φ ( Y 1 , X − P K − E 1 )                           = arg min P μ 2 T r ( ( X − P K − E 1 ) T ( X − P K − E 1 ) ) + T r ( ( X − P K − E 1 ) T Y 1 )                         = arg min P μ 2 T r ( ( X − P K − E 1 + Y 1 / μ ) T ( X − P K − E 1 + Y 1 / μ ) )                         = arg min P μ 2 ‖ X − P K − E 1 + Y 1 / μ ‖ F 2                         = arg min P μ 2 ‖ ( X + Y 1 / μ − E 1 ) − P K ‖ F 2                         = arg min P μ 2 ‖ ( X + Y 1 / μ − E 1 ) T − K T P T ‖ F 2 (7)</p><p>然后通过SVD得到 K ( X + Y 1 / μ − E 1 ) T = U Σ V T ，利用U和 V T 来更新P:</p><p>P * = [ U V T ] T (8)</p><p>2) H步骤：固定其他变量，更新H。</p><p>H * = arg min H Φ ( Y 2 , H X − H X Z − E 2 ) + Φ ( Y 4 , K − H X ) + λ 1 ‖ H X ‖ F 2 (9)</p><p>我们将上式(9)对H求偏导并设为零，便可以得到其最小化问题的解：</p><p>H * = [ ( μ E 2 − Y 2 ) ( I − Z ) T X T + ( μ K + Y 4 ) X T ] [ μ X ( 2 I − Z T − Z + Z Z T ) X T + 2 λ 1 X X T ] − 1 (10)</p><p>3) Z步骤：固定其他变量，更新Z。</p><p>Z * = arg min Z Φ ( Y 3 , J − Z ) + Φ ( Y 2 , H X − H X Z − E 2 ) (11)</p><p>我们将上式(11)对Z求偏导并设为零。便可以得到其最小化问题的解：</p><p>Z * = ( I + X T H T H X ) − 1 [ ( J + X T H T H X − X T H T E 2 ) + ( Y 3 + X T H T Y 2 ) / μ ] (12)</p><p>4) E步骤：固定其他变量，更新E。</p><p>E 1 * = arg min E 1 λ 2 ‖ E 1 ‖ 2 , 1 + Φ ( Y 1 , X − P K − E 1 )                             = arg min E 1 λ 2 μ ‖ E 1 ‖ 2 , 1 + 1 2 ‖ E 1 − ( X − P K + Y 1 / μ ) ‖ F 2 (13)</p><p>E 2 * = arg min E 2 λ 2 ‖ E 2 ‖ 2 , 1 + Φ ( Y 2 , H X − H X Z − E 2 )                               = arg min E 2 λ 2 μ ‖ E 2 ‖ 2 , 1 + 1 2 ‖ E 2 − ( H X − H X Z + Y 2 / μ ) ‖ F 2 (14)</p><p>引理1 给定B，则 min   A α ‖ A ‖ 2 , 1 + 1 2 ‖ A − B ‖ F 2 的最优解 A * 的第i列可以表示为：</p><p>[ A * ] : , i = { ‖ [ B ] : , i ‖ 2 − α ‖ [ B ] : , i ‖ 2 B : , i , if ‖ [ B ] : , i ‖ 2 &gt; α 0 , otherwise (15)</p><p>根据引理1，我们可以依次更新 E 1 和 E 2 。</p><p>5) J步骤：固定其他变量，更新J。</p><p>J * = arg min J ‖ J ‖ * + Φ ( Y 3 , J − Z )                         = arg min J ‖ J ‖ * + μ 2 ‖ J − ( Z − Y 3 / μ ) ‖ F 2                       = arg min J 1 μ ‖ J ‖ * + 1 2 ‖ J − ( Z − Y 3 / μ ) ‖ F 2 (16)</p><p>我们可以利用奇异值阈值算法(Singular Value Thresholding, SVT) [<xref ref-type="bibr" rid="hanspub.41985-ref4">4</xref>] 算法计算最优解 J * ：</p><p>J * = Θ 1 / μ ( Z − Y 3 / μ ) (17)</p><p>其中 Θ 表示SVT算法的收缩算子。</p><p>6) K步骤：固定其他变量，更新K。</p><p>K * = arg min K Φ ( Y 4 , K − H X ) (18)</p><p>我们将上式(18)对K求偏导并设为零，便可以得到其最小化问题的解：</p><p>K * = H X − Y 4 / μ (19)</p><p>7) 更新拉格朗日乘子：所有乘子均采用梯度下降法更新。</p><p>{ Y 1 = Y 1 + ∂ L ∂ Y 1 = Y 1 + μ ( X − P K − E 1 ) Y 2 = Y 2 + ∂ L ∂ Y 2 = Y 2 + μ ( H X − H X Z − E 2 ) Y 3 = Y 3 + ∂ L ∂ Y 3 = Y 3 + μ ( J − Z ) Y 4 = Y 4 + ∂ L ∂ Y 4 = Y 4 + μ ( K − H X ) (20)</p><p>总上所述，我们可以得到LRRLFS算法如下：</p></sec></sec><sec id="s7"><title>3. 实验分析</title><sec id="s7_1"><title>3.1. 数据集及其预处理</title><p>在聚类实验中使用的4个数据集介绍及其预处理方式如下：</p><p>Yale B数据集 [<xref ref-type="bibr" rid="hanspub.41985-ref5">5</xref>] 由2414张，38个类别的人脸图片组成。每一个类别大约包含63张不同光照条件下的正面人脸图片。超过一大半的图片都受到了不同程度的反射和阴影的损坏。我们将这些图片转换成灰度图片，然后下采样为32 &#215; 32 像素的形式。最后将其转化为1024维的列向量并堆叠成特征矩阵。</p><p>PIE数据集 [<xref ref-type="bibr" rid="hanspub.41985-ref6">6</xref>] 包含41,368张，68个类别的人脸图片组成。每张图片拍摄于不同的情况之下，其中包括4种不同表情，13种不同姿势，43种不同的光照条件。我们将这些图片转换成灰度图片，然后下采样为32 &#215; 32 像素的形式。最后将其转化为1024维的列向量并堆叠成特征矩阵。</p><p>AR数据集 [<xref ref-type="bibr" rid="hanspub.41985-ref7">7</xref>] 包含超过4000张，126个类别的人脸彩色图片。这些图片都是正面姿势拍摄，但是有不同的面部表情，光照条件和遮挡物(围巾和墨镜)。我们将这些图片转换成灰度图片，然后下采样为40 &#215; 50像素的形式。最后将其转化为2000维的列向量并堆叠成特征矩阵。</p><p>COIL20数据集 [<xref ref-type="bibr" rid="hanspub.41985-ref8">8</xref>] 包括1440张20个类别的图片。其中每个类别一共有72张拍摄角度相差5度的32 &#215; 32像素的灰度图片。我们将其转化为1024维的列向量并堆叠成特征矩阵。</p><p>对于数量为c的不同聚类簇设定下，我们直接选取前c个类作为数据子集，并重复实验30次取平均作为最终结果。部分数据集图片示例如图1所示。</p><p>图1. 不同数据集的部分图片示例</p></sec><sec id="s7_2"><title>3.2. 对比实验</title><p>我们采用Accuracy (ACC) [<xref ref-type="bibr" rid="hanspub.41985-ref9">9</xref>] 度量来衡量实验结果的有效性。给定 x i ，令 g i 和 l i 分别表示对应的真实标签和预测标签。ACC的定义为：</p><p>ACC = ∑ i = 1 n δ ( g i , map ( l i ) ) n (21)</p><p>其中，n表示样本数。当且仅当 p = q 时， δ ( p , q ) = 1 时。否则 δ ( p , q ) = 0 。 map ( l i ) 为置换映射函数，其可以将每个的预测标签 l i 映射到对应的数据集标签中。一般采用Kuh-Munkres Agorithm [<xref ref-type="bibr" rid="hanspub.41985-ref10">10</xref>] 来寻找最佳的置换映射函数。</p><p>对比实验结果如表1~4所示。从中不难发现，LRRLFS算法相较于现有的基于低秩表示的算法有着更高效的聚类准确性。这是因为LRRLFS算法通过潜在特征表示，过滤了原始数据中的冗余特征和噪声信息。然后以其作为低秩表示学习的特征字典，获得具有清晰聚类结构的表示系数矩阵。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> ACC of different methods on Yale B data se</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >c</th><th align="center" valign="middle" >LRR</th><th align="center" valign="middle" >LatRR</th><th align="center" valign="middle" >NSLLRR</th><th align="center" valign="middle" >DGLRR</th><th align="center" valign="middle" >NNDGLRR</th><th align="center" valign="middle" >LRPP_GRR</th><th align="center" valign="middle" >PLrSC</th><th align="center" valign="middle" >LDRGC</th><th align="center" valign="middle" >LRRLFS</th></tr></thead><tr><td align="center" valign="middle" >#2</td><td align="center" valign="middle" >99.22</td><td align="center" valign="middle" >99.22</td><td align="center" valign="middle" >98.20</td><td align="center" valign="middle" >99.22</td><td align="center" valign="middle" >98.16</td><td align="center" valign="middle" >98.44</td><td align="center" valign="middle" >99.22</td><td align="center" valign="middle" >80.47</td><td align="center" valign="middle" >97.51</td></tr><tr><td align="center" valign="middle" >#8</td><td align="center" valign="middle" >78.68</td><td align="center" valign="middle" >80.00</td><td align="center" valign="middle" >76.36</td><td align="center" valign="middle" >78.65</td><td align="center" valign="middle" >80.65</td><td align="center" valign="middle" >83.98</td><td align="center" valign="middle" >82.85</td><td align="center" valign="middle" >37.31</td><td align="center" valign="middle" >91.42</td></tr><tr><td align="center" valign="middle" >#14</td><td align="center" valign="middle" >78.39</td><td align="center" valign="middle" >77.20</td><td align="center" valign="middle" >75.86</td><td align="center" valign="middle" >80.40</td><td align="center" valign="middle" >77.96</td><td align="center" valign="middle" >88.55</td><td align="center" valign="middle" >81.31</td><td align="center" valign="middle" >31.18</td><td align="center" valign="middle" >90.30</td></tr><tr><td align="center" valign="middle" >#20</td><td align="center" valign="middle" >74.70</td><td align="center" valign="middle" >73.08</td><td align="center" valign="middle" >73.60</td><td align="center" valign="middle" >77.81</td><td align="center" valign="middle" >79.38</td><td align="center" valign="middle" >71.87</td><td align="center" valign="middle" >79.28</td><td align="center" valign="middle" >34.39</td><td align="center" valign="middle" >86.71</td></tr><tr><td align="center" valign="middle" >#26</td><td align="center" valign="middle" >76.07</td><td align="center" valign="middle" >74.93</td><td align="center" valign="middle" >72.69</td><td align="center" valign="middle" >76.67</td><td align="center" valign="middle" >75.55</td><td align="center" valign="middle" >72.90</td><td align="center" valign="middle" >76.98</td><td align="center" valign="middle" >32.38</td><td align="center" valign="middle" >75.14</td></tr><tr><td align="center" valign="middle" >#32</td><td align="center" valign="middle" >74.70</td><td align="center" valign="middle" >75.99</td><td align="center" valign="middle" >69.43</td><td align="center" valign="middle" >74.92</td><td align="center" valign="middle" >75.82</td><td align="center" valign="middle" >66.40</td><td align="center" valign="middle" >74.96</td><td align="center" valign="middle" >33.55</td><td align="center" valign="middle" >78.48</td></tr><tr><td align="center" valign="middle" >#38</td><td align="center" valign="middle" >71.30</td><td align="center" valign="middle" >73.69</td><td align="center" valign="middle" >71.22</td><td align="center" valign="middle" >71.14</td><td align="center" valign="middle" >74.87</td><td align="center" valign="middle" >66.20</td><td align="center" valign="middle" >74.30</td><td align="center" valign="middle" >33.06</td><td align="center" valign="middle" >75.34</td></tr><tr><td align="center" valign="middle" >Avg.</td><td align="center" valign="middle" >79.01</td><td align="center" valign="middle" >79.16</td><td align="center" valign="middle" >76.77</td><td align="center" valign="middle" >79.83</td><td align="center" valign="middle" >80.34</td><td align="center" valign="middle" >78.33</td><td align="center" valign="middle" >81.27</td><td align="center" valign="middle" >40.33</td><td align="center" valign="middle" >84.99</td></tr></tbody></table></table-wrap><p>表1. Yale B数据机上不同算法的ACC</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> ACC of different methods on PIE data se</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >c</th><th align="center" valign="middle" >LRR</th><th align="center" valign="middle" >LatRR</th><th align="center" valign="middle" >NSLLRR</th><th align="center" valign="middle" >DGLRR</th><th align="center" valign="middle" >NNDGLRR</th><th align="center" valign="middle" >LRPP_GRR</th><th align="center" valign="middle" >PLrSC</th><th align="center" valign="middle" >LDRGC</th><th align="center" valign="middle" >LRRLFS</th></tr></thead><tr><td align="center" valign="middle" >#4</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td></tr><tr><td align="center" valign="middle" >#12</td><td align="center" valign="middle" >89.68</td><td align="center" valign="middle" >88.49</td><td align="center" valign="middle" >76.98</td><td align="center" valign="middle" >91.67</td><td align="center" valign="middle" >78.17</td><td align="center" valign="middle" >96.43</td><td align="center" valign="middle" >74.05</td><td align="center" valign="middle" >80.16</td><td align="center" valign="middle" >97.32</td></tr><tr><td align="center" valign="middle" >#20</td><td align="center" valign="middle" >81.19</td><td align="center" valign="middle" >88.57</td><td align="center" valign="middle" >86.19</td><td align="center" valign="middle" >92.62</td><td align="center" valign="middle" >87.86</td><td align="center" valign="middle" >95.71</td><td align="center" valign="middle" >76.64</td><td align="center" valign="middle" >.85.48</td><td align="center" valign="middle" >96.24</td></tr><tr><td align="center" valign="middle" >#28</td><td align="center" valign="middle" >77.21</td><td align="center" valign="middle" >73.13</td><td align="center" valign="middle" >86.91</td><td align="center" valign="middle" >92.69</td><td align="center" valign="middle" >85.03</td><td align="center" valign="middle" >92.35</td><td align="center" valign="middle" >78.78</td><td align="center" valign="middle" >85.54</td><td align="center" valign="middle" >93.12</td></tr><tr><td align="center" valign="middle" >#36</td><td align="center" valign="middle" >68.92</td><td align="center" valign="middle" >68.25</td><td align="center" valign="middle" >76.59</td><td align="center" valign="middle" >87.83</td><td align="center" valign="middle" >85.32</td><td align="center" valign="middle" >92.06</td><td align="center" valign="middle" >82.84</td><td align="center" valign="middle" >84.13</td><td align="center" valign="middle" >93.45</td></tr><tr><td align="center" valign="middle" >#44</td><td align="center" valign="middle" >71.86</td><td align="center" valign="middle" >74.68</td><td align="center" valign="middle" >80.2</td><td align="center" valign="middle" >84.42</td><td align="center" valign="middle" >87.12</td><td align="center" valign="middle" >93.72</td><td align="center" valign="middle" >89.15</td><td align="center" valign="middle" >83.87</td><td align="center" valign="middle" >94.36</td></tr><tr><td align="center" valign="middle" >#52</td><td align="center" valign="middle" >71.25</td><td align="center" valign="middle" >74.08</td><td align="center" valign="middle" >74.18</td><td align="center" valign="middle" >88</td><td align="center" valign="middle" >82.69</td><td align="center" valign="middle" >97.25</td><td align="center" valign="middle" >91.38</td><td align="center" valign="middle" >85.81</td><td align="center" valign="middle" >98.22</td></tr><tr><td align="center" valign="middle" >#60</td><td align="center" valign="middle" >65.87</td><td align="center" valign="middle" >69.76</td><td align="center" valign="middle" >78.73</td><td align="center" valign="middle" >85.56</td><td align="center" valign="middle" >85.24</td><td align="center" valign="middle" >97.62</td><td align="center" valign="middle" >88.53</td><td align="center" valign="middle" >85.48</td><td align="center" valign="middle" >98.63</td></tr><tr><td align="center" valign="middle" >#68</td><td align="center" valign="middle" >65.27</td><td align="center" valign="middle" >64.29</td><td align="center" valign="middle" >85.08</td><td align="center" valign="middle" >88.1</td><td align="center" valign="middle" >82.7</td><td align="center" valign="middle" >97.91</td><td align="center" valign="middle" >87.13</td><td align="center" valign="middle" >83.54</td><td align="center" valign="middle" >97.98</td></tr><tr><td align="center" valign="middle" >Avg.</td><td align="center" valign="middle" >76.81</td><td align="center" valign="middle" >77.92</td><td align="center" valign="middle" >82.76</td><td align="center" valign="middle" >90.1</td><td align="center" valign="middle" >86.01</td><td align="center" valign="middle" >95.89</td><td align="center" valign="middle" >85.38</td><td align="center" valign="middle" >86.06</td><td align="center" valign="middle" >96.59</td></tr></tbody></table></table-wrap><p>表2. PIE数据集上不同算法的ACC</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> ACC of different methods on AR data se</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >c</th><th align="center" valign="middle" >LRR</th><th align="center" valign="middle" >LatRR</th><th align="center" valign="middle" >NSLLRR</th><th align="center" valign="middle" >DGLRR</th><th align="center" valign="middle" >NNDGLRR</th><th align="center" valign="middle" >LRPP_GRR</th><th align="center" valign="middle" >PLrSC</th><th align="center" valign="middle" >LDRGC</th><th align="center" valign="middle" >LRRLFS</th></tr></thead><tr><td align="center" valign="middle" >#15</td><td align="center" valign="middle" >76.51</td><td align="center" valign="middle" >77.21</td><td align="center" valign="middle" >74.87</td><td align="center" valign="middle" >78.46</td><td align="center" valign="middle" >77.95</td><td align="center" valign="middle" >73.59</td><td align="center" valign="middle" >77.4</td><td align="center" valign="middle" >60.51</td><td align="center" valign="middle" >80.26</td></tr><tr><td align="center" valign="middle" >#30</td><td align="center" valign="middle" >74.29</td><td align="center" valign="middle" >76.86</td><td align="center" valign="middle" >71.92</td><td align="center" valign="middle" >74.17</td><td align="center" valign="middle" >77.41</td><td align="center" valign="middle" >73.33</td><td align="center" valign="middle" >73.88</td><td align="center" valign="middle" >55.77</td><td align="center" valign="middle" >77.62</td></tr><tr><td align="center" valign="middle" >#45</td><td align="center" valign="middle" >77.14</td><td align="center" valign="middle" >77.16</td><td align="center" valign="middle" >76.15</td><td align="center" valign="middle" >77.72</td><td align="center" valign="middle" >75.48</td><td align="center" valign="middle" >76.75</td><td align="center" valign="middle" >75.8</td><td align="center" valign="middle" >55.04</td><td align="center" valign="middle" >78.21</td></tr><tr><td align="center" valign="middle" >#60</td><td align="center" valign="middle" >78.72</td><td align="center" valign="middle" >77</td><td align="center" valign="middle" >74.74</td><td align="center" valign="middle" >78.12</td><td align="center" valign="middle" >75.74</td><td align="center" valign="middle" >75.00</td><td align="center" valign="middle" >76.08</td><td align="center" valign="middle" >59.74</td><td align="center" valign="middle" >79.36</td></tr><tr><td align="center" valign="middle" >#75</td><td align="center" valign="middle" >77.53</td><td align="center" valign="middle" >77.13</td><td align="center" valign="middle" >74.24</td><td align="center" valign="middle" >77.94</td><td align="center" valign="middle" >74.69</td><td align="center" valign="middle" >75.08</td><td align="center" valign="middle" >73.92</td><td align="center" valign="middle" >56.13</td><td align="center" valign="middle" >78.67</td></tr><tr><td align="center" valign="middle" >#90</td><td align="center" valign="middle" >78.33</td><td align="center" valign="middle" >76.08</td><td align="center" valign="middle" >75.47</td><td align="center" valign="middle" >77.12</td><td align="center" valign="middle" >74.23</td><td align="center" valign="middle" >74.62</td><td align="center" valign="middle" >72.7</td><td align="center" valign="middle" >57.01</td><td align="center" valign="middle" >78.94</td></tr><tr><td align="center" valign="middle" >#105</td><td align="center" valign="middle" >76.08</td><td align="center" valign="middle" >73.58</td><td align="center" valign="middle" >73.52</td><td align="center" valign="middle" >76.67</td><td align="center" valign="middle" >72.88</td><td align="center" valign="middle" >73.26</td><td align="center" valign="middle" >75.27</td><td align="center" valign="middle" >51.9</td><td align="center" valign="middle" >77.54</td></tr><tr><td align="center" valign="middle" >#120</td><td align="center" valign="middle" >76.09</td><td align="center" valign="middle" >70.04</td><td align="center" valign="middle" >72.08</td><td align="center" valign="middle" >73.79</td><td align="center" valign="middle" >70.29</td><td align="center" valign="middle" >73.11</td><td align="center" valign="middle" >72.65</td><td align="center" valign="middle" >49.49</td><td align="center" valign="middle" >74.17</td></tr><tr><td align="center" valign="middle" >Avg.</td><td align="center" valign="middle" >76.836</td><td align="center" valign="middle" >75.63</td><td align="center" valign="middle" >74.12</td><td align="center" valign="middle" >76.74</td><td align="center" valign="middle" >74.83</td><td align="center" valign="middle" >74.34</td><td align="center" valign="middle" >74.71</td><td align="center" valign="middle" >55.70</td><td align="center" valign="middle" >78.10</td></tr></tbody></table></table-wrap><p>表3. AR数据集上不同算法的ACC</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> ACC of different methods on COIL20 data se</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >c</th><th align="center" valign="middle" >LRR</th><th align="center" valign="middle" >LatRR</th><th align="center" valign="middle" >NSLLRR</th><th align="center" valign="middle" >DGLRR</th><th align="center" valign="middle" >NNDGLRR</th><th align="center" valign="middle" >LRPP_GRR</th><th align="center" valign="middle" >PLrSC</th><th align="center" valign="middle" >LDRGC</th><th align="center" valign="middle" >LRRLFS</th></tr></thead><tr><td align="center" valign="middle" >#4</td><td align="center" valign="middle" >68.4</td><td align="center" valign="middle" >62.85</td><td align="center" valign="middle" >63.89</td><td align="center" valign="middle" >69.44</td><td align="center" valign="middle" >81.6</td><td align="center" valign="middle" >96.53</td><td align="center" valign="middle" >89.17</td><td align="center" valign="middle" >84.72</td><td align="center" valign="middle" >98.15</td></tr><tr><td align="center" valign="middle" >#6</td><td align="center" valign="middle" >76.85</td><td align="center" valign="middle" >75.93</td><td align="center" valign="middle" >75.93</td><td align="center" valign="middle" >77.78</td><td align="center" valign="middle" >58.8</td><td align="center" valign="middle" >90.97</td><td align="center" valign="middle" >90.25</td><td align="center" valign="middle" >80.35</td><td align="center" valign="middle" >92.36</td></tr><tr><td align="center" valign="middle" >#8</td><td align="center" valign="middle" >74.65</td><td align="center" valign="middle" >82.12</td><td align="center" valign="middle" >81.94</td><td align="center" valign="middle" >78.3</td><td align="center" valign="middle" >73.96</td><td align="center" valign="middle" >77.26</td><td align="center" valign="middle" >89.41</td><td align="center" valign="middle" >75.35</td><td align="center" valign="middle" >93.41</td></tr><tr><td align="center" valign="middle" >#10</td><td align="center" valign="middle" >62.92</td><td align="center" valign="middle" >68.33</td><td align="center" valign="middle" >68.89</td><td align="center" valign="middle" >65.83</td><td align="center" valign="middle" >75.42</td><td align="center" valign="middle" >80.97</td><td align="center" valign="middle" >81.14</td><td align="center" valign="middle" >80.28</td><td align="center" valign="middle" >91.64</td></tr><tr><td align="center" valign="middle" >#12</td><td align="center" valign="middle" >68.17</td><td align="center" valign="middle" >68.75</td><td align="center" valign="middle" >59.95</td><td align="center" valign="middle" >62.38</td><td align="center" valign="middle" >69.33</td><td align="center" valign="middle" >83.91</td><td align="center" valign="middle" >83.7</td><td align="center" valign="middle" >83.56</td><td align="center" valign="middle" >92.75</td></tr><tr><td align="center" valign="middle" >#14</td><td align="center" valign="middle" >66.77</td><td align="center" valign="middle" >46.53</td><td align="center" valign="middle" >51.29</td><td align="center" valign="middle" >54.46</td><td align="center" valign="middle" >70.44</td><td align="center" valign="middle" >86.01</td><td align="center" valign="middle" >84.54</td><td align="center" valign="middle" >85.91</td><td align="center" valign="middle" >90.34</td></tr><tr><td align="center" valign="middle" >#16</td><td align="center" valign="middle" >65.71</td><td align="center" valign="middle" >60.93</td><td align="center" valign="middle" >62.59</td><td align="center" valign="middle" >67.71</td><td align="center" valign="middle" >73.52</td><td align="center" valign="middle" >87.76</td><td align="center" valign="middle" >81.87</td><td align="center" valign="middle" >87.67</td><td align="center" valign="middle" >91.74</td></tr><tr><td align="center" valign="middle" >#18</td><td align="center" valign="middle" >65.43</td><td align="center" valign="middle" >48.77</td><td align="center" valign="middle" >59.18</td><td align="center" valign="middle" >63.89</td><td align="center" valign="middle" >66.9</td><td align="center" valign="middle" >89.12</td><td align="center" valign="middle" >79.29</td><td align="center" valign="middle" >88.81</td><td align="center" valign="middle" >91.14</td></tr><tr><td align="center" valign="middle" >#20</td><td align="center" valign="middle" >64.58</td><td align="center" valign="middle" >60.28</td><td align="center" valign="middle" >61.88</td><td align="center" valign="middle" >70.21</td><td align="center" valign="middle" >74.93</td><td align="center" valign="middle" >83.75</td><td align="center" valign="middle" >77.02</td><td align="center" valign="middle" >79.24</td><td align="center" valign="middle" >90.47</td></tr><tr><td align="center" valign="middle" >Avg.</td><td align="center" valign="middle" >68.16</td><td align="center" valign="middle" >63.83</td><td align="center" valign="middle" >65.06</td><td align="center" valign="middle" >67.78</td><td align="center" valign="middle" >71.66</td><td align="center" valign="middle" >86.25</td><td align="center" valign="middle" >84.04</td><td align="center" valign="middle" >82.87</td><td align="center" valign="middle" >92.44</td></tr></tbody></table></table-wrap><p>表4. COIL20数据集上不同算法的ACC</p></sec><sec id="s7_3"><title>3.3. 重构误差分析</title><p>为了进一步直观地展示LRRLFS方法在过滤冗余特征和噪声信息时的有效性，我们选取部分Yale B数据集的图片进行可视化处理。结果如图2所示。我们可以发现，潜在特征表示保留了大部分原始图片信息，而大多数的阴影噪声得到了过滤。</p><p>图2. Yale B数据集上的重构误差</p></sec></sec><sec id="s8"><title>4. 结论与展望</title><p>针对现有低秩表示方法的直接使用原始数据作为特征字典所带来的问题，我们提出了基于潜在特征空间的低秩表示方法。其在一定程度上避免原始数据中冗余特征和噪声信息对学习表示系数矩阵的不利影响，从而提升聚类性能。在未来工作中，我们会考虑将本方法扩展到多视图聚类领域。</p></sec><sec id="s9"><title>文章引用</title><p>周翊航. 基于潜在特征空间的低秩表示算法Low-Rank Representation Algorithm Based on Latent Feature Space[J]. 计算机科学与应用, 2021, 11(04): 1140-1148. https://doi.org/10.12677/CSA.2021.114117</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.41985-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Liu, G., Lin, Z., Yan, S., Sun, J., Yu, Y. and Ma, Y. (2013) Robust Recovery of Subspace Structures by Low-Rank Representation. IEEE Transactions on Pattern Analysis and Machine Intelligence, 35, 171-184.  
&lt;br&gt;https://doi.org/10.1109/TPAMI.2012.88</mixed-citation></ref><ref id="hanspub.41985-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Lin, Z., Chen, M. and Ma, Y. (2010) The Augmented Lagrange Mul-tiplier Method for Exact Recovery of Corrupted Low-Rank Matrices. Mathematical Programming, 9, arXiv:1009.5055.</mixed-citation></ref><ref id="hanspub.41985-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Wahba, G. (1965) A Least Squares Estimate of Satellite Attitude. Siam Review, 7, 409-409.  
&lt;br&gt;https://doi.org/10.1137/1007077</mixed-citation></ref><ref id="hanspub.41985-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Cai, J.F., Candès, E.J. and Shen, Z.W. (2010) A Singular Value Threshold-ing Algorithm for Matrix Completion. SIAM Journal on Optimization, 20, 1956-1982. &lt;br&gt;https://doi.org/10.1137/080738970</mixed-citation></ref><ref id="hanspub.41985-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Georghiades, A.S., Belhumeur, P.N. and Kriegman, D.J. (2001) From Few to Many: Illumination Cone Models for Face Recognition under Variable Lighting and Pose. IEEE Transactions on Pattern Analysis and Machine Intelligence, 23, 643-660. &lt;br&gt;https://doi.org/10.1109/34.927464</mixed-citation></ref><ref id="hanspub.41985-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Sim, T., Baker, S. and Bsat, M. (2003) The CMU Pose, Illumination, and Expression Database. IEEE Transactions on Pattern Analysis and Machine Intelligence, 25, 1615-1618. &lt;br&gt;https://doi.org/10.1109/TPAMI.2003.1251154</mixed-citation></ref><ref id="hanspub.41985-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Martínez, A. and Benavente, R. (1998) The AR Face Database. Technical Report. Computer Vision Center, Number 24, Bellatera. http://www.cat.uab.cat/Public/Publications/1998/MaB1998</mixed-citation></ref><ref id="hanspub.41985-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Nene, S.A., Nayar, S.K. and Murase, H. (1996) Co-lumbia Object Image Library (Coil-20). Technical Report CUCS-005-96, February 1996.</mixed-citation></ref><ref id="hanspub.41985-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">He, X., Cai, D. and Han, J. (2005) Document Clustering Using Locality Preserving Indexing. IEEE Transactions on Knowledge and Data Engi-neering, 17, 1624-1637. &lt;br&gt;https://doi.org/10.1109/TKDE.2005.198</mixed-citation></ref><ref id="hanspub.41985-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Wessel, W. (1988) Lovász, L.; Plummer, M. D., Matching Theory. Budapest, Akadémiai Kiadó 1986. XXXIII, 544 S., Ft 680,—. ISBN 9630541688. Journal of Ap-plied Mathematics and Mechanics, 68, 146-146.  
&lt;br&gt;https://onlinelibrary.wiley.com/  
&lt;br&gt;https://doi.org/10.1002/zamm.19880680310</mixed-citation></ref></ref-list></back></article>