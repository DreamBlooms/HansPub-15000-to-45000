<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.82027</article-id><article-id pub-id-type="publisher-id">CSA-23923</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20180200000_77888169.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  Java程序设计中的键盘输入数据的方法分析
  Method Analysis of Input Data by Keyboard in Java Programming
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>蔚妍</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>高</surname><given-names>葵</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>耿</surname><given-names>霞</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>山东农业大学信息科学与工程学院，山东 泰安</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>14</day><month>02</month><year>2018</year></pub-date><volume>08</volume><issue>02</issue><fpage>226</fpage><lpage>231</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   在Java语言程序设计中要使用键盘输入所需要的数据，可以通过几种不同的类和方法来实现。本文对这几种类和方法举例并对每种例题进行分析和说明，通过比较，分析出在什么情况下输入不同类型的数据用什么类和方法更适用。 In the Java programming, keyboard is used to input the required data, which can be achieved by several different classes and methods. In this paper, we put some examples of the classes and methods, and then analysis and description for each of them. After comparison, the better appli-cable class and method under the circumstance of different input data have been analyzed.
    
  
 
</p></abstract><kwd-group><kwd>StringBuffer，BufferedReader，InputStreamReader，Scanner，键盘, StringBuffer</kwd><kwd> BufferedReader</kwd><kwd> InputStreamReader</kwd><kwd> Scanner</kwd><kwd> Keyboard</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>Java程序设计中的键盘输入数据的方法分析<sup> </sup></title><p>李蔚妍，高葵，耿霞</p><p>山东农业大学信息科学与工程学院，山东 泰安</p><p>收稿日期：2018年2月8日；录用日期：2018年2月20日；发布日期：2018年2月28日</p><disp-formula id="hanspub.23923-formula3"><graphic xlink:href="//html.hanspub.org/file/10-1540923x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>在Java语言程序设计中要使用键盘输入所需要的数据，可以通过几种不同的类和方法来实现。本文对这几种类和方法举例并对每种例题进行分析和说明，通过比较，分析出在什么情况下输入不同类型的数据用什么类和方法更适用。</p><p>关键词 :StringBuffer，BufferedReader，InputStreamReader，Scanner，键盘</p><disp-formula id="hanspub.23923-formula4"><graphic xlink:href="//html.hanspub.org/file/10-1540923x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/10-1540923x7_hanspub.png" /> <img src="//html.hanspub.org/file/10-1540923x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>高校中很多学校开设了Java语言程序设计课程，这是一门实践性很强的语言，在程序设计中经常需要从键盘随机输入所需要的数据，Java语言中的键盘输入数据没有像C语言给我们提供的scanf()，C++给我们提供的cin()获取键盘输入值的现成函数那样简洁，但我们也不用担心，可以通过以下几个类和方法接收键盘输入的数据。</p></sec><sec id="s4"><title>2. 方法介绍</title><p>下面就分别将Java语言中键盘输入数据的几种类和方法举例来说明，然后对其进行分析。</p><p>方法一：使用System.in.read()方法。</p><p>System.in返回的是InputStream指向命令行输入的字节流 [<xref ref-type="bibr" rid="hanspub.23923-ref1">1</xref>] ，它的read方法以字节流的方式来读取命令行的输入的数据。</p><p>例题1：从键盘输入一个字符，然后打印出信息。</p><p>代码如下：</p><p>import java.io.IOException;</p><p>class shuru1 {</p><p>public static void main(String args[<xref ref-type="bibr" rid="hanspub.23923-ref"></xref>]) throws IOException</p><p>{</p><p>System.out.print (你喜欢Java吗(Y/N) );</p><p>char like = (char)System.in.read();</p><p>if (like =='Y'|| like == 'y')</p><p>System.out.println(Good);</p><p>}</p><p>}</p><p>运行结果如下：</p><p>你喜欢Java吗(Y/N)y</p><p>Good</p><p>分析：这种方式实现了从键盘获取输入的字符，但是System.in.read()只能接收一个字符，也就是如果在输入数据的过程中输入了多个字符，那么like变量中只会接收第一个字符。而且，获取的数据的类型只能是char类型，如果我们想输入一个数字，希望得到的也是一个整型变量的时候，我们就需要对其接收到的数据进行类型的转换。</p><p>例题2：从键盘输入一个成绩，判断是否及格。</p><p>代码如下：</p><p>import java.io.IOException;</p><p>public class shuru2 {</p><p>public static void main(String args[<xref ref-type="bibr" rid="hanspub.23923-ref"></xref>]) throws IOException {</p><p>System.out.println(请输入你的成绩: );</p><p>char a = (char)System.in.read();</p><p>char b = (char)System.in.read();</p><p>int score = (a-'0')*10+b-'0'; //将字符类型的数字转换成整型的完整的成绩</p><p>if (score &gt;= 60)</p><p>System.out.println(你及格了);</p><p>else</p><p>System.out.println(你没及格！);</p><p>}</p><p>}</p><p>分析：</p><p>1) 由于System.in.read()只能从键盘输入一个数字存到一个变量中，并且该数字是char类型的，想接收第二个数字就需要存到第二个变量中，但实际运行过程中有的时候是输入一位数字成绩信息，有的时候是两位，有的时候是三位，因此此程序代码就很难满足这些各种可能性，此代码只能对接收两位的数字起作用，因此System.in.read()方法来达到键盘输入数据并不灵活。</p><p>2) System.in.read()由于接收的是char类型的数据，但成绩应该是整型或是float或double类型才能判断及格还是不及格，这就需要进行类型转换。</p><p>由此可以得出结论，如果想从键盘输入的数据是一位字符并且是char类型的话可以使用System.in.read()方法；如果想输入的数据是多于一个字符的话，并且需要输入的数据是其他类型的话，该System.in.read()的方法不合适。</p><p>方法二：使用StringBuffer类、append()方法 [<xref ref-type="bibr" rid="hanspub.23923-ref2">2</xref>] 。</p><p>StringBuffer类和String一样，也用来代表字符串，只是由于StringBuffer的内部实现方式和String不同，所以StringBuffer在进行字符串处理时，不生成新的对象，在内存使用上要优于String类。所以在实际使用时，如果经常需要对一个字符串进行修改，例如插入、删除等操作，使用StringBuffer要更加适合一些。</p><p>append()方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接。</p><p>例题3：从键盘输入一个字符串，当输入回车符时停止输入，打印出输入的字符串。</p><p>代码如下：</p><p>import java.io.IOException;</p><p>class shuru3 {</p><p>public static void main(String args[<xref ref-type="bibr" rid="hanspub.23923-ref"></xref>]) throws IOException {</p><p>char c;</p><p>StringBuffer buffer = new StringBuffer();</p><p>System.out.println(输入一个字符串以回车符表示结束);</p><p>c = (char) System.in.read();</p><p>while (c!='\r'){</p><p>buffer.append(c);</p><p>c = (char) System.in.read();</p><p>}</p><p>System.out.println(Output = + buffer.toString());</p><p>}</p><p>}</p><p>运行结果如下：</p><p>输入一个字符串以回车符表示结束</p><p>abc</p><p>Output =abc</p><p>分析：该例题中使用了StringBuffer类和System.in.read()方法，在该例题中用循环的方式接收多个字符并且字符个数任意，直到输入回车符结束循环。此方式克服了方法一中只能接收单字符的缺陷，可以输入任何长度的字符，可以通过buffer.toString()输出整个字符串的信息，如果想把字符串的信息转换成别的类型就需要用相应的类型转换方法。</p><p>方法三：使用BufferedReader类和InputStreamReader类 [<xref ref-type="bibr" rid="hanspub.23923-ref1">1</xref>] 。</p><p>InputStreamReader类提供了字节流到字符流的转换。</p><p>BufferedReader类它从字符流中读取文本，并且使用字符缓冲器来提高读取效率。</p><p>例题4：从键盘输入一个字符串，然后将其打印出来。</p><p>import java.io.*;</p><p>class shuru4 {</p><p>public static void main(String [<xref ref-type="bibr" rid="hanspub.23923-ref"></xref>] args) throws IOException{</p><p>BufferedReader a = new BufferedReader(new InputStreamReader(System.in));</p><p>String s = null;</p><p>System.out.print (请输入数据:);</p><p>s = a.readLine();</p><p>System.out.println(打印出输入的数据:+s);</p><p>}</p><p>}</p><p>运行结果如下：</p><p>请输入数据:abcd</p><p>打印出输入的数据:abcd</p><p>分析：该例题从键盘输入任何长度的字符串数据都可以，按回车符结束输入打印出信息。如果想将输入的字符串数据转换成其它类型的话，使用相应的转换方法就可。</p><p>方法四：使用Scanner类、nextLine()、nextInt()、nextFloat()等方法 [<xref ref-type="bibr" rid="hanspub.23923-ref3">3</xref>]</p><p>Scanner 被称为输入流扫描器类，从控制台读取数据的。Scanner类是一个可以使用正则表达式来解析基本类型和字符串的简单文本扫描器。</p><p>例题5：从键盘输入多种类型的数据，然后输出这些数据。</p><p>import java.util.Scanner;</p><p>class shuru5 {</p><p>public static void main(String [<xref ref-type="bibr" rid="hanspub.23923-ref"></xref>] args) {</p><p>Scanner sc = new Scanner(System.in);</p><p>System.out.println(请输入你的姓名：);</p><p>String name = sc.nextLine();</p><p>System.out.println(请输入你的年龄：);</p><p>int age = sc.nextInt();</p><p>System.out.println(请输入你的成绩：);</p><p>float score = sc.nextFloat();</p><p>System.out.println(你的信息如下：);</p><p>System.out.println(姓名：+name+\n+年龄：+age+\n+成绩：+score);</p><p>}</p><p>}</p><p>请输入你的姓名：</p><p>aaa</p><p>请输入你的年龄：</p><p>20</p><p>请输入你的成绩：</p><p>67.5</p><p>你的信息如下：</p><p>姓名：aaa</p><p>年龄：20</p><p>成绩：67.5</p><p>分析：这段代码已经表明，Scanner类不管是对于字符串数据还是整型数据或者float类型的数据，只需做一点小小的改变，就能够实现所需要的功能，无疑它是使用起来最方便的。</p></sec><sec id="s5"><title>3. 方法分析</title><p>通过以上的例题和说明对各种不同的类的方法做一下简要分析，分析如下：</p><p>1) System.in返回的是InputStream指向命令行输入的字节流，StringBuffer类是字符缓冲器类，BufferedReader是字符输入流，Scanner类是文本扫描类。</p><p>2) 方法一中的System.in.read()可以接收键盘输入的单个字符，这个单字符可以存储到char类型的变量中，也可以存储到int类型的变量中，但存储的是该字符的ASCII码，对于想从键盘输入多个连续字符的话是不适合的。</p><p>3) 方法二中也使用了System.in.read()方法，但是加了一个循环结构，可以在循环条件判断成立的前提下输入多个字符，并且使用append()方法将单个字符追加到StringBuffer类的一个对象中。但缺点是不能随意的接收任何类型的数据存储到其他类型的变量中。</p><p>4) 方法三中使用BufferedReader类和InputStreamReader类可以接收一行数据，不需要循环就可以接收多字符，比第一种和第二种方法要方便很多，但也是不能随便接收任何类型的数据直接存储，需要进行类型转换。</p><p>5) 方法四中使用Scanner类、nextLine()、nextInt()、nextFloat()等方法完成了接收任何长度、多种类型的数据并存储到不同类型的变量中，而且代码简单，因此这种方法是最有效的方法，所以在编程中建议使用这种方法来完成键盘输入数据。</p></sec><sec id="s6"><title>4. 结束语</title><p>本文通过例题运行程序对Java语言中几种不同的键盘输入数据的方法进行了举例和分析，提出在什么情况下使用何种方法最合适。</p></sec><sec id="s7"><title>文章引用</title><p>李蔚妍,高 葵,耿 霞. Java程序设计中的键盘输入数据的方法分析Method Analysis of Input Data by Keyboard in Java Programming[J]. 计算机科学与应用, 2018, 08(02): 226-231. http://dx.doi.org/10.12677/CSA.2018.82027</p></sec><sec id="s8"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.23923-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">吕凤翥, 马皓. Java语言程序设计[M]. 第2版, 北京: 清华大学出版社, 2010: 362-363.</mixed-citation></ref><ref id="hanspub.23923-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">耿祥义. Java程序设计实用教程[M]. 北京: 人民邮电出版社, 2014: 157-158.</mixed-citation></ref><ref id="hanspub.23923-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">翁恺. Java语言程序设计教程[M]. 第2版. 杭州: 浙江大学出版社, 2014: 251-253.</mixed-citation></ref></ref-list></back></article>