<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CES</journal-id><journal-title-group><journal-title>Creative Education Studies</journal-title></journal-title-group><issn pub-type="epub">2331-799X</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CES.2017.54045</article-id><article-id pub-id-type="publisher-id">CES-21976</article-id><article-categories><subj-group subj-group-type="heading"><subject>CES20170400000_99137308.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>人文社科</subject></subj-group></article-categories><title-group><article-title>
 
 
  贪心算法实例化教学方法探索
  Instantiation Teaching Method Exploration of Greedy Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>范</surname><given-names>艳芳</given-names></name><xref ref-type="aff" rid="aff1"><sub>1</sub></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>北京信息科技大学计算机学院，北京</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>fyfhappy@bistu.edu.cn</email></corresp></author-notes><pub-date pub-type="epub"><day>08</day><month>09</month><year>2017</year></pub-date><volume>05</volume><issue>04</issue><fpage>293</fpage><lpage>297</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   贪心算法是经典的六大类算法设计思想之一。贪心算法思想简单，其应用的难点在于如果想要求的是全局最优解，则必须证明贪心算法的两个性质(贪心选择性质和最优子结构性质)。而在教学过程中，对于贪心选择性质的证明，一直是学生理解的难点。本文提出了一种将动画、实例、形式化描述相结合的教学方法，以最优装载问题为例来介绍贪心算法的讲解。经实践检验，教学效果较好。 Greedy algorithm is one of the six classic algorithm design ideas. The idea of greedy algorithm is simple. The difficulty of greedy algorithm is that the two properties (greedy selection property and optimal substructure property) must be proved if the global optimal solution is desired. In the course of teaching, the proof of the greedy selection property has always been a difficult point for students to understand. This paper proposes a teaching method which combines animation, instantiate examples and formal description. Through an example of the most optimal loading problem, the teaching method of greedy algorithm is introduced. The practice shows that the teaching effect is good.
    
  
 
</p></abstract><kwd-group><kwd>算法，实例，动画，形式化描述, Algorithm</kwd><kwd> Instantiate Examples</kwd><kwd> Animation</kwd><kwd> Formal Description</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>贪心算法实例化教学方法探索<sup> </sup></title><p>范艳芳</p><p>北京信息科技大学计算机学院，北京</p><p>收稿日期：2017年8月17日；录用日期：2017年8月31日；发布日期：2017年9月8日</p><disp-formula id="hanspub.21976-formula1"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>贪心算法是经典的六大类算法设计思想之一。贪心算法思想简单，其应用的难点在于如果想要求的是全局最优解，则必须证明贪心算法的两个性质(贪心选择性质和最优子结构性质)。而在教学过程中，对于贪心选择性质的证明，一直是学生理解的难点。本文提出了一种将动画、实例、形式化描述相结合的教学方法，以最优装载问题为例来介绍贪心算法的讲解。经实践检验，教学效果较好。</p><p>关键词 :算法，实例，动画，形式化描述</p><disp-formula id="hanspub.21976-formula2"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by author and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="http://image.hanspub.org:8080\Html/htmlimages\1-2890033x\e70a10f1-7c93-45ea-9603-062237856e4b.png" /><img src="http://image.hanspub.org:8080\Html\htmlimages\1-2890033x\e898c85e-ffc4-45c9-b817-14224a4d6960.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>算法分析与设计课程是计算机科学与技术专业的专业课，在王晓东老师出版的《计算机算法设计与分析》 [<xref ref-type="bibr" rid="hanspub.21976-ref1">1</xref>] 中主要介绍了计算机科学技术领域中的六大类经典的算法设计思想，包括：分治法、动态规划法、贪心算法、回溯法、分枝限界法、随机化算法，其中的贪心算法是非常常用的一类算法。教材中通过一些实例来加深学生对贪心算法思想的理解和运用，比如最优装载问题、背包问题、活动安排问题、哈夫曼编码、多机调度问题等。然而在实践教学中发现，对于贪心算法的思想，学生们掌握起来比较容易，但是如果要判断是否能够通过贪心算法求得问题的最优解，则存在较大的困难。如果想要通过贪心算法来求得问题的最优解，必须证明所选择的贪心选择策略满足两个性质：贪心选择性质和最优子结构性质。因此，如何进行证明是关键。</p><p>为此，本文以贪心算法求解最优装载问题为例，提出一种将动画、实例和证明中使用的形式化描述相结合的教学方法。经实践检验，这种方法的教学效果较好。相比于已有的一些相关研究 [<xref ref-type="bibr" rid="hanspub.21976-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.21976-ref3">3</xref>] [<xref ref-type="bibr" rid="hanspub.21976-ref4">4</xref>] ，本文提出的方法具有较强的可操作性。</p></sec><sec id="s4"><title>2. 用贪心算法求解最优装载问题</title><p>以人类的理解能力而言，对图的理解要好于对文字的理解。在介绍抽象内容时，如果能够辅以图或动画，往往能够达到事半功倍的效果。算法设计类教材中，对于每类算法设计思想，通常都会选择若干实际的例子，通过对例子的讲解来加深学生的理解和认识。但是即便如此，对于一些较抽象的内容，学生理解起来依然十分费力。下面以贪心算法中的一个教学难点为例，介绍如何通过实际例子，辅以动画的效果，来更为形象的展示抽象理论知识的讲解，从而帮助学生更好的理解。</p><p>贪心算法的基本思想是：在选择时，每次都做出在当前看来是最好的选择。也就是在做选择时并不考虑全局最优，而是每次仅考虑局部最优。这就带来两个问题：1) 如果每次都只做局部最优的选择，是否最后一定能够达到全局最优？2) 满足何种条件才能保证局部最优的选择会带来全局最优的结果？</p><p>第1个问题，答案是否定的，对于学生来说也比较好理解。在使用贪心算法求解时，需要制定贪心策略，也就是你到底是依据什么来进行选择。不同的人所制定的贪心策略有可能并不相同，也就是对同一个问题可以存在多种选择策略，而并非每种选择策略都会得到全局最优的结果。</p><p>第2个问题是教学的难点。既然局部最优未必能够得到全局最优，那如果我们的目的就是要得到全局最优怎么办？贪心算法还能不能用？这时，可引出两个性质：贪心选择性质和最优子结构性质。如果我们能够证明，依据所选定的贪心策略，可以满足贪心选择性质和最优子结构性质，那么，我们就可以通过一次次的局部最优的选择得到全局最优的结果。而如何证明这两个性质，是教学的难点。</p><p>为了解决这个问题，通过一个具体的例子，设计了相应的动画，和形式化的证明过程相结合，来降低学生在理解上的难度。</p><p>下面以最优装载问题为例来进行说明。最优装载问题：有一批集装箱要装上一艘载重量为c的轮船。问题：在装载体积不受限制的情况下，如何能将尽可能多的集装箱装上轮船？</p><p>在讲解过程中，首先引导学生对问题进行形式化的描述：</p><p>c——轮船载重量</p><p>n——集装箱的个数</p><p>x<sub>i</sub>——第i个集装箱是否被选中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x9_hanspub.png" xlink:type="simple"/></inline-formula></p><p>w<sub>i</sub>——第i个集装箱的重量</p><p>为了让学生有更直观的认识，将该问题通过具体的数值实例化。</p><p>有5个集装箱，轮船的载重量为19。</p><p>各集装箱的重量如表1所示。</p><p>由于有具体的实例，所以学生们可以很容易的来寻找可能的解。如果用1表示该集装箱被选中，用0表示未被选中，则可能的解有：</p><p>(1,1,1,0,0)</p><p>(1,1,0,1,0)</p><p>(0,0,1,1,0)</p><p>……</p><p>由于每个箱子都有选中和未选中2个状态，所以5个箱子的解空间为25。</p><p>从例子可知若用穷举法进行解空间的搜索，代价是非常大的。那么此例是否可用贪心算法来求解？贪心策略如何制定？用贪心算法能否求得最优解都是我们关心的问题。</p><p>由于目标是装载最多的集装箱，所以很容易想到，可以制定如下的装载策略：最轻的先装。依据这个策略，进行集装箱的选择，是否能够得到整体最优解，即：装载最多的集装箱？需要证明在此策略下，满足最优子结构性质和贪心选择性质。</p><p>在介绍贪心算法时，可以跟学生强调，贪心算法常用于求解最优化问题，但是用贪心算法并不总能得到最优解。</p><p>在进行两个性质的证明前，还需要学生从总体上了解贪心算法的解题步骤。贪心算法求解问题的基本步骤如下：</p><p>(1) 做出在当前看来最好的选择(贪心选择)。</p><p>(2) 每选择一次，完成原问题的一部分，使问题规模缩小。</p><p>(3) 继续进行贪心选择，如此反复，直至得到最终解。</p><p>上述基本步骤，通过例子可以很好的让学生理解。</p><p>依据分析可知我们的选择策略为“最轻的先装”。按照这个策略，可以首先将集装箱按照重量进行排序，然后在满足条件的情况下依次进行选择。排序后的集装箱如表2所示。</p><p>假如用一个大的圆来表示集装箱的剩余载重量，具体数值由圆心的数字表示。那么每做一次选择，圆的大小及圆心的数字都会变小，从而直观的体现求解的过程。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Candidate containers tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >编号</th><th align="center" valign="middle" >1</th><th align="center" valign="middle" >2</th><th align="center" valign="middle" >3</th><th align="center" valign="middle" >4</th><th align="center" valign="middle" >5</th></tr></thead><tr><td align="center" valign="middle" >集装箱重量</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >9</td></tr></tbody></table></table-wrap><p>表1. 可选集装箱情况表</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Sorted candidate containers tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >编号</th><th align="center" valign="middle" >1</th><th align="center" valign="middle" >2</th><th align="center" valign="middle" >3</th><th align="center" valign="middle" >4</th><th align="center" valign="middle" >5</th></tr></thead><tr><td align="center" valign="middle" >集装箱重量</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >9</td></tr></tbody></table></table-wrap><p>表2. 排序后的可选集装箱情况表</p><p>比如，初始时可用下图表示：</p><disp-formula id="hanspub.21976-formula3"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x32_hanspub.png"  xlink:type="simple"/></disp-formula><p>按照最轻的先装的策略，第1次选择重量为3的集装箱。做完这次选择后，轮船的剩余载重量变化为：</p><disp-formula id="hanspub.21976-formula4"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x33_hanspub.png"  xlink:type="simple"/></disp-formula><p>继续进行选择，第2次选择重量为5的集装箱。做完这次选择后，轮船的剩余载重量变化为：</p><disp-formula id="hanspub.21976-formula5"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x34_hanspub.png"  xlink:type="simple"/></disp-formula><p>继续进行选择，第3次选择重量为6的集装箱。做完这次选择后，轮船的剩余载重量变化为：</p><disp-formula id="hanspub.21976-formula6"><graphic xlink:href="http://html.hanspub.org/file/1-3090330x35_hanspub.png"  xlink:type="simple"/></disp-formula><p>而此时，剩余的集装箱均无法装上轮船。每一次选择，我们都选择当前可选范围内重量最轻的集装箱，直至无集装箱可以被选择为止。由此，我们得到了问题的解。</p><p>由于此例非常简单，即使不用证明，学生也知道所得的解确实是该问题的最优解。但是对于一些比较复杂的情况，是无法简单进行判断的。因此，还是需要依赖于证明。下面就两个性质的证明进行介绍。</p><p>1) 贪心选择性质的证明：贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择(贪心选择)来达到。贪心选择性是贪心算法可行的第一个基本要素。</p><p>通过所选案例，如果进行简单的思考，可以发现，其实贪心算法问题的最优解，可能不止一个。比如，在此例中，如果选择的集装箱分别为重量是5，6，8的集装箱，依然满足要求。所以，在进行贪心选择性质的证明时，我们可以倒推。即，假设我们通过贪心选择策略得到的解就是已知问题的最优解，但这个解不满足我们的贪心选择策略(即：每次都选择最轻的集装箱)。那么，如果我们可以把这个解进行改造，使得改造后的解满足我们的贪心选择策略，则可知，若一开始就按照贪心选择策略进行选择，得到的依然是问题的最优解。</p><p>那如何进行改造即是我们证明的关键。</p><p>用<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x10_hanspub.png" xlink:type="simple"/></inline-formula>表示集装箱的选中状态，设<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x11_hanspub.png" xlink:type="simple"/></inline-formula>为最优解，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x12_hanspub.png" xlink:type="simple"/></inline-formula>。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x13_hanspub.png" xlink:type="simple"/></inline-formula>为被选中的最轻的集装箱的编号。</p><p>对应到此例中，选中的为重量为5，6，8的集装箱，则最优解为(0,1,1,1,0)。其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x14_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x15_hanspub.png" xlink:type="simple"/></inline-formula>，说明当前的解是以贪心选择开始的最优解，也就是说当前解的第一次选择和采用贪心选择策略进行的选择是一样的。</p><p>如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x16_hanspub.png" xlink:type="simple"/></inline-formula>，则将当前的第1个集装箱和第k个集装箱的选中状态进行交换。则在此例中，解变换为(1,0,1,1,0)。</p><p>对应的形式化描述为：</p><p>若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x17_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x18_hanspub.png" xlink:type="simple"/></inline-formula>为以贪心选择开始的最优解。</p><p>若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x19_hanspub.png" xlink:type="simple"/></inline-formula>，取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x20_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x21_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x22_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x23_hanspub.png" xlink:type="simple"/></inline-formula>，则：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x24_hanspub.png" xlink:type="simple"/></inline-formula>。由<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x25_hanspub.png" xlink:type="simple"/></inline-formula>可知，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x26_hanspub.png" xlink:type="simple"/></inline-formula>是以贪心选择开始的最优解。</p><p>进行完第一次选择之后，继续重复此过程，直到每一次选择都符合贪心策略，从而得到一个整体满足贪心选择策略的解。由整个过程可知，该解也是问题的最优解。</p><p>整个过程可将动画和具体例子与形式化证明相结合，比如先通过动画展示选择和交换的过程，然后再显示形式化的证明。这样一方面让学生了解具体的问题是如何形式化为数学模型进行描述和证明的，另一方面简化学生的理解难度并加深印象。</p><p>2) 最优子结构性质的证明：问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用贪心算法求解的关键特征。</p><p>最优子结构性质通常通过反证法进行证明。</p><p>对应到此例中，按照贪心策略得到的最优解为选中重量为3，5，6的集装箱，即最优解为(1,1,1,0,0)。</p><p>可知，对于可选集装箱重量为5，6，8，9，轮船载重量为16的最优装载问题而言，(1,1,0,0)为其最优解。其形式化的证明如下：</p><p>若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x27_hanspub.png" xlink:type="simple"/></inline-formula>是轮船载重量为 时的最优解，易知<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x28_hanspub.png" xlink:type="simple"/></inline-formula>是轮船载重量为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x29_hanspub.png" xlink:type="simple"/></inline-formula>时相应子问题的最优解。若不然，设<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x30_hanspub.png" xlink:type="simple"/></inline-formula>是相应子问题的最优解，则：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-3090330x31_hanspub.png" xlink:type="simple"/></inline-formula>，与假设矛盾。</p><p>将形式化的描述符号和例子中的具体数据相结合，使得各项数据更加的易于理解。在动画中用不同的颜色代表集装箱的不同状态，如可用红色表示选中状态，绿色代表未选中状态。</p><p>经过几轮授课，分别采用只有形式化证明，没有具体例子；有具体例子和形式化证明；有具体例子，形式化证明和辅助动画三种形式，发现第三种形式学生的理解和接受效果最好。通过这个例子，学生更深入的理解了贪心算法的精髓和使用贪心算法求解最优化问题的关键。</p></sec><sec id="s5"><title>3. 结束语</title><p>众所周知，动画的运用使我们的授课更加的生动，在实践中发现，对于如贪心算法类似的抽象内容的讲解，如果能将动画与抽象的理论和具体的实例相结合，对提高学生的学习积极性，增强对抽象知识点的理解能力有极大的帮助。</p></sec><sec id="s6"><title>基金项目</title><p>北京信息科技大学2016年教学改革项目；北京市教委专项：教师队伍建设–教师教学促进–外培计划教师教学能力提升项目(市级)–计算机科学与技术；教师队伍建设–教师教学促进–双培计划虚拟教学团队建设(市级)–计算机科学与技术、软件工程。</p></sec><sec id="s7"><title>文章引用</title><p>范艳芳. 贪心算法实例化教学方法探索 Instantiation Teaching Method Exploration of Greedy Algorithm[J]. 创新教育研究, 2017, 05(04): 293-297. http://dx.doi.org/10.12677/CES.2017.54045</p></sec><sec id="s8"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.21976-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">王晓东. 计算机算法设计与分析(第4版) [M]. 北京: 电子工业出版社, 2012.</mixed-citation></ref><ref id="hanspub.21976-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">向金海, 任继平, 余文君. “算法分析与设计”课程教学与实践方法探讨[J]. 计算机教育, 2012(6): 87-89, 93.</mixed-citation></ref><ref id="hanspub.21976-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">王丹, 付利华, 杜金莲. 算法分析与设计课程中的“三体一化”教学方法[J]. 计算机教育, 2016(7): 120-121, 125.</mixed-citation></ref><ref id="hanspub.21976-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">刘伟, 丁长松. “算法分析与设计”课程教学改革与实践[J]. 工业和信息化教育, 2017(3): 62-65.</mixed-citation></ref></ref-list></back></article>