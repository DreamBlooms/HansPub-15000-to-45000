<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">HJWC</journal-id><journal-title-group><journal-title>Hans Journal of Wireless Communications</journal-title></journal-title-group><issn pub-type="epub">2163-3983</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/HJWC.2015.53010</article-id><article-id pub-id-type="publisher-id">HJWC-15403</article-id><article-categories><subj-group subj-group-type="heading"><subject>HJWC20150300000_96508716.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  利用同步信息修正的LDPC和积译码
  LDPC Sum-Product Decoding Based on Synchronized Information
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>洋洋</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>吴</surname><given-names>乐南</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>东南大学信息科学与工程学院，江苏 南京</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>12</day><month>06</month><year>2015</year></pub-date><volume>05</volume><issue>03</issue><fpage>71</fpage><lpage>74</lpage><history><date date-type="received"><day>Oct.</day>	<month>21st,</month>	<year>2014</year></date><date date-type="rev-recd"><day>Nov.</day>	<month>16th,</month>	<year>2014</year>	</date><date date-type="accepted"><day>Nov.</day>	<month>20th,</month>	<year>2014</year></date></history><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   低密度奇偶校验码(LDPC)是一类具有稀疏校验矩阵的线性分组码，和积算法是理论可行的LDPC软解码算法，但其实用受制于计算复杂度。最小和算法及其它已知改进算法采用近似来有效简化每次迭代的过程，以部分性能为代价，在一定程度上弥补了前述缺陷。本文提出了基于同步信息修正的和积算法，在保持原算法每次迭代复杂度以保证性能的前提下，利用同步信息对算法进行修正，有效减少了算法迭代次数，因此降低了计算复杂度，提高了实用性。&lt;br/&gt;Low density parity check code (LDPC) is a subclass of linear block code with sparse check matrix. Sum-product algorithm is efficient for decoding LDPC theoretically, but not practically due to its complexity. Improved algorithms including minimum sum algorithm reduce computational com-plexity by approximation but performance is degraded. In this paper, we introduce corrected sum-product algorithm based on synchronized information, which improves the practicability by reducing the iterations without performance degradation.
    
  
 
</p></abstract><kwd-group><kwd>和积算法，低密度奇偶校验码，线性分组码，信道编码, Sum-Product Algorithm</kwd><kwd> Low Density Parity Check Code</kwd><kwd> Linear Block Code</kwd><kwd> Channel Coding</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>利用同步信息修正的LDPC和积译码<sup> </sup></title><p>陈洋洋，吴乐南</p><p>东南大学信息科学与工程学院，江苏 南京</p><p>Email: southernduck@seu.edu.cn</p><p>收稿日期：2015年5月22日；录用日期：2015年6月8日；发布日期：2015年6月12日</p><disp-formula id="hanspub.15403-formula1114"><graphic xlink:href="http://html.hanspub.org/file/1-1730164x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>低密度奇偶校验码(LDPC)是一类具有稀疏校验矩阵的线性分组码，和积算法是理论可行的LDPC软解码算法，但其实用受制于计算复杂度。最小和算法及其它已知改进算法采用近似来有效简化每次迭代的过程，以部分性能为代价，在一定程度上弥补了前述缺陷。本文提出了基于同步信息修正的和积算法，在保持原算法每次迭代复杂度以保证性能的前提下，利用同步信息对算法进行修正，有效减少了算法迭代次数，因此降低了计算复杂度，提高了实用性。</p><p>关键词 :和积算法，低密度奇偶校验码，线性分组码，信道编码</p><disp-formula id="hanspub.15403-formula1115"><graphic xlink:href="http://html.hanspub.org/file/1-1730164x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>数字信号在传输过程中由于受到信道噪声和干扰的影响容易被错判。采用均衡可纠正由乘性干扰引起的码间串扰，而加性干扰的影响则需要用其它办法解决。若在合理选择调制制度、解调方法以及发送功率后，仍无法抵抗加性干扰对解调性能的大幅下降，就应该考虑采用差错控制技术。</p><p>信道编码是物理层上的差错控制技术，以添加冗余降低信息传递速率为代价提高传输可靠性。根据冗余加到信息中方式的不同，纠错编码分为两类：分组码和卷积码，均获得了实际应用。历史上人们更喜欢用卷积码，因其可使用软判决Viterbi译码，而多年来分组码则一直被认为无法使用高效的软判决译码。然而，关于线性分组码软判决译码算法的理论和实际，近年来都获得了很大发展。1962年，Gallager给出了一类称为低密度奇偶校验码(LDPC)的分组码和两种迭代概率译码算法。随后，Tanner将Gallager的概率译码算法扩展到更一般的情况，用子码代替简单的单奇偶校验方程组来定义奇偶校验[<xref ref-type="bibr" rid="hanspub.15403-ref1">1</xref>] 。</p><p>LDPC码有多种译码方法。根据消息迭代过程中传送消息形式的不同，可将LDPC的译码方法分为硬判决译码和软判决译码。若在译码过程中传送的消息是比特值，称之为硬判决译码，若传递的消息是与后验概率相关的消息，称之为软判决译码。软译码算法主要有和积算法、最小和算法、简化的最小和算法、归一化的最小和算法等。后三者主要通过简化每次迭代的过程，达到简化计算的目的，取得了一定的效果[<xref ref-type="bibr" rid="hanspub.15403-ref2">2</xref>] 。</p><p>本文提出了基于同步信息修正的和积算法，在保持原算法每次迭代复杂度以保证性能的前提下，利用同步信息对算法进行修正，有效减小了算法迭代次数，因此减小了计算复杂度，提高了算法的实用性。</p></sec><sec id="s4"><title>2. 和积算法译码流程[<xref ref-type="bibr" rid="hanspub.15403-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.15403-ref3">3</xref>]</title><p>初始化：设定最大迭代次数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x7_hanspub.png" xlink:type="simple"/></inline-formula>，初始迭代次数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x8_hanspub.png" xlink:type="simple"/></inline-formula>，计算变量节点来自于信道的初始概率似然比消息，对每一个变量节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x9_hanspub.png" xlink:type="simple"/></inline-formula>以及与其相邻的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x10_hanspub.png" xlink:type="simple"/></inline-formula>，设定变量节点向校验节点传递的初始消息：</p><disp-formula id="hanspub.15403-formula1116"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/1-1730164x11_hanspub.png"  xlink:type="simple"/></disp-formula><p>步骤1：</p><p>1) 水平方向，对所有的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x12_hanspub.png" xlink:type="simple"/></inline-formula>和与其相邻的变量节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x13_hanspub.png" xlink:type="simple"/></inline-formula>。第l次迭代时，计算变量节点传向校验节点的消息：</p><disp-formula id="hanspub.15403-formula1117"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/1-1730164x14_hanspub.png"  xlink:type="simple"/></disp-formula><p>2) 垂直方向，对所有的节点变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x15_hanspub.png" xlink:type="simple"/></inline-formula>和与其相邻的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x16_hanspub.png" xlink:type="simple"/></inline-formula>。第l次迭代时，计算校验节点传向变量节点的消息：</p><disp-formula id="hanspub.15403-formula1118"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/1-1730164x17_hanspub.png"  xlink:type="simple"/></disp-formula><p>步骤2：判决，并判定是否应该结束迭代译码过程：</p><p>1) 判决，若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x18_hanspub.png" xlink:type="simple"/></inline-formula>，则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x19_hanspub.png" xlink:type="simple"/></inline-formula>。从而得到判决后的输出码字。</p><p>2) 若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x20_hanspub.png" xlink:type="simple"/></inline-formula>或<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x21_hanspub.png" xlink:type="simple"/></inline-formula>，结束译码，转至步骤3，否则转至步骤1。</p><p>步骤3：输出译码结果。</p></sec><sec id="s5"><title>3. 同步信息修正和积算法译码流程</title><p>初始化：设定最大迭代次数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x22_hanspub.png" xlink:type="simple"/></inline-formula>，初始迭代次数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x23_hanspub.png" xlink:type="simple"/></inline-formula>，计算变量节点来自于信道的初始概率似然比消息，对每一个变量节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x24_hanspub.png" xlink:type="simple"/></inline-formula>以及与其相邻的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x25_hanspub.png" xlink:type="simple"/></inline-formula>，按式(1)设定变量节点向校验节点传递的初始消息并将帧头中码元“1”对应的初始软信息置为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x26_hanspub.png" xlink:type="simple"/></inline-formula>，码元“0”对应的初始软信息置为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x27_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>步骤1：</p><p>1) 水平方向，对所有的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x28_hanspub.png" xlink:type="simple"/></inline-formula>和与其相邻的变量节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x29_hanspub.png" xlink:type="simple"/></inline-formula>。第l次迭代时，按式(2)计算变量节点传向校验节点的消息。</p><p>2) 垂直方向，对所有的节点变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x30_hanspub.png" xlink:type="simple"/></inline-formula>和与其相邻的校验节点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x31_hanspub.png" xlink:type="simple"/></inline-formula>。第l次迭代时，按式(3)计算校验节点传向变量节点的消息。</p><p>3) 利用同步信息对两个消息矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x32_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x33_hanspub.png" xlink:type="simple"/></inline-formula>进行修正。假设同步有效，那么帧头数据将是确定的，于是在每次迭代的过程中不必更新相应消息的可信度。采取的策略是固定前述两个矩阵相应列的消息不变，如此便可避免有效信息的减小并且可以持续向其它节点输出修正信息。具体做法为：若帧头中某一位确定为“0”，那么消息固定为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x34_hanspub.png" xlink:type="simple"/></inline-formula>，若某一位为“1”，则消息固定为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x35_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>步骤2：判决，并判定是否应该结束迭代译码过程：</p><p>1) 判决，若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x36_hanspub.png" xlink:type="simple"/></inline-formula>，则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x37_hanspub.png" xlink:type="simple"/></inline-formula>。从而得到判决后的输出码字。</p><p>2) 若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x38_hanspub.png" xlink:type="simple"/></inline-formula>或<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/1-1730164x39_hanspub.png" xlink:type="simple"/></inline-formula>，结束译码，转至步骤三，否则转至步骤一。</p><p>步骤3：输出译码结果。</p></sec><sec id="s6"><title>4. 性能分析</title><p>当信噪比高于3 dB时，改进算法不仅不增大误码率，而且提高了原算法的平均计算收敛速度，为硬件资源的复用提供了一定的理论依据，仿真结果如图1所示。可以看到，在信噪比为3 dB时，原算法的</p><p>图1. 大信噪比下最大迭代次数对比图</p><p>图2. 小信噪比下误码率对比图</p><p>最大迭代次数为67次，最小和算法的最大迭代次数为69次，而改进算法是26次，证明了改进算法的高效性。</p><p>当信噪比低于3 dB时，改进算法降低了误码率，提高了通信系统的可靠性。仿真结果如图2所示。</p></sec><sec id="s7"><title>5. 结论</title><p>无论是连续传输模式还是突发传输模式，物理层均进行组帧和解帧操作。帧同步是可靠传输的基础，而帧同步的实现意味着帧头识别的完成。如前述，在帧同步准确时，帧头数据是确定的，在每次迭代的过程中不更新相应消息的可信度，以此避免有效信息的减小并且可持续向其它节点输出修正信息。此时，该算法在高信噪比下能提高计算效率且在低信噪比下能降低误码率。而若帧同步出错，则物理层传输的错误已经形成，只能依靠上层进行纠正，在此基础上该算法并不会使情况恶化。因此，该算法锦上添花，能改善系统的整体性能。</p></sec><sec id="s8"><title>文章引用</title><p>陈洋洋,吴乐南, (2015) 利用同步信息修正的LDPC和积译码LDPC Sum-Product Decoding Based on Synchronized Information. 无线通信,03,71-74. doi: 10.12677/HJWC.2015.53010</p></sec><sec id="s9"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.15403-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">黄海艺 (2013) 低密度奇偶校验 (LDPC) 码改进译码算法研究. 华南理工大学, 广州.</mixed-citation></ref><ref id="hanspub.15403-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">孙斌, 王钢, 杨文超, 等 (2015) 一种改进型 LLR BP 算法的 LDPC 译码研究. 无线电工程, 3, 002.</mixed-citation></ref><ref id="hanspub.15403-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">龚莉萍, 陈云榕, 胡凯 (2009) LDPC 编译码技术研究. 通信技术, 7, 10-12.</mixed-citation></ref></ref-list></back></article>