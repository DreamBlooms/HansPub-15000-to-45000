<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.84052</article-id><article-id pub-id-type="publisher-id">CSA-24507</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20180400000_67551274.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于缩放因子和协作算子的肾脏算法
  Kidney-Inspired Algorithm Based on Scaling Factor and Cooperative Operator
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>柯</surname><given-names>琪</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>温</surname><given-names>洁嫦</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>广东工业大学应用数学学院，广东 广州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>04</month><year>2018</year></pub-date><volume>08</volume><issue>04</issue><fpage>472</fpage><lpage>479</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   本文研究优化问题中的肾脏算法(Kidney-inspired algorithm, KA)，对肾脏算法(KA)存在的缺陷进行了改进，并在许多优化问题中显示出不错的效果。针对KA算法在某些函数上寻优精度低、且容易过早地陷入局部最优的问题。引入了协作算子来增加种群多样性，并在重吸收更新公式上加入缩放因子，达到跳出局部最优解的目的。实验对比说明，改进的算法是一个有效的稳定算法，具有更高的求解精度和更快的收敛速度。 In this paper, the kidney-inspired algorithm (KA) is studied in the optimization problem. It im-proves the defects in the kidney algorithm (KA) and shows good results in many optimization problems. For the KA algorithm, there is a problem that the search accuracy is low and it is easy to fall into the local optimum early on some functions. A cooperative operator was introduced to increase the diversity of the population and a scaling factor was added to the reabsorption update formula to achieve the goal of jumping out of the local optimal solution. Experimental comparison shows that the improved algorithm is an effective stable algorithm with higher accuracy and faster convergence speed. 
  
 
</p></abstract><kwd-group><kwd>最优化，KA算法，协作算子，缩放因子, Optimization</kwd><kwd> Kidney-Inspired Algorithm</kwd><kwd> Cooperative Operator</kwd><kwd> Scaling Factor</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于缩放因子和协作算子的肾脏算法<sup> </sup></title><p>柯琪，温洁嫦</p><p>广东工业大学应用数学学院，广东 广州</p><p><img src="//html.hanspub.org/file/7-1540994x1_hanspub.png" /></p><p>收稿日期：2018年4月5日；录用日期：2018年4月18日；发布日期：2018年4月25日</p><disp-formula id="hanspub.24507-formula54"><graphic xlink:href="//html.hanspub.org/file/7-1540994x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文研究优化问题中的肾脏算法(Kidney-inspired algorithm, KA) [<xref ref-type="bibr" rid="hanspub.24507-ref1">1</xref>] ，对肾脏算法(KA)存在的缺陷进行了改进，并在许多优化问题中显示出不错的效果。针对KA算法在某些函数上寻优精度低、且容易过早地陷入局部最优的问题。引入了协作算子来增加种群多样性，并在重吸收更新公式上加入缩放因子，达到跳出局部最优解的目的。实验对比说明，改进的算法是一个有效的稳定算法，具有更高的求解精度和更快的收敛速度。</p><p>关键词 :最优化，KA算法，协作算子，缩放因子</p><disp-formula id="hanspub.24507-formula55"><graphic xlink:href="//html.hanspub.org/file/7-1540994x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/7-1540994x7_hanspub.png" /> <img src="//html.hanspub.org/file/7-1540994x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>肾脏算法是由Jaddi等人在2017年提出的一种基于肾启发式算法的优化算法，它的灵感来自于尿液在人体肾脏中的产生。在肾脏的过程中，尿的形成有四个步骤：过滤、重吸收、分泌、排泄。KA从初始种群开始，血液中包含水和溶质。在每一次迭代中，通过利用所有溶质的目标函数(MOF)的均值来控制种群中溶质的过滤。过滤后分为两部分，过滤后的血液(FB)和尿原液(W)。尿原液在移动中较优的溶质会被重吸收进入FB，否则从W中排泄出去；另一方面，重吸收进入FB的溶质不比FB中最差的溶质为好，则从FB中分泌出去。溶质即是目标函数的解。然后对所有的解进行排序，将FB和W中的解进行合并，并更新过滤率，进行下一次迭代。在此算法中，基于当前解和迄今为止发现的最优解，生成趋近当前最优解的新解，通过迭代寻找出全局最优解 [<xref ref-type="bibr" rid="hanspub.24507-ref2">2</xref>] 。在算法被提出后，许多学者对肾脏算法的应用进行了研究。Wang, Haichao [<xref ref-type="bibr" rid="hanspub.24507-ref3">3</xref>] 等人将KA算法应用到主动配电系统规划。Liang, Yi [<xref ref-type="bibr" rid="hanspub.24507-ref4">4</xref>] 等人将KA算法与BP神经网络结合用来评估预测碳排放。</p><p>在所有的优化算法中，主要的目标是找到全局最优 [<xref ref-type="bibr" rid="hanspub.24507-ref5">5</xref>] 。要实现这一目标，就必须在寻优和增加种群多样性之间取得平衡 [<xref ref-type="bibr" rid="hanspub.24507-ref6">6</xref>] 。在KA算法中，溶质的运动和过滤过程为算法提供了良好的寻优能力，另外重吸收过程为增加种群多样性提供了很好的条件 [<xref ref-type="bibr" rid="hanspub.24507-ref7">7</xref>] 。然而重吸收更新公式可能使算法陷入局部最优，为了提高寻优和增加种群多样性之间的平衡，本文在重吸收更新公式上加入缩放因子 [<xref ref-type="bibr" rid="hanspub.24507-ref8">8</xref>] ，避免重吸收后的解聚集在局部最优解的附近，扩大寻优范围。并引入协作算子 [<xref ref-type="bibr" rid="hanspub.24507-ref9">9</xref>] ，通过种群间个体的信息互换，增加种群多样性 [<xref ref-type="bibr" rid="hanspub.24507-ref10">10</xref>] 。</p><p>本文组织结构如下：第2章介绍KA算法；第3章详细讨论重吸收更新公式缩放因子和协作算子的插入以及改进的算法；第4章为实验设置和结果分析；第5章总结。</p></sec><sec id="s4"><title>2. KA算法</title><p>在KA算法的初始阶段，创建一个随机的种群，并计算它们的目标函数值。然后,通过应用过滤算择较优个体移动到FB (Filtered Blood)，其他稍差一点的个体进入W (Waste)，算法中的FB表示较优个体的集合，W表示较差个体的集合。如果一个个体被分配给W，这个算法会给这个个体一次更新，使它有进入FB中的机会。如果更新后的个体质量较差,则从W中排泄出去然后随机加入一个个体。另一方面,如果一个个体分配给FB，但这个个体并不比FB中最差的个体要好,就从FB中分泌出去。最后对FB的个体进行排序，并更新最优解( s b e s t )。对过滤速率进行更新，并合并FB和W，进行下一次迭代。</p><sec id="s4_1"><title>2.1. 虚拟溶质的运动</title><p>种群中的个体代表了生物血液中的溶质。在KA的初始化阶段，和其他的算法一样，生成一个随机种群，并计算每个个体的目标函数值。在每次迭代中，通过移动到当前最优的方向，为所有的个体创建一个新的个体。这一运动的制定如下：</p><p>s i + 1 = s i + r a n d ( s b e s t − s i ) (1)</p><p>s表示KA的一个解(或生物肾脏中的溶质)。 s i 是第i次迭代中的个体。rand的值是介于0和给定数之间的随机数，而 s b e s t 是在过去的迭代中被算法发现的最优个体。</p></sec><sec id="s4_2"><title>2.2. 过滤</title><p>种群中的个体是通过每次迭代中使用的过滤函数计算的过滤速率来过滤的。过滤速率 f r 计算如下：</p><p>f r = α &#215; ∑ i p f ( x i ) p (2)</p><p>α的值是一个常数值的范围(0, 1)，在算法开始时设定。p是种群的大小。 f ( x i ) 是第i代中求解的目标函数，在这个公式中可以看出，每次迭代的过滤速率依赖于种群中所有解的目标函数值。过滤速率以调节α来调整算法的收敛性。在每一次迭代中，目标函数的值越接近全局最优值，因此计算基于这些解的过滤速率，提高了FB中个体的质量。</p></sec><sec id="s4_3"><title>2.3. 重吸收</title><p>重吸收算子是一个过程，它给被分配给W中的个体一次更新。将重吸收更新公式(式1)再次应用，如果它满足过滤要求，则可以将分配给W的个体转移到FB。这是对生物肾脏中溶质的再吸收的模拟。重新吸收过程增加了种群多样性，扩大寻优范围。</p></sec><sec id="s4_4"><title>2.4. 分泌和排泄</title><p>如果分配给FB的个体不比FB中最差的个体好，那么它就会被转移到W，然后从W中删除(即模仿肾脏的排泄过程);否则，这个个体仍然在FB中，而FB中最差个体被转移到W。</p><p>算法步骤：</p><p>1) 初始化种群，用计算个体的目标函数值，将种群最优个体作为当前全局最优 s b e s t 。</p><p>2) 设置过滤率 f r ,。设置较差个体集W,较优个体集FB；设置迭代次数mumofite。</p><p>3) 个体进入过滤过程，如果该个体适应度值优于 f r ，则该个体没有过滤，进入FB；否则该个体过滤后进入W。</p><p>4) 如果一个个体过滤后进入W，通过重吸收算子更新。若更新后个体适应度值差于 f r ，则从W中移除，然后随机加入一个新个体代替；若更新后个体适应度值优于 f r ，则重吸收进入FB。但如果优于FB中的最差个体 S w o r s t ,则将 S w o r s t 分泌到W；如果差于FB中的 S w o r s t ，也将重吸收到FB中的个体分泌入W。</p><p>5) 将FB中的个体排序，并更新 s b e s t ；合并FB和W，更新过滤率，进行下一次迭代。</p></sec></sec><sec id="s5"><title>3. 基于缩放因子和协作算子的肾脏算法</title><p>针对标准KA算法在某些测试函数有可能陷入局部最优、寻优精度低及收敛速度慢等缺陷，本文对重吸收更新公式增加两个缩放因子并在一次迭代结束后更对FB部分引入协作算子 [<xref ref-type="bibr" rid="hanspub.24507-ref11">11</xref>] 。协作算子通过个体间信息共享，既可增加种群多样性，也可优化个体；通过调节缩放因子 [<xref ref-type="bibr" rid="hanspub.24507-ref12">12</xref>] 尽量避免较优个体全部聚集在局部最优附近，达到避免算法陷入局部最优的目的 [<xref ref-type="bibr" rid="hanspub.24507-ref12">12</xref>] 。</p><sec id="s5_1"><title>3.1. 加入缩放因子的重吸收更新公式</title><p>传统肾脏算法重吸收过程的更新公式导致算法在有些测试函数中容易陷入局部最优，更新后的个体聚集在当前最优附近 [<xref ref-type="bibr" rid="hanspub.24507-ref13">13</xref>] 。本文加入缩放因子 c 1 , c 2 ， c 1 为非负数，控制前一个体对当前个体的影响， c 2 调节个体移向当前最优的步长；通过调节 c 1 , c 2 ,避免更新后的个体聚拢在当前最优附近，避免算法陷入局部最优。</p><p>s i + 1 = c 1 s i + c 2 r a n d ( s b e s t − s i ) (3)</p><p>其中 s b e s t 为当前代中适应度值最优的个体， c 1 和 c 2 为缩放因子。</p></sec><sec id="s5_2"><title>3.2. 协作算子</title><p>协作算子有算术交叉算子和两点交叉算子两种形式，由交叉概率 p c 控制决定，如果满足 r a n d ( 0 , 1 ) &lt; p c ,则执行算术交叉操作，否则执行两点交叉操作。协作算子通过个体间信息共享，既可维持种群多样性，也可优化个体。</p><sec id="s5_2_1"><title>3.2.1. 算术交叉操作</title><p>改进后的KA算法中，若FB中个体 s i 执行算术交叉操作，则从FB中选择当前最优个体 s b e s t ，按以下方式产生新个体：</p><p>, (4)</p><p>S ″ i = ( 1 − r ) ⋅ S i + r ⋅ s b e s t . (5)</p><p>其中 表示算术交叉因子， S ′ i , S ″ i 分别表示产生的新个体，若新个体优于 S i ，则更新 S i 。通过个体与其他的优质个体交叉交换信息产生了两个新的个体，可有效保持种群的多样性，有利于种群的进化。</p></sec><sec id="s5_2_2"><title>3.2.2. 两点交叉算子</title><p>改进后的KA算法中，若FB中的个体执行两点交叉操作，则从FB中随机选择个体 S j ,随机产生二个交叉点位置a、b,将交叉点所夹的片段进行交换产生新个体：</p><p>S ′ i = ( s i 1 , s i 2 , ⋯ , s j a , s j a + 1 , ⋯ , s j b , ⋯ , s i n ) (6)</p><p>S ″ i = ( s j 1 , s j 2 , ⋯ , s i a , s i a + 1 , ⋯ , s i b , ⋯ , s j n ) (7)</p><p>其中 1 ≤ a ≤ b ≤ n ， S ′ i , S ″ i 分别表示产生的新个体，若新个体优于 S i ，则更新 S i ，否则以小概率p保留新个体，一般 p ≪ 0.01 。该算子能提高算法的收敛速度，一定程度上又维持了种群多样性。</p></sec></sec><sec id="s5_3"><title>3.3. 改进后的算法步骤</title><p>1) 初始化种群，计算个体的目标函数值，将种群最优个体作为当前全局最优 s b e s t 。</p><p>2) 设置过滤率 f r ，设置较差个体集W，较优个体集 ；设置迭代次数mumofite。</p><p>3) 个体进入过滤过程，如果该个体适应度值优于 f r ，则该个体没有过滤，进入FB；否则该个体过滤后进入W。</p><p>4) 如果一个个体过滤后进入W，通过重吸收算子更新。若更新后个体适应度值差于 f r ，则从W中移除，然后随机加入一个新个体代替；若更新后个体适应度值优于 f r ，则重吸收进入FB。但如果优于FB中的最差个体 S w o r s t ,则将<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-1540994x56_hanspub.png" xlink:type="simple"/></inline-formula>分泌到W；如果差于FB中的 S w o r s t ，也将重吸收到FB中的个体分泌入W。</p><p>5) 将FB中的个体排序，执行协作算子，并更新 s b e s t ；合并FB和W，更新过滤率，进行下一次迭代。</p></sec></sec><sec id="s6"><title>4. 实验设置和结果分析</title><p>为了比较分析改进KA算法的性能，本文将改进的KA算法记为为C-KA (Cooperative operator Kidney-inspired algorithm)，和原始KA算法在选取的CE2013 [<xref ref-type="bibr" rid="hanspub.24507-ref14">14</xref>] 和CEC2014 [<xref ref-type="bibr" rid="hanspub.24507-ref15">15</xref>] 测试集中的8个测试函数上进行测试，F1(Sphere)、F2(Rosenbrock)、F3(Rastrigin)、F4(Griewangk)、F5(Bent Cigar)、F6(HGBat)、F7(Schwefel)、F8(Weierstrass)，并对实验结果进行对比。测试函数如表1所示。</p><sec id="s6_1"><title>4.1. 实验设置</title><p>数值实验运用MATLAB编程，为了比较的有效性，两种算法采用相同的参数设置，种群规模为100，最大迭代次数为100，同一条件下独立运行50次。本文设置协作算子中交叉概率P<sub>c</sub> = 0.6，算术交叉因子r = 0.8，缩放因子 c 1 = 0 ， c 2 = 1.4 。记录实验结果的最优值、最差值、均值和标准差，最优值表示算法寻优最好的结果，最差值表示算法寻优最差的结果，均值显示算法寻优的平均水平，反映算法的稳定性，标准差表反映算法寻优结果的离散程度，表示算法的稳定性。优化计算结果如表2所示。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Text Functio</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >函数</th><th align="center" valign="middle" >维数</th><th align="center" valign="middle" >搜索范围</th><th align="center" valign="middle" >最优值</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >256</td><td align="center" valign="middle" >[-5.12, 5.12]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F2</td><td align="center" valign="middle" >16</td><td align="center" valign="middle" >[-10, 10]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F3</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[-5.12, 5.12]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F4</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[-600, 600]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F5</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[-100, 100]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F6</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >[-50, 50]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F7</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >[-50, 50]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >F8</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >[-50, 50]</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap><p>表1. 测试函数</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Optimum results of F1-F</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >函数</th><th align="center" valign="middle" >算法</th><th align="center" valign="middle" >最差值</th><th align="center" valign="middle" >最优值</th><th align="center" valign="middle" >均值</th><th align="center" valign="middle" >标准差</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >0.01599 4.46 &#215; 10 − 18</td><td align="center" valign="middle" >2.88 &#215; 10 − 7 1.70 &#215; 10 − 21</td><td align="center" valign="middle" >3.51 &#215; 10 − 4 2.14 &#215; 10 − 19</td><td align="center" valign="middle" >0.00226 6.40 &#215; 10 − 19</td></tr><tr><td align="center" valign="middle" >F2</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >2.84 &#215; 10 − 4 9.34 &#215; 10 − 4</td><td align="center" valign="middle" >8.77 &#215; 10 − 18 1.71 &#215; 10 − 21</td><td align="center" valign="middle" >3.13 &#215; 10 − 5 5.72 &#215; 10 − 5</td><td align="center" valign="middle" >6.69 &#215; 10 − 5</td></tr><tr><td align="center" valign="middle" >F3</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >867.7414 5.68 &#215; 10 − 14</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-1540994x76_hanspub.png" xlink:type="simple"/></inline-formula> 0</td><td align="center" valign="middle" >1.59 &#215; 10 − 14</td><td align="center" valign="middle" >380.1643 2.79 &#215; 10 − 14</td></tr><tr><td align="center" valign="middle" >F4</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >0.1675 2.22 &#215; 10 − 16</td><td align="center" valign="middle" >9.21 &#215; 10 − 15 0</td><td align="center" valign="middle" >3.35 &#215; 10 − 3 2.22 &#215; 10 − 17</td><td align="center" valign="middle" >0.0234 4.97 &#215; 10 − 17</td></tr><tr><td align="center" valign="middle" >F5</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >1.13 &#215; 10 − 5 1.83 &#215; 10 − 17</td><td align="center" valign="middle" >2.41 &#215; 10 − 7 <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-1540994x87_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >2.72 &#215; 10 − 6 3.17 &#215; 10 − 18</td><td align="center" valign="middle" >2.28 &#215; 10 − 6 4.18 &#215; 10 − 18</td></tr><tr><td align="center" valign="middle" >F6</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >0.7391 0.6049</td><td align="center" valign="middle" >0.4538 0.4950</td><td align="center" valign="middle" >0.5623 0.5253</td><td align="center" valign="middle" >0.0750 0.0205</td></tr><tr><td align="center" valign="middle" >F7</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >0.0025 0.0015</td><td align="center" valign="middle" >0 0</td><td align="center" valign="middle" >0.0014 0.0013</td><td align="center" valign="middle" >0.000595 0.000199</td></tr><tr><td align="center" valign="middle" >F8</td><td align="center" valign="middle" >KA C-KA</td><td align="center" valign="middle" >3.50 &#215; 10 − 6 2.40 &#215; 10 − 13</td><td align="center" valign="middle" >0 0</td><td align="center" valign="middle" >7.01 &#215; 10 − 8 1.21 &#215; 10 − 14</td><td align="center" valign="middle" >4.90 &#215; 10 − 7 4.73 &#215; 10 − 14</td></tr></tbody></table></table-wrap><p>表2. F1-F8优化计算结果</p></sec><sec id="s6_2"><title>4.2. 实验结果比较分析</title><p>由表2可知，F1、F3、F4、F5、F6、F7、F8测试函数，改进后算法的最差值、最优值、均值、标准差均优于原始KA算法。对于F2，新算法求出函数最优解的精度比原算法高；相对于F1、F3、F4、F5，新算法的精度为10<sup>-21</sup>、0、0、10<sup>-20</sup>，说明新算法有较高的求解精度；与原算法比较，新算法的实验数据大部分标准差均最小，说明新算法的稳定性较高 [<xref ref-type="bibr" rid="hanspub.24507-ref16">16</xref>] 。</p><p>测试函数的进化曲线图如图1~4所示。由图所示可以看出，新算法收敛速度和寻优精度大部分优于原算法。新算法在重吸收更新公式上引入缩放因子，通过调节缩放因子增加随机扰动，可避免FB中的个体聚拢在局部最优值附近，以避免算法陷入局部最优新算法加入的协作算子能够提高种群多样性与种群质量，加强了算法的全局搜索能力；新算法加入的协作算子通过种群间的信息交流能够提高种群多样性与种群质量，加强了算法的全局搜索能力，有利于加快算法收敛速度，提高算法精度，因而整体上优化了算法性能 [<xref ref-type="bibr" rid="hanspub.24507-ref17">17</xref>] 。</p><p>图1. F1和F2函数进化曲线</p><p>图2. F3和F4函数进化曲线</p><p>图3. F5和F6函数进化曲线</p><p>图4. F7和F8函数进化曲线</p></sec></sec><sec id="s7"><title>5. 结语</title><p>原KA算法对某些函数寻优精度低，容易过早的陷入局部最优解，本文提出一种加入协作算子和重吸收更新公式缩放因子的增强KA算法(C-KA)。通过在种群中执行协作算子，提高了种群多样性与种群质量；同时在重吸收更新公式上引入缩放因子，使种群的多样性增加且更有机会跳出局部最优区域，并在8个测试函数上进行仿真实验，与原始KA算法进行对比，表明新算法的寻优精度更高，收敛速度更快，算法更稳定。</p></sec><sec id="s8"><title>致谢</title><p>感谢导师温洁嫦老师在写作期间给予我的指导和鼓励，感谢刘海林老师的指导！感谢同门的陪伴和关怀！</p></sec><sec id="s9"><title>资助信息</title><p>广州市科技计划项目(502150155)。</p></sec><sec id="s10"><title>文章引用</title><p>柯 琪,温洁嫦. 基于缩放因子和协作算子的肾脏算法 Kidney-Inspired Algorithm Based on Scaling Factor and Cooperative Operator[J]. 计算机科学与应用, 2018, 08(04): 472-479. https://doi.org/10.12677/CSA.2018.84052</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.24507-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Jaddi, N.S., Alvankarian, J. and Abdullah, S. (2017) Kidney-Inspired Algorithm for Optimization Problems. Communi-cations in Nonlinear Science and Numerical Simulation, 42, 358-369. &lt;br&gt;https://doi.org/10.1016/j.cnsns.2016.06.006</mixed-citation></ref><ref id="hanspub.24507-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">马红伟. 粒子群算法改进及其在数据挖掘中的应用研究[D]: [硕士学位论文]. 济南: 山东师范大学, 2014.</mixed-citation></ref><ref id="hanspub.24507-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Wang, H.C., Niu, D.X. and Chen, H.Y. (2017) Research on Coor-dination Planning of Micro Grid and Active Distribution Network Based on Kidney-Inspired Algorithm. Advances in Education Sciences, 12, 150-156.</mixed-citation></ref><ref id="hanspub.24507-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Liang, Y., Niu, D.X. and Wang, H.C. (2017) Assessment Analysis and Fore-casting for Security Early Warning of Energy Consumption Carbon Emissions in Hebei Province, China. Energies, 10, 391.  
&lt;br&gt;https://doi.org/10.3390/en10030391</mixed-citation></ref><ref id="hanspub.24507-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">陈宝林. 最优化理论与算法[M]. 北京: 清华大学出版社, 2006.</mixed-citation></ref><ref id="hanspub.24507-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">金希东. 遗传算法及其应用[D]: [硕士学位论文]. 成都: 西南交通大学, 1996.</mixed-citation></ref><ref id="hanspub.24507-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">李士勇. 蚁群算法及其应用[M]. 哈尔滨工业大学出版社, 2004.</mixed-citation></ref><ref id="hanspub.24507-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">郭鹏. 差分进化算法改进研究[D]: [博士学位论文]. 天津: 天津大学, 2011.</mixed-citation></ref><ref id="hanspub.24507-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">徐焕芬, 刘伟, 谢月珊, 等. 双种群烟花算法[J]. 广东工业大学学报, 2017(5): 65-72.</mixed-citation></ref><ref id="hanspub.24507-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">张创业, 莫愿斌. 基于协同进化思想的人工鱼和粒子群混合优化算法[J]. 广西民族大学学报: 自然科学版, 2009, 15(1): 74-77.</mixed-citation></ref><ref id="hanspub.24507-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">慕彩红, 焦李成, 刘逸. M-精英协同进化数值优化算法[J]. 软件学报, 2009, 20(11): 2925-2938.</mixed-citation></ref><ref id="hanspub.24507-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">慕彩红, 焦李成, 刘逸. 求解约束优化问题M-精英协同进化算法[J]. 西安电子科技大学学报(自然科学版), 2010, 37(5): 854-861.</mixed-citation></ref><ref id="hanspub.24507-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">崔逊学. 多目标进化算法及其应用[M]. 北京: 国防工业出版社, 2006: 93-94.</mixed-citation></ref><ref id="hanspub.24507-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Liang, J., Suganthan, P.N. and Hernandez-Diaz, A.G. (2016) Problem Definitions and Evaluation Criteria for the CEC2013 Special Session on Real-Parameter Optimization.</mixed-citation></ref><ref id="hanspub.24507-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Liang, J.J., Qu, B.Y. and Suganthan, P.N. (2016) Problem Definitions and Evaluation Criteria for the CEC2014 Special Session and Competition on Single Objec-tive Real-Parameter Numerical Optimization. 
&lt;br&gt;http://www.ntu.edu.sg/home/EPNSugan/index_files/CEC2014/CEC2014.htm</mixed-citation></ref><ref id="hanspub.24507-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">李荣雨, 周志勇. 成长性的粒子群算法及其在函数优化中的应用[J]. 信息与控制, 2017, 46(2): 224-230.</mixed-citation></ref><ref id="hanspub.24507-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">胡冠宇, 乔佩利. 混沌协方差矩阵自适应进化策略优化算法[J]. 吉林大学学报(工), 2017, 47(3): 937-943.</mixed-citation></ref></ref-list></back></article>