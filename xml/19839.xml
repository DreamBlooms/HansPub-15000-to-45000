<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2017.72017</article-id><article-id pub-id-type="publisher-id">CSA-19839</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20170200000_16410001.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于Hooke-Jeeves的改进人工蜂群算法
  An Improved Artificial Bee Colony Algorithm Based on Hooke-Jeeves Method
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>孙</surname><given-names>越泓</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>丁</surname><given-names>亚英</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>江苏省大规模复杂系统数值模拟重点实验室，江苏 南京;南京师范大学数学科学学院, 江苏 南京</addr-line></aff><aff id="aff3"><addr-line>南京师范大学数学科学学院, 江苏 南京</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>05234@njnu.edu.cn(孙越)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>16</day><month>02</month><year>2017</year></pub-date><volume>07</volume><issue>02</issue><fpage>134</fpage><lpage>145</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   人工蜂群算法(ABC)是新近提出的一种基于群智能的优化方法，它比其他基于种群的智能算法更优异，但蜂群的搜索更新公式在算法的局部寻优能力上存在缺陷。因此本文致力于将擅长局部寻优的搜索机制引入人工蜂群算法，提出了一种基于Hooke-Jeeves的改进人工蜂群算法(IHABC)。IHABC算法改进了采蜜蜂和跟随蜂的搜索公式，期望保留全局搜索能力的同时能更大限度地增加算法的局部寻优能力；采用质量中上的个体优化Hooke-Jeeves搜索法的初始基点以确保局部寻优的有效性；改进Hooke-Jeeves方法的探索移动的步长公式。为了检测新算法的性能，将其与人工蜂群算法、Hooke-Jeeves人工蜂群算法(HABC)进行比较分析，30个基准函数上的数值实验结果表明，IHABC算法在求解无约束优化问题时得到的近似解有更高的精度。 Artificial bee colony algorithm (ABC) is a relatively new swarm intelligence optimization method, which is superior to other population-based intelligent algorithms. However, ABC algorithm also has certain limitation because its updating formula is not good at exploitation. In order to enhance the exploitation capacity of ABC, this paper presents a new algorithm called an improved artificial bee colony algorithm based on Hooke-Jeeves method (IHABC). The altered formulas of employed bees and onlooker bees in IHABC not only keep exploration ability but also increase exploitation to a great extent. In addition, the algorithm optimizes initial base point selection in Hooke-Jeeves search phase by upper-middle individual and modifies step size formula of exploratory move, so that the whole population evolves spontaneously in the right direction. To test the effectiveness of the proposed algorithm, we compare IHABC with ABC and Hooke-Jeeves artificial bee colony algorithm (HABC). The numerical experimental results of 30 benchmark functions clearly indicate that IHABC gets higher approximate solution precision in solving unconstrained optimization problems.
    
  
 
</p></abstract><kwd-group><kwd>群智能，人工蜂群算法，Hooke-Jeeves搜索，局部寻优能力，无约束优化问题, Swarm Intelligence</kwd><kwd> Artificial Bee Colony Algorithm</kwd><kwd> Hooke-Jeeves Search</kwd><kwd> Local Exploitation Capacity</kwd><kwd> Unconstrained Optimization Problems</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于Hooke-Jeeves的改进人工蜂群算法<sup> </sup></title><p>孙越泓<sup>1,2</sup>，丁亚英<sup>2</sup></p><p><sup>1</sup>江苏省大规模复杂系统数值模拟重点实验室，江苏 南京</p><p><sup>2</sup>南京师范大学数学科学学院, 江苏 南京</p><p>收稿日期：2017年2月4日；录用日期：2017年2月25日；发布日期：2017年2月28日</p><disp-formula id="hanspub.19839-formula99"><graphic xlink:href="http://html.hanspub.org/file/5-1540698x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>人工蜂群算法(ABC)是新近提出的一种基于群智能的优化方法，它比其他基于种群的智能算法更优异，但蜂群的搜索更新公式在算法的局部寻优能力上存在缺陷。因此本文致力于将擅长局部寻优的搜索机制引入人工蜂群算法，提出了一种基于Hooke-Jeeves的改进人工蜂群算法(IHABC)。IHABC算法改进了采蜜蜂和跟随蜂的搜索公式，期望保留全局搜索能力的同时能更大限度地增加算法的局部寻优能力；采用质量中上的个体优化Hooke-Jeeves搜索法的初始基点以确保局部寻优的有效性；改进Hooke-Jeeves方法的探索移动的步长公式。为了检测新算法的性能，将其与人工蜂群算法、Hooke-Jeeves人工蜂群算法(HABC)进行比较分析，30个基准函数上的数值实验结果表明，IHABC算法在求解无约束优化问题时得到的近似解有更高的精度。</p><p>关键词 :群智能，人工蜂群算法，Hooke-Jeeves搜索，局部寻优能力，无约束优化问题</p><disp-formula id="hanspub.19839-formula100"><graphic xlink:href="http://html.hanspub.org/file/5-1540698x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="http://image.hanspub.org:8080\Html/htmlimages\1-2890033x\e70a10f1-7c93-45ea-9603-062237856e4b.png" /><img src="http://image.hanspub.org:8080\Html\htmlimages\1-2890033x\e898c85e-ffc4-45c9-b817-14224a4d6960.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>人工蜂群算法(Artificial Bee Colony algorithm, ABC) [<xref ref-type="bibr" rid="hanspub.19839-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.19839-ref2">2</xref>] 属于智能优化方法之一，由Karaboga和Basturk受蜜蜂觅食行为启发而提出。它以结构简单、应用范围广、表现优异等特点，受到优化领域学者们的关注。但是Zhu和Kwong [<xref ref-type="bibr" rid="hanspub.19839-ref3">3</xref>] 指出ABC的搜索公式精于全局搜索，疏于局部寻优。为了改善ABC算法的性能，memetic算法 [<xref ref-type="bibr" rid="hanspub.19839-ref4">4</xref>] 将ABC算法与局部寻优方法相结合，充分利用两种算法的优势，即将ABC算法的全局搜索能力贡献给memetic算法，使得它比单用局部寻优方法更不容易陷入局部最优；同时将局部寻优的能力贡献给ABC算法，使得它比单用全局搜索算法能更快地收敛。Bansal等 [<xref ref-type="bibr" rid="hanspub.19839-ref5">5</xref>] 在ABC算法中加入黄金分割搜索(Golden Section Search, GSS)，提出MeABC算法。Gao等 [<xref ref-type="bibr" rid="hanspub.19839-ref6">6</xref>] 将Powell方法与ABC结合提出PABC算法，充分利用ABC的全局搜索能力，将任意选出的个体往当前种群的适应度值最大的个体方向进行略微调整，在调整后的新个体上用Powell方法进行局部寻优。</p><p>2011年Kang等 [<xref ref-type="bibr" rid="hanspub.19839-ref7">7</xref>] 将Rosenbrock转轴法与原始ABC结合，得到了RABC算法。Kang等 [<xref ref-type="bibr" rid="hanspub.19839-ref8">8</xref>] 2013年进一步尝试将Hooke-Jeeves直接搜索方法与人工蜂群算法ABC结合，命名为HABC，其全局搜索阶段与ABC类似，仅将适应度计算公式改为公式(7)，并对当前种群中目标函数值最小的个体用Hooke-Jeeves方法进行局部寻优。</p><p>本文在HABC基础上，对采蜜蜂和跟随蜂的候选解产生公式做了改动，期望保留全局搜索能力的同时能更大程度地增加算法的局部寻优能力，从而加快算法的收敛速度。另外，对Hooke-Jeeves方法的初始基点进行优化，提高局部寻优的有效性并避免其陷入局部最优。数值实验表明提出的新算法在求解无约束优化问题时具有一定的优越性。</p></sec><sec id="s4"><title>2. 人工蜂群算法和Hooke-Jeeves方法</title><p>为了便于描述新算法，首先对人工蜂群算法和改进的Hooke-Jeeves方法进行简要说明。</p><sec id="s4_1"><title>2.1. 人工蜂群算法</title><p>人工蜂群算法用于求解无约束优化问题</p><disp-formula id="hanspub.19839-formula101"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x9_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中自变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x10_hanspub.png" xlink:type="simple"/></inline-formula>，n指维数。目标函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x11_hanspub.png" xlink:type="simple"/></inline-formula>。具体步骤如下：</p><p>步骤一：初始化。</p><p>初始化种群大小NP，食物源数目<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x12_hanspub.png" xlink:type="simple"/></inline-formula>，采蜜蜂数目NS。接着随机产生NS个n维实向量(n指优化问题的维数)，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x13_hanspub.png" xlink:type="simple"/></inline-formula>表示产生的第i个向量，每维分量的生成公式如下：</p><disp-formula id="hanspub.19839-formula102"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x14_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x15_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x16_hanspub.png" xlink:type="simple"/></inline-formula>是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x17_hanspub.png" xlink:type="simple"/></inline-formula>之间服从均匀分布的随机数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x18_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x19_hanspub.png" xlink:type="simple"/></inline-formula>表示第j维的上下界。</p><p>将这些向量随机分配给NS只采蜜蜂，用公式(3)计算每只采蜜蜂对应食物源的适应度值，同时用变量X<sub>best</sub>记录适应度值最大的食物源。</p><disp-formula id="hanspub.19839-formula103"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x20_hanspub.png"  xlink:type="simple"/></disp-formula><p>步骤二：重复地对食物源进行更新，直到终止条件满足。</p><p>① 采蜜蜂阶段</p><p>基于旧的食物源<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x21_hanspub.png" xlink:type="simple"/></inline-formula>产生一个候选解<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x22_hanspub.png" xlink:type="simple"/></inline-formula>，公式如下：</p><disp-formula id="hanspub.19839-formula104"><label>(4)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x23_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x24_hanspub.png" xlink:type="simple"/></inline-formula>；k是从集合<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x25_hanspub.png" xlink:type="simple"/></inline-formula>中随机选择的一个整数，并且k必须不同于i；j是从集合<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x26_hanspub.png" xlink:type="simple"/></inline-formula>中随机选择的一个整数；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x27_hanspub.png" xlink:type="simple"/></inline-formula>是服从[−1,1]之间均匀分布的随机数。</p><p>计算并比较候选解<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x28_hanspub.png" xlink:type="simple"/></inline-formula>和食物源<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x29_hanspub.png" xlink:type="simple"/></inline-formula>两者的适应度值，用贪婪算子在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x30_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x31_hanspub.png" xlink:type="simple"/></inline-formula>间做选择：如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x32_hanspub.png" xlink:type="simple"/></inline-formula>的适应度值不小于<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x33_hanspub.png" xlink:type="simple"/></inline-formula>的适应度值，那么用<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x34_hanspub.png" xlink:type="simple"/></inline-formula>替代<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x35_hanspub.png" xlink:type="simple"/></inline-formula>；否则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x36_hanspub.png" xlink:type="simple"/></inline-formula>保留。</p><p>② 跟随蜂阶段</p><p>跟随蜂根据每个食物源<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x37_hanspub.png" xlink:type="simple"/></inline-formula>的被选择概率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x38_hanspub.png" xlink:type="simple"/></inline-formula>，利用轮盘赌算子决定<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x39_hanspub.png" xlink:type="simple"/></inline-formula>是否被选择进行更新，即只有当随机数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x40_hanspub.png" xlink:type="simple"/></inline-formula>时，才用公式(4)产生<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x41_hanspub.png" xlink:type="simple"/></inline-formula>的一个候选食物源<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x42_hanspub.png" xlink:type="simple"/></inline-formula>，计算并比较候选解和旧食物源的适应度值，用贪婪算子在两者之间做取舍。其中每个食物源的被选择概率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x43_hanspub.png" xlink:type="simple"/></inline-formula>的公式如下：</p><disp-formula id="hanspub.19839-formula105"><label>(5)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x44_hanspub.png"  xlink:type="simple"/></disp-formula><p>③ 侦查蜂阶段</p><p>如果有食物源<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x45_hanspub.png" xlink:type="simple"/></inline-formula>在Limit循环次数之内一直没有被更新，那么<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x46_hanspub.png" xlink:type="simple"/></inline-formula>就会被抛弃，用公式(2)产生一个新的食物源来代替<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x47_hanspub.png" xlink:type="simple"/></inline-formula>。Limit是预先给定的一个值。</p><p>④ 更新gbest</p><p>找出当前种群中的最大适应度值，与原来的Fitbest比较，适应度值更高的作为新的Fitbest，同时将Fitbest对应的食物源存入<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x48_hanspub.png" xlink:type="simple"/></inline-formula>中。</p><p>步骤三：输出最终的<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x49_hanspub.png" xlink:type="simple"/></inline-formula>作为优化问题的近似解。</p></sec><sec id="s4_2"><title>2.2. Hooke-Jeeves方法</title><p>Hooke-Jeeves方法包含两种类型的移动：探测移动(exploratory move)和模式移动(pattern move)。在确定了一个初始基点之后，探测移动依次沿n个坐标轴进行，用以确定新的基点和有利于函数数值下降的方向；模式移动沿相邻两个基点连线方向进行，试图顺着“山谷”使函数值更快地减小。这两种移动交替地进行直到终止条件满足，如图1所示，带箭头的实线为探测移动，不带箭头的实线为模式移动。</p><p>探测移动的主要步骤描述在算法1中(见图2)。假定x<sub>0</sub>是基点，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x50_hanspub.png" xlink:type="simple"/></inline-formula>是n个方向上各自的步长，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x51_hanspub.png" xlink:type="simple"/></inline-formula>是当前目标函数的最小值。x<sub>1</sub>是过渡向量，用于存储探测移动后得到的点。如果探测移动成功，即两个解x<sub>0</sub>和x<sub>1</sub>满足关系<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x52_hanspub.png" xlink:type="simple"/></inline-formula>，那么从x<sub>0</sub>处以<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x53_hanspub.png" xlink:type="simple"/></inline-formula>为方向进行模式移动，模式移动后得到的点记为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x54_hanspub.png" xlink:type="simple"/></inline-formula>。Hooke-Jeeves方法的主要步骤见算法2 (图3)。算法2中引入了辅助步长<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x55_hanspub.png" xlink:type="simple"/></inline-formula>用于终止算法；步长缩减率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x56_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>图1. Hooke-Jeeves方法的一个例子</p><p>图2. 探测移动主要步骤</p><p>图3. Hooke-Jeeves方法主要步骤</p></sec></sec><sec id="s5"><title>3. 基于Hooke-Jeeves的改进人工蜂群算法</title><p>为了加快基于Hooke-Jeeves的人工蜂群算法HABC [<xref ref-type="bibr" rid="hanspub.19839-ref8">8</xref>] 的收敛速度，并且防止算法陷入局部最优，我们提出基于Hooke-Jeeves的改进人工蜂群算法。本节首先描述三个改进策略，随后对新算法进行具体说明。</p><sec id="s5_1"><title>3.1. 采蜜蜂更新公式</title><p>在采蜜蜂阶段，根据文献 [<xref ref-type="bibr" rid="hanspub.19839-ref9">9</xref>] 将候选解的产生公式改为</p><disp-formula id="hanspub.19839-formula106"><label>(6)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x60_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中，指标r<sub>1</sub>和r<sub>2</sub>是从<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x61_hanspub.png" xlink:type="simple"/></inline-formula>里随机选的两个不同的整数，且均不同于i；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x62_hanspub.png" xlink:type="simple"/></inline-formula>是当前种群中最好的个体(指目标函数最小的个体)；j是从<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x63_hanspub.png" xlink:type="simple"/></inline-formula>里随机取的一个整数；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x64_hanspub.png" xlink:type="simple"/></inline-formula>是[−1,1]之间服从均匀分布的随机数。原始的候选解公式(4)精于全局搜索、疏于局部寻优，导致算法的收敛速度减慢。而公式(6)是在前一次迭代后得到的最好个体附近产生候选解，这样充分利用了最好个体的信息，并且大大增加了算法的局部寻优能力，从而提升了收敛速度。</p><p>另外蜂群个体的适应度值计算公式如下：</p><disp-formula id="hanspub.19839-formula107"><label>(7)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x65_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x66_hanspub.png" xlink:type="simple"/></inline-formula>是指函数值按从大到小排序后第i个解在整个种群中的顺序号；SP是选择压力，取值为[1.0, 2.0]，实验中取了中间值1.5；NS是食物源数目。</p></sec><sec id="s5_2"><title>3.2. 跟随蜂更新公式</title><p>在跟随蜂阶段，根据文献 [<xref ref-type="bibr" rid="hanspub.19839-ref10">10</xref>] 将候选解的产生公式改为</p><disp-formula id="hanspub.19839-formula108"><label>(8)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x67_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x68_hanspub.png" xlink:type="simple"/></inline-formula>是第i个食物源；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x69_hanspub.png" xlink:type="simple"/></inline-formula>是第i个食物源的候选解，d是从<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x70_hanspub.png" xlink:type="simple"/></inline-formula>里依次取的整数；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x71_hanspub.png" xlink:type="simple"/></inline-formula>是当前种群中的最好个体，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x72_hanspub.png" xlink:type="simple"/></inline-formula>是将<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x73_hanspub.png" xlink:type="simple"/></inline-formula>带入公式(3)得到的值；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x74_hanspub.png" xlink:type="simple"/></inline-formula>是[−1,1]之间服从均匀分布的随机数；j是从<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x75_hanspub.png" xlink:type="simple"/></inline-formula>里随机取的一个整数。公式(8)将<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x76_hanspub.png" xlink:type="simple"/></inline-formula>作为候选解产生公式的误差校正项乘子，根据参考文献 [<xref ref-type="bibr" rid="hanspub.19839-ref10">10</xref>] 所述，此举能够加快算法的收敛速度。</p></sec><sec id="s5_3"><title>3.3. 局部寻优初始基点的选择</title><p>在Hooke-Jeeves方法中，每Nc次循环后以最好个体<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x77_hanspub.png" xlink:type="simple"/></inline-formula>为基点进行一次Hooke-Jeeves搜索，如果此时<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x78_hanspub.png" xlink:type="simple"/></inline-formula>为靠近局部最优解的点，那算法很容易就陷入了局部最优。PABC [<xref ref-type="bibr" rid="hanspub.19839-ref6">6</xref>] 算法是采用从任意解往最好解方向移动后的新个体上进行搜索，虽然能一定程度上避免陷入局部最优，但是对于任取的个体，即使往最好个体方向上移动之后仍无法确定会不会很偏离最优值。</p><p>本文对Hooke-Jeeves方法进行的局部搜索做了改动，一个很自然的想法就是折中处理，即取目标函数值处于中间的个体，再往最好个体方向稍做移动得到新的个体U，以U为基点进行Hooke-Jeeves搜索。U的生成公式如下：</p><disp-formula id="hanspub.19839-formula109"><label>(9)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x79_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x80_hanspub.png" xlink:type="simple"/></inline-formula>；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x81_hanspub.png" xlink:type="simple"/></inline-formula>表示目标函数值位于中间的个体；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x82_hanspub.png" xlink:type="simple"/></inline-formula>表示目标函数值最小的个体；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x83_hanspub.png" xlink:type="simple"/></inline-formula>是[0,1]之间服从均匀分布的随机数。本文还将探测移动的步长公式更改为：</p><disp-formula id="hanspub.19839-formula110"><label>(10)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-1540698x84_hanspub.png"  xlink:type="simple"/></disp-formula><p>式中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x85_hanspub.png" xlink:type="simple"/></inline-formula>指第<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x86_hanspub.png" xlink:type="simple"/></inline-formula>维的探测移动步长值；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x87_hanspub.png" xlink:type="simple"/></inline-formula>是用于计算步长的个体数；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x88_hanspub.png" xlink:type="simple"/></inline-formula>是按目标函数值从大到小排序后序号为i的个体；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x89_hanspub.png" xlink:type="simple"/></inline-formula>是用公式(9)得到的新个体。该步长公式取的是前m个最好解与新解U之间的平均距离，也就是以U为基点，朝着前m个最好解的方向进行搜索。迭代初期，由于种群的多样性，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x90_hanspub.png" xlink:type="simple"/></inline-formula>会偏大；随着种群渐渐收敛，种群间的差距会渐渐缩小，从而步长也会随之减小。</p><p>U与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x91_hanspub.png" xlink:type="simple"/></inline-formula>的选取使得Hooke-Jeeves搜索在一个相对不错的个体上沿着指向最好解的方向进行，既避免了在较差解上Hooke-Jeeves搜索的浪费，又避免了在最好解上Hooke-Jeeves搜索的停滞。Hooke-Jeeves搜索方法的终止参数是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x92_hanspub.png" xlink:type="simple"/></inline-formula>，当辅助步长<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x93_hanspub.png" xlink:type="simple"/></inline-formula>时，算法会自动跳出局部搜索循环。选取Hooke-Jeeves搜索得到的个体与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x94_hanspub.png" xlink:type="simple"/></inline-formula>中函数值较小的那个个体，从整体上把握种群的发展方向。</p></sec><sec id="s5_4"><title>3.4. 改进算法</title><p>我们提出的新算法称为基于Hooke-Jeeves的改进人工蜂群算法，简记为IHABC。算法的大体框架同HABC一致，主要有两个阶段：</p><p>第一阶段是全局搜索阶段，用人工蜂群算法ABC搜索较优质的解，采蜜蜂阶段改用公式(6)，跟随蜂阶段改用公式(8)，其它地方与ABC算法相同。</p><p>第二阶段是局部寻优阶段，每N<sub>C</sub>次循环调用一次Hooke-Jeeves方法对公式(9)得到的新解U进行局部寻优，对应的步长用公式(10)计算。接着进行如1.2节所述的两种移动：探测移动和模式移动，探测移动一次只考虑一个分量用以确定合适的寻优方向，而下一步的模式移动是为了在探测移动得到的方向上进行加速寻优。这两种移动交替进行不断重复直到开采阶段的终止条件满足，得到的结果记为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x95_hanspub.png" xlink:type="simple"/></inline-formula>。比较<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x96_hanspub.png" xlink:type="simple"/></inline-formula>与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x97_hanspub.png" xlink:type="simple"/></inline-formula>两者的目标函数值，目标函数值更小者替代原来的<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x98_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>搜索阶段和开采阶段重复进行直到终止条件满足，终止条件可以是最大函数计算次数、最大循环次数或者与理论最优值之间的差异很小等。为了表述更清晰，图4给出了IHABC算法(算法3)的整个过程。</p></sec></sec><sec id="s6"><title>4. 数值实验</title><p>本实验是在Windows XP系统，Intel Core13(2.4GHz CPU/2G)的环境下运行的，使用Matlab 2012b软件编写的程序。本节将ABC算法、HABC算法以及IHABC算法在30个基准函数 [<xref ref-type="bibr" rid="hanspub.19839-ref11">11</xref>] 上做了测试，比较了三个算法独立运行50次得到的基准函数最小值的平均值和标准差。</p><p>图4. IHABC主要步骤</p><sec id="s6_1"><title>4.1. 基准函数和参数设置</title><p>基准函数是从检验全局优化算法表现的函数库中选出的有代表性的函数，涵盖了不同的维数、不同的特点(单峰U/多峰M、可分S/不可分N)，基本信息见表1，具体的表达式详见参考文献 [<xref ref-type="bibr" rid="hanspub.19839-ref7">7</xref>] 和 [<xref ref-type="bibr" rid="hanspub.19839-ref11">11</xref>] 。由于多峰函数和不可分函数能较好地检测智能优化算法的优劣，我们选择了16个多峰不可分函数，10个单峰不可分函数，1个多峰可分函数，2个单峰可分函数。</p><p>为了便于比较，三个算法中ABC阶段的参数设置均取相同的值：种群数NP = 50；食物源数目<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x100_hanspub.png" xlink:type="simple"/></inline-formula>；limit = NS &#215; n，n指优化问题的维数；最大函数计算次数300000。HABC中参数设置见文献 [<xref ref-type="bibr" rid="hanspub.19839-ref8">8</xref>] ，IHABC中其它参数设置如下：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x101_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x102_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x103_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x104_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x105_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x106_hanspub.png" xlink:type="simple"/></inline-formula>。</p></sec><sec id="s6_2"><title>4.2. 实验结果</title><p>每个算法在基准函数C01-C30上独立运行50次得到函数最小值的平均值和标准差总结在表2中，较好的实验结果用黑色粗体标出。</p><p>在单峰可分Sphere (SP)函数C27上，新算法IHABC算法在50次实验中均取得了全局最小值0，标准差也为零，求解精度和算法的稳定性都超过了ABC和HABC算法；在单峰可分离Quartic (QU)函数</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> The information of benchmark function</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >Fun</th><th align="center" valign="middle" >Name</th><th align="center" valign="middle" >Dim</th><th align="center" valign="middle" >Search range</th><th align="center" valign="middle" >Min</th><th align="center" valign="middle" >feature</th></tr></thead><tr><td align="center" valign="middle" >C01</td><td align="center" valign="middle" >Beale (BE)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[−4.5,4.5]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C02</td><td align="center" valign="middle" >Goldstein and Price (GP)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[−2,2]</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C03</td><td align="center" valign="middle" >Matyas(MA)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C04</td><td align="center" valign="middle" >Shekel’s Foxholes (SF)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[−65.536,65.536]</td><td align="center" valign="middle" >0.998004</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C05</td><td align="center" valign="middle" >Shubert (SH)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >−186.7309</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C06</td><td align="center" valign="middle" >Hartman 3 <inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x107_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >[0,1]</td><td align="center" valign="middle" >−3.86278</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C07</td><td align="center" valign="middle" >Helical valley problem (HV)</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C08</td><td align="center" valign="middle" >Colville (CO)</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C09</td><td align="center" valign="middle" >Perm (PE)</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >[−4,4]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C10</td><td align="center" valign="middle" >Power Sum (PS)</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >[0,4]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C11</td><td align="center" valign="middle" >Shekel's Problem Family <inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x108_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >[0,10]</td><td align="center" valign="middle" >−10.53641</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C12</td><td align="center" valign="middle" >Fletcher-Powell (FP)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x109_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C13</td><td align="center" valign="middle" >Modified langerman (ML)</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >[0,10]</td><td align="center" valign="middle" >−0.965</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C14</td><td align="center" valign="middle" >Modified langerman (ML)</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[0,10]</td><td align="center" valign="middle" >−1.08094</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C15</td><td align="center" valign="middle" >Hartman 6 <inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x110_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >[0,1]</td><td align="center" valign="middle" >−3.32237</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C16</td><td align="center" valign="middle" >Modified langerman (ML)</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[0,10]</td><td align="center" valign="middle" >−0.965</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C17</td><td align="center" valign="middle" >Michalewicz (MI)</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x111_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >−4.687658</td><td align="center" valign="middle" >MS</td></tr><tr><td align="center" valign="middle" >C18</td><td align="center" valign="middle" >Whitley (WI)</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C19</td><td align="center" valign="middle" >Powell (PO)</td><td align="center" valign="middle" >24</td><td align="center" valign="middle" >[−4,5]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C20</td><td align="center" valign="middle" >Quartic function (QU)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−1.28,1.28]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >US</td></tr><tr><td align="center" valign="middle" >C21</td><td align="center" valign="middle" >Schwefel’s Problem 2.21 (S21)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C22</td><td align="center" valign="middle" >Weierstrass (WE)</td><td align="center" valign="middle" >60</td><td align="center" valign="middle" >[−0.5,0.5]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C23</td><td align="center" valign="middle" >Ackley (AC)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−32,32]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C24</td><td align="center" valign="middle" >Griewank (GR)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−600,600]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr><tr><td align="center" valign="middle" >C25</td><td align="center" valign="middle" >Rosenbrock (RO)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−30,30]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C26</td><td align="center" valign="middle" >Schwefel’s Ridge or Schwefel’s problem 1.2 (SR)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C27</td><td align="center" valign="middle" >Sphere (SP)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >US</td></tr><tr><td align="center" valign="middle" >C28</td><td align="center" valign="middle" >Schwefel’s problem 2.22 (S22)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C29</td><td align="center" valign="middle" >Zakharov (ZA)</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−5,10]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >UN</td></tr><tr><td align="center" valign="middle" >C30</td><td align="center" valign="middle" >Ackley (AC)</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >[−32,32]</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >MN</td></tr></tbody></table></table-wrap><p>表1. 函数基本信息</p><table-wrap-group id="2"><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> The results of ABC, HABC and IHABC on function C01-C3</title></caption><table-wrap id="2_1"><table><tbody><thead><tr><th align="center" valign="middle" >Fun</th><th align="center" valign="middle" >Dim</th><th align="center" valign="middle" ></th><th align="center" valign="middle" >ABC</th><th align="center" valign="middle" >HABC</th><th align="center" valign="middle" >IHABC</th></tr></thead><tr><td align="center" valign="middle" >C01</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >5.02262e−13 2.33684e−12</td><td align="center" valign="middle" >3.31089e−17 8.56149e−17</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C02</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >3.00001 4.50637e−05</td><td align="center" valign="middle" >3 2.54873e−15</td><td align="center" valign="middle" >3 2.29381e−14</td></tr><tr><td align="center" valign="middle" >C03</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >1.88342e−14 9.19506e−14</td><td align="center" valign="middle" >1.85964e−16 9.49337e−16</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C04</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.998004 0</td><td align="center" valign="middle" >0.998004 1.05206e−16</td><td align="center" valign="middle" >0.998004 1.18688e−16</td></tr><tr><td align="center" valign="middle" >C05</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−186.731 1.05556e−14</td><td align="center" valign="middle" >−186.731 1.46394e−14</td><td align="center" valign="middle" >−186.731 3.2482e−14</td></tr><tr><td align="center" valign="middle" >C06</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−3.86278 2.40284e−15</td><td align="center" valign="middle" >−3.86278 3.09825e−15</td><td align="center" valign="middle" >−3.86278 4.90882e−15</td></tr><tr><td align="center" valign="middle" >C07</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.002556 0.00243314</td><td align="center" valign="middle" >1.33466e−07 4.87096e−07</td><td align="center" valign="middle" >1.08073e−13 2.87356e−13</td></tr><tr><td align="center" valign="middle" >C08</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.169419 0.118691</td><td align="center" valign="middle" >1.4811e−06 3.50147e−06</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C09</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.0417135 0.0395745</td><td align="center" valign="middle" >0.0050728 0.018772</td><td align="center" valign="middle" >8.2582e−06 1.26267e−05</td></tr><tr><td align="center" valign="middle" >C10</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.00565621 0.00456532</td><td align="center" valign="middle" >0.000670047 0.00139635</td><td align="center" valign="middle" >4.95624e−07 6.84974e−07</td></tr><tr><td align="center" valign="middle" >C11</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−10.5364 9.32393e−15</td><td align="center" valign="middle" >−10.5364 5.663e−15</td><td align="center" valign="middle" >−10.5364 1.31248e−14</td></tr><tr><td align="center" valign="middle" >C12</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >2.54012e−19 2.20575e−19</td><td align="center" valign="middle" >0 0</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C13</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−0.964908 4.69291e−04</td><td align="center" valign="middle" >−0.965 3.22144e−13</td><td align="center" valign="middle" >−0.950218 0.0185058</td></tr><tr><td align="center" valign="middle" >C14</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−1.08094 1.64121e−06</td><td align="center" valign="middle" >−1.08094 1.56413e−15</td><td align="center" valign="middle" >−1.08094 1.34579e−15</td></tr><tr><td align="center" valign="middle" >C15</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−3.322 1.35504e−15</td><td align="center" valign="middle" >−3.322 2.2349e−16</td><td align="center" valign="middle" >−3.322 8.97196e−17</td></tr><tr><td align="center" valign="middle" >C16</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−0.533924 0.084979</td><td align="center" valign="middle" >−0.569837 0.143236</td><td align="center" valign="middle" >−0.6077 0.221634</td></tr><tr><td align="center" valign="middle" >C17</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >−4.68766 2.75367e−15</td><td align="center" valign="middle" >−4.68766 2.75367e−15</td><td align="center" valign="middle" >−4.68766 2.54399e−15</td></tr><tr><td align="center" valign="middle" >C18</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.374182 1.07672</td><td align="center" valign="middle" >0.0394587 0.19527</td><td align="center" valign="middle" >0.138105 0.345766</td></tr><tr><td align="center" valign="middle" >C19</td><td align="center" valign="middle" >24</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.00096315 0.00012072</td><td align="center" valign="middle" >6.18214e−08 9.73955e−08</td><td align="center" valign="middle" >2.29692e−64 1.62417e−63</td></tr><tr><td align="center" valign="middle" >C20</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.0370203 0.00797128</td><td align="center" valign="middle" >0.0351516 0.00822433</td><td align="center" valign="middle" >1.76447e−05 1.42544e−05</td></tr><tr><td align="center" valign="middle" >C21</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.0972994 0.0398698</td><td align="center" valign="middle" >3.39613e−05 1.48887e−05</td><td align="center" valign="middle" >7.06268e−29 4.9921e−28</td></tr><tr><td align="center" valign="middle" >C22</td><td align="center" valign="middle" >60</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >1.42109e−14 8.3449e−15</td><td align="center" valign="middle" >1.33582e−14 8.80708e−15</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C23</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >3.49942e−14 4.8119e−15</td><td align="center" valign="middle" >3.48166e−14 4.76106e−15</td><td align="center" valign="middle" >0 0</td></tr></tbody></table></table-wrap><table-wrap id="2_2"><table><tbody><thead><tr><th align="center" valign="middle" >C24</th><th align="center" valign="middle" >30</th><th align="center" valign="middle" >MeanVal StdVal</th><th align="center" valign="middle" >1.1168e−12 6.1165e−12</th><th align="center" valign="middle" >0 0</th><th align="center" valign="middle" >0 0</th></tr></thead><tr><td align="center" valign="middle" >C25</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >0.213231 0.472143</td><td align="center" valign="middle" >5.04318e−06 1.44344e−05</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C26</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >2180.6 1076.14</td><td align="center" valign="middle" >1.85287e−08 1.31017e−07</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C27</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >4.64308e−16 6.48251e−17</td><td align="center" valign="middle" >6.13319e−97 1.48311e−96</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C28</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >1.16608e−15 1.40688e−16</td><td align="center" valign="middle" >1.3805e−35 9.76164e−35</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C29</td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >172.588 30.6762</td><td align="center" valign="middle" >1.81761e−15 4.69437e−15</td><td align="center" valign="middle" >0 0</td></tr><tr><td align="center" valign="middle" >C30</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >MeanVal StdVal</td><td align="center" valign="middle" >2.39054e−11 9.57251e−12</td><td align="center" valign="middle" >1.79625e−13 2.66457e−14</td><td align="center" valign="middle" >0 0</td></tr></tbody></table></table-wrap></table-wrap-group><p>表2. ABC、HABC和IHABC算法在函数C01-C30上的结果</p><p>C20上，ABC和HABC的性能相当，其平均最优值为0.0370203和0.0351516，标准差为0.00797128和0.00822433，而IHABC的平均最优值为1.76447e−05，标准差为1.42544e−05，比ABC和HABC算法提高了3个数量级。多峰可分Michalewicz (MI)函数C17，取参数m = 10和维数n = 5时，它有5!个局部最优点，三种算法的平均最优值均达到全局最小值−4.68766，HABC和ABC算法的标准差均为2.75367e−15，IHABC的标准差为2.54399e−15，IHABC算法标准差最小。</p><p>对于单峰不可分Beale (BE)函数C01、Matyas (MA)函数C03、Colville (CO)函数C08、Rosenbrock (RO)函数C25、Schwefel’s Ridge (SR)函数C26、Schwefel’s problem 2.22 (S22)函数C28和Zakharov (ZA)函数C29，均无局部最小值，只有一个全局最小值，IHABC算法在50次试验中均找到了全局最小值0，标准差是0，寻优性能高于ABC和HABC算法。其中Colville函数在唯一最小值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x112_hanspub.png" xlink:type="simple"/></inline-formula>附近有一个鞍点，所以HABC算法的平均最优值为1.4811e−06，而ABC算法在50次试验中未能找到全局最小值，其平均最优函数值为0.169416，最好的一次寻优结果为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x113_hanspub.png" xlink:type="simple"/></inline-formula>，其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x114_hanspub.png" xlink:type="simple"/></inline-formula>；Rosenbrock函数是单模态的高维函数，变量间相互关联，其内部是一个长而狭窄，形如抛物线的平坦山谷地带，最小值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x115_hanspub.png" xlink:type="simple"/></inline-formula>位于其中，ABC算法很难收敛于全局最优值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x116_hanspub.png" xlink:type="simple"/></inline-formula>，ABC和HABC算法的50次实验的平均最优值分别为0.213231和5.04318e−06，ABC算法的求解精度比IHABC算法低。</p><p>对于单峰不可分函数Helical valley problem (HV) C07、Powell (PO)函数C19和Schwefel’s Problem 2.21 (S<sub>21</sub>)函数C21，多峰不可分函数Perm (PE) C09和Power Sum (PS) C10，IHABC算法的寻优精度和稳定性要优于HABC和ABC算法，HABC算法则优于ABC算法。</p><p>对于多峰不可分函数Shekel’s Foxholes (SF)函数C04、Shubert (SH)函数C05、Hartman 3 (H<sub>3,4</sub>)函数C06，Shekel’s Problem Family (S<sub>4,10</sub>)函数C11和Hartman 6 (H<sub>6</sub><sub>，4</sub>)函数C15，三种算法的平均最优值均能达到全局最小值，分别为0.998004、−186.731、−3.86278、−10.5364和−3.322；Goldstein and Price (GP)函数C02、Fletcher-Powell (FP)函数C12和Griewank (GR)函数C24，IHABC算法和HABC算法性能相当，平均最优值都取到了全局最小值，寻优性能和稳定性都超过了ABC算法；对于Weierstrass (WE)函数C22、Ackley (AC)函数C23 (n = 30维)和Ackley (AC)函数C30 (n = 100维)，HABC算法和ABC算法性能相当，IHABC算法优于IHABC和ABC，能够得到全局最小值0，标准差也为0，对于Ackley函数，30维和100维时IHABC算法的寻优结果一样，表明了该算法的稳健性。</p><p>对于多峰不可分函数Whitley (WI) C18，维数n = 10时，全局最小值点为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x117_hanspub.png" xlink:type="simple"/></inline-formula>，全局最小值为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-1540698x118_hanspub.png" xlink:type="simple"/></inline-formula>，ABC算法在50次实验中均找不到全局最小值；IHABC算法有43次找到全局最小值0，有7次找到局部最小值0.9865；HABC算法有47次找到全局最小值0，有2次寻优得到0.9865，还有1次找到的最优值为6.6613e−16，HABC在函数C18上寻优精度最高。</p><p>Modified Langerman函数C13，C14，C16是非对称的复杂多模态函数，其局部最优解个数未知且随机分布，随着维数的增加，搜索难度增大。当维数n = 2时，三种算法在50次实验中均取得了全局最小值−1.08094，IHABC算法的标准差最小，算法最稳定；当维数n = 5时，50次实验中ABC、HABC、IHABC算法的平均最优值分别为−0.964959，−0.963356和−0.954508，标准差分别为0.000142，0.008745和0.016397，50次实验中三种算法分别42次、48次和33次得到全局最小值−0.965，IHABC算法10次得到局部最小值−0.9398，ABC算法在n = 5时，性能最好；当维数n = 10时，ABC、HABC、IHABC算法的平均最优值分别为−0.533924、−0.569837和−0.6077，标准差分别为0.084979、0.143236和0.221634，50次实验中，ABC、HABC和IHABC算法分别有0、3和4次达到全局最小值−0.9605，分别有47、43和24次寻优得到局部最小值−0.5132，意味着该函数在多个点处取得局部极小值−0.5132，ABC算法另外三次的寻优结果为−0.8057，−0.8059和−0.9649，HABC算法还得到局部最优值−0.9080三次，−0.8060一次，IHABC算法得到局部最优值−0.2749四次，−0.4286三次，−0.4829和−0.9645各两次，−0.5164、−0.5168、−0.5170、−0.8019、−0.80306、−0.9585、−0.9614、−0.9637、−0.9640、−0.9641和−0.9644各一次。与ABC、HABC算法相比，IHABC算法的通用性和局部寻优能力更强，在得到全局最小值的同时，能搜索到更多的局部最优值。</p><p>总体来说，新算法IHABC的性能在23个函数上优于HABC算法，在5个函数上与HABC相当，在2个函数上略逊于HABC算法。实验结果证明了IHABC算法比HABC以及ABC算法在寻优精度上有了相当程度的提高。</p></sec></sec><sec id="s7"><title>5. 结论</title><p>基于Hooke-Jeeves的人工蜂群算法HABC，其全局搜索能力与局部寻优能力不均衡，局部寻优阶段初始解的选择易导致算法陷入局部最优，为解决这些问题本文提出基于Hooke-Jeeves的改进人工蜂群算法IHABC。新算法通过三个改进策略分别对蜂群的采蜜蜂更新公式、跟随蜂更新公式和局部寻优阶段的初始基点的选择以及局部寻优的步长进行了调整，最后将算法在30个测试函数上进行了数值实验。实验结果表明，新算法与HABC和ABC算法相比，在大部分测试函数上得到的全局最优解的精度更高，算法更稳定。</p></sec><sec id="s8"><title>基金项目</title><p>教育部人文社会科学青年基金项目(12YJCZH179)，江苏省大规模复杂系统数值模拟重点实验室开放基金项目(201601)。</p></sec><sec id="s9"><title>文章引用</title><p>孙越泓,丁亚英. 基于Hooke-Jeeves的改进人工蜂群算法 An Improved Artificial Bee Colony Algorithm Based on Hooke-Jeeves Method[J]. 计算机科学与应用, 2017, 07(02): 134-145. http://dx.doi.org/10.12677/CSA.2017.72017</p></sec><sec id="s10"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.19839-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Karaboga, D. and Basturk, B. (2008) On the Performance of Artificial Bee Colony (ABC) Algorithm. Applied Soft Computing, 8, 687-697. &lt;br&gt;https://doi.org/10.1016/j.asoc.2007.05.007</mixed-citation></ref><ref id="hanspub.19839-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Karaboga, D. and Akay, B. (2009) A Comparative Study of Artificial Bee Colony Algorithm. Applied Mathematics and Computation, 214, 108-132. &lt;br&gt;https://doi.org/10.1016/j.amc.2009.03.090</mixed-citation></ref><ref id="hanspub.19839-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Zhu, G.P. and Kwong, S. (2010) Gbest-Guided Artificial Bee Colony Algorithm for Numerical Function Optimization. Applied Mathematics and Computation, 217, 3166-3173. &lt;br&gt;https://doi.org/10.1016/j.amc.2010.08.049</mixed-citation></ref><ref id="hanspub.19839-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Urselmann, M., Barkmann, S., Sand, G., et al. (2011) A Memetic Algorithm for Global Optimization in Chemical Process Synthesis Problems. IEEE Transactions on Evolutionary Computation, 15, 659-683. 
&lt;br&gt;https://doi.org/10.1109/TEVC.2011.2150753</mixed-citation></ref><ref id="hanspub.19839-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Bansal, J.C., Sharma, H., Aryak, V., et al. (2013) Memetic Search in Artificial Bee Colony Algorithm. Soft Computing, 17, 1911-1928. &lt;br&gt;https://doi.org/10.1007/s00500-013-1032-8</mixed-citation></ref><ref id="hanspub.19839-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Gao, W.F., Liu, S.Y. and Huangl, L. (2013) A Novel Artificial Bee Colony Algorithm with Powell’s Method. Applied Soft Computing, 13, 3763-3775. &lt;br&gt;https://doi.org/10.1016/j.asoc.2013.05.012</mixed-citation></ref><ref id="hanspub.19839-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Kang, F., Li, J. and Ma, Z. (2011) Rosenbrock Artificial Bee Colony Algorithm for Accurate Global Optimization of Numerical Functions. Information Science, 181, 3508-3531. &lt;br&gt;https://doi.org/10.1016/j.ins.2011.04.024</mixed-citation></ref><ref id="hanspub.19839-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Kang, F., Li, J. and Li, H. (2013) Artificial Bee Colony Algorithm and Pattern Search Hybridized for Global Optimization. Applied Soft Computing, 13, 1781-1791. &lt;br&gt;https://doi.org/10.1016/j.asoc.2012.12.025</mixed-citation></ref><ref id="hanspub.19839-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Gao, W.F. and Liu, A.Y. (2012) A Modified Artificial Bee Colony Algorithm. Computers &amp; Operations Research, 39, 687-697. &lt;br&gt;https://doi.org/10.1016/j.cor.2011.06.007</mixed-citation></ref><ref id="hanspub.19839-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Banharnsakun, A. and Achalakul, T. (2011) The Best-So-Far Selection in Artificial Bee Colony Algorithm. Applied Soft Computing, 11, 2888-2901. &lt;br&gt;https://doi.org/10.1016/j.asoc.2010.11.025</mixed-citation></ref><ref id="hanspub.19839-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Chelouah, R. and Siarry, P. (2000) A Continuous Genetic Algorithm Designed for the Global Optimization of Multimodal Functions. Journal of Heuristics, 6, 191-213. &lt;br&gt;https://doi.org/10.1023/A:1009626110229</mixed-citation></ref></ref-list></back></article>