<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AAM</journal-id><journal-title-group><journal-title>Advances in Applied Mathematics</journal-title></journal-title-group><issn pub-type="epub">2324-7991</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AAM.2019.812235</article-id><article-id pub-id-type="publisher-id">AAM-33528</article-id><article-categories><subj-group subj-group-type="heading"><subject>AAM20191200000_56743977.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  常微分方程常用的数值算法及其应用
  Numerical Algorithms for Ordinary Differential Equations and Application
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>黄</surname><given-names>盛</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>姜</surname><given-names>紫惠</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>佳辉</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>迟</surname><given-names>祥</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>沈阳航空航天大学理学院，辽宁 沈阳</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>02</day><month>12</month><year>2019</year></pub-date><volume>08</volume><issue>12</issue><fpage>2045</fpage><lpage>2049</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  
    本文主要利用了MATLAB软件对常用的常微分方程数值解法编程实现，如欧拉法和经典的四阶龙格库塔算法，通过相应的数值算例的结果，分析了两种算法的优缺点。最后我们把算法应用到了一个具体的实例，分别用欧拉法和经典的四阶龙格库塔法进行求解并对计算结果做了比较。
    In this paper, we mainly use MATLAB software to program the numerical solution of ordinary differential equation, such as Euler method and classical fourth-order Runge Kutta algorithm. Through the results of corresponding numerical example, we analyze the advantages and disadvantages of these two algorithms. Finally, we apply those algorithms to a concrete example; we solve it and compare the results. 
  
 
</p></abstract><kwd-group><kwd>常微分方程，数值算法, Ordinary Differential Equations</kwd><kwd> Numerical Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>常微分方程常用的数值算法及其应用<sup> </sup></title><p>黄 盛，姜紫惠，李佳辉，迟祥</p><p>沈阳航空航天大学理学院，辽宁 沈阳</p><p>收稿日期：2019年11月23日；录用日期：2019年12月12日；发布日期：2019年12月19日</p><disp-formula id="hanspub.33528-formula40"><graphic xlink:href="//html.hanspub.org/file/18-2621091x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文主要利用了MATLAB软件对常用的常微分方程数值解法编程实现，如欧拉法和经典的四阶龙格库塔算法，通过相应的数值算例的结果，分析了两种算法的优缺点。最后我们把算法应用到了一个具体的实例，分别用欧拉法和经典的四阶龙格库塔法进行求解并对计算结果做了比较。</p><p>关键词 :常微分方程，数值算法</p><disp-formula id="hanspub.33528-formula41"><graphic xlink:href="//html.hanspub.org/file/18-2621091x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/18-2621091x7_hanspub.png" /> <img src="//html.hanspub.org/file/18-2621091x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 常用的数值算法</title><p>常微分方程的理论和方法不仅在自然科学领域中应用非常广泛，而且在社会科学的各个领域有着越来越多的研究。但是很多时候，我们都没办法求出常微分方程的解析解，因而需要用数值算法去求出相应的数值解。常微分方程一般所用的求解初值问题的数值解法简单来说分为两类：单步法和多步法 [<xref ref-type="bibr" rid="hanspub.33528-ref1">1</xref>] - [<xref ref-type="bibr" rid="hanspub.33528-ref6">6</xref>]。本文主要讨论了单步法中的两类方法。</p><p>考虑如下的初值问题：</p><disp-formula id="hanspub.33528-formula42"><graphic xlink:href="//html.hanspub.org/file/18-2621091x9_hanspub.png"  xlink:type="simple"/></disp-formula><p>数值算法一般是：取步长<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x10_hanspub.png" xlink:type="simple"/></inline-formula>，将<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x11_hanspub.png" xlink:type="simple"/></inline-formula>分成n等份，得到离散点<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x12_hanspub.png" xlink:type="simple"/></inline-formula>，进而求解<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x13_hanspub.png" xlink:type="simple"/></inline-formula>在这些离散点处的近似值<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x14_hanspub.png" xlink:type="simple"/></inline-formula>。</p><sec id="s3_1"><title>1.1. 算法介绍</title><p>欧拉法的迭代格式为：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x15_hanspub.png" xlink:type="simple"/></inline-formula>。在已知初值<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x16_hanspub.png" xlink:type="simple"/></inline-formula>的情况下，我们便可以依次推算出：</p><disp-formula id="hanspub.33528-formula43"><graphic xlink:href="//html.hanspub.org/file/18-2621091x17_hanspub.png"  xlink:type="simple"/></disp-formula><p>经典的四阶龙格库塔算法的迭代格式为：</p><disp-formula id="hanspub.33528-formula44"><graphic xlink:href="//html.hanspub.org/file/18-2621091x18_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3_2"><title>1.2. 数值算例</title><p>我们分别用欧拉法和四阶的龙格库塔算法，利用MATLAB软件编程来计算如下的初值问题：</p><disp-formula id="hanspub.33528-formula45"><graphic xlink:href="//html.hanspub.org/file/18-2621091x19_hanspub.png"  xlink:type="simple"/></disp-formula><p>得到结果如表1所示：</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Comparison of calculation result</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >离散点</th><th align="center" valign="middle" >欧拉算法近似解</th><th align="center" valign="middle" >四阶龙格库塔算法近似解</th><th align="center" valign="middle" >准确解</th></tr></thead><tr><td align="center" valign="middle" >0.1000</td><td align="center" valign="middle" >1.1000</td><td align="center" valign="middle" >1.0954</td><td align="center" valign="middle" >1.0954</td></tr><tr><td align="center" valign="middle" >0.2000</td><td align="center" valign="middle" >1.1918</td><td align="center" valign="middle" >1.1832</td><td align="center" valign="middle" >1.1832</td></tr><tr><td align="center" valign="middle" >0.3000</td><td align="center" valign="middle" >1.2774</td><td align="center" valign="middle" >1.2649</td><td align="center" valign="middle" >1.2649</td></tr><tr><td align="center" valign="middle" >0.4000</td><td align="center" valign="middle" >1.3582</td><td align="center" valign="middle" >1.3416</td><td align="center" valign="middle" >1.3416</td></tr><tr><td align="center" valign="middle" >0.5000</td><td align="center" valign="middle" >1.4351</td><td align="center" valign="middle" >1.4142</td><td align="center" valign="middle" >1.4142</td></tr><tr><td align="center" valign="middle" >0.6000</td><td align="center" valign="middle" >1.5090</td><td align="center" valign="middle" >1.4832</td><td align="center" valign="middle" >1.4832</td></tr><tr><td align="center" valign="middle" >0.7000</td><td align="center" valign="middle" >1.5803</td><td align="center" valign="middle" >1.5492</td><td align="center" valign="middle" >1.5492</td></tr><tr><td align="center" valign="middle" >0.8000</td><td align="center" valign="middle" >1.6498</td><td align="center" valign="middle" >1.6125</td><td align="center" valign="middle" >1.6125</td></tr><tr><td align="center" valign="middle" >0.9000</td><td align="center" valign="middle" >1.7178</td><td align="center" valign="middle" >1.6733</td><td align="center" valign="middle" >1.6733</td></tr><tr><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >1.7848</td><td align="center" valign="middle" >1.7321</td><td align="center" valign="middle" >1.7321</td></tr></tbody></table></table-wrap><p>表1. 计算结果对比表</p><p>从表1可以看出，四阶龙格库塔法在的精确度是要高于欧拉算法的，但是欧拉算法较四阶的龙格库塔算法来说，要更简单。</p></sec></sec><sec id="s4"><title>2. 算法的实际应用</title><p>在文献 [<xref ref-type="bibr" rid="hanspub.33528-ref7">7</xref>] 中，研究了三维的微生物连续发酵生产1,3丙二醇的微分方程动力系统如下：</p><disp-formula id="hanspub.33528-formula46"><graphic xlink:href="//html.hanspub.org/file/18-2621091x20_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x21_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x22_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x23_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>参数：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x24_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x25_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x26_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x27_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x28_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x29_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x30_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x31_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x32_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x33_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x34_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x35_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x36_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x37_hanspub.png" xlink:type="simple"/></inline-formula> (具体的参数意义可以参见相关文献)。</p><p>我们用欧拉法来求解该系统，建立迭代格式如下：</p><disp-formula id="hanspub.33528-formula47"><graphic xlink:href="//html.hanspub.org/file/18-2621091x38_hanspub.png"  xlink:type="simple"/></disp-formula><p>参数为：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x39_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x40_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x41_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x42_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/18-2621091x43_hanspub.png" xlink:type="simple"/></inline-formula>，步长h取0.01，计算结果如表2所示：</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Calculation results of Euler metho</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >T</th><th align="center" valign="middle" >162.42</th><th align="center" valign="middle" >163.28</th><th align="center" valign="middle" >164.15</th><th align="center" valign="middle" >165.08</th><th align="center" valign="middle" >166.22</th><th align="center" valign="middle" >166.88</th><th align="center" valign="middle" >167.88</th><th align="center" valign="middle" >169.05</th><th align="center" valign="middle" >170.38</th></tr></thead><tr><td align="center" valign="middle" >x<sub>1</sub></td><td align="center" valign="middle" >0.9400</td><td align="center" valign="middle" >0.9370</td><td align="center" valign="middle" >0.9336</td><td align="center" valign="middle" >0.9297</td><td align="center" valign="middle" >0.9245</td><td align="center" valign="middle" >0.9213</td><td align="center" valign="middle" >0.9164</td><td align="center" valign="middle" >0.9104</td><td align="center" valign="middle" >0.9035</td></tr><tr><td align="center" valign="middle" >x<sub>2</sub></td><td align="center" valign="middle" >864.330</td><td align="center" valign="middle" >859.839</td><td align="center" valign="middle" >856.306</td><td align="center" valign="middle" >853.451</td><td align="center" valign="middle" >851.002</td><td align="center" valign="middle" >850.015</td><td align="center" valign="middle" >849.009</td><td align="center" valign="middle" >848.439</td><td align="center" valign="middle" >848.403</td></tr><tr><td align="center" valign="middle" >x<sub>3</sub></td><td align="center" valign="middle" >138.600</td><td align="center" valign="middle" >143.346</td><td align="center" valign="middle" >147.187</td><td align="center" valign="middle" >150.363</td><td align="center" valign="middle" >153.222</td><td align="center" valign="middle" >154.453</td><td align="center" valign="middle" >155.837</td><td align="center" valign="middle" >156.860</td><td align="center" valign="middle" >157.422</td></tr></tbody></table></table-wrap><p>表2. 欧拉法计算结果</p><p>我们用四阶的龙格库塔算法来求解该系统，建立迭代格式如下：</p><disp-formula id="hanspub.33528-formula48"><graphic xlink:href="//html.hanspub.org/file/18-2621091x44_hanspub.png"  xlink:type="simple"/></disp-formula><p>核心代码如下：</p><disp-formula id="hanspub.33528-formula49"><graphic xlink:href="//html.hanspub.org/file/18-2621091x45_hanspub.png"  xlink:type="simple"/></disp-formula><p>计算结果如表3所示：</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Calculation results of fourth-order classical Runge Kutta algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >T</th><th align="center" valign="middle" >162.42</th><th align="center" valign="middle" >163.28</th><th align="center" valign="middle" >164.15</th><th align="center" valign="middle" >165.08</th><th align="center" valign="middle" >166.22</th><th align="center" valign="middle" >166.88</th><th align="center" valign="middle" >167.88</th><th align="center" valign="middle" >169.05</th><th align="center" valign="middle" >170.38</th></tr></thead><tr><td align="center" valign="middle" >x<sub>1</sub></td><td align="center" valign="middle" >0.9400</td><td align="center" valign="middle" >0.9371</td><td align="center" valign="middle" >0.9337</td><td align="center" valign="middle" >0.9297</td><td align="center" valign="middle" >0.9245</td><td align="center" valign="middle" >0.9214</td><td align="center" valign="middle" >0.9165</td><td align="center" valign="middle" >0.9105</td><td align="center" valign="middle" >0.9036</td></tr><tr><td align="center" valign="middle" >x<sub>2</sub></td><td align="center" valign="middle" >864.330</td><td align="center" valign="middle" >859.937</td><td align="center" valign="middle" >856.386</td><td align="center" valign="middle" >853.516</td><td align="center" valign="middle" >851.050</td><td align="center" valign="middle" >850.054</td><td align="center" valign="middle" >849.037</td><td align="center" valign="middle" >848.457</td><td align="center" valign="middle" >848.411</td></tr><tr><td align="center" valign="middle" >x<sub>3</sub></td><td align="center" valign="middle" >138.600</td><td align="center" valign="middle" >143.260</td><td align="center" valign="middle" >147.100</td><td align="center" valign="middle" >150.292</td><td align="center" valign="middle" >153.168</td><td align="center" valign="middle" >154.407</td><td align="center" valign="middle" >155.802</td><td align="center" valign="middle" >156.835</td><td align="center" valign="middle" >157.406</td></tr></tbody></table></table-wrap><p>表3. 四阶经典的龙格库塔算法的计算结果</p><p>从两组计算结果可以看出，欧拉法和经典的四阶龙格库塔算法都能够对该系统进行求解，两组数据相差不大。因为系统本身和实验数据都是带有误差的，而且该系统没有解析解，所以没有对两组数据的精确度作对比。</p></sec><sec id="s5"><title>3. 结论</title><p>本文主要研究了利用MATLAB软件对欧拉法和经典的四阶龙格库塔算法进行了编程并上机实现，通过数值算例的结果分析了两种数值算法的特点。最后，分别用欧拉算法和经典的龙格库塔算法求解了一个三阶的微分方程动力系统，从计算结果来看，两种方法都适合对该系统的求解。常微分方程的数值算法还有很多，以后会再讨论。</p></sec><sec id="s6"><title>基金项目</title><p>沈阳航空航天大学大学生创新创业训练项目，项目编号：201810143271。</p></sec><sec id="s7"><title>文章引用</title><p>黄 盛,姜紫惠,李佳辉,迟 祥. 常微分方程常用的数值算法及其应用Numerical Algorithms for Ordinary Differential Equations and Application[J]. 应用数学进展, 2019, 08(12): 2045-2049. https://doi.org/10.12677/AAM.2019.812235</p></sec><sec id="s8"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.33528-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">钟巍. 一种新的常微分方程初值问题数值解法[J]. 重庆文理学院学报(自然科学版), 2011(4): 15-18.</mixed-citation></ref><ref id="hanspub.33528-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">林爽, 张杰. 常微分方程初值问题的基本数值解法分析[J]. 海南师范大学学报(自然科学版), 2012, 25(2): 119-121.</mixed-citation></ref><ref id="hanspub.33528-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">霍晓程. 常微分方程数值解法的研究[J]. 佳木斯教育学院报, 2011(5): 167-167.</mixed-citation></ref><ref id="hanspub.33528-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">孙美玲. 常微分方程数值解法的Matlab计算与可视比较[J]. 高教学刊, 2016(19): 60-61.</mixed-citation></ref><ref id="hanspub.33528-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">余丽. 常微分方程数值解法的若干求解格式[J]. 鄂州大学学报, 2013(S1): 123-125.</mixed-citation></ref><ref id="hanspub.33528-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">孙燕新, 李娟. 关于几种常用一阶常微分方程数值解法的导出[J]. 常州工程学院报, 2010(6): 71-74.</mixed-citation></ref><ref id="hanspub.33528-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">李艳杰. 非线性时滞脉冲动力系统的辨识模型, 优化算法及应用[D]: [硕士学位论文]. 大连: 大连理工大学, 2005, 12.</mixed-citation></ref></ref-list></back></article>