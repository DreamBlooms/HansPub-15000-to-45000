<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2019.94079</article-id><article-id pub-id-type="publisher-id">CSA-29658</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20190400000_30979997.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于小批量梯度下降法的个性化推荐模型
  Personalized Recommendation Model Based on Mini-Batch Gradient Descent
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>毕</surname><given-names>小然</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>闫</surname><given-names>绍山</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>高</surname><given-names>迎</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>首都经济贸易大学，北京</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>27</day><month>03</month><year>2019</year></pub-date><volume>09</volume><issue>04</issue><fpage>695</fpage><lpage>702</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   隐语义模型(LFM)是推荐系统中应用比较广泛的模型之一。其核心思想是通过隐含特征联系用户兴趣和物品，得到用户对物品偏好关系的目标函数，然后通过随机梯度下降法求得最优解，从而个性化地对用户进行物品的推荐。但是计算过程中随机梯度下降法会造成目标函数值震荡的比较剧烈，准确度欠缺，所以提出对目标函数优化选择用小批量梯度下降法，建立基于小批量梯度下降法的个性化推荐模型，减少目标函数最优解的随机性，提高准确度，减少运行时间，从而达到提高个性化推荐质量的目的。实验数据采用Movielens数据集，Python作为工具，均方根误差(RMSE)、平均绝对误差(MAE)作为标准，将改进前后的算法结果做对比，验证基于小批量梯度下降法的个性化推荐模型能够得到更好的推荐效果。 Latent Factor Model (LFM) is one of the most widely used models in the recommendation system. The core idea is to connect users’ interests and items through implicit features, obtain the objective function of users’ interests relationship for items, and then obtain the optimal solution by Stochastic Gradient Descent, so as to make personalized recommendation for users. However, in the process of calculation, the stochastic gradient descent method will cause the value of the objective function to oscillate violently and the accuracy is insufficient, so we choose Mini-Batch Gradient Descent method to optimize the objective function, establish a model of personalized recommendation based on Mini-Batch Gradient Descent, reduce the randomness of the optimal solution of the objective function, and improve the accuracy and reduce the running time, so as to improve the quality of personalized recommendation. The experimental data adopted Movielens data set, Python as the tool, RMSE (root mean square error) and MAE (mean absolute error) as the standard, and compared the experimental results of several algorithms, verifying that the personalized recommendation model based on Mini-Batch Gradient Descent can get better recommendation effect. 
  
 
</p></abstract><kwd-group><kwd>推荐系统，隐语义模型，小批量梯度下降法，均方根误差，平均绝对误差, Recommendation System</kwd><kwd> Latent Factor Model</kwd><kwd> Mini-Batch Gradient Descent</kwd><kwd> RMSE</kwd><kwd> MAE</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于小批量梯度下降法的个性化推荐模型<sup> </sup></title><p>毕小然，闫绍山，高迎</p><p>首都经济贸易大学，北京</p><p><img src="//html.hanspub.org/file/5-1541327x1_hanspub.png" /></p><p>收稿日期：2019年3月25日；录用日期：2019年4月4日；发布日期：2019年4月11日</p><disp-formula id="hanspub.29658-formula34"><graphic xlink:href="//html.hanspub.org/file/5-1541327x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>隐语义模型(LFM)是推荐系统中应用比较广泛的模型之一。其核心思想是通过隐含特征联系用户兴趣和物品，得到用户对物品偏好关系的目标函数，然后通过随机梯度下降法求得最优解，从而个性化地对用户进行物品的推荐。但是计算过程中随机梯度下降法会造成目标函数值震荡的比较剧烈，准确度欠缺，所以提出对目标函数优化选择用小批量梯度下降法，建立基于小批量梯度下降法的个性化推荐模型，减少目标函数最优解的随机性，提高准确度，减少运行时间，从而达到提高个性化推荐质量的目的。实验数据采用Movielens数据集，Python作为工具，均方根误差(RMSE)、平均绝对误差(MAE)作为标准，将改进前后的算法结果做对比，验证基于小批量梯度下降法的个性化推荐模型能够得到更好的推荐效果。</p><p>关键词 :推荐系统，隐语义模型，小批量梯度下降法，均方根误差，平均绝对误差</p><disp-formula id="hanspub.29658-formula35"><graphic xlink:href="//html.hanspub.org/file/5-1541327x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/5-1541327x7_hanspub.png" /> <img src="//html.hanspub.org/file/5-1541327x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>在个性化推荐中，最传统的推荐算法之一是协同过滤算法，通过用户对物品评分的评分矩阵形式进行运算。但是随着数据的增加，一个用户未评价的物品要远远多于评价的物品，因此就出现了数据稀疏问题。为了让算法能有一个更精准更高效的结果，在协同过滤算法中引入奇异值分解算法SVD (Singular Value Decomposition)，其推荐精度相对比传统的协同过滤算法有了一定的提高。在Netflix大奖赛中，Simon Funk [<xref ref-type="bibr" rid="hanspub.29658-ref1">1</xref>] 对SVD方法进行了改进，被称为FunkSVD。主要过程是在SVD的目标函数中，使用随机梯度下降法使目标函数达到最优，后被称作是隐语义模型LFM (Latent Factor Model)。</p><p>隐语义模型在个性化推荐领域中应用非常广泛。顾威 [<xref ref-type="bibr" rid="hanspub.29658-ref2">2</xref>] 在音乐推荐系统的设计中使用了基于隐语义模型的推荐算法。张振领 [<xref ref-type="bibr" rid="hanspub.29658-ref3">3</xref>] 在基于情境感知的个性化推荐研究中，以隐语义模型为基础，结合情境信息、用户行为、时间因子来预测用户对物品的真实兴趣度。古振威 [<xref ref-type="bibr" rid="hanspub.29658-ref4">4</xref>] 在对人力资源推荐系统的研究中，提出了将隐语义模型与深度森林结合的算法来为用户提供更优质的人力资源推荐服务。肖迎元等人 [<xref ref-type="bibr" rid="hanspub.29658-ref5">5</xref>] 在研究社交网络好友推荐方法中，采用隐语义模型来挖掘用户潜在兴趣特征和用户交友潜在偏好特征。</p><p>在隐语义模型纵向深入发展中，荆羽纯等人 [<xref ref-type="bibr" rid="hanspub.29658-ref6">6</xref>] 提出了一种全新的基于学习自动机的矩阵训练算法。利用连续型学习自动机代替原有的梯度下降算法对大型稀疏矩阵的奇异值进行分解计算，提高了后续预测算法的精确度。但是基于学习自动机的推荐算法是在样本数较少的环境中，相比原算法有更精确的预测。王尔昕 [<xref ref-type="bibr" rid="hanspub.29658-ref7">7</xref>] 设计了基于隐语义模型和聚类算法的优化算法，对传统算法中存在的数据稀疏性、时效性和冷启动等问题进行了改善。但使用聚类算法对用户进行聚类时，会将用户划分到固定的一类中来降低数据稀疏性，但是对于一些处于类别边界的用户，将他们划分的类别不一定能代表他们的特征，这导致在一些聚类数目下算法的准确度会降低甚至不如传统算法。鲁权等人 [<xref ref-type="bibr" rid="hanspub.29658-ref8">8</xref>] 提出融合隐语义模型与邻域模型的推荐算法，将预测的精确度提高，该方法针对隐式数据有明显的效果。王建芳等人 [<xref ref-type="bibr" rid="hanspub.29658-ref9">9</xref>] 提出将奇异值分解技术与带偏置概率矩阵分解相结合的推荐方法，缓解由数据高维稀疏性带来的推荐质量不高的问题。王科强 [<xref ref-type="bibr" rid="hanspub.29658-ref10">10</xref>] 提出基于加权局部矩阵分解的商品推荐，该模型设计了高效的子矩阵选择算法和改进的交替最小二乘参数优化算法，对用户和商品的局部特性建模，同时缓解了数据稀疏性问题。</p><p>在对目标函数求解的过程中。孙勇等人 [<xref ref-type="bibr" rid="hanspub.29658-ref11">11</xref>] 在面向大规模服务性能预测的在线学习方法中，提出了一种基于小批量在线学习的服务性能预测方法，使大规模服务预测算法的时效性问题得到了有效的提升。Jing Li等人 [<xref ref-type="bibr" rid="hanspub.29658-ref12">12</xref>] 为解决大规模高光谱数据的分离问题中的重构误差最小化，他们引入基于小批量梯度下降法来解决这个问题，既降低了计算成本也对算法性能进行了优化。毛勇华等人 [<xref ref-type="bibr" rid="hanspub.29658-ref13">13</xref>] 在用BP微调的深度学习贪婪层训练方法中，将BP算法中三种梯度下降方法的实验结果进行了对比与分析，实验结果表明在静态离线学习系统中，采用随机小批量梯度下降可以得到最优解。</p><p>根据以上文献，可以得知小批量梯度下降法对大规模数据的处理，能够减少时间的运行，优化推荐结果。所以本文提出在隐语义模型的基础上进行算法模型优化，通过改进目标函数的优化过程来进一步提高算法准确度，即将随机梯度下降法，用同属于机器学习领域的小批量梯度下降法来代替。</p></sec><sec id="s4"><title>2. 隐语义模型</title><p>隐语义模型LFM [<xref ref-type="bibr" rid="hanspub.29658-ref14">14</xref>] 的基本思想是通过引入隐含特征，将用户-物品的评分矩阵R降阶为两个矩阵的乘积，P表示用户对不同隐含特征的兴趣度，Q表示物品与不同隐含特征之间的关联程度，这样可以将原评分矩阵的空缺评分数据补全，实现用户对各个商品不同兴趣度的预测。由于评分矩阵非常庞大，通常采用随机梯度下降法，通过多次迭代来优化降阶矩阵P、Q的参数，从而得到最优解。</p><p>用户U对物品I的评分矩阵R计算公式如下：</p><p>R ^ U I = P U Q I = ∑ k = 1 k P U K Q K I (1)</p><p>是用户U对物品I的兴趣度，K代表包含的隐含特征的数量。P<sub>U</sub>和Q<sub>I</sub>是模型参数的特征向量，参数P<sub>U</sub>和Q<sub>I</sub>可以使用损失函数来进行训练。</p><disp-formula id="hanspub.29658-formula36"><label>(2)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/5-1541327x11_hanspub.png"  xlink:type="simple"/></disp-formula><p>上式中的 ∑ ( U , I ) ∈ K ( R U I − R ^ U I ) 2 代表真实评分减去预测评分的误差平方和，越小越好。 λ ‖ p U ‖ 2 + λ ‖ Q I ‖ 2 是用来防止过拟合的正则化项， λ 是正规则化因子，需要根据特定应用环境反复实验得到。</p><p>接下来通过随机梯度下降算法来优化损失函数，首先求参数P<sub>UK</sub>和Q<sub>KI</sub>的偏导数来确定梯度下降方向：</p><p>∂ c ∂ P U K = − 2 ( R U I − R ^ U I ) Q K I + 2 λ P U K (3)</p><p>∂ c ∂ Q K I = − 2 ( R U I − R ^ U I ) P U K + 2 λ Q K I (4)</p><p>其次通过不断的迭代计算来优化参数，直至参数收敛：</p><p>P U K = P U K + α ( ( R U I − R ^ U I ) Q K I − λ P U K ) (5)</p><p>Q K I = Q K I + α ( ( R U I − R ^ U I ) P U K − λ Q K I ) (6)</p><p>α是学习速率，用来控制每次迭代的步长。</p></sec><sec id="s5"><title>3. 加入偏置项的隐语义模型</title><p>在实际情况中，用户之间打分的差异或者项目本身质量的差异，会导致评分系统中分数差异较大。所以通过在隐语义模型中加入偏置项 [<xref ref-type="bibr" rid="hanspub.29658-ref15">15</xref>] 来消除这一差异：</p><p>(7)</p><p>其中， μ 是全局平均值， b u 是用户偏置项， b i 是项目偏置项。</p><p>预测评分被定义为：</p><p>R ^ U I = μ + b u + b i + P U Q I (8)</p><p>目标函数为：</p><p>C = ∑ ( U , I ) ∈ K ( R U I − ( μ + b u + b i + P U Q I ) ) 2 + λ ‖ p U ‖ 2 + λ ‖ Q I ‖ 2 + λ ‖ b u ‖ 2 + λ ‖ b i ‖ 2 (9)</p><p>同理，求出四个参数的偏导数，然后更新参数为：</p><p>Q K I = Q K I + α ( ( R U I − R ^ U I ) P U K − λ Q K I ) (10)</p><p>P U K = P U K + α ( ( R U I − R ^ U I ) Q K I − λ P U K ) (11)</p><p>b u = b u + α ( ( R U I − R ^ U I ) − λ b u ) (12)</p><p>b i = b i + α ( ( R U I − R ^ U I ) − λ b i ) (13)</p></sec><sec id="s6"><title>4. 小批量梯度下降法</title><p>下降梯度法分为随机下降梯度法、批量下降梯度法和小批量梯度下降法。</p><p>随机梯度下降法(Stochastic Gradient Descent)是对于每个数据都计算损失函数，然后求梯度更新参数。此方法有较快的计算速度，但是收敛性能较差，可能会在最优点附近左右摇摆，无法得到最优解。</p><p>批量下降梯度法(Batch Gradient Descent)是遍历所有数据后算一次损失函数，然后求解梯度更新参数。此方法可以得到全局最优解，但是每次更新参数时，都要把所有数据看一遍，导致了计算速度慢，计算量大。</p><p>为了克服两种方法的缺点，将两种办法进行了融合提出了小批量梯度下降法(Mini-Batch Gradient Decent)，这种方法在数据中每次随机抽取一小批数据，这样通过一批数据共同决定梯度方向，下降起来更加稳定，降低了收敛波动性。同时也减轻计算量，减少运行时间。</p></sec><sec id="s7"><title>5. 基于小批量梯度下降法的个性化推荐模型</title><p>在增加偏置项隐语义模型的基础上，将小批量梯度下降法融入其中。其主要步骤是：将随机选择一定批量的数据，通过这一批量数据来共同决定步长的梯度方向，以减少了随机性与震荡性。</p><p>度量标准采用均方根误差RMSE (root-mean-square error)以及平均绝对误差MAE (Mean Absolute Deviation)。假设预测的用户评分矩阵为 R ^ U I ，对应的实际用户评分矩阵为 R U I ，N为用户进行打分物品的个数。RMSE计算公式：</p><p>RMSE = ∑ ​ ( R U I − R ^ U I ) 2 N</p><p>MAE计算公式：</p><p>MAE = ∑ ​ | R U I − R ^ U I | N</p><p>两个度量值越小，代表预测的精度越准确。</p><p>主要算法流程如下：</p><p>输入：迭代步长steps，学习速率alpha，正规则化因子Lambda，批量大小batch_size</p><p>输出：RMSE，MAE</p><p>a) 定义模型model：</p><p>定义全局偏置变量bias_global</p><p>定义用户的偏好bias_user</p><p>定义电影的偏好bias_item</p><p>定义用户和电影一个批量的偏好batch_bias_user, batch_bias_item</p><p>定义用户和电影的权重w_user, w_ite</p><p>给定批处理的用户和项的权重嵌入batch_w_user, batch_ w_ite</p><p>b) 定义损失函数cost：</p><p>数据损失(data loss)= tf.nn.l2_loss(tf.subtract(真实值，预测值))</p><p>正则化损失(正则化项*L2惩罚方式)= tf.multiply(regularizer , penalty)</p><p>损失函数(cost) = 数据损失(data loss) + 正则化损失(正则化项*L2惩罚方式)</p><p>使用梯度下降训练train_loss = tf. train. Gradient Descent Optimizer (学习速率learning_rate= alpha).minimize (损失函数cost)</p><p>c) 设置两个迭代器生成随机批次，用于训练和测试</p><p>d) 计算均方根误差RMSE = np.sqrt(np.mean(np.power((真实值-预测值)，2)))计算平均绝对误差MAE = abs(np.mean (真实值-预测值))</p></sec><sec id="s8"><title>6. 程序及结果</title><p>本次试验将采用Movielens ml-1m数据集(百万)，其包含用户、电影、以及用户对电影的评分。数据集详细信息如表1所示：</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Movielens ml-1m dataset overvie</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >数据集</th><th align="center" valign="middle" >用户数目</th><th align="center" valign="middle" >电影数目</th><th align="center" valign="middle" >评分信息数目</th></tr></thead><tr><td align="center" valign="middle" >Movies-100k</td><td align="center" valign="middle" >3900</td><td align="center" valign="middle" >6040</td><td align="center" valign="middle" >1,000,000</td></tr></tbody></table></table-wrap><p>表1. Movielens ml-1m数据集概况</p><p>Spyder (Python3.6)作为工具，来进行运行测试。将数据集以8:2的比例划分训练数据集和测试数据集。将隐语义模型，增加偏置项隐语义模型以及基于小批量梯度下降法的个性化推荐模型三种方法运行结果进行对比。三种方法训练过程如图1、图2、图3所示，横坐标为迭代步数(30次)，纵坐标为RMSE和MAE的值。</p><p>图1. 隐语义模型</p><p>图2. 增加偏置项隐语义模型</p><p>图3. 基于小批量梯度下降法的个性化推荐模型</p><p>三种模型实验结果如表2所示：</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Experimental results of the three models</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >10万数据集</th><th align="center" valign="middle" >隐语义模型LFM Α = 0.05</th><th align="center" valign="middle" >增加偏置项隐语义模型 Α = 0.05</th><th align="center" valign="middle" >基于小批量梯度下降法的个性化推荐模型 Α = 0.0018</th></tr></thead><tr><td align="center" valign="middle" >RMSE</td><td align="center" valign="middle" >0.956</td><td align="center" valign="middle" >0.920</td><td align="center" valign="middle" >0.903</td></tr><tr><td align="center" valign="middle" >MAE</td><td align="center" valign="middle" >0.782</td><td align="center" valign="middle" >0.728</td><td align="center" valign="middle" >0.714</td></tr><tr><td align="center" valign="middle" >Time</td><td align="center" valign="middle" >519.53 secs</td><td align="center" valign="middle" >569.47 secs</td><td align="center" valign="middle" >20.41 secs</td></tr></tbody></table></table-wrap><p>表2. 三种模型实验结果</p><p>通过图片可以看出三种方法其训练过程都逐渐趋于收敛。在实验结果中，可以看出每种方法求得最优解的α参数都不同，这是一个需要根据实验环境不断调整的重要参数，如果α参数设置不适当，很有可能会导致出现Nan值等问题。对比三种方法的RMSE、MAE值，基于小批量梯度下降法个性化推荐模型要低于前两者，说明此模型的精确度是优于前两者。同时三种方法在运行时间上有着鲜明的对比，在百万数据集的运行中，传统的隐语义模型需要约519秒的时间，增加偏置项隐语义模型由于增加了两个参数，虽然精度提高了，但是运行时间也增加了，需要约569秒的时间。而基于小批量梯度下降法个性化推荐模型的运行时间大幅度减少，只需要约20秒，平均每次循环只需要0.6秒，大大提高了运行效率，节省了时间。</p><p>基于小批量梯度下降法的推荐预测模型涉及的另一个重要参数便是批量的大小batch size，设置合理的批量参数可以提高算法的性能效率，通常会设置2的幂数 [<xref ref-type="bibr" rid="hanspub.29658-ref16">16</xref>] 来迎合cpu gpu的内存要求，从而获得最佳的训练稳定性和较高的运行速率。设置不同大小的批量规模进行实验，对比结果见表3：</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Experimental results of operation in different batch sizes</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >基于小批量梯度下 降法的预测模型</th><th align="center" valign="middle" >batch size = 64 (α = 0.0015)</th><th align="center" valign="middle" >batch size = 128 (α = 0.0013)</th><th align="center" valign="middle" >batch size = 512 (α = 0.0016)</th><th align="center" valign="middle" >batch size = 1024 (α = 0.0018)</th><th align="center" valign="middle" >batch size = 2048 (α = 0.0001)</th></tr></thead><tr><td align="center" valign="middle" >RMSE</td><td align="center" valign="middle" >0.930</td><td align="center" valign="middle" >0.913</td><td align="center" valign="middle" >0.909</td><td align="center" valign="middle" >0.903</td><td align="center" valign="middle" >0.941</td></tr><tr><td align="center" valign="middle" >MAE</td><td align="center" valign="middle" >0.742</td><td align="center" valign="middle" >0.725</td><td align="center" valign="middle" >0.718</td><td align="center" valign="middle" >0.714</td><td align="center" valign="middle" >0.753</td></tr><tr><td align="center" valign="middle" >Time</td><td align="center" valign="middle" >182.55secs</td><td align="center" valign="middle" >90.83 secs</td><td align="center" valign="middle" >48.74 secs</td><td align="center" valign="middle" >20.41 secs</td><td align="center" valign="middle" >14.33 secs</td></tr></tbody></table></table-wrap><p>表3. 不同批量规模运行实验结果</p><p>由实验结果可以看出，当批量设置较小batch size = 64或者过大batch size = 2048时，精确度结果都不尽人意。当batch size = 1024时，得到RMSE = 0.903，MAE = 0.714的最优值。由此可知只有选择了合理批量规模，才会使RMSE和MAE值达到最低，得到最优推荐精度。而对于基于小批量梯度下降法的个性化推荐模型的批量设置，应结合数据的规模以及设备的计算能力，通过多次试验，来选择合理的样本批量。</p><p>在运行时间中可以看出，批量设置的越大，运行时间越短。所以验证了在大规模数据下，和随机梯度下降相比，使用小批量(mini-batch)梯度下降方法的计算效率更高，减少很多运行时间，可以帮助快速训练模型。</p></sec><sec id="s9"><title>7. 结论</title><p>在隐语义模型中，针对随机梯度下降法会造成目标函数震荡、准确度欠缺等问题，选择用小批量梯度下降法对目标函数进行优化，提出基于小批量梯度下降法的个性化推荐模型，该模型通过批量数据共同决定步长的梯度方向，减少了目标函数最优解的随机性与震荡性，提高准确度，同时缩短了大量运行时间。但是，如何有效快速地找到合理的超参数批量大小以及学习速率仍值得继续研究。</p></sec><sec id="s10"><title>基金项目</title><p>北京市社会科学基金项目“‘互联网+’环境下北京公共信息流动机制及协同获取模式研究”(No. 16SRB021)。</p></sec><sec id="s11"><title>文章引用</title><p>毕小然,闫绍山,高 迎. 基于小批量梯度下降法的个性化推荐模型Personalized Recommendation Model Based on Mini-Batch Gradient Descent[J]. 计算机科学与应用, 2019, 09(04): 695-702. https://doi.org/10.12677/CSA.2019.94079</p></sec><sec id="s12"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.29658-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Netflix Update: Try This at Home. http://sifter.org/simon/journal/20061211.html</mixed-citation></ref><ref id="hanspub.29658-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">顾威. 基于Spark的音乐推荐系统的设计与实现[D]: [硕士学位论文]. 哈尔滨: 哈尔滨工业大学, 2018.</mixed-citation></ref><ref id="hanspub.29658-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">张振领. 基于情境感知的个性化推荐研究[D]. 天津: 天津理工大学, 2018.</mixed-citation></ref><ref id="hanspub.29658-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">古振威. 基于隐语义模型与深度森林的人力资源推荐算法[D]. 广州: 华南理工大学, 2018.</mixed-citation></ref><ref id="hanspub.29658-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">肖迎元, 张红玉. 基于用户潜在特征的社交网络好友推荐方法[J]. 计算机科学, 2018, 45(3): 220-224+254.</mixed-citation></ref><ref id="hanspub.29658-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">荆羽纯, 葛昊, 江文, 王伊凡. 一种基于学习自动机的推荐算法改进[J]. 计算机应用研究, 2016, 33(1): 32-34+41.</mixed-citation></ref><ref id="hanspub.29658-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Wang, E., Yao, W. and Wang, D. (2017) Collaborative Filtering Recommendation Algorithm Optimization Based on Latent Factor Model Clustering. 13th Interna-tional Conference on Natural Computation, Fuzzy Systems and Knowledge Discovery, Guilin, 29-31 July 2017, 1715-1719.</mixed-citation></ref><ref id="hanspub.29658-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">鲁权, 王如龙, 张锦, 丁怡. 融合邻域模型与隐语义模型的推荐算法[J]. 计算机工程与应用, 2013, 49(19): 100-103+134.</mixed-citation></ref><ref id="hanspub.29658-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">王建芳, 张朋飞, 刘永利. 基于改进带偏置概率矩阵分解算法的研究[J]. 计算机应用研究, 2017, 34(5): 1397-1400+1414.</mixed-citation></ref><ref id="hanspub.29658-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">王科强. 基于矩阵分解的个性化推荐系统[D]: [博士学位论文]. 上海: 华东师范大学, 2017.</mixed-citation></ref><ref id="hanspub.29658-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">孙勇, 谭文安, 谢娜, 蒋文明. 面向大规模服务性能预测的在线学习方法[J]. 计算机科学与探索, 2017, 11(12): 1922-1930.</mixed-citation></ref><ref id="hanspub.29658-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Li, J., Li, X. and Zhao, L. (2017) Unmixing of Large-Scale Hyperspectral Data Based on Projected Mini-Batch Gradient Descent. International Journal of Wave-lets, Multiresolution and Information Processing, 15, Article ID: 1750059.  
&lt;br&gt;https://doi.org/10.1142/S021969131750059X</mixed-citation></ref><ref id="hanspub.29658-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">毛勇华, 桂小林, 李前, 贺兴时. 深度学习应用技术研究[J]. 计算机应用研究, 2016, 33(11): 3201-3205.</mixed-citation></ref><ref id="hanspub.29658-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Yang, K., Liu, S., Liu, T. and Wang, X. (2016) Automatic Clustering Algorithm for Movie Recommendation Based on LFM Model. International Conference on Electronic Information Technology and Intellectualization, Guangzhou, 18-19 June 2016, 657-663.</mixed-citation></ref><ref id="hanspub.29658-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Koren, Y., Bell, R. and Volinsky, C. (2009) Matrix Factorization Techniques for Rec-ommender Systems. Computer, 42, 30-37. &lt;br&gt;https://doi.org/10.1109/MC.2009.263</mixed-citation></ref><ref id="hanspub.29658-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Masters, D. and Luschi, C. (2018) Revis-iting Small Batch Training for Deep Neural Networks.</mixed-citation></ref></ref-list></back></article>