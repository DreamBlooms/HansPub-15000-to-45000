<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2020.91007</article-id><article-id pub-id-type="publisher-id">SEA-34305</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20200100000_48898434.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  结合有序边表法和径向基函数的点云孔洞修补
  Point Cloud Hole Repair Combining Ordered Edge List Method and Radial Basis Function
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>华</surname><given-names>顺刚</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>晓帅</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>大连理工大学机械工程学院，辽宁 大连</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>06</day><month>01</month><year>2020</year></pub-date><volume>09</volume><issue>01</issue><fpage>56</fpage><lpage>61</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  为提高三维点云模型表面的完整性，提出了一种结合有序边表法和径向基函数的点云孔洞修补方法。先从三角形网格中提取出边界点，将边界点投影到二维平面上，用有序边表法向孔洞中添加填充点并对其进行三角剖分，将填充点的坐标映射回三维空间，然后提取约束点并确定点的法向量，建立径向基函数，对添加的填充点逐层进行调整。实验结果表明，该算法对于孔洞具有很好的填充效果，填充点在空间分布均匀，与原有孔洞边界连接光滑，可以较精确地恢复原有模型的形态特征。
   In order to improve the surface integrity of the 3D point cloud model, a point cloud hole repair method based on ordered edge list method and radial basis function is proposed. Boundary points are first extracted from the triangular mesh, the boundary points are projected onto a two-dimensional plane, and filled points are added to the hole using the ordered edge list method and triangulated, and the coordinates of the filled points are mapped back to three-dimensional space. Then, the constraint points are extracted and the normal vector of the points is determined, a radial basis function is established, and the added filling points are adjusted layer by layer. The experimental results show that the algorithm has a very good filling effect on the holes. The filling points are evenly distributed in space and connected smoothly to the original hole boundary, which can accurately restore the morphological characteristics of the original model.
 
</p></abstract><kwd-group><kwd>孔洞修补，三角剖分，有序边表法，径向基函数, Hole Repair</kwd><kwd> Triangulation</kwd><kwd> Ordered Edge List Method</kwd><kwd> Radial Basis Function</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>结合有序边表法和径向基函数的点云孔洞修补<sup> </sup></title><p>华顺刚，张晓帅</p><p>大连理工大学机械工程学院，辽宁 大连</p><p>收稿日期：2020年2月3日；录用日期：2020年2月18日；发布日期：2020年2月25日</p><disp-formula id="hanspub.34305-formula66"><graphic xlink:href="//html.hanspub.org/file/7-2690419x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>为提高三维点云模型表面的完整性，提出了一种结合有序边表法和径向基函数的点云孔洞修补方法。先从三角形网格中提取出边界点，将边界点投影到二维平面上，用有序边表法向孔洞中添加填充点并对其进行三角剖分，将填充点的坐标映射回三维空间，然后提取约束点并确定点的法向量，建立径向基函数，对添加的填充点逐层进行调整。实验结果表明，该算法对于孔洞具有很好的填充效果，填充点在空间分布均匀，与原有孔洞边界连接光滑，可以较精确地恢复原有模型的形态特征。</p><p>关键词 :孔洞修补，三角剖分，有序边表法，径向基函数</p><disp-formula id="hanspub.34305-formula67"><graphic xlink:href="//html.hanspub.org/file/7-2690419x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/7-2690419x7_hanspub.png" /> <img src="//html.hanspub.org/file/7-2690419x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>在使用激光扫描仪采集点云数据的过程中，由于模型残缺、视线死角等原因，会导致局部数据缺失，使生成的三维模型表面不完整，存在孔洞。点云的空洞修补是根据孔洞附近点的数据信息，通过填充算法生成新点对孔洞进行填充，恢复物体模型的原始表面形状。点云孔洞修补技术已经被广泛应用于制造业、文物保护以及地形测量等领域 [<xref ref-type="bibr" rid="hanspub.34305-ref1">1</xref>]。</p><p>现有的孔洞修补算法主要有Centin M和李月雯等人 [<xref ref-type="bibr" rid="hanspub.34305-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.34305-ref3">3</xref>] 提出的泊松法、Liu和Gai等人 [<xref ref-type="bibr" rid="hanspub.34305-ref4">4</xref>] [<xref ref-type="bibr" rid="hanspub.34305-ref5">5</xref>] 提出的径向基函数法、刘震和Wang等人 [<xref ref-type="bibr" rid="hanspub.34305-ref6">6</xref>] [<xref ref-type="bibr" rid="hanspub.34305-ref7">7</xref>] 提出的特征线修补法、Wang 和刘许等人 [<xref ref-type="bibr" rid="hanspub.34305-ref8">8</xref>] [<xref ref-type="bibr" rid="hanspub.34305-ref9">9</xref>] 提出的移动最小二乘法等。</p><p>本文提出一种结合有序边表法和径向基函数的点云孔洞修补方法。用有序边表法对孔洞进行初步填充，用径向基函数分层调整填充点的位置，减少了填充时间，使点的分布更加均匀，提高了填充后网格的质量。</p></sec><sec id="s4"><title>2. 孔洞的识别及填充</title><sec id="s4_1"><title>2.1. 孔洞边界的提取</title><p>在对三维点云进行填充之前要先获取点云孔洞的边界。在三角形网格内部中，每条边都参与组成两个三角形，而位于边界处的边只参与组成一个三角形，所以应先遍历已生成的所有边和三角形，将只属于一个三角形的边界边提取出来，将边界边首尾相接形成闭环，就得到孔洞的边界，如图1所示。</p><p>图1. 孔洞的实例</p><p>求得边界点集后，需要利用点集拟合一个二维平面，将空间点集投影到该平面上。本文采用最小二乘法来进行平面拟合。设其平面方程为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x10_hanspub.png" xlink:type="simple"/></inline-formula>，利用最小二乘法可以求解出平面参数。</p></sec><sec id="s4_2"><title>2.2. 有序边表法填充孔洞</title><p>将孔洞边界投影到二维平面后，需要按照一定的密度向边界多边形内添加填充点，本文采用有序边表法实现孔洞的快速填充，如图2所示。具体步骤如下：</p><p>Step1：将多边形的所有边按照其上端点的y坐标递增的顺序进行排序，并放入边界边链表中，同时建立一个空的活性边链表。</p><p>Step2：建立一条与多边形最低点相交的水平线，称之为扫描线，其纵坐标大小标记为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x11_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>Step3：将扫描线沿y轴上升一段距离d (计算方法见2.2)，将活性边链表中上端点y坐标小于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x12_hanspub.png" xlink:type="simple"/></inline-formula>的边删除，同时将边界边链表中下端点y坐标小于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x13_hanspub.png" xlink:type="simple"/></inline-formula>且上端点y坐标大于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x14_hanspub.png" xlink:type="simple"/></inline-formula>的边提取出来加入到活性边链表中。</p><p>Step4：计算扫描线与活性边链表各边的交点，在扫描线上从左侧开始按照距离d取点作为填充点，且填充点与右侧交点距离应大于等于d/2。</p><p>Step5：重复执行Step3、Step4，直至活性边链表为空。</p><p>图2. 有序边表法填充多边形</p></sec><sec id="s4_3"><title>2.3. Delaunay三角剖分生成网格</title><p>孔洞填充完成后，需要用Delaunay三角剖分算法生成三角形网格，如图3所示，具体步骤为：</p><p>Step1：建立一个三角形，将所有的点包围在其中，称之为超级三角形；同时把散点按横坐标的大小进行排序。</p><p>Step2：从点集取出一个散点，在三角形链表中找出外接圆包含该点的三角形，称为该点的影响三角形。 删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，完成一个点在Delaunay三角形链表中的插入。</p><p>Step3：循环执行上一步，直到所有散点插入完毕；删除与超级三角形顶点有关的所有三角形。</p><p>图3. 由点云生成网格模型</p></sec></sec><sec id="s5"><title>3. 径向基函数调整填充点的位置</title><sec id="s5_1"><title>3.1. 径向基函数</title><p>对于三维空间的n个点<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x18_hanspub.png" xlink:type="simple"/></inline-formula>及对应的值<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x19_hanspub.png" xlink:type="simple"/></inline-formula>，如果存在一个函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x20_hanspub.png" xlink:type="simple"/></inline-formula>满足<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x21_hanspub.png" xlink:type="simple"/></inline-formula>，那么可以由<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x22_hanspub.png" xlink:type="simple"/></inline-formula>定义一个隐式曲面。基于径向基函数的的隐式曲面方程通常表示为：</p><disp-formula id="hanspub.34305-formula68"><label>(1)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/7-2690419x23_hanspub.png"  xlink:type="simple"/></disp-formula><p>曲面方程中的参数可以通过求解如下矩阵方程来求得：</p><disp-formula id="hanspub.34305-formula69"><label>(2)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/7-2690419x24_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x25_hanspub.png" xlink:type="simple"/></inline-formula>为约束点，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x26_hanspub.png" xlink:type="simple"/></inline-formula>为约束点对应的值，当点在曲面上时<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x27_hanspub.png" xlink:type="simple"/></inline-formula>，当点在曲面外侧时<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x28_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x29_hanspub.png" xlink:type="simple"/></inline-formula>由下式求得：</p><disp-formula id="hanspub.34305-formula70"><label>(3)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/7-2690419x30_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s5_2"><title>3.2. 确定点的法向量及提取约束点</title><p>使用径向基函数建立隐式曲面方程要先获取到足量的能表达物体几何特性的插值点信息，本文将边界点及其相邻的点添加为插值约束点，但若只在曲面上取点，会导致矩阵方程只有零解，生成的隐式曲面方程无法准确反映曲面在空间的曲率变化，因此还需要在曲面外取一些约束点。</p><p>在曲面外取点之前要先确定点的指向曲面外侧的法向量。先将空间划分成许多个小栅格并为其编号，确定每个散点所在的栅格。将边界点按照首尾相接的顺序排序，并均匀的取出六个点，对每一个点用最小二乘法求解出该点的近似法向量，然后分别沿XYZ坐标轴搜索，如果X轴正方向上的栅格都不包含其他点，而X轴负方向上的栅格内有其他点存在，则称该点的法向量可由X轴方向确定，且点的法向量应该与向量<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x31_hanspub.png" xlink:type="simple"/></inline-formula>的夹角为锐角，如果一个点可以由两个坐标轴方向来确定且结果一致的话，则可以取该点为基准点，根据相邻点方向量成锐角的原则，可以确定其他点的法向量。</p><p>然后在每一个曲面上约束点沿指向曲面外的法向量0.2单位长度处取点作为曲面外的约束点，将约束点坐标及取值<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x32_hanspub.png" xlink:type="simple"/></inline-formula>代入到矩阵方程中可以求解出隐式曲面方程的参数。</p><p>先计算出边界边平均距离<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x33_hanspub.png" xlink:type="simple"/></inline-formula>，根据边界点的坐标求出其重心点C，采用2.3中的公式(4)进行迭代调整求出该点在隐式曲面上对应的点C'，计算出两点间的距离<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x34_hanspub.png" xlink:type="simple"/></inline-formula>。则填充点的采样距离d可由<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x35_hanspub.png" xlink:type="simple"/></inline-formula>确</p><p>定，其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x36_hanspub.png" xlink:type="simple"/></inline-formula>为比例因子，当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x37_hanspub.png" xlink:type="simple"/></inline-formula>时，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x38_hanspub.png" xlink:type="simple"/></inline-formula>，当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x39_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x40_hanspub.png" xlink:type="simple"/></inline-formula>。</p></sec><sec id="s5_3"><title>3.3. 调整填充点的位置</title><p>用有序边表法对投影后的孔洞进行填充后，需要通过逆矩阵变换将其映射回三维空间，映射后的点处在边界点的拟合平面上。需要将拟合平面中的新增填充点向隐式曲面逐步迭代调整，使新增的孔洞点与先前孔洞周围点云能够平滑过渡，更好的还原模型的几何特征，如图4所示。调整步骤如下：</p><p>Step1：遍历所有的新三角形，按照填充点之间的连接关系，确定填充点所在的层数，与边界点相连的点处于第一层。还需确定填充点与上一层哪些点相连，计算这些点的平均点作为填充点的基点。取边界边平均距离的1.5倍为临界距离。</p><p>Step2：从第一层开始，按照层数依次取出点进行调整，将该点的坐标带入函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x41_hanspub.png" xlink:type="simple"/></inline-formula>中，确定<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x42_hanspub.png" xlink:type="simple"/></inline-formula>的正负号，然后用下式进行迭代</p><disp-formula id="hanspub.34305-formula71"><label>(4)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/7-2690419x43_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x44_hanspub.png" xlink:type="simple"/></inline-formula>分别为初始点坐标和调整后点的坐标；t为点的位置参数，当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x45_hanspub.png" xlink:type="simple"/></inline-formula>时<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x46_hanspub.png" xlink:type="simple"/></inline-formula>，当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x47_hanspub.png" xlink:type="simple"/></inline-formula>时<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x48_hanspub.png" xlink:type="simple"/></inline-formula>；<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x49_hanspub.png" xlink:type="simple"/></inline-formula>为步长，大小为边界边平均距离的十分之一；<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x50_hanspub.png" xlink:type="simple"/></inline-formula>为拟合平面的单位法向量。</p><p>每迭代一次计算一下<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x51_hanspub.png" xlink:type="simple"/></inline-formula>，直到<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x52_hanspub.png" xlink:type="simple"/></inline-formula>的正负号与初始<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-2690419x53_hanspub.png" xlink:type="simple"/></inline-formula>的正负号相反时，停止迭代。</p><p>Step3：计算点与基点的距离，若大于临界距离，则取该点与基点线段上距基点距离等于临界距离的点替代该点。</p><p>Step4：循环执行Step2、Step3，直到所有点被调整完毕。</p><p>Step5：最后用拉普拉斯算法进行平滑处理，即将网格中的每个顶点移向其周围邻域重心的位置。</p><p>图4. 填充点的分层调整</p></sec></sec><sec id="s6"><title>4. 实验结果及分析</title><p>为了验证提出算法的有效性，在Win7环境下用C++编写程序，使用OpenGL图形库对点云和网格进行渲染，使用 MFC 框架实现可视化界面。实验计算机配置为Intel(R) Core(TM) i5-4590 3.30 GHz CPU，8 G运行内存，修补实例如图5所示。</p><p>图5. 孔洞修补实例</p></sec><sec id="s7"><title>5. 结论</title><p>本文提出了一种高效率的点云孔洞修补算法，用有序边表法生成填充点对孔洞进形填充，避免了复杂的角度运算，缩短了填充时间。然后用栅格法确定约束点法向量的方向，准确地求出径向基函数的隐式曲面方程，根据曲面方程对添加的填充点逐层进行调整，最后对所有点用拉普拉斯算法进行平滑处理，使填充点的分布更加均匀。实验结果表明，该算法对于孔洞具有很好的填充效果，对点云模型的适应性比较好，对于曲率变化显著的孔洞也能够准确地进行修补，生成的曲面与原有孔洞边界过渡平滑，可以较精确地恢复模型的表面形状。</p></sec><sec id="s8"><title>文章引用</title><p>华顺刚,张晓帅. 结合有序边表法和径向基函数的点云孔洞修补 Point Cloud Hole Repair Combining Ordered Edge List Method and Radial Basis Function[J]. 软件工程与应用, 2020, 09(01): 56-61. https://doi.org/10.12677/SEA.2020.91007</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.34305-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Guo, X., Xiao, J. and Wang, Y. (2016) A Survey on Algorithms of Hole Filling in 3D Surface Reconstruction. The Visual Computer, 34, 1-11. &lt;br&gt;https://doi.org/10.1007/s00371-016-1316-y</mixed-citation></ref><ref id="hanspub.34305-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Centin, M., Pezzotti, N. and Signoroni, A. (2015) Poissondriven Seamless Completion of Triangular Meshes. Computer Aided Geometric Design, 35-36, 42-55.</mixed-citation></ref><ref id="hanspub.34305-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">李月雯, 耿国华, 魏潇然. 基于泊松方程的孔洞修补算法[J]. 计算机工程, 2017, 43(10): 209-215+221.</mixed-citation></ref><ref id="hanspub.34305-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Liu, S. and Wang, C.C.L. (2012) Quasi-Interpolation for Surface Reconstruction from Scattered Data with Radial Basis Function. Computer-Aided Geometric Design, 29, 435-447.&lt;br&gt; https://doi.org/10.1016/j.cagd.2012.03.011</mixed-citation></ref><ref id="hanspub.34305-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Gai, S.Y., Da, F.P., Zeng, L.L., et al. (2019) Research on a Hole Filling Algorithm of a Point Cloud Based on Structure from Motion. Journal of the Optical Society of America A, 36, A39-A46.&lt;br&gt;https://doi.org/10.1364/JOSAA.36.000A39</mixed-citation></ref><ref id="hanspub.34305-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">刘震, 王艳宾, 白丽丽, 缪永伟. 曲面细节特征保持的三维模型孔洞修复方法[J]. 计算机辅助设计与图形学学报, 2016, 28(12): 2052-2059.</mixed-citation></ref><ref id="hanspub.34305-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Wang, Y., Jing, T., Zhao, Y., et al. (2017) Point Cloud Hole Filling Based on Feature Lines Extraction. IEEE International Conference Proceedings on Virtual Reality and Visualization, ICVRV 2017, Zhengzhou, 21-22 October 2017. &lt;br&gt; https://doi.org/10.1109/ICVRV.2017.00021</mixed-citation></ref><ref id="hanspub.34305-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Wang, J. and Oliveira, M.M. (2007) Filling Holes on Locally Smooth Surfaces Reconstructed from Point Clouds. Image and Vision Computing, 25, 103-113. &lt;br&gt;https://doi.org/10.1016/j.imavis.2005.12.006</mixed-citation></ref><ref id="hanspub.34305-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">刘许, 宋阳. 一种基于移动最小二乘法的点云数据孔洞修补算法研究[J]. 现代电子技术, 2017, 40(5): 101-104.</mixed-citation></ref></ref-list></back></article>