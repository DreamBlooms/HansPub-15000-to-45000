<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.810164</article-id><article-id pub-id-type="publisher-id">CSA-27193</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20181000000_98715768.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于连续最短增广链的网络最大流分析
  Network Maximum Flow Analysis Base on Dinic’s Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>港</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>苗</surname><given-names>金宝</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>胡</surname><given-names>春安</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>江西理工大学，信息工程学院，江西 赣州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>19</day><month>10</month><year>2018</year></pub-date><volume>08</volume><issue>10</issue><fpage>1510</fpage><lpage>1517</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   本文主要是分析连续最短增广链算法计算网络最大流的问题。先综述残留网络和层次网络的基本概念，然后分析连续最短增广链算法计算网络最大流的具体过程，再通过与Ford-Fulkerson (福特-富尔克森算法)和Edmonds-Karp (埃德蒙兹-卡普算法)算法进行比较来体现出连续最短增广链算法的突出点。通过相关性的比较，结论是连续最短增广链算法运行效果明显比Ford-Fulkerson好，且优于Edmonds-Karp。 This paper mainly analyzes the problem of calculating the maximum flow of the network by the Dinic algorithm. First we review the basic concepts of residual networks and hierarchical networks, then analyze the specific process of calculating the maximum flow of the network by the Dinic algorithm. By comparing with the Ford-Fulkerson algorithm and the Edmonds-Karp algorithm, the highlight of the Dinic algorithm is demonstrated. Through the comparison of correlations, the con-clusion is that the Dinic algorithm works better than Ford-Fulkerson and is better than Edmonds-Karp. 
  
 
</p></abstract><kwd-group><kwd>连续最短增广链，网络流，最大流，增广链, Dinic</kwd><kwd> Network Flow</kwd><kwd> Maximum Flow</kwd><kwd> Augmenting Chain</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于连续最短增广链的网络最大流分析<sup> </sup></title><p>李港，苗金宝，胡春安</p><p>江西理工大学，信息工程学院，江西 赣州</p><p><img src="//html.hanspub.org/file/3-1541161x1_hanspub.png" /></p><p>收稿日期：2018年10月2日；录用日期：2018年10月15日；发布日期：2018年10月22日</p><disp-formula id="hanspub.27193-formula18"><graphic xlink:href="//html.hanspub.org/file/3-1541161x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文主要是分析连续最短增广链算法计算网络最大流的问题。先综述残留网络和层次网络的基本概念，然后分析连续最短增广链算法计算网络最大流的具体过程，再通过与Ford-Fulkerson (福特-富尔克森算法)和Edmonds-Karp (埃德蒙兹-卡普算法)算法进行比较来体现出连续最短增广链算法的突出点。通过相关性的比较，结论是连续最短增广链算法运行效果明显比Ford-Fulkerson好，且优于Edmonds-Karp。</p><p>关键词 :连续最短增广链，网络流，最大流，增广链</p><disp-formula id="hanspub.27193-formula19"><graphic xlink:href="//html.hanspub.org/file/3-1541161x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/3-1541161x7_hanspub.png" /> <img src="//html.hanspub.org/file/3-1541161x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>网络流中最大流问题是一个经典的问题，在最初的Ford-Fulkerson算法提出到现在已有60多年的历史了 [<xref ref-type="bibr" rid="hanspub.27193-ref1">1</xref>] ，一直是个值得研究的问题。在此过程中，也提出了许多与之相关的算法。相比于初期的算法，现在对于网络最大流的算法得到了很大的改进，算法时间和空间复杂度都有所下降。常用的算法为Ford-Fulkerson算法 [<xref ref-type="bibr" rid="hanspub.27193-ref2">2</xref>] 、Edmonds-Karp算法 [<xref ref-type="bibr" rid="hanspub.27193-ref3">3</xref>] 和Dinic算法 [<xref ref-type="bibr" rid="hanspub.27193-ref4">4</xref>] 等。</p><p>Ford-Fulkerson算法是利用深度优先搜索的思想来寻找增广链，而这样寻找会使得复杂度依赖于最大传输量。Edmonds-Karp算法则在Ford-Fulkerson算法的基础上进行了修改，使得每次按最短路径寻找增广链，但每次找完一个最短增广链后需要重新寻找，利用率不高。而Dinic算法则是效率更高，使用更频繁。</p><p>为此，本文对连续最短增广链算法在网络最大流问题上做一个详细的分析。该算法虽然也是按最短路径来寻找增广链的，不过增加了一个层次网络。相比于每次重新寻找最短增广链来说，利用层次网络将避免了重新寻找最短的增广链所带来的多余的步骤。</p></sec><sec id="s4"><title>2. 基本概念</title><sec id="s4_1"><title>2.1. 基本定义</title><p>定义1.1：有向图为D = (V, E)。V为节点集合，E为边集合，D为由E和V构成的有向图。</p><p>定义1.2：对于任意一条边e = {e &#206; E, v, u &#206; V}，将会有值c(e)，表示该边的最大容量。</p><p>定义1.3：f(e)为该边e现有的传输量，对于任意的边e &#206; E，它将有0 ≤ f(e) ≤ c(e)。</p><p>定义1.4：容量网络中会有一个源点s和一个汇点t。对于给定的容量网络，将存在源点s和汇点t，分别表示网络图中的起点和终点。其它为中间顶点，源点s需要通过中间顶点传输到汇点。</p><p>定义1.5：容量网络为G = (V, E, C)。见图1，对于任意边e，将有(c(e), f(e))，其中c(e)为最大容量，f(e)为实际传输量。</p><p>图1. 容量网络</p></sec><sec id="s4_2"><title>2.2. 预备知识</title><p>学会连续最短增广链算法首先需要了解的是残留容量网络。设有容量网络为G = (V, E, C)，那么残留容量网络为G'(V', E', C') [<xref ref-type="bibr" rid="hanspub.27193-ref5">5</xref>] ，其中G'的顶点集不变，即V' = V，但对于E'来说，就发生了改变。如果G中存在e = {e &#206; E, u, v &#206; V}，满足c(e) &gt; f(e)，那么G'将有边e' = {e' &#206; E', u, v &#206; V'}，满足c(e') = c(e) − f(e)。如果G存在e = {e &#206; E'，u, v &#206; V'}，满足f(e) &gt; 0，那么G'将有e' = {e' &#206; E'，u, v &#206; V'}，满足c(e') = f(e)。见  图2，边的值对应c(e')。</p><p>了解残留网络还是不够的，还需要理解层次网络 [<xref ref-type="bibr" rid="hanspub.27193-ref6">6</xref>] 。见图3，在层次网络中，源点s的层次为0，在残留网络中将存在一顶点v &#206; V'，那么源点s到达v的最短路径长度就是v的层次。从源点s开始，以广度优先搜索的方法构建层次网络，使的能找到一条最短的增广链。如果无法构建层次网络，就说明网络最大流的求解已经得知。</p></sec></sec><sec id="s5"><title>3. 连续最短增广链算法</title><sec id="s5_1"><title>3.1. 算法思路</title><p>连续最短增广链算法是先建立层次网络，然后基于层次网络找到最短的增广链，以达到最优解，并且在层次网络上每使用一次增广链后还可以重复使用，直到最短的增广链不存在。如果找不到最短的增广链就利用剩下的残留容量网络继续构建层次网络，并重复这些步骤。当层次网络无法构建时，那么网络最大流问题也就结束了。</p><p>已知有一容量网络为G = (V, E, C)，顶点数为n，最大容量为C，实际传输量为f，层次数l，源点为s，汇点为t。</p><p>图2. 残留网络</p><p>图3. 层次网络</p><p>步骤①：初始化容量网络G和可行流f，使的f = {0}。</p><p>步骤②：构建层次网络，设集合P为已经设置好层次的顶点集合，Q为已经从集合P中取出来使用的顶点集合，将源点s的层次设为0，即level(s) = 0，并将s加入集合P中，使的P = {s}。接着从P中取出一顶点v(v &#206; P，v ∉ Q)，对于任意边e = {u ∉ P}且c(e) &gt; 0，有level(u) = level(v) + 1。这样就能计算v的所有邻居节点的层次，并将v加入集合Q，与v相连的u加入P。重复以上步骤，使的无法从P中取出元素即层次网络构建完成。</p><p>步骤③：利用层次网络寻找最短的增广链，而层次网络可以重复使用，并且寻找最短的增广链需要以源点s为出发点，以汇点t为终点。一开始以层次为0的点开始，即源点s，由于对于任意边e = 且c(e) &gt; 0有level(u) = level(s) + 1，所以寻找s的下一顶点时就可以根据层次网络快速求得u。同理，对于任意边e = 且c(e) &gt; 0 有level(v) = level(u) + 1，这样就可以得到u的下一顶点。由于步骤②层次网络构建完成，那么汇点t一定有层次，继续寻找下一顶点，直到汇点t就说明最短的增广链成功的找到。然后在增广链的基础上更新残留容量网络，接着继续寻找最短的增广链，直到找不到为止。</p><p>步骤④：若能构建层次网络，跳到步骤②，如若不能则网络最大流问题求解完毕。</p></sec><sec id="s5_2"><title>3.2. 计算过程</title><p>下面将对一个具体的网络流进行分析，为了更好的理解连续最短增广链算法，模拟连续最短增广链算法计算网络最大流的过程。以图4为例进行分析。</p><p>图4中弧的数字表示最大容量，初始网络流值为0。设V<sub>1</sub>位源点，V<sub>6</sub>为汇点来计算网络图中的最大网络流。首先要构建层次网络，将源点V<sub>1</sub>的层次设为0，根据步骤②的思路来计算每个节点的层次数，得到的层次数如表1所示。</p><p>得到了层次网络后，就用它来寻找最短增广链。用层次网络能更快的查找出最短增广链，将得到两条最短增广链，分别是V<sub>1</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>6</sub>和V<sub>1</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>6</sub>。接着更新网络图，以便得到最新的残留网络。更新后的残留网络如图5所示，此时最大网络流为9。</p><p>图5中弧的两个数字分别为最大容量和实际传输量。在增广后明显可以看出V<sub>2</sub> → V<sub>3</sub>这条边已经满了，无法再传输了，但根据增广链的思想，从V<sub>3</sub> → V<sub>2</sub>还能传输6。现在增广后的网络图上再重新构建层次网络，构建后的层次数如表2所示。</p><p>INF表示无穷大，代表着无法从源点V<sub>1</sub>达到此点。此时可以得出最短增广链只有一条V<sub>1</sub> → V<sub>2</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>6</sub>，继续在层次网络的基础上更新残留网络。得到的新的残留网络如图6所示。</p><p>由于此时不能再构建层次网络了，所以结束该算法，得到的网络最大流为11。连续最短增广链算法主要是利用构建好的层次网络能更快的查找最短增广链。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> The hierarchy number of the original network plannin</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >节点</th><th align="center" valign="middle" >V<sub>1</sub></th><th align="center" valign="middle" >V<sub>2</sub></th><th align="center" valign="middle" >V<sub>3</sub></th><th align="center" valign="middle" >V<sub>4</sub></th><th align="center" valign="middle" >V<sub>5</sub></th><th align="center" valign="middle" >V<sub>6</sub></th></tr></thead><tr><td align="center" valign="middle" >层次</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >3</td></tr></tbody></table></table-wrap><p>表1. 原网络图中的层次数</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> The hierarchy number of the original network planning after first updat</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >节点</th><th align="center" valign="middle" >V<sub>1</sub></th><th align="center" valign="middle" >V<sub>2</sub></th><th align="center" valign="middle" >V<sub>3</sub></th><th align="center" valign="middle" >V<sub>4</sub></th><th align="center" valign="middle" >V<sub>5</sub></th><th align="center" valign="middle" >V<sub>6</sub></th></tr></thead><tr><td align="center" valign="middle" >层次</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >INF</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >4</td></tr></tbody></table></table-wrap><p>表2. 第一次更新的残留网络中的层次数</p><p>图4. 原网络图</p><p>图5. 第一次更新的残留网络</p><p>图6. 第二次更新的残留网络</p></sec><sec id="s5_3"><title>3.3. 算法复杂度分析</title><p>连续最短增广链算法需要重复运行步骤②和步骤③，构建层次网络以及查找最短增广链。已知容量网络G有V个顶点，E条边。在连续最短增广链算法中最多构建V分层次网络。</p><p>首先分析步骤②构建层次网络，层次网络是从源点开始，将每个节点与源点的距离算出来以确定节点的层次数。而这过程是用BFS思想 [<xref ref-type="bibr" rid="hanspub.27193-ref7">7</xref>] 来实现的，这就需要遍历每一条边。即构建一个层次网络的时间复杂度是O(E)，由于需要构建V个层次网络，所以构建层次网络总的时间复杂度是O(VE)。</p><p>步骤③是在层次网络的基础上寻找最短增广链。由于有E条边，那么最多将存在E条增广链。而对于每一条增广链，都是在层次网络的基础上寻找得来的。而层次数是与源点的距离，那么层次数最大是V，即最短增广链的长度最大为V。所以在寻找增广链上时间复杂度是O(VE)。由于最多构建V个层次网络，而在每个层次网络上寻找最短增广链的时间复杂度是O(VE)，那么寻找增广链总的时间复杂度是O(EV<sup>2</sup>)。</p><p>综上所述，连续最短增广链的时间复杂度是O(EV + EV<sup>2</sup>)，即O(EV<sup>2</sup>)。</p></sec></sec><sec id="s6"><title>4. 算法比较</title><p>1) Ford-Fulkerson算法，该算法是每次都寻找一条从源点s到汇点t的路径 [<xref ref-type="bibr" rid="hanspub.27193-ref8">8</xref>] 。然后更新残留网络，直到找不到为止。由于该算法是每找到一条路径后更新残留网络，而残留网络每一条边的最大传输量是根据上一个残留网络得来。已知容量网络的最大传输量是F，那么该算法最坏情况下需要进行F次深度优先搜索，那么总的时间复杂度是O(FE)，那么当F是很高时明显不是一种好方法。</p><p>2) Edmonds-Karp算法，该算法是每次寻找一条最短的增广链来进行更新 [<xref ref-type="bibr" rid="hanspub.27193-ref9">9</xref>] 。由于每次查找一条最短的增广链就更新一次，而最坏情况下会有E条增广链。每次更新残留网络的话需要O(VE)的复杂度，那么总的时间复杂度是O(EV<sup>2</sup>)，在存在增广链的条件下，E的最少数量是V − 1，当然实际情况是更多的，即E &gt; V，对E进行平方明显不是最优的情况。</p><p>3) 连续最短增广链算法，该算法是分为V个阶段，每个阶段构建层次网络和查找最短增广链。先建立层次网络，在层次网络的基础上去找最短的增广链，而时间复杂度是O(EV<sup>2</sup>)。</p><p>一般情况下V &lt; E，那么O(EV<sup>2</sup>)的时间复杂度优于O(EV<sup>2</sup>)，而且不需要考虑最大容量上限的问题。不难看出，连续最短增广链算法运行效果明显比Ford-Fulkerson好，且优于Edmonds Karp。</p></sec><sec id="s7"><title>5. 案例比较</title><p>例1：针对图7的图型模型，利用连续增广链算法求其最大流。</p><p>1) Ford-Fulkerson算法：在最佳情况下需要增广2次，最坏情况下需要增广4036次。该算法就是简单用DFS思想去寻找一条增广链，最坏情况下会一直是V<sub>s</sub> → V<sub>2</sub> → V<sub>5</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>这两条。这就需要增广4036次。当然如果正好寻找增广链是寻找到的是V<sub>s</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>这两条，就只需要增广2次，这是最好的情况。</p><p>2) Edmonds-Karp算法：在最佳情况下需要增广2次，最坏情况下需要增广3次。该算法相比Ford-Fulkerson算法，有一个优势，每次增广是按BFS思想寻找最短增广链的。所以在最坏情况下寻找到的增广链依次是V<sub>s</sub> → V<sub>2</sub> → V<sub>5</sub> → V<sub>t</sub>、V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>这三条。在最佳情况下的寻找到的增广链是V<sub>s</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>这两条。按最短路径寻找增广链相比于DFS毫无目的的寻找快的多。</p><p>3) Dinic算法：在最佳情况下需增广2次，最坏情况下需增广3次。该算法首先构建层次网络，在层次网络的基础上寻找最短增广链。最坏情况下寻找到的增广链分别V<sub>s</sub> → V<sub>2</sub> → V<sub>5</sub> → V<sub>t</sub>、V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>这三条。在最佳情况下寻找到的增广链是V<sub>s</sub> → V<sub>2</sub> → V<sub>3</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>这两条。相比于Edmonds-Karp算法每次寻找增广链都用BFS查找一遍来说，在层次网络的基础上寻找最短增广链将快的多。</p><p>例2：针对图8的图型模型，利用连续增广链算法求其最大流。</p><p>1) Ford-Fulkerson算法：在最佳情况下，需要增广2次，最坏情况需要增广4036次。用DFS来寻找增广链最坏情况下，增广链将会一直是V<sub>s</sub> → V<sub>6</sub> → V<sub>5</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>2</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>6</sub> → V<sub>t</sub></p><p>图7. 案例1</p><p>图8. 案例2</p><p>这两条。这就需要增广4036次。也有可能正好寻找到V<sub>s</sub> → V<sub>6</sub> → V<sub>t</sub>和V<sub>s</sub> → V<sub>2</sub> → V<sub>4</sub> → V<sub>5</sub> → V<sub>t</sub>这两条，这是最佳情况下，需要增广2次。</p><p>2) Edmonds-Karp算法：在最佳情况下需要增广3次，最坏情况下需要增广4次。按最短距离寻找增广链，最坏情况下将依次找到Vs → V6 → Vt、Vs → V2 → V3 → Vt、Vs → V2 → V6 → V5 → Vt和Vs → V2 → V4 → V5 → Vt这四条，最佳情况下将寻找到Vs → V6 → Vt、Vs → V2 → V3 → Vt和Vs → V2 → V4 → V5 → Vt这三条。</p><p>3) Dinic算法：在最佳情况需要增广3次，最坏情况下需增广4次。最坏情况下的增广链分别是Vs → V6 → Vt、Vs → V2 → V3 → Vt、Vs → V2 → V6 → V5 → Vt和Vs → V2 → V4 → V5 → Vt这四条。最佳情况下的增广链分别是Vs → V6 → Vt、Vs → V2 → V3 → Vt和Vs → V2 → V4 → V5 → Vt这三条。</p><p>整体来说连续最短增广链算法运行速度效果明显快于Ford-Fulkerson，而连续最短增广链算法是建立一个层次网络，使得查找最短的增广链可重复使用。又因为Edmonds-Karp算法每找到一个最短的增广链就更新下。所以可以得出结论：连续最短增广链算法效果明显比Ford-Fulkerson好，且优于Edmonds-Karp算法。</p></sec><sec id="s8"><title>6. 结束语</title><p>网络最大流问题从提出来现在经历了这么多年，为了解决这个问题，提出了很多算法，算法复杂度也逐渐降低。为此，本文对主要常用的连续最短增广链算法，做了一个详细而全面的分析。由于连续最短增广链算法用到了一个层次网络，使得每次能快速地查找到最短的增广链并能重复使用。相比Edmonds-Karp算法有了明显时间上的优化，而且也不要像Ford-Fulkerson算法那样需要考虑容量网络中的最大传输量。</p></sec><sec id="s9"><title>基金项目</title><p>江西理工大学创新基金资助项目(No.3103800226)。</p></sec><sec id="s10"><title>文章引用</title><p>李 港,苗金宝,胡春安. 基于连续最短增广链的网络最大流分析Network Maximum Flow Analysis Base on Dinic’s Algorithm[J]. 计算机科学与应用, 2018, 08(10): 1510-1517. https://doi.org/10.12677/CSA.2018.810164</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.27193-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">张宪超, 陈国良, 万颖瑜. 网络最大流问题研究进展[J]. 计算机研究与发展, 2003, 40(9): 1281-1292.</mixed-citation></ref><ref id="hanspub.27193-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Ford, L.R.J. and Fulkerson, D.R. (1954) Maximal Flow through a Network. Canadian Journal of Mathematics, 8, 399-404.</mixed-citation></ref><ref id="hanspub.27193-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Edmonds, J. and Karp, R.M. (1972) Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems. Journal of the ACM, 19, 248-264. &lt;br&gt;https://doi.org/10.1145/321694.321699</mixed-citation></ref><ref id="hanspub.27193-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Dinitz, E.A. (1970) Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation. Soviet Mathematics. Doklady, 1277-1280.</mixed-citation></ref><ref id="hanspub.27193-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">谢政. 网络算法与复杂性理论[M]. 国防科技大学出版社, 2003.</mixed-citation></ref><ref id="hanspub.27193-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">徐翠霞. 基于层次网络的最大流求解方法[J]. 潍坊学院学报, 2010, 10(4): 42-45.</mixed-citation></ref><ref id="hanspub.27193-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Peleg, D. and Peleg, D. (2016) Sparse Fault-Tolerant BFS Structures. ACM.</mixed-citation></ref><ref id="hanspub.27193-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Takahashi, T. (2016) The Simplest and Smallest Network on Which the Ford-Fulkerson Maximum Flow Procedure May Fail to Terminate. Technical Report of IeiceCst, 24, 390-394. &lt;br&gt;https://doi.org/10.2197/ipsjjip.24.390</mixed-citation></ref><ref id="hanspub.27193-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Lammich, P. and Sefidgar, S.R. (2016) Formalizing the Edmonds-Karp Algorithm. Interactive Theorem Proving. Springer International Publishing, 219-234.</mixed-citation></ref></ref-list></back></article>