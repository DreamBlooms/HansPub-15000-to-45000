<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AIRR</journal-id><journal-title-group><journal-title>Artificial Intelligence and Robotics Research</journal-title></journal-title-group><issn pub-type="epub">2326-3415</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AIRR.2019.82009</article-id><article-id pub-id-type="publisher-id">AIRR-30316</article-id><article-categories><subj-group subj-group-type="heading"><subject>AIRR20190200000_26098605.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject><subject> 工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  仓储作业中多搬运机器人动态路径优化
  Dynamic Path Planning for Multi-Robot in Warehousing Operations
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>鑫淼</given-names></name><xref ref-type="aff" rid="aff1"><sub>1</sub></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>北京交通大学经济管理学院，北京</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>03</month><year>2019</year></pub-date><volume>08</volume><issue>02</issue><fpage>68</fpage><lpage>82</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   搬运机器人在无人仓的“货到人”拣选系统中得到了广泛应用，然而多个搬运机器人协同作业还存在着路径寻优规划不合理、路径冲突等问题。考虑路径的负载平衡及搬运机器人转弯耗费的时间，建立了带有时间窗的多搬运机器人路径规划模型；结合调整优先级的避障策略，提出了一种改进的“离线–在线”两阶段动态路径规划算法，实现全局离线路径规划和在线冲突规避，提升了无人仓系统的运行效率。最后，设计三组仿真实验，通过对比搬运机器人的总运行时间，验证了改进算法的有效性。 Handling robots have been widely used in the picking system of “part-to-picker” in un-manned warehouse. However, there are still problems such as unreasonable path seeking planning and path conflict in the collaborative operation of multi-handling robot. Considering the load balance of the path and the turning time of the handling robot, the path planning model of the multi-handling robot with time window is established. Combined with the obstacle avoidance strategy of adjusting the priority, an improved “offline-online” two-stage dynamic path planning algorithm was proposed to realize the combination of global off-line path planning and online conflict avoidance, thus improving the operation efficiency of the un-manned warehouse system. Finally, three sets of simulation experiments are designed to verify the effectiveness of the improved algorithm by comparing the total running time of the handling robots. 
 
</p></abstract><kwd-group><kwd>多搬运机器人，路径规划，时间窗，两阶段，动态, Multi-Handling Robot</kwd><kwd> Path Planning</kwd><kwd> Time Window</kwd><kwd> Two-Stage</kwd><kwd> Dynamic</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>仓储作业中多搬运机器人动态路径优化<sup> </sup></title><p>王鑫淼</p><p>北京交通大学经济管理学院，北京</p><p><img src="//html.hanspub.org/file/5-2610154x1_hanspub.png" /></p><p>收稿日期：2019年4月26日；录用日期：2019年5月13日；发布日期：2019年5月21日</p><disp-formula id="hanspub.30316-formula64"><graphic xlink:href="//html.hanspub.org/file/5-2610154x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>搬运机器人在无人仓的“货到人”拣选系统中得到了广泛应用，然而多个搬运机器人协同作业还存在着路径寻优规划不合理、路径冲突等问题。考虑路径的负载平衡及搬运机器人转弯耗费的时间，建立了带有时间窗的多搬运机器人路径规划模型；结合调整优先级的避障策略，提出了一种改进的“离线–在线”两阶段动态路径规划算法，实现全局离线路径规划和在线冲突规避，提升了无人仓系统的运行效率。最后，设计三组仿真实验，通过对比搬运机器人的总运行时间，验证了改进算法的有效性。</p><p>关键词 :多搬运机器人，路径规划，时间窗，两阶段，动态</p><disp-formula id="hanspub.30316-formula65"><graphic xlink:href="//html.hanspub.org/file/5-2610154x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/5-2610154x7_hanspub.png" /> <img src="//html.hanspub.org/file/5-2610154x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>人工智能、大数据等新一代信息技术提高了智慧物流系统的思维、感知和分析决策能力。智慧物流的三大主要研究领域包括仓储、运输和配送，三个最基本特征是操作的无人化、运营的智能化和决策的智慧化。以京东、亚马逊为代表的电商企业正在加速布局智慧物流体系，推动着智能化的搬运机器人在“货到人”系统中的应用。在拣选作业中，随着搬运机器人规模数量的增加，需要同时考虑障碍避碰、拥堵协调、冲突处理等问题，大大增加了路径规划的复杂程度。由于电商企业对于拣选的时效性要求较高，为搬运机器人规划出一条无冲突的时间最优路径对其作业效率有着很大的影响。</p><p>“货到人”拣选系统的优化对提升电商企业的市场竞争力具有重要作用 [<xref ref-type="bibr" rid="hanspub.30316-ref1">1</xref>] 。部分研究者对智能仓库系统中的一些简化子问题开展了初步的研究工作，包括Hazard [<xref ref-type="bibr" rid="hanspub.30316-ref2">2</xref>] 等学者研究静态货位分配问题、Li [<xref ref-type="bibr" rid="hanspub.30316-ref3">3</xref>] 等研究静态任务指派和路径规划问题等。但这些研究工作都是针对静态情况的，并没有考虑实际订单拣选过程的连续性和各个环节之间的关联性。研究结果还无法解决“货到人”拣选系统中的实际问题，因此必须研究动态的路径规划策略 [<xref ref-type="bibr" rid="hanspub.30316-ref4">4</xref>] 。</p><p>多搬运机器人路径规划(Multi-Robot Path Finding, MRPF)问题分为解耦的和耦合的。解耦化的方法是指将搬运机器人看作多个独立的个体，各自规划行驶路径。采用解耦化的多搬运机器人路径规划方法计算复杂性低、鲁棒性好。其缺陷在于当仓库中搬运机器人数量较大时，极易产生冲突和拥堵，造成复杂的路径再次规划问题。Khorshid [<xref ref-type="bibr" rid="hanspub.30316-ref5">5</xref>] 等针对解耦算法无法保证最优解及完备解，提出了一种树搜索的方法。Chang [<xref ref-type="bibr" rid="hanspub.30316-ref6">6</xref>] 使用Dijkstra算法为双向路径中的多搬运机器人设计了无冲突的最短行驶路径。Ma [<xref ref-type="bibr" rid="hanspub.30316-ref7">7</xref>] 等提出带有惩罚项的改进粒子群优化算法解决了双层仓库多搬运机器人路径规划问题。Umar [<xref ref-type="bibr" rid="hanspub.30316-ref8">8</xref>] 等提出了一种混合遗传算法，对柔性生产系统环境下的多机器人系统进行路径规划，并采用设立优先级的方式对柔性生产系统环境下的任务和机器人进行集成排序，解决路径冲突。Desrochers [<xref ref-type="bibr" rid="hanspub.30316-ref9">9</xref>] 等人提出了应用时间窗解决多台机器人的碰撞问题。Wang [<xref ref-type="bibr" rid="hanspub.30316-ref10">10</xref>] 提出了一种概率迭代路径协调的局部搜索算法(PIPC)，为最晚完工的机器人找到最优解。Alejandro [<xref ref-type="bibr" rid="hanspub.30316-ref11">11</xref>] 考虑到路径安全性、路径长度和路径平稳性，提出了一种基于混合蛙跳算法的多目标解耦算法。</p><p>基于耦合的多搬运机器人路径规划是指在运行过程中考虑到机器人会相互影响，从而考虑将所有机器人看作一个整体，为其规划路径。基于耦合的多搬运机器人路径规划方法能够实现机器人间的紧密和最优协调，规划的路径通常是最优(次优)及完备的解。Ma [<xref ref-type="bibr" rid="hanspub.30316-ref12">12</xref>] 重点研究了基于集群的多机器人任务分配及路径规划、负载可交换的多机器人路径规划、及路径执行不完美的问题。Miao [<xref ref-type="bibr" rid="hanspub.30316-ref13">13</xref>] 提出了改进的模拟退火算法，用于机器人在静态和动态障碍物环境下的路径规划。Standley和Korf [<xref ref-type="bibr" rid="hanspub.30316-ref14">14</xref>] 提出了一种动态分组的多机器人无冲突路径规划方法，以降低求解的复杂度。Sharon [<xref ref-type="bibr" rid="hanspub.30316-ref15">15</xref>] 基于冲突提出了新的一种两级路径寻优算法，在高层对有冲突的机器人进行搜索，在底层对每个机器人进行路径快速寻优，其求解速度较A*算法高了一个数量级。</p><p>通过对文献进行梳理，发现对仓储作业中多个机器人路径规划的研究尚不成熟，关于动态环境下搬运机器人协同作业、动态避障的研究较少，单一的算法难以解决复杂程度渐高的多搬运机器人路径规划问题。并且现有研究中较少将运行时间最短作为优化目标，路径的繁忙程度、搬运机器人的起停、转向次数对于机器人的运行时间也有很大的影响，以距离最短作为目标函数求解路径规划问题难以满足电商企业的实际需求。因此，设计求解多个搬运机器人的动态路径规划算法是当前研究的重点及难点。</p><p>本文针对仓储作业中多个搬运机器人的动态路径优化问题，设计了符合电商企业实际作业需求的带有时间窗的MRPF数学模型，提出了改进两阶段路径规划算法，将原问题分解为离线路径规划和在线路径协调两个子问题，在离线路径规划中对传统的Dijkstra算法进行了改进，考虑了路径繁忙程度以及机器人转向时间，在线路径协调中基于机器人的优先级进行实时调度及冲突避碰。通过仿真实验，与使用传统算法时搬运机器人的总运行时间进行对比，验证了本文算法的有效性。</p></sec><sec id="s4"><title>2. 带有时间窗的多搬运机器人路径规划模型</title><p>多搬运机器人的动态路径规划问题实质上是在仓库中的静态障碍物已知的情况下，为每个搬运机器人规划出从起始点到终点无冲突的最优或次优路径，使得多个搬运机器人的行驶路径不发生冲突。并且在搬运机器人行驶过程中可动态调整搬运机器人的行驶路径，从而对未知的动态障碍进行规避。</p><sec id="s4_1"><title>2.1. 问题描述</title><p>与“人到货”的拣选模式相反，“货到人”的拣选模式是指搬运机器人将任务货架移送至拣选台，拣选工人在拣选站将所需的商品从货架中取出即可。“货到人”拣选模式中搬运机器人的作业流程如下：</p><p>1) 为搬运机器人分配任务。由于一个搬运机器人不能同时执行多项订单任务，因此将任务分配给距离货架最近的空闲搬运机器人，为其规划自起点至终点的最优行走路径。并根据任务下达的时间为机器人设置优先级，任务下达越早，机器人的优先级越高；</p><p>2) 领取任务后的搬运机器人由空闲变为工作状态，自所在位置按照系统规划好的路径行驶至任务货架处，将任务货架顶起，机器人由空载变为负载状态；</p><p>3) 带有任务货架的搬运机器人行驶至目标拣选台，等待拣选。当前拣选任务完成后检查是否存在其他拣选任务，若有，移动至指定拣选台等待拣选；否则，根据系统给出的目标位置，为搬运机器人设计回程最优路径，将任务货架运回。搬运机器人此时的状态变为空载、空闲；</p><p>4) 判断搬运机器人是否需要充电，如需充电，行驶至充电桩处进行充电，否则释放搬运机器人；</p><p>5) 转至步骤1)，重复执行以上操作，直至无拣选任务。</p><p>图1是由实际仓库作业环境抽象出的电子栅格地图，栅格地图由拣选台、搬运机器人、可移动货架以及充电站组成。搬运机器人可以在栅格图中沿着东、南、西、北四个方向行驶，栅格中的每一条边都是搬运机器人行驶的车道，一个搬运机器人在运行时只能占用一条边，同一时刻不允许两个搬运机器人在一条边上相向行驶。</p><p>为简化模型，对多搬运机器人路径规划问题做出如下假设：</p><p>1) 每条边上运行的搬运机器人数量不能超过其能承载的最大数量；</p><p>2) 每个搬运机器人在行驶过程中按匀速行驶，机器人遇到障碍时的停车减速时间忽略不计；</p><p>图1. 仓储作业环境平面图</p><p>3) 同向行驶时，为防止前面的机器人因突然停止(故障)导致两车相撞，规定机器人在行驶过程中需与前车保持安全距离。本文将机器人的安全车距定为，即车身长度 + t秒内车辆的行驶长度；</p><p>4) 搬运机器人在运行过程中遇到的随机动态障碍物(人员进入)由搬运机器人的车载传感器和定位系统解决，模型及算法只面向仓库中的货架障碍以及运行期间搬运机器人之间的冲突。</p></sec><sec id="s4_2"><title>2.2. 符号说明</title><p>1) 相关参数</p><p>i , j , k ：路径节点， i , j , k ∈ V</p><p>w j k ：边的权重</p><p>m b ：运输任务标识， b = 1 , 2 , ⋯ , p</p><p>h a ：搬运机器人标识， a = 1 , 2 , ⋯ , q</p><p>t j k m ：搬运机器人在路径 e j k 上的时间窗</p><p>t h a j k ：车辆经过路径 e j k 的时间</p><p>N k j t j k m ：路径 e j k 上， t j k m 时间窗内节点k向节点j方向运行的搬运机器人数量</p><p>N j k t j k m ：路径 e j k 上， t j k m 时间窗内节点j向节点k方向运行的搬运机器人数量</p><p>e j k = { 1 ,     节 点   j   到 节 点   k   之 间 的 路 径 存 在 0 ,     其 他</p><p>x h a t j k m = { 1 ,       由 节 点   j   向   k   行 驶 的 搬 运 机 器 人 在 时 间 窗 t j k m 内 到 达 0 ,     其 他</p><p>z h a t j k m = { 1 ,       由 节 点   k   向   j   行 驶 的 搬 运 机 器 人 在 时 间 窗 t j k m 内 到 达 0 ,     其 他</p><p>2) 决策变量</p><p>t j k s ：经过节点 j , k 上的直线路段所耗费的时间</p><p>t j k c ：经过节点 j , k 上的拐弯路段所耗费的时间</p><p>t w ：搬运机器人 h a 的耗费的额外等待时间。</p></sec><sec id="s4_3"><title>2.3. 模型建立</title><sec id="s4_3_1"><title>2.3.1. 时间窗</title><p>在道路有向网络图 G = ( V , E ) 中， V = { 1 , 2 , ⋯ , n − 1 , n } 表示图中节点的集合， E = { e 12 , e 23 , ⋯ , e m n } 表示两个相邻节点构成的边的集合， W = { w a b , w b c , ⋯ , w m n } 表示每条边的权重的集合。搬运机器人进入该条边的时间和驶出的时间构成了该条边的时间窗 [<xref ref-type="bibr" rid="hanspub.30316-ref16">16</xref>] 。搬运机器人 h a 在边 e j k 上的时间窗为：</p><p>t j k a = [ t j k a i , t j k a o ] (1)</p><p>q个搬运机器人在边 e j k 上时间窗集合为：</p><p>t j k m = { t j k 1 , t j k 2 , ⋯ , t j k q } (2)</p><p>其中， t j k a − t j k a i ≥ t h a j k ，即只能在边 e j k 的空闲时间窗内规划搬运机器人 h a 的路径。</p></sec><sec id="s4_3_2"><title>2.3.2. 带有时间窗的多搬运机器人路径规划模型</title><p>由于电商企业对于订单的时效性要求较高，因此本文将搬运机器人的总运行时间作为优化目标。在满足各个约束条件的情况下，多搬运机器人路径规划的目标函数为机器人在直行路段上的运行时间与机器人转向的时间，以及机器人因遇到冲突或路径拥堵而额外耗费的等待时间的总和。即：</p><p>min Z = ∑ a = 1 p h a ( t j i s ∗ w j i + t j i c + t i k s ∗ w i k + t w ) (3)</p><p>s.t.</p><p>∑ a = 1 p h a ≤ p (4)</p><p>∑ a = 1 p ∑ b = 1 q x a b = q (5)</p><p>∑ a = 1 p x a b = 1 (6)</p><p>t j k m = { [ t j k a i , t j k a o ] } (7)</p><p>N j k t j k m = e j k ∗ ∑ i = 1 q x h a t j k m (8)</p><p>N k j t j k m = e j k ∗ ∑ i = 1 q z h a t j k m (9)</p><p>N k j t j k m + N k j t j k m ≤ L j k L v (10)</p><disp-formula id="hanspub.30316-formula66"><label>(11)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/5-2610154x56_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.30316-formula67"><label>(12)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/5-2610154x57_hanspub.png"  xlink:type="simple"/></disp-formula><p>式(4)表示执行任务的搬运机器人的车辆数应少于车辆总数；式(5)表示a个搬运机器人共同完成b个任务；式(6)表示每个任务只能由1个搬运机器人完成；式(7)表示路径<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x58_hanspub.png" xlink:type="simple"/></inline-formula>上的时间窗；式(8)和式(9)表示在时间窗 t j k m 内，从节点j到节点k的路径上运行的搬运机器人数量；式(10)表示在时间窗 t j k m 内，节点j到节点k的路径上搬运机器人运行的机器人数量应少于路径可容纳的最大数量；式(11)表示在时间窗 t j k m 内，节点j到节点k的路径上不存在相向行驶的车辆；式(12)表示搬运机器人 是否在时间窗 t j k m 内按时通过路径 。</p></sec></sec></sec><sec id="s5"><title>3. 带有时间窗的多搬运机器人两阶段动态路径规划算法</title><p>与单一的单阶段优化方法比，多阶段优化有利于降低问题的求解难度，提高搜索效率 [<xref ref-type="bibr" rid="hanspub.30316-ref17">17</xref>] 。两阶段算法经常用于车辆的路径规划问题中，Samia M. [<xref ref-type="bibr" rid="hanspub.30316-ref18">18</xref>] 针对双向单车道上经常出现多个机器人死锁的情况，提出了一种两阶段控制策略。Jung Hoon Lee [<xref ref-type="bibr" rid="hanspub.30316-ref19">19</xref>] 等人对多机器人之间的冲突进行了研究，并采用两阶段交通控制法实现了多机器人系统的无碰规划。孟祥虎 [<xref ref-type="bibr" rid="hanspub.30316-ref20">20</xref>] 等设计了两阶段算法来增强全局搜索和局部开发能力。本文对传统两阶段路径规划方法进行了改进，在离线阶段基于时间窗原理，在Dijkstra算法中加入了路径热度，生成全局时间最优路径；在线阶段依据搬运机器人的优先级进行实时调度，从而规避和解决路径冲突。带有时间窗的多搬运机器人两阶段动态路径规划算法流程如图2所示。</p><p>图2. 多搬运机器人路径规划算法流程图</p><sec id="s5_1"><title>3.1. 离线阶段–带有路径热度的Dijkstra算法求解最优路径</title><p>为了使路径负载得到平衡，在传统Dijkstra算法的路径权重中加入了热度值，对算法进行了改进。现定义在时间周期 内，各路径的热度为 f b = { f b 12 , f b 23 , ⋯ , f b m n } ，运行过程中每条路径上的搬运机器人的实时数量为 b g = { b 12 , b 23 , ⋯ , b m n } ，E为总路径数量，具体计算流程如下：</p><p>1) 利用传统的Dijkstra算法为各个搬运机器人从任务起始点到终点的路径进行初步规划；</p><p>2) 对1)中的路径进行分解，统计时间周期 δ 内各个路段的利用频次 h k ；</p><p>3) 当搬运机器人通过当前路径时， b g 自动减1；</p><p>4) 构造路径繁忙程度对Dijkstra算法选择路径的影响系数函数：</p><p>F ( f b ) = ( b g + 1 ) h k / ∑ g = 1 p ∑ k = 1 E b g h k (13)</p><p>则加入路径热度后的路径权重值为：</p><p>w j k = 1 + F ( f b ) (14)</p><p>5) 利用Dijkstra算法，根据加权后的路径长度对搬运机器人的路径进行规划，直至完成所有的任务。</p></sec><sec id="s5_2"><title>3.2. 在线阶段–基于调节优先级的在线交通控制策略</title><p>定义参数含义如下：</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x74_hanspub.png" xlink:type="simple"/></inline-formula>v点是搬运机器人 经过的第i个节点</p><p>v h a j a车是经过节点v的第j辆搬运机器人</p><p>A = { v h a 1 , v h a 2 , ⋯ , v h a n } ，表示搬运机器人所经过的节点， ，表示经过某节点的搬运机器人车辆，数组A、B中的节点在搬运机器人经过某一节点后更新。</p><p>1) 车辆 h a 行驶至节点v，检测v是否为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x80_hanspub.png" xlink:type="simple"/></inline-formula>的第i个节点， h a 是否为通过此节点的第j辆车；</p><p>2) 若节点v未被其他搬运机器人占用， h a 是第j个通过该节点的搬运机器人，即在该点的优先级最高，则<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x83_hanspub.png" xlink:type="simple"/></inline-formula>继续行驶，通过节点v；</p><p>3) 若节点v未被其他搬运机器人占用， h a 不是第j个通过该节点的搬运机器人，即前一辆车 h a − 1 未通过此节点，需判断搬运机器人 h a − 1 所处的位置是否处于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x87_hanspub.png" xlink:type="simple"/></inline-formula>经过节点v的下一行驶路段范围外。若是，执行步骤①；若否，执行步骤②：</p><p>①调整节点v上 h a 与<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x89_hanspub.png" xlink:type="simple"/></inline-formula>的优先级，改变车辆的通过顺序；</p><p>②停车等待，设定等待时长为 T w 1 ，若在<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x91_hanspub.png" xlink:type="simple"/></inline-formula>范围内<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x92_hanspub.png" xlink:type="simple"/></inline-formula>通过节点v，则 h a 继续按照原始路径行走，通过节点v；若在 T w 1 范围内 未通过节点v，则需重新规划<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/5-2610154x96_hanspub.png" xlink:type="simple"/></inline-formula>至终点的路径。若路径存在，则将其更改为 的行驶路径，若不存在，则继续停车等待处理；</p><p>4) 若节点v被其他搬运机器人占用，则停车等待，设定等待时长为 T w 2 。若等待时长超出 T w 2 ，节点v仍处于被占用状态，则考虑重新规划路径，若不存在其他可行路径，也就是说v是搬运机器人到达终点的必经节点，则停车，状态显示为故障状态。</p><p>多搬运机器人在线调节流程见图3。</p></sec><sec id="s5_3"><title>3.3. 在线冲突规避</title><p>由于道路类型为双向单行车道，在实际行驶的过程中，两个搬运机器人在同一条路段上朝着相反的方向行驶，容易出现机器人死锁、相互碰撞的现象，发生相向冲突。根据冲突特点，本文提出了在线相向冲突的解决策略。解决策略融合了基于机器人优先级的等待策略及二次规划路径策略，在线调节冲突，有效地节省了搬运机器人因冲突而额外耗费的时间。具体解决策略如下：</p><p>①若两辆相向行驶的搬运机器人均按原始路径匀速行驶时，存在着相向冲突，那么判断两个搬运机器人的优先级。优先级高的搬运机器人正常通过，另一辆车则进行在线调节，判断等待、二次规划路径所需的时间，选择耗时较少的策略。</p><p>②若两辆相向行驶的搬运机器人中存在着一辆搬运机器人在停车等待，存在着相向冲突，那么判断两个搬运机器人的优先级。若暂停的搬运机器人优先级最高，那么继续等待，另一搬运机器人进行在线调节，判断等待、二次规划路径所需的时间，选择耗时较少的策略；若行驶的搬运机器人优先级最高，则搬运机器人正常通过，暂停等待的搬运机器人行驶至下一空闲节点执行等待命令。</p><p>③若两辆相向行驶的搬运机器人中存在着一辆搬运机器人在执行拣选操作，存在着相向冲突，那么搬运机器人继续执行拣选工作，另一搬运机器人选择进行在线调节策略。在冲突解决策略中，执行拣选工作的搬运机器人优先级最高。</p><p>相向冲突解决策略如图4所示：</p><p>图3. 在线调节优先级策略流程图</p><p>图4. 解决相向冲突</p></sec></sec><sec id="s6"><title>4. 仿真实例</title><p>采用Matlab软件在40 * 30的栅格地图中设计了三组对比实验。第一组实验对比了使用传统Dijkstra算法与改进的Dijkstra算法时搬运机器人的总行驶距离及运行时间；第二组实验对比了在不同的任务规模下，使用传统Dijkstra算法与改进的Dijkstra算法时搬运机器人的总行驶距离及运行时间；第三组实验对比了在运行过程中，搬运机器人遇到相向冲突时，采取不同在线解决策略所耗费的时间。三组实验分别对离线阶段和在线阶段的动态路径规划算法的有效性进行了验证。</p><sec id="s6_1"><title>4.1. 第一组对比实验</title><p>在考虑路径繁忙程度及转弯时间的基础上，为搬运机器人设定4个任务，对比使用传统Dijkstra算法与改进的Dijkstra算法时搬运机器人的总行驶距离及运行时间。</p><p>搬运机器人任务参数如表1所示。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Task parameter settings of the handling robot syste</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >序号</th><th align="center" valign="middle" >优先级</th><th align="center" valign="middle" >起始坐标</th><th align="center" valign="middle" >结束坐标</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >(10,18)</td><td align="center" valign="middle" >(8,1)</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >(21,10)</td><td align="center" valign="middle" >(16,1)</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >(19,23)</td><td align="center" valign="middle" >(24,1)</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >(29,8)</td><td align="center" valign="middle" >(32,1)</td></tr></tbody></table></table-wrap><p>表1. 搬运机器人系统任务参数设置</p><p>在离线状态下，使用传统Dijkstra算法和改进Dijkstra算法规划4个搬运机器人的行走路径如图5、图6所示。</p><p>图5. 传统Dijkstra算法规划路径图</p><p>图6. 改进Dijkstra算法规划路径图</p><p>4个任务的总运行时间和总运行距离对比见图7。实验结果表明，若综合考虑各条路径的热度以转向所需时间后，使用改进的Dijkstra算法求解的路径，搬运机器人的总运行距离比传统算法节约了14.45米；总运行时间节省了8.45秒，搬运机器人的效率与传统算法相比有明显的提升，体现了改进算法的有效性。</p><p>图7. 算法改进前后运算结果对比</p></sec><sec id="s6_2"><title>4.2. 第二组对比实验</title><p>本组以搬运机器人的总运行时间、总行驶距离为评价标准，对比在不同任务规模的情况下，改进后的多搬运机器人路径规划算法的稳定性。搬运机器人的任务参数如表2所示。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Task parameter settings of the handling robot syste</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >序号</th><th align="center" valign="middle" >优先级</th><th align="center" valign="middle" >起始坐标</th><th align="center" valign="middle" >结束坐标</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >(10,18)</td><td align="center" valign="middle" >(8,1)</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >(21,10)</td><td align="center" valign="middle" >(16,1)</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >(19,23)</td><td align="center" valign="middle" >(24,1)</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >(29,8)</td><td align="center" valign="middle" >(32,1)</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >(32,25)</td><td align="center" valign="middle" >(17,13)</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >(8,23)</td><td align="center" valign="middle" >(11,13)</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >(24,1)</td><td align="center" valign="middle" >(16,15)</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >(29,25)</td><td align="center" valign="middle" >(25,8)</td></tr><tr><td align="center" valign="middle" >9</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >(7,5)</td><td align="center" valign="middle" >(29,5)</td></tr><tr><td align="center" valign="middle" >10</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >(38,27)</td><td align="center" valign="middle" >(32,1)</td></tr><tr><td align="center" valign="middle" >11</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >(6,15)</td><td align="center" valign="middle" >(19,8)</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >12</td><td align="center" valign="middle" >(18,8)</td><td align="center" valign="middle" >(30,15)</td></tr></tbody></table></table-wrap><p>表2. 搬运机器人系统任务参数设置</p><p>不同算例规模下基于传统Dijkstra算法和改进Dijkstra算法的路径规划输出结果如表3、表4所示。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Path planning results based on traditional Dijkstra algorithm under different example size</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >任务规模</th><th align="center" valign="middle" >总行驶距离</th><th align="center" valign="middle" >总运行时间</th><th align="center" valign="middle" >机器人平均行驶距离</th><th align="center" valign="middle" >机器人平均行驶时间</th></tr></thead><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >549.35</td><td align="center" valign="middle" >559.35</td><td align="center" valign="middle" >137.34</td><td align="center" valign="middle" >139.84</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >1107.71</td><td align="center" valign="middle" >1131.72</td><td align="center" valign="middle" >138.46</td><td align="center" valign="middle" >141.47</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >1692.41</td><td align="center" valign="middle" >1708．42</td><td align="center" valign="middle" >141.03</td><td align="center" valign="middle" >142.37</td></tr></tbody></table></table-wrap><p>表3. 不同算例规模下基于传统Dijkstra算法的路径规划输出结果</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Path planning results based on improved Dijkstra algorithm under different example size</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >任务规模</th><th align="center" valign="middle" >总行驶距离</th><th align="center" valign="middle" >总运行时间</th><th align="center" valign="middle" >机器人平均行驶距离</th><th align="center" valign="middle" >机器人平均行驶时间</th></tr></thead><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >534.9</td><td align="center" valign="middle" >550.9</td><td align="center" valign="middle" >133.73</td><td align="center" valign="middle" >137.73</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >1085.24</td><td align="center" valign="middle" >1119.45</td><td align="center" valign="middle" >135.66</td><td align="center" valign="middle" >139.93</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >1650.87</td><td align="center" valign="middle" >1697.78</td><td align="center" valign="middle" >137.57</td><td align="center" valign="middle" >141.48</td></tr></tbody></table></table-wrap><p>表4. 不同算例规模下基于改进Dijkstra算法的路径规划输出结果</p><p>通过仿真结果绘制在不同任务规模下，改进算法前后每辆搬运机器人的平均运行距离和平均运行时间对比图，对比图如图8、图9所示。</p><p>由图8、图9可看出，随着任务的增加，搬运机器人的总运行距离和总运行时间均有所增加。但是使用改进后的Dijkstra算法得出的每辆搬运机器人的平均运行时间和平均运行距离均小于传统算法的计算结果，体现出算法的有效性与稳定性。</p></sec><sec id="s6_3"><title>4.3. 第三组对比实验</title><p>本组以搬运机器人在遇到相向冲突时，对比采取不同在线解决策略时多搬运机器人所耗费的时间。两个任务的参数见表5。搬运机器人的仿真运行界面如图10所示。</p><p>图8. 搬运机器人平均行驶距离对比图</p><p>图9. 搬运机器人平均运行时间对比图</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> Task parameter settings of the handling robot</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >车辆</th><th align="center" valign="middle" >优先级</th><th align="center" valign="middle" >起始坐标</th><th align="center" valign="middle" >结束坐标</th><th align="center" valign="middle" >通过路径顺序</th></tr></thead><tr><td align="center" valign="middle" >h<sub>1</sub></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >(16,1)</td><td align="center" valign="middle" >(11,10)</td><td align="center" valign="middle" >(16,1)→(16,2)→(14,2)→(14,10)→(11,10)</td></tr><tr><td align="center" valign="middle" >h<sub>2</sub></td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >(13,15)</td><td align="center" valign="middle" >(8,1)</td><td align="center" valign="middle" >(13,15)→(13,13)→(14,13)→(14,5)→(10,5)→(10,3)→(8,3)→(8,1)</td></tr></tbody></table></table-wrap><p>表5. 搬运机器人任务参数设置</p><p>由以上信息我们可知，在运行过程中搬运机器人与在(14,8)→(14,6)的路段时间窗有重叠部分，会产生相向冲突。由于的优先级低于，在此种情境下，我们对比采取单一的等待策略和基于在线调节策略所需要的总运行时间，如表6所示。</p><p>图10. 搬运机器人仿真路径图</p><table-wrap id="table6" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> Simulation results of handling robot under different strategie</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >策略选择</th><th align="center" valign="middle" >路径通过次序</th><th align="center" valign="middle" >总运行 时间</th><th align="center" valign="middle" >总运行 距离</th></tr></thead><tr><td align="center" valign="middle" >无相向冲突</td><td align="center" valign="middle" >(13,15)→(13,13)→(14,13)→(14,5)→(10,5)→(10,3)→(8,3)→(8,1)</td><td align="center" valign="middle" >132.39</td><td align="center" valign="middle" >126.39</td></tr><tr><td align="center" valign="middle" >采取单一 等待策略</td><td align="center" valign="middle" >(13,15)→(13,13)→(14,13)→(14,5)→(10,5)→(10,3)→(8,3)→(8,1)</td><td align="center" valign="middle" >162.86</td><td align="center" valign="middle" >126.39</td></tr><tr><td align="center" valign="middle" >在线调 节策略</td><td align="center" valign="middle" >(13,15)→(13,13)→(14,13)→(14,8)→(15,8)→(15,6)→(14,6)→(14,5)→(10,5)→(10,3)→(8,3)→(8,1)</td><td align="center" valign="middle" >146.25</td><td align="center" valign="middle" >142.55</td></tr></tbody></table></table-wrap><p>表6. 不同策略下搬运机器人的仿真输出结果</p><p>当搬运机器人h<sub>1</sub>和h<sub>2</sub>存在相向冲突时，h<sub>2</sub>若在节点(14,8)处直接选择等待h<sub>1</sub>经过后再按照原来的路径行驶，h<sub>2</sub>的运行时间为162.86秒，此时h<sub>2</sub>需要等待30秒的时间；若h<sub>2</sub>依据在线调节的策略，重新规划行驶路径时，只需比无冲突的情况多耗费14秒，即可规避相向冲突。</p><p>分析可得，采取在线调节策略中重新规划路径的方法对于调节h<sub>1</sub>和h<sub>2</sub>之间存在的相向冲突所得到的结果较优，比直接停车等待的策略节约16秒。调节后的搬运机器人的路径如图11所示。</p><p>在第一组对比实验中我们分别采用传统算法和改进的Dijkstra算法为对4个搬运机器人进行离线路径规划，实验结果表明了改进后的Dijkstra算法在总运行时间和运行距离上比传统算法分别节省了14.45米、8.45秒；在第二组对比实验中我们分别采用传统算法和改进的Dijkstra算法对不同数量规模的搬运机器人进行离线路径规划，实验结果表明，数量规模的增长对于改进的算法产生的影响不大，在总运行时间和运行距离上依旧有所减少；在第三组对比实验中我们对任务产生的在线路径冲突进行决策，研究结果表明，单一的冲突解决方式不一定是最优结果，可能是等待策略最优，也可能是二次规划路径的策略最优，需要具体问题具体分析。通过计算产生冲突的时间窗，实行在线调节冲突的策略不仅可以规避搬运机器人之间的冲突，还可以节约规避冲突所耗费的时间，验证了算法的有效性。</p></sec></sec><sec id="s7"><title>5. 结论</title><p>针对多搬运机器人的动态路径优化问题，考虑了机器人的转向时间和路径的繁忙程度，建立了带有</p><p>图11. 采取在线调节策略的路径图</p><p>时间窗的多搬运机器人路径规划模型，设计了带有时间窗的改进两阶段动态路径规划算法。在离线状态下使用改进的Dijkstra算法规划全局时间最优路径，在线状态下基于机器人的优先级对搬运机器人进行实时调度，并为可能存在的相向冲突提供了相应的解决策略。解决方案融合了车辆等待、二次规划路径以及基于优先级调整搬运机器人通行次序等方法，有效地节省了搬运机器人因冲突而额外耗费的等待时间。</p><p>通过仿真分析，提出的改进算法对搬运机器人的总运行时间有着明显的缩短，增强了搬运机器人路径的柔性，为仓储作业中多搬运机器人动态路径优化问题提供了解决方案。但是当机器人的数量增大到一定程度时，算法的响应时间和搜索速度则会变慢。因此，对大规模的搬运机器人进行动态路径优化，是未来的研究方向之一。</p></sec><sec id="s8"><title>文章引用</title><p>王鑫淼. 仓储作业中多搬运机器人动态路径优化Dynamic Path Planning for Multi-Robot in Warehousing Operations[J]. 人工智能与机器人研究, 2019, 08(02): 68-82. https://doi.org/10.12677/AIRR.2019.82009</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.30316-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">胡国盛. 我国电商企业物流体系优化分析[J]. 商业经济研究, 2017(19): 106-108.</mixed-citation></ref><ref id="hanspub.30316-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Hazard, C.J. and Wurman, P.R. (2006) Alphabet Soup: A Testbed for Studying Resource Allocation in Multi-Vehicle Systems. Proceedings of the 2006 AAAI Workshop on Auction Mechanisms for Robot Coordination, Boston, 17 July 2006, 23-30.</mixed-citation></ref><ref id="hanspub.30316-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Li, W., Jiang, L. and Li, Z. (2016) Research on the Task Assignment Problem of Warehouse Robots in the Smart Warehouse. 12th International Symposium on Operations Research and Its Applications in Engineering, Technology and Management, Luoyang, 21-24 August 2015, 29-33.</mixed-citation></ref><ref id="hanspub.30316-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Yeung, W.-K., Choi, T.M. and Cheng, T.C.E. (2011) Supply Chain Scheduling and Coordination with Dual Delivery Modes and Inventory Storage Cost. International Journal of Production Economics, 132, 223-229. &lt;br&gt;https://doi.org/10.1016/j.ijpe.2011.04.012</mixed-citation></ref><ref id="hanspub.30316-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Khorshid, M.M., Holte, R.C. and Sturtevant, N.R. (2013) A Polynomial-Time Algorithm for Non-Optimal Multi-Agent Pathfinding. Symposium on Combinatorial Search. Proceedings of the 4th Annual Symposium on Combinatorial Search, Castell de Cardona, Barcelona, 15-16 July 2011, 76-83.</mixed-citation></ref><ref id="hanspub.30316-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Chang, W.K. and Tanchoco, J.M.A. (1991) Journal of Production Research Conflict-Free Shortest Time Bidirectional AGV Routing. International Journal of Production Research, 29, 2377-2391. &lt;br&gt;https://doi.org/10.1080/00207549108948090</mixed-citation></ref><ref id="hanspub.30316-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Ma, Y., Wang, H., Xie, Y. and Guo, M. (2014) Path Planning for Multiple Mobile Robots under Double-Warehouse. Information Sciences, 278, 357-379. &lt;br&gt;https://doi.org/10.1016/j.ins.2014.03.058</mixed-citation></ref><ref id="hanspub.30316-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Umar, U.A., Ariffin, M.K.A. and Ismail, N. (2012) Priority-Based Genetic Al-gorithm for Conflict-Free Automated Guided Vehicle Routing. Journal of Engineering Valuation and Cost Analysis, 50, 732-739.</mixed-citation></ref><ref id="hanspub.30316-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Desrochers, M., Desrosiers, J. and Solomon, M. (1992) A New Optimization Algorithm for the Vehicle Routing Problem with Time windows. Operation Research, 40, 199-415. &lt;br&gt;https://doi.org/10.1287/opre.40.2.342</mixed-citation></ref><ref id="hanspub.30316-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Wang, W. and Goh, W.B. (2015) A Stochastic Algorithm for Makespan Minimized Multi-Agent Path Planning in Discrete Space. Applied Soft Computing, 30, 287-304. &lt;br&gt;https://doi.org/10.1016/j.asoc.2015.01.046</mixed-citation></ref><ref id="hanspub.30316-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Hidalgo-Paniagua, A., Miguel Vega-Rodríguez, A., Ferruz, J. and Pavón, N. (2015) MOSFLA-MRPP: Multi-Objective Shuffled Frog-Leaping Algorithm Applied to Mobile Robot Path Planning. Engineering Applications of Artificial Intelligence, 44, 123-136. &lt;br&gt;https://doi.org/10.1016/j.engappai.2015.05.011</mixed-citation></ref><ref id="hanspub.30316-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Ma, H., Koenig, S., Ayanian, N., et al. (2017) Overview: Generalizations of Multi-Agent Path Finding to Real-World Scenarios. Computer Science, arXiv: 1702.05515.</mixed-citation></ref><ref id="hanspub.30316-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Miao, H. and Tian, Y.C. (2013) Dynamic Robot Path Planning Using an Enhanced Simulated Annealing Approach. Applied Mathematics and Computation, 222, 420-437. &lt;br&gt;https://doi.org/10.1016/j.amc.2013.07.022</mixed-citation></ref><ref id="hanspub.30316-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Standley, T.S. and Korf, R.E. (2011) Complete Algorithms for Cooperative Pathfinding Problems. International Joint Conference on Artificial Intelligence. Proceedings of the 22nd International Joint Conference on Artificial Intelligence, Barcelona, 16-22 July 2011, 223-229.</mixed-citation></ref><ref id="hanspub.30316-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Sharon, G., Stern, R., Felner, A. and Sturtevant, N.R. (2015) Conflict-Based Search for Optimal Multi-Agent Pathfinding. Artificial Intelligence, 219, 40-66. &lt;br&gt;https://doi.org/10.1016/j.artint.2014.11.006</mixed-citation></ref><ref id="hanspub.30316-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">何小锋, 马良. 带时间窗车辆路径问题的量子蚁群算法[J]. 系统工程理论与实践, 2013, 33(5): 1255-1261.</mixed-citation></ref><ref id="hanspub.30316-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">张立峰, 易万里, 刘晓兰. 基于两阶段算法的大规模成品油二次配送优化[J]. 系统工程理论与实践, 2016, 36(11): 2951-2963.</mixed-citation></ref><ref id="hanspub.30316-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Maza, S. and Castagna, P. (2005) A Performance-Based Structural Policy for Con-flict-Free Routing of Bidirectional Automated Guided Vehicles. Computers in Industry, 56, 719-733. &lt;br&gt;https://doi.org/10.1016/j.compind.2005.03.003</mixed-citation></ref><ref id="hanspub.30316-ref19"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">Lee, J.H., Lee, B.H. and Choi, M.H. (1998) A Real-Time Traffic Control Scheme of Multiple AGV Systems for Free Minimum Time Motion: A Routing Table Approach. IEEE Transactions on Systems, Man, and Cybernetics—Part A: Systems and Humans, 28, 347-358. &lt;br&gt;https://doi.org/10.1109/3468.668966</mixed-citation></ref><ref id="hanspub.30316-ref20"><label>20</label><mixed-citation publication-type="other" xlink:type="simple">孟祥虎, 胡蓉, 钱斌. 求解带时间窗车辆路径问题的有效混合PBIL算法[J]. 系统工程理论与实践, 2014, 34(10): 2701-2709.</mixed-citation></ref></ref-list></back></article>