<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2016.51008</article-id><article-id pub-id-type="publisher-id">SEA-17003</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20160100000_44498085.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于谱哈希的大规模网页分类算法
  Large Scale Web Page Classification Algorithm Based on Spectral Hashing
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>田</surname><given-names>郸郸</given-names></name><xref ref-type="aff" rid="aff1"><sub>1</sub></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>国防科学技术大学计算机学院，湖南 长沙</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>1240074883@qq.com</email></corresp></author-notes><pub-date pub-type="epub"><day>17</day><month>02</month><year>2016</year></pub-date><volume>05</volume><issue>01</issue><fpage>65</fpage><lpage>74</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   如今，网络信息已经覆盖到我们生活的方方面面，但随着网络的发展，网络信息过载的问题也越来越凸显，我们在网络中难以准确定位我们所需要的信息。将网页分类可以有效的提高网页搜索效率，帮助我们准确的定位所需网页。当前的网页分类算法可以处理少量网页分类，但对大规模网页进行分类效率不够理想。最近人们提出了分布式的网页分类方法，但这种方法虽然能够提高网页分类效率，但并没有改进分类算法本身。所以本文提出一种基于哈希散列和KNN的方法，设计一个适用于大规模网页分类的分类算法。 Nowadays, network information has been covered in all aspects of our lives, but with the devel-opment of the network, the problem of network information overload has become more and more prominent so that it is difficult for us to accurately locate the information we need in the network. The web classification can effectively improve the efficiency of web search and help us accurately locate the desired page. The current classification algorithm can handle a small amount of web pages classified, but the efficiency of large-scale web classification is not ideal. Recently, a distributed web classification is proposed. Although this method can improve the efficiency of web page classification, it does not improve classification algorithm itself. Therefore, this paper proposes a hashes and KNN method based on the design of a classification algorithm applied to large-scale web classification.
    
  
 
</p></abstract><kwd-group><kwd>网页分类，大规模，谱哈希，KNN, Web Page Classification</kwd><kwd> Large Scale</kwd><kwd> Spectrum Hashing</kwd><kwd> KNN</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于谱哈希的大规模网页分类算法<sup> </sup></title><p>田郸郸</p><p>国防科学技术大学计算机学院，湖南 长沙</p><disp-formula id="hanspub.17003-formula586"><graphic xlink:href="http://html.hanspub.org/file/8-2690190x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2016年2月2日；录用日期：2016年2月22日；发布日期：2016年2月25日</p><disp-formula id="hanspub.17003-formula587"><graphic xlink:href="http://html.hanspub.org/file/8-2690190x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>如今，网络信息已经覆盖到我们生活的方方面面，但随着网络的发展，网络信息过载的问题也越来越凸显，我们在网络中难以准确定位我们所需要的信息。将网页分类可以有效的提高网页搜索效率，帮助我们准确的定位所需网页。当前的网页分类算法可以处理少量网页分类，但对大规模网页进行分类效率不够理想。最近人们提出了分布式的网页分类方法，但这种方法虽然能够提高网页分类效率，但并没有改进分类算法本身。所以本文提出一种基于哈希散列和KNN的方法，设计一个适用于大规模网页分类的分类算法。</p><p>关键词 :网页分类，大规模，谱哈希，KNN</p><disp-formula id="hanspub.17003-formula588"><graphic xlink:href="http://html.hanspub.org/file/8-2690190x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>随着信息时代的到来，网络上的信息资源已经覆盖到我们生活的方方面面，网页的数量也正在经历爆炸式的增长。据中国互联网络信息中心(CNNIC)提供的数据，截至2014年12月，中国网站数量为335万个，年增长4.6%，中国网页数量为1899亿个，年增长26.6%。这样增长量为我们的生活带来便利和高效的同时，也带来了网络信息过载的问题，使我们迷失在浩瀚的数据之中。为了能够高效、准确的定位我们所需要的网页，许多技术先后被提出，包括搜索引擎和分类处理等等。</p><p>在处理海量数据时的一个重要的方法便是把它们进行分类，顾名思义，网页分类就是根据网页所承载的信息进行分类。网页分类可以将网页按照类别存储到相应的数据库中，便于用户快速、准确的找到自己所需要的网页。网页分类可以帮助提高搜索引擎的效率以及查全率和准确率。此外，网页分类也是网络安全管理的关键技术，基于网页分类，我们可以对一些网页进行快速、准确的访问控制。这对维护社会稳定、促进国家发展具有极其重要的现实意义。</p><p>此前，网页分类是由领域专家手工完成的，虽然准确率高，但效率很低，随着网页数量的增加，手工分类早已不能满足实际的需求。于是一些基于统计和机器学习的网页分类算法被提出，包括：KNN算法、决策树、支持向量机[<xref ref-type="bibr" rid="hanspub.17003-ref1">1</xref>] 、朴素贝叶斯概率模型[<xref ref-type="bibr" rid="hanspub.17003-ref2">2</xref>] 和神经网络[<xref ref-type="bibr" rid="hanspub.17003-ref3">3</xref>] 。这些分类算法在处理少量网页是高效的，但在处理大规模网页时，这些方法的效率便不够理想。于是又提出了基于分布式的分类方法，这种方法虽然能够满足分类效率的要求，但并没有改进分类算法本身。所以本文提出一种基于哈希散列和KNN的方法，设计一个适用于大规模网页分类的分类算法。</p></sec><sec id="s4"><title>2. 相关技术介绍</title><sec id="s4_1"><title>2.1. 当前网页分类技术及问题分析</title><p>一般来说，网页分类通常基于两种策略：手动分类和自动分类。手动分类便是依赖于领域专家对网页进行分类，这个策略的典型例子便是雅虎(www.yahoo.com)。而自动分类便是预先构建一个分类器，训练集输入到分类器中，对分类器进行训练，分类器获得相关知识，做好分类准备。</p><p>自动网页分类器也可以进一步的分为三种类型：线性分类器、非线性分类器和统计分类器。而这些基于传统向量空间模型的分类器，其分类方法都是将网页中的特征信息表示为高维空间中的一个点，这种方法在表示网页时，向量空间的维数会达到上万维，高维向量的运算开销使得这些分类器难以应付大规模的网页分类。而简单的减少特征项，降低特征空间维度会影响分类器的准确性。所以解决这个问题就要在不影响分类器准确性的前提下，降低原始网页特征空间的维度。谱哈希是一种理想的方法，它能够用短哈希码代表网页特征向量，同时保留原始网页特征，散列后，web页面维度可以大幅减少。</p></sec><sec id="s4_2"><title>2.2. 谱哈希</title><p>谱哈希[<xref ref-type="bibr" rid="hanspub.17003-ref4">4</xref>] 其基本思想是将高维空间向量映射至低维汉明空间(Hamming Space) [<xref ref-type="bibr" rid="hanspub.17003-ref5">5</xref>] ，并保持原空间向量相似性，使得新空间向量的汉明距离(Hamming Distance)反映原空间向量相似度的哈希算法。谱哈希将编码过程视为图分割过程，对高维数据集进行谱分析，通过放松约束条件将问题转化成拉普拉斯特征图的降维问题，从而求解得到网页的哈希编码。假设有n个d维的网页对象，将该这些表示为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x9_hanspub.png" xlink:type="simple"/></inline-formula>，将所有对象数据嵌入到汉明空间后的结果为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x10_hanspub.png" xlink:type="simple"/></inline-formula>，则谱哈希算法可描述为下述优化问题：</p><disp-formula id="hanspub.17003-formula589"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x11_hanspub.png"  xlink:type="simple"/></disp-formula><p>(1) 式中Y<sub>i</sub>表示Y的第i行，r表示哈希编码序列的长度，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x12_hanspub.png" xlink:type="simple"/></inline-formula>，W是原始空间中的邻接矩阵，W<sub>ij</sub>表示原始空间中两样本点X<sub>i</sub>与X<sub>j</sub>之间的相似度。约束条件中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x13_hanspub.png" xlink:type="simple"/></inline-formula>表示每个哈希值取0或1的概率相等，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x14_hanspub.png" xlink:type="simple"/></inline-formula>表示不同位上的哈希编码之间不相关。引入对角矩阵D，使得对角元素<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x15_hanspub.png" xlink:type="simple"/></inline-formula>，则目标函数化为：</p><disp-formula id="hanspub.17003-formula590"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x16_hanspub.png"  xlink:type="simple"/></disp-formula><p>(2) 式中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x17_hanspub.png" xlink:type="simple"/></inline-formula>，称为拉普拉斯矩阵。众所周知，这是一个NP难的问题，但若放宽条件<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x18_hanspub.png" xlink:type="simple"/></inline-formula>，使<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x19_hanspub.png" xlink:type="simple"/></inline-formula>，则问题变为求拉普拉斯矩阵的较小的r个特征值对应的特征向量(不包括0特征)，通过选取合适的阈值对这些特征向量进行量化即可得到对像哈希码。</p></sec><sec id="s4_3"><title>2.3. TF-IDF (Term Frequency-Inverse Document Frequency)</title><p>TF-IDF [<xref ref-type="bibr" rid="hanspub.17003-ref6">6</xref>] 是一种统计方法，用以评估一个词对于一个文件集或一个语料库中的其中一份文件的重要程度。词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。TF-IDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。</p><p>TF-IDF实际上是：TF * IDF，TF词频(Term Frequency)，TF表示词条在文档中出现的频率。其计算公式如下：</p><disp-formula id="hanspub.17003-formula591"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x20_hanspub.png"  xlink:type="simple"/></disp-formula><p>(3) 式中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x21_hanspub.png" xlink:type="simple"/></inline-formula>是t词在文档中的出现次数，而分母则是在文档中所有k个字词的出现次数之和。</p><p>IDF逆向文件频率(Inverse Document Frequency)，是一个词语普遍重要性的度量。某一特定词语的IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到，其公式如下：</p><disp-formula id="hanspub.17003-formula592"><label>(4)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x22_hanspub.png"  xlink:type="simple"/></disp-formula><p>(4) 式中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x23_hanspub.png" xlink:type="simple"/></inline-formula>表示语料库中的文档总数。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x24_hanspub.png" xlink:type="simple"/></inline-formula>表示包含t词的文档数。</p><p>则词t的TF-IDF值计算公式如下：</p><disp-formula id="hanspub.17003-formula593"><label>(5)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x25_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s4_4"><title>2.4. KNN (K-Nearest Neighbor)最近邻规则分类</title><p>KNN (K-Nearest Neighbor, KNN)最近邻分类算法[<xref ref-type="bibr" rid="hanspub.17003-ref7">7</xref>] ，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本d<sub>x</sub>在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则d<sub>x</sub>也属于这个类别。KNN算法中，所选择的邻居都是已经正确分类的对象。具体的算法步骤如下：</p><p>一：首先计算d<sub>x</sub>与训练集中每个样本之间的相似度(本文使用余弦距离作为度量两个向量之间的相似度)，公式如下：</p><disp-formula id="hanspub.17003-formula594"><label>(6)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x26_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x27_hanspub.png" xlink:type="simple"/></inline-formula>表示d<sub>i</sub>和d<sub>j</sub>向量之间的相似度；M表示维度。W<sub>ik</sub>代表向量d<sub>i</sub>的第k位。</p><p>二：对相似度计算结果排序，选出相似度高的前K项</p><p>三：假设前K项分别属于C个类，计算d<sub>x</sub>在C<sub>j</sub>类中的累计的相似度，公式如下：</p><disp-formula id="hanspub.17003-formula595"><label>(7)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x28_hanspub.png"  xlink:type="simple"/></disp-formula><p>当d<sub>i</sub>属于C<sub>j</sub>类时<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x29_hanspub.png" xlink:type="simple"/></inline-formula>，否则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x30_hanspub.png" xlink:type="simple"/></inline-formula></p><p>四：d<sub>x</sub>被分类为累计相似度最高的类</p></sec></sec><sec id="s5"><title>3. 算法详细描述</title><p>本文所设计的算法是在原始网页已经表示成特征向量形式后，将这些高维向量转换为短的哈希码，以达到降低向量维度，减少分类运算开销的目的。利用KNN对紧凑哈希码进行分类。算法的详细描述如下：</p><p>Step1：从N个已分类的网页中，随机抽取X个网页作为训练集，将剩余的网页作为测试集。</p><p>Step2：对原始网页解析，去除网页中的噪音数据，抽取网页文本信息。</p><p>Step3：对网页的文本信息进行预处理，(预处理主要包括分词和词性标注、除去形容词、副词、介词、连词及感叹词等停用词)抽取特征词，生成特征词集，使用TF-IDF作为我们的特征词选择方法，特征选择流程的流程图如图1所示。(本文取文档中综合权值较高的前5个词加入特征集，即n = 5)。</p><p>Step4：以特征向量的形式表示网页[<xref ref-type="bibr" rid="hanspub.17003-ref8">8</xref>] 。</p><p>Step5：利用谱哈希算法对特征向量进行降维，生成紧凑哈希码。</p><p>Step6：利用KNN算法对待分类网页进行分类，降维后我们使用汉明距离来度量两个散列的相似度[<xref ref-type="bibr" rid="hanspub.17003-ref9">9</xref>] 。汉明距离公式列出如下：</p><disp-formula id="hanspub.17003-formula596"><label>(8)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x31_hanspub.png"  xlink:type="simple"/></disp-formula><p>h<sub>x</sub>和h<sub>y</sub>表示哈希码，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x32_hanspub.png" xlink:type="simple"/></inline-formula>代表i位的距离，当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x33_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x34_hanspub.png" xlink:type="simple"/></inline-formula>，否则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-2690190x35_hanspub.png" xlink:type="simple"/></inline-formula>。</p></sec><sec id="s6"><title>4. 算法测试</title><sec id="s6_1"><title>4.1. 数据集</title><p>我们从凤凰博客(http://www.ifen g.com/)爬取2,522,182页总共包括9类如下:汽车、教育、娱乐、金融、游戏、房产、新闻、体育和技术。分类的细节集如表1所示。</p><p>图1. 特征提取流程</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Detail of datase</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >Category</th><th align="center" valign="middle" >Web page Number</th><th align="center" valign="middle" >Category</th><th align="center" valign="middle" >Web page Number</th></tr></thead><tr><td align="center" valign="middle" >Automobile</td><td align="center" valign="middle" >3,027,662</td><td align="center" valign="middle" >Education</td><td align="center" valign="middle" >446,539</td></tr><tr><td align="center" valign="middle" >Sports</td><td align="center" valign="middle" >94,146</td><td align="center" valign="middle" >Finance</td><td align="center" valign="middle" >473,222</td></tr><tr><td align="center" valign="middle" >Games</td><td align="center" valign="middle" >89,550</td><td align="center" valign="middle" >House</td><td align="center" valign="middle" >313,386</td></tr><tr><td align="center" valign="middle" >News</td><td align="center" valign="middle" >344,818</td><td align="center" valign="middle" >Entertainment</td><td align="center" valign="middle" >110,885</td></tr><tr><td align="center" valign="middle" >Technology</td><td align="center" valign="middle" >346,874</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表1. 数据集分类统计表</p></sec><sec id="s6_2"><title>4.2. 实验结果</title><p>为了证明此算法可以有效的应用于大规模网页分类，我们利用上述的数据集对算法进行测试，测试算法的分类精度、效率，并与KNN算法进行对比。在本文中利用宏准确率，宏召回率和宏F1值来评价的实验结果。</p><p>准确率是所有判断的网页中与人工分类结果吻合的网页所占的比率。其数学公式为：</p><disp-formula id="hanspub.17003-formula597"><label>(9)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x37_hanspub.png"  xlink:type="simple"/></disp-formula><p>召回率是人工分类结果应有的网页中分类系统吻合的网页所占的比率，其数学公式为：</p><disp-formula id="hanspub.17003-formula598"><label>(10)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x38_hanspub.png"  xlink:type="simple"/></disp-formula><p>准确率和召回率反映了分类质量的两个不同方面，二者必须综合考虑，不可偏废，因此存在一种新的评估指标，即F1测试值，其数学公式为：</p><disp-formula id="hanspub.17003-formula599"><label>(11)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-2690190x39_hanspub.png"  xlink:type="simple"/></disp-formula><p>宏：计算全部类的准确率、召回率和F1值。</p><sec id="s6_2_1"><title>4.2.1. 实验1 (k值对KNN分类算法的影响)</title><p>在此实验中，我们将讨论K值对KNN分类算法的影响。为了节省时间，我们从每个类别中分别采样2000个网页。被采样的网页一半被用作训练集，其余网页作为测试集。以经过谱哈希降维后的短哈希码和原始网页向量作为输入，来计算当K值逐渐增大时，两种算法的宏F1值。其结果如图2和图3。我们可以看到K值增大时宏F1值的变化。如图3所示，我们可以看到F1值是随K值的增加而增加的，但是k超过5时，F1值开始逐渐减少。如图2所示，当K值增加到100，F1值急剧下降。因此，在我们下面的实验中，我们设定的K值为5。</p></sec><sec id="s6_2_2"><title>4.2.2. 实验2 (训练集规模对算法的影响)</title><p>在这个实验中，我们将讨论不同规模的训练集对两种算法的影响，并测试两种算法的性能来进行比</p><p>图2. 不同K值时的分类结果(1 ≤ K ≤ 9000)</p><p>较。实验中我们从数据集中随机选择相应数量的网页作为训练集，分别从数据集的每个分类中选择10,000个网页作为测试集。分类结果的宏准确率，宏召回率，宏F1值和时间成本如图4至图7所示。</p><p>图3. 不同K值时的分类结果(1 ≤ K ≤ 50)</p><p>图4. 宏准确率随训练集增大的变化</p><p>图5. 宏召回率随训练集增大的变化</p><p>图6. 宏F1值随训练集增大的变化</p><p>图7. 时间开销随训练集增大的变化</p><p>图8. 不同算法的宏F1对照</p><p>从图4~6中我们可以看出，KNN算法的性能，无论是宏准确率、宏召回率、宏F1值这三个测</p><p>图9. 不同算法的时间成本对照</p><p>图10. 不同算法的内存使用对照(10,000)</p><p>试指标，都比本文所设计的算法略高一点。但从图7中，我们可以看出KNN算法要比本文所设计的算法慢的多，并且KNN算法的时间成本随着训练集的增加成线性的增长，本文所设计的算法只是略微的有些变化。从图7中我们可以看出当训练集规模为3000时，本文所设计的算法性能最佳，所以我们选择训练集为3000，进一步对两种算法的性能进行比较。</p><p>从图8、图9、图10中，我们可以看到KNN算法只比本文所设计的算法的宏F1值略高一点，但本文算法的时间开销、内存开销却远小于KNN算法。</p></sec></sec></sec><sec id="s7"><title>5. 结束语</title><p>通过实验对比，本文所提出的基于谱哈希的大规模网页分类算法在分类过程中，能够有效的降低时间开销和内存开销。也说明本文所设计的算法，应用于大规模网页的分类是可行且有效的。</p></sec><sec id="s8"><title>文章引用</title><p>田郸郸. 基于谱哈希的大规模网页分类算法 Large Scale Web Page Classification Algorithm Based on Spectral Hashing[J]. 软件工程与应用, 2016, 05(01): 65-74. http://dx.doi.org/10.12677/SEA.2016.51008</p></sec><sec id="s9"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.17003-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">贺海军, 王建芬, 周青, 等. 基于决策支持向量机的中文网页分类器[J]. 计算机工程, 2003, 29(2): 47-48.</mixed-citation></ref><ref id="hanspub.17003-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">李晋松. 基于朴素贝叶斯的网页自动分类技术研究[D]: [硕士学位论文]. 北京: 北京化工大学, 2008.</mixed-citation></ref><ref id="hanspub.17003-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">史国强. 基于RBF神经网络的网页分类技术研究[D]: [硕士学位论文]. 北京: 中国石油大学, 2011.</mixed-citation></ref><ref id="hanspub.17003-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Weiss, Y., Torralba, A. and Fer-gus, R. (2008) Spectral Hashing. Neural Information Processing Systems, 282, 1753- 1760.</mixed-citation></ref><ref id="hanspub.17003-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Charon, I., Cohen, G., et al. (2010) New Identifying Codes in the Binary Hamming Space. European Journal of Combinatorics, 31, 491-501. &lt;br&gt;http://dx.doi.org/10.1016/j.ejc.2009.03.032</mixed-citation></ref><ref id="hanspub.17003-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">张瑾. 基于改进TF-IDF算法的情报关键词提取方法[J]. 情报杂志, 2014(4): 153-155.</mixed-citation></ref><ref id="hanspub.17003-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Song, Y., Huang, J., Zhou, D., et al. (2007) IKNN: Informative K-Nearest Neighbor Pattern Classification. Knowledge Discovery in Databases: PKDD. Springer Berlin Heidelberg, 248-264.</mixed-citation></ref><ref id="hanspub.17003-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">许阳, 刘功申, 孟魁. 基于句中词语间关系的文本向量化算法[J]. 信息安全与通信保密, 2014(4): 84-88.</mixed-citation></ref><ref id="hanspub.17003-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">李峰, 李芳. 中文词语语义相似度计算——基于《知网》2000 [J]. 中文信息学报, 2007, 21(3): 99-105.</mixed-citation></ref></ref-list></back></article>