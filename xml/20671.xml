<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AAM</journal-id><journal-title-group><journal-title>Advances in Applied Mathematics</journal-title></journal-title-group><issn pub-type="epub">2324-7991</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AAM.2017.63030</article-id><article-id pub-id-type="publisher-id">AAM-20671</article-id><article-categories><subj-group subj-group-type="heading"><subject>AAM20170300000_91856799.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  变系数2D对流扩散方程的高阶迭代算子分裂方法
  Higher Order Iterative Operator Splitting Method for the 2D Convection Diffusion Equation with Variable Coefficients
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>姚</surname><given-names>林</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>苏</surname><given-names>海燕</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>新疆大学数学与系统科学学院，新疆 乌鲁木齐</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>yaolin.wushi@foxmail.com(姚林)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>12</day><month>05</month><year>2017</year></pub-date><volume>06</volume><issue>03</issue><fpage>249</fpage><lpage>258</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  本文针对变系数2D对流扩散方程，呈现了一种新颖的高阶迭代算子分裂方法。该方法结合了经典迭代格式和Zassenhaus乘积公式。傅立叶谱方法和维数分裂格式用于空间算子。数值实验验证了所提出的方法通过加权方法可以达到高阶精度。此外，新方法不仅可以减少误差而且能够节省大量的CPU时间。
   In this paper, a novel higher order iterative operator splitting method is presented for the 2D convection diffusion equation with the variable coefficient. The proposed scheme combines the classical iterative scheme and Zassenhaus product formula for the temporal discretization. And Fourier pseudo spectral method and dimensional splitting scheme are applied for the spatial operators. The numerical results verified that the proposed method can get second order accuracy by weighted iterative scheme. Besides, the new method not only can reduce numerical error but also save a lot of CPU time than the classical iterative method.
 
</p></abstract><kwd-group><kwd>对流扩散，Zassenhaus乘积，高阶迭代，傅立叶拟谱, Convection Diffusion</kwd><kwd> Zassenhaus Product</kwd><kwd> Higher Order Iterative</kwd><kwd> Fourier Pseudo Spectral</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>变系数2D对流扩散方程的高阶迭代算子 分裂方法<sup> </sup></title><p>姚林，苏海燕</p><p>新疆大学数学与系统科学学院，新疆 乌鲁木齐</p><p>收稿日期：2017年5月3日；录用日期：2017年5月18日；发布日期：2017年5月25日</p><disp-formula id="hanspub.20671-formula135"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文针对变系数2D对流扩散方程，呈现了一种新颖的高阶迭代算子分裂方法。该方法结合了经典迭代格式和Zassenhaus乘积公式。傅立叶谱方法和维数分裂格式用于空间算子。数值实验验证了所提出的方法通过加权方法可以达到高阶精度。此外，新方法不仅可以减少误差而且能够节省大量的CPU时间。</p><p>关键词 :对流扩散，Zassenhaus乘积，高阶迭代，傅立叶拟谱</p><disp-formula id="hanspub.20671-formula136"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="http://image.hanspub.org:8080\Html/htmlimages\1-2890033x\e70a10f1-7c93-45ea-9603-062237856e4b.png" /><img src="http://image.hanspub.org:8080\Html\htmlimages\1-2890033x\e898c85e-ffc4-45c9-b817-14224a4d6960.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>众所周知，许多复杂有趣的现象是由于对流扩散方程中的对流项和扩散项的不同引起的。因此，它的数值解的研究在许多科学和工程领域中都具有重要的意义，呈现于 [<xref ref-type="bibr" rid="hanspub.20671-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.20671-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.20671-ref3">3</xref>] 。因为扩散项和对流项的特点，很难找到一个精确有效的数值方法。因此，求解对流扩散问题的有效数值解方法是计算数学中的一个重要研究课题。已有的数值方法有限差分方法 [<xref ref-type="bibr" rid="hanspub.20671-ref4">4</xref>] ，有限体积方法 [<xref ref-type="bibr" rid="hanspub.20671-ref5">5</xref>] 和有限元方法 [<xref ref-type="bibr" rid="hanspub.20671-ref6">6</xref>] 。然而，对于对流占优的问题，通常的有限差分法和有限元法解对流占优的问题可能会产生数值震荡。本文提出的新方法能够很好地消除震荡。</p><p>本文将考虑变系数对流扩散方程：</p><disp-formula id="hanspub.20671-formula137"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x9_hanspub.png"  xlink:type="simple"/></disp-formula><p>这地方<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x10_hanspub.png" xlink:type="simple"/></inline-formula>是一个在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x11_hanspub.png" xlink:type="simple"/></inline-formula>上的有界区域，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x12_hanspub.png" xlink:type="simple"/></inline-formula>是在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x13_hanspub.png" xlink:type="simple"/></inline-formula>上的时间范围，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x14_hanspub.png" xlink:type="simple"/></inline-formula>表示浓度，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x15_hanspub.png" xlink:type="simple"/></inline-formula>表示速度场，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x16_hanspub.png" xlink:type="simple"/></inline-formula>是扩散系数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x17_hanspub.png" xlink:type="simple"/></inline-formula>是有界的连续函数。本文将使用周期性边界条件处理对流扩散方程。</p><p>J&#252;rgen Geiser研究了常系数对流扩散方程，使用改进的加权迭代格式，得到了很好的结果，呈现于 [<xref ref-type="bibr" rid="hanspub.20671-ref7">7</xref>] [<xref ref-type="bibr" rid="hanspub.20671-ref8">8</xref>] 。本文研究的高阶迭代格式也是改进的经典迭代格式基于Zassenhaus 乘积公式。主要的思想是应用Zassenhaus 乘积公式不断改进迭代格式的初始条件，从而提高经典迭代格式的精度和节省CPU时间。经典迭代格式的基本思想是把复杂的物理问题分解成简单的物理问题，从而能够简化运算和并行计算，看 [<xref ref-type="bibr" rid="hanspub.20671-ref9">9</xref>] [<xref ref-type="bibr" rid="hanspub.20671-ref10">10</xref>] 。Zassenhaus乘积公式是李代数中的一个基本的重要的公式。</p><p>本文将应用加权方法求解变系数的二维对流扩散方程。空间离散应用傅立叶谱方法，时间离散使用加权迭代格式和高阶龙格库塔技术。更具体地，我们使用维数分裂的思想把高维问题分成几个简单的低维问题，使求解变得简单，本文的维数分裂格式是沿着<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x18_hanspub.png" xlink:type="simple"/></inline-formula>方向的算子和沿<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x19_hanspub.png" xlink:type="simple"/></inline-formula>方向的算子。然后使用高阶迭代格式和高阶龙格库塔方法去解低维问题，可以减少分裂误差和促进解的过程。另外，提出的新方法要比经典的迭代方法省CPU时间和收敛精度高。</p><p>本文的框架如下：第二部分，介绍迭代算子分裂方法。第三部分，介绍傅立叶拟谱方法和维数分裂格式。第四部分，讨论高阶迭代格式联合经典的迭代格式和Zassenhaus乘积公式。第五部分，几个数值实例验证高阶格式的高效性和收敛率。第六部分，结论。</p></sec><sec id="s4"><title>2. 经典的迭代算子分裂方法</title><p>我们知道经典的迭代格式广泛用于解决现实生活中的问题。本文考虑下列的非均匀的柯西问题</p><disp-formula id="hanspub.20671-formula138"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x20_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x21_hanspub.png" xlink:type="simple"/></inline-formula>是初始条件，线性算子是在巴拿赫空间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x23_hanspub.png" xlink:type="simple"/></inline-formula><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x22_hanspub.png" xlink:type="simple"/></inline-formula>上的有界线性算子，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x24_hanspub.png" xlink:type="simple"/></inline-formula>是连续函数。</p><p>算法2.1给出了经典的迭代格式，本文考虑使用交替迭代格式去求解上面的非均匀的柯西问题：</p><disp-formula id="hanspub.20671-formula139"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x25_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里初始迭代<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x26_hanspub.png" xlink:type="simple"/></inline-formula>，其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x27_hanspub.png" xlink:type="simple"/></inline-formula>是初始条件，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x28_hanspub.png" xlink:type="simple"/></inline-formula>。这个迭代格式的数值解定义为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x29_hanspub.png" xlink:type="simple"/></inline-formula>。在下面的章节中，将推导出高阶迭代格式基于交替迭代格式和Zassenhaus乘积公式。</p></sec><sec id="s5"><title>3. 傅立叶谱离散和维数分裂格式</title><p>我们应用傅立叶谱方法 [<xref ref-type="bibr" rid="hanspub.20671-ref11">11</xref>] 去解方程(3)和(4)。更具体地，给定一个正整数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x30_hanspub.png" xlink:type="simple"/></inline-formula>，使</p><disp-formula id="hanspub.20671-formula140"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x31_hanspub.png"  xlink:type="simple"/></disp-formula><p>是在区间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x32_hanspub.png" xlink:type="simple"/></inline-formula>上的等距网格，这些点称为傅立叶谱点。给定一套节点基函数，然后做这套基函数的线性组合，组合系数是节点函数值，有</p><disp-formula id="hanspub.20671-formula141"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x33_hanspub.png"  xlink:type="simple"/></disp-formula><p>这地方基函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x34_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x35_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x36_hanspub.png" xlink:type="simple"/></inline-formula>是克罗内克<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x37_hanspub.png" xlink:type="simple"/></inline-formula>函数。对函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x38_hanspub.png" xlink:type="simple"/></inline-formula>求<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x39_hanspub.png" xlink:type="simple"/></inline-formula>阶导，导函数可以应用谱离散点的线性组合近似逼近，有</p><disp-formula id="hanspub.20671-formula142"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x40_hanspub.png"  xlink:type="simple"/></disp-formula><p>我们可以把上述公式写成矩阵向量乘积的形式</p><disp-formula id="hanspub.20671-formula143"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x41_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里</p><disp-formula id="hanspub.20671-formula144"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x42_hanspub.png"  xlink:type="simple"/></disp-formula><p>一阶傅立叶微分矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x43_hanspub.png" xlink:type="simple"/></inline-formula>可以写成形式</p><disp-formula id="hanspub.20671-formula145"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x44_hanspub.png"  xlink:type="simple"/></disp-formula><p>二阶傅立叶微分矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x45_hanspub.png" xlink:type="simple"/></inline-formula>可以写成形式</p><disp-formula id="hanspub.20671-formula146"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x46_hanspub.png"  xlink:type="simple"/></disp-formula><p>特别地，定义<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x47_hanspub.png" xlink:type="simple"/></inline-formula>。这样就推导了一维方程的一阶微分矩阵和二阶微分矩阵。下面讨论二维方程的微分矩阵形式。</p><p>对于本文要求解的二维对流扩散方程，首先应用维数分裂处理这个方程，能够得到下列的形式</p><disp-formula id="hanspub.20671-formula147"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x48_hanspub.png"  xlink:type="simple"/></disp-formula><p>这地方</p><disp-formula id="hanspub.20671-formula148"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x49_hanspub.png"  xlink:type="simple"/></disp-formula><p>然后使用傅立叶拟谱方法离散空间算子，前面介绍了一维微分矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x50_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x51_hanspub.png" xlink:type="simple"/></inline-formula>，对于二维空间算子，使用克罗内克张量积通过一阶微分矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x52_hanspub.png" xlink:type="simple"/></inline-formula>和二阶微分矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x53_hanspub.png" xlink:type="simple"/></inline-formula>能够得到二维微分矩阵，把偏微分方程转化为常微分方程组，方程形式</p><disp-formula id="hanspub.20671-formula149"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x54_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里</p><disp-formula id="hanspub.20671-formula150"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x55_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x56_hanspub.png" xlink:type="simple"/></inline-formula>表示克罗内克张量积符号，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x57_hanspub.png" xlink:type="simple"/></inline-formula>表示单位矩阵。</p><p>在下面的章节中，我们将推导高阶迭代格式和讨论常微分方程组(3)的数值解，理论能够证明本文提出的加权迭代格式可以增强收敛精度和节省CPU时间。</p></sec><sec id="s6"><title>4. 高阶迭代格式用于时间离散</title><p>本节将讨论高阶迭代格式基于算法2.1和Zassenhaus乘积公式，构造的高阶方法可以提高收敛率和减少数值误差，以及减少迭代步数，从而节省时间。首先给出算法2.1的分析解</p><disp-formula id="hanspub.20671-formula151"><label>(4)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x58_hanspub.png"  xlink:type="simple"/></disp-formula><p>我们假设<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x59_hanspub.png" xlink:type="simple"/></inline-formula>，因此对于<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x60_hanspub.png" xlink:type="simple"/></inline-formula>，有</p><disp-formula id="hanspub.20671-formula152"><label>(5)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x61_hanspub.png"  xlink:type="simple"/></disp-formula><p>这时<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x62_hanspub.png" xlink:type="simple"/></inline-formula>，得到第二步</p><disp-formula id="hanspub.20671-formula153"><label>(6)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/5-2620393x63_hanspub.png"  xlink:type="simple"/></disp-formula><p>这地方<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x64_hanspub.png" xlink:type="simple"/></inline-formula>是时间步长，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x65_hanspub.png" xlink:type="simple"/></inline-formula>是指数函数。下面推导加权迭代格式。</p><p>我们将应用Zassenhaus乘积公式 [<xref ref-type="bibr" rid="hanspub.20671-ref12">12</xref>] ，这个公式具体形式</p><disp-formula id="hanspub.20671-formula154"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x66_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里，将公式进行泰勒公式展开，能够推导出下列的权的误差阶 [<xref ref-type="bibr" rid="hanspub.20671-ref10">10</xref>]</p><disp-formula id="hanspub.20671-formula155"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x67_hanspub.png"  xlink:type="simple"/></disp-formula><p>这地方<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x68_hanspub.png" xlink:type="simple"/></inline-formula>是Zassenhaus指数。能够推导出Zassenhaus指数为</p><disp-formula id="hanspub.20671-formula156"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x69_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里[<xref ref-type="bibr" rid="hanspub.20671-ref"></xref>]是李代数括号，我们定义：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x70_hanspub.png" xlink:type="simple"/></inline-formula>。因此权公式可以表示为</p><disp-formula id="hanspub.20671-formula157"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x71_hanspub.png"  xlink:type="simple"/></disp-formula><p>这样就推导出来了权公式。因此对于初始迭代(5)做如下改进</p><disp-formula id="hanspub.20671-formula158"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x72_hanspub.png"  xlink:type="simple"/></disp-formula><p>因此迭代格式的误差精度提高到<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x73_hanspub.png" xlink:type="simple"/></inline-formula> (参见 [<xref ref-type="bibr" rid="hanspub.20671-ref13">13</xref>] )，这样每增加一步权，原来经典迭代格式的误差提高一阶。</p><p>一步加权和两步加权迭代格式为</p><disp-formula id="hanspub.20671-formula159"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x74_hanspub.png"  xlink:type="simple"/></disp-formula><p>因此加权迭代的误差率能够提高到<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x75_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x76_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>这个<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x77_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x78_hanspub.png" xlink:type="simple"/></inline-formula>应用Pade'方法近似，积分项使用四阶龙格库塔方法离散，这样能够获得高阶结果。加权迭代格式将通过一些数值实例进行验证。</p></sec><sec id="s7"><title>5. 数值实验</title><p>本章节将验证提出的新格式的收敛阶和CPU时间，以及误差图。</p><p>首先给出方程(1)一个真解</p><disp-formula id="hanspub.20671-formula160"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x79_hanspub.png"  xlink:type="simple"/></disp-formula><p>设置终止时间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x80_hanspub.png" xlink:type="simple"/></inline-formula>,初始条件<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x81_hanspub.png" xlink:type="simple"/></inline-formula>。数值误差使用<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x82_hanspub.png" xlink:type="simple"/></inline-formula>范数形式，定义<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x83_hanspub.png" xlink:type="simple"/></inline-formula>范数</p><disp-formula id="hanspub.20671-formula161"><graphic xlink:href="http://html.hanspub.org/file/5-2620393x84_hanspub.png"  xlink:type="simple"/></disp-formula><p>我们将选取不同的对流系数和不同的扩散系数来验证高阶格式的误差阶。</p><sec id="s7_1"><title>5.1. 数值实例1</title><p>在这个数值例子中，考虑一般的对流扩散方程，扩散系数选取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x85_hanspub.png" xlink:type="simple"/></inline-formula>，表中将给出不同对流系数的情况。</p><p>表1中呈现的是加权迭代算法的误差，对流系数选取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x86_hanspub.png" xlink:type="simple"/></inline-formula>，选取空间谱点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x87_hanspub.png" xlink:type="simple"/></inline-formula>，时间步长选取不同的适合的步长。</p><p>表2将给出该算法误差，空间点选取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x88_hanspub.png" xlink:type="simple"/></inline-formula>，对流系数选取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x89_hanspub.png" xlink:type="simple"/></inline-formula>，挑选和表1中一样的时间步长。</p><p>表3说明的是加权迭代算法的误差阶，对流系数选择<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x90_hanspub.png" xlink:type="simple"/></inline-formula>，空间点仍然选择<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x91_hanspub.png" xlink:type="simple"/></inline-formula>，时间步长和表2同步。</p><p>表4呈现的权迭代算法的CPU时间比较，选择不同的空间点，时间步长<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x92_hanspub.png" xlink:type="simple"/></inline-formula>，对流系数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x93_hanspub.png" xlink:type="simple"/></inline-formula>，比较没有加权，一步加权和两步加权的时间。</p><p>图1呈现的是2步加权的误差图，对流系数选择表1中系数，时间步长<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x94_hanspub.png" xlink:type="simple"/></inline-formula>，空间点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x95_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>图2呈现的也是2步加权的误差图，对流系数选择表2中系数，时间步长、空间点和图1中同步。</p><p>从表中能够看出，不同的对流系数对权格式的精度是有影响的，对流系数选择的不好可能会导致2步加权的误差增大，从时间的比较中也能看出，加权方法耗费的时间并不是很多相比于没有加权，但误差减小了很多，说明加权方法是一种花费时间少，且精度高的方法。从图中能够看出不同的对流系数呈现的误差图也不一样，选择对流系数函数值无零点的对流系数，误差图的跳跃性就不会很大，明显看出图1比图2好。</p></sec><sec id="s7_2"><title>5.2. 数值实例2</title><p>在这个例子中，将考虑对流占优的情形，选取扩散系数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x96_hanspub.png" xlink:type="simple"/></inline-formula>，表中同样给出不同的对流系数来验证加权方法的误差阶情况。</p><p>表5呈现的是加权迭代的误差比较，对流系数选取表1中的对流系数，空间点选择<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x97_hanspub.png" xlink:type="simple"/></inline-formula>，时间步长同样选择表1中的步长。</p><p>表6表明的是加权格式的误差阶比较，对流系数选择表2中的对流系数，空间谱离散点选择<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x98_hanspub.png" xlink:type="simple"/></inline-formula>，时间步长和上表同步。</p><p>表7呈现的是高阶迭代方法的误差比较，对流系数选择表3中的系数，空间点和时间步长和表6同步。</p><p>图3呈现的是2步加权的误差图，对流系数、时间步长和空间点和图1同步。</p><p>图4表明的是2步加权的误差图，对流系数、时间步长和空间点和图2同步。</p><p>从表中可以看出，对于对角占优的对流扩散问题，加权迭代方法计算的比较好，同样体现了随着扩散系数的减小，误差会增大。同样也验证了加权方法的精度高，节省时间。从误差图中可以看出，图4的跳跃性相比图2更大，说明强对角占优凸显了双曲方程的特征，跳动性比较大，这样会影响高阶格式收敛性和稳定性。但不会影响加权方法的精度。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Weighted iterative numerical error comparison</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.16E−02</td><td align="center" valign="middle" >9.50E−04</td><td align="center" valign="middle" >6.58E−04</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.11E−02</td><td align="center" valign="middle" >2.38E−04</td><td align="center" valign="middle" >1.61E−04</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >5.69E−03</td><td align="center" valign="middle" >5.93E−05</td><td align="center" valign="middle" >4.20E−05</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.87E−03</td><td align="center" valign="middle" >1.48E−05</td><td align="center" valign="middle" >1.04E−05</td></tr></tbody></table></table-wrap><p>表1. 加权迭代数值误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x100_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Comparison of weighted scheme error</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >4.31E−03</td><td align="center" valign="middle" >5.20E−04</td><td align="center" valign="middle" >1.66E−04</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.18E−03</td><td align="center" valign="middle" >1.46E−04</td><td align="center" valign="middle" >3.44E−05</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.09E−03</td><td align="center" valign="middle" >4.75E−05</td><td align="center" valign="middle" >7.36E−06</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >5.48E−04</td><td align="center" valign="middle" >9.48E−06</td><td align="center" valign="middle" >1.64E−06</td></tr></tbody></table></table-wrap><p>表2. 加权格式误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x102_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Weighted iterative numerical error comparison</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.04E−02</td><td align="center" valign="middle" >2.75E−04</td><td align="center" valign="middle" >2.90E−04</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >5.28E−03</td><td align="center" valign="middle" >6.88E−05</td><td align="center" valign="middle" >7.29E−05</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.65E−03</td><td align="center" valign="middle" >1.72E−05</td><td align="center" valign="middle" >1.83E−05</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.33E−03</td><td align="center" valign="middle" >4.30E−06</td><td align="center" valign="middle" >4.58E−06</td></tr></tbody></table></table-wrap><p>表3. 加权迭代数值误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x104_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> CPU time comparison of weighted iterative</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >N</th><th align="center" valign="middle" >8</th><th align="center" valign="middle" >10</th><th align="center" valign="middle" >16</th></tr></thead><tr><td align="center" valign="middle" >无加权</td><td align="center" valign="middle" >9.0468s</td><td align="center" valign="middle" >18.0134s</td><td align="center" valign="middle" >152.5261s</td></tr><tr><td align="center" valign="middle" >1步加权</td><td align="center" valign="middle" >9.4434s</td><td align="center" valign="middle" >18.2848s</td><td align="center" valign="middle" >164.1404s</td></tr><tr><td align="center" valign="middle" >2步加权</td><td align="center" valign="middle" >10.0025s</td><td align="center" valign="middle" >19.1191s</td><td align="center" valign="middle" >168.0754s</td></tr></tbody></table></table-wrap><p>表4. 加权迭代的CPU时间比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x106_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> Comparison of weighted iterative error</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >5.01E+04</td><td align="center" valign="middle" >8.02E−03</td><td align="center" valign="middle" >1.52E−03</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >3.55E−01</td><td align="center" valign="middle" >2.01E−03</td><td align="center" valign="middle" >3.66E−04</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >4.71E−02</td><td align="center" valign="middle" >5.05E−04</td><td align="center" valign="middle" >8.80E−05</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.46E−02</td><td align="center" valign="middle" >1.28E−04</td><td align="center" valign="middle" >2.12E−05</td></tr></tbody></table></table-wrap><p>表5. 加权迭代误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x108_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table6" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> Comparison of weighted scheme error</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >8.39E−02</td><td align="center" valign="middle" >9.14E−04</td><td align="center" valign="middle" >4.64E−04</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >4.28E−02</td><td align="center" valign="middle" >2.32E−04</td><td align="center" valign="middle" >1.12E−04</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2.16E−02</td><td align="center" valign="middle" >5.72E−05</td><td align="center" valign="middle" >2.82E−05</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.08E−02</td><td align="center" valign="middle" >1.45E−05</td><td align="center" valign="middle" >7.10E−06</td></tr></tbody></table></table-wrap><p>表6. 加权格式误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x110_hanspub.png" xlink:type="simple"/></inline-formula></p><p>图1. 误差图。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x113_hanspub.png" xlink:type="simple"/></inline-formula></p><p>图2. 误差图。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x116_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table7" ><label><xref ref-type="table" rid="table7">Table 7</xref></label><caption><title> Comparison of weighted iterative error</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >1/τ</th><th align="center" valign="middle" >迭代次数</th><th align="center" valign="middle" >无加权</th><th align="center" valign="middle" >1步加权</th><th align="center" valign="middle" >2步加权</th></tr></thead><tr><td align="center" valign="middle" >200</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >7.20E−02</td><td align="center" valign="middle" >1.66E−03</td><td align="center" valign="middle" >6.17E−04</td></tr><tr><td align="center" valign="middle" >400</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >3.72E−02</td><td align="center" valign="middle" >4.15E−04</td><td align="center" valign="middle" >1.51E−04</td></tr><tr><td align="center" valign="middle" >800</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1.90E−02</td><td align="center" valign="middle" >1.04E−04</td><td align="center" valign="middle" >3.76E−05</td></tr><tr><td align="center" valign="middle" >1600</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >9.64E−03</td><td align="center" valign="middle" >2.59E−05</td><td align="center" valign="middle" >9.36E−06</td></tr></tbody></table></table-wrap><p>表7. 加权迭代数值误差比较。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x118_hanspub.png" xlink:type="simple"/></inline-formula></p><p>图3. 误差图。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x121_hanspub.png" xlink:type="simple"/></inline-formula></p><p>图4. 误差图。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/5-2620393x124_hanspub.png" xlink:type="simple"/></inline-formula></p></sec></sec><sec id="s8"><title>6. 结论</title><p>本文呈现了一种高阶迭代格式对于求解变系数2D对流扩散方程。提出的新方法结合了经典迭代格式和Zassenhaus乘积公式。傅立叶谱离散技术和维数分裂方法用于空间算子。数值算例呈现了新方法的高精度和高效性。</p></sec><sec id="s9"><title>基金项目</title><p>国家自然科学基金资助项目(11271313)。</p></sec><sec id="s10"><title>文章引用</title><p>姚林,苏海燕. 变系数2D对流扩散方程的高阶迭代算子分裂方法Higher Order Iterative Operator Splitting Method for the 2D Convection Diffusion Equation with Variable Coefficients[J]. 应用数学进展, 2017, 06(03): 249-258. http://dx.doi.org/10.12677/AAM.2017.63030</p></sec><sec id="s11"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.20671-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">章本照, 印建安, 张宏基. 流体力学数值方法[M]. 北京: 机械工业出版社, 2003</mixed-citation></ref><ref id="hanspub.20671-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">李荣华, 刘播. 微分方程数值解法[M]. 第四版. 北京: 高等教育出版社, 2009.</mixed-citation></ref><ref id="hanspub.20671-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Li, Q., Chai, Z. and Shi, B. (2014) An Efficient Lattice Boltzmann Model for Steady Convection Diffusion Equation. Journal of Scientific Computing, 61, 308-326. &lt;br&gt;https://doi.org/10.1007/s10915-014-9827-z</mixed-citation></ref><ref id="hanspub.20671-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Galligani, E. (2013) A Nonlinearity Lagging for the Solution of Nonlinear Steady State Reaction Diffusion Problems. Communications in Nonlinear Science and Numerical Simulation, 18, 567-583.</mixed-citation></ref><ref id="hanspub.20671-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Angelini, O. and Brenner, K. (2013) A Finite Volume Method on General Meshes for a Degenerate Parabolic Convection Reaction Diffusion Equation. Numerische Mathematik, 123, 219-257. &lt;br&gt;https://doi.org/10.1007/s00211-012-0485-5</mixed-citation></ref><ref id="hanspub.20671-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Bause, M. and Schwegler, K. (2013) Higher Order Finite Element Approximation of Systems of the Convection Diffusion Reaction Equations with Small Diffusion. Journal of Computational and Applied Mathematics, 246, 52-64.</mixed-citation></ref><ref id="hanspub.20671-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Geiser, J. and Tanoglu, G. (2011) Operator-Splitting Methods via the Zassenhaus Product Formula. Applied Mathematics and Computation, 217, 4557-4575.</mixed-citation></ref><ref id="hanspub.20671-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Csomós, P. and Faragó, I. (2005) The Weighted Sequential Splitting and Their Analysis. Computers and Mathematics with Applications, 50, 1017-1031.</mixed-citation></ref><ref id="hanspub.20671-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Geiser, J. (2008) Iterative Operator-Splitting Methods with Higher-Order Time Integration Methods and Applications for Parabolic Partial Differential Equations. Journal of Computational Applied Mathematics, 217, 227-242. 
&lt;br&gt;https://doi.org/10.1002/num.20568</mixed-citation></ref><ref id="hanspub.20671-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Geiser, J. (2011) Iterative Operator-Splitting Methods for the Nonlinear Differential Equations and Applications. Numerical Method for Partial Differential Equation, 27, 1026-1054.</mixed-citation></ref><ref id="hanspub.20671-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Shen, J., Tang, T. and Wang, L. (2011) Spectral Methods. Springer, Berlin Heidelberg.  
&lt;br&gt;https://doi.org/10.1007/978-3-540-71041-7</mixed-citation></ref><ref id="hanspub.20671-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Scholz, D. (2006) A Note on the Zassenhaus Product Formula. Journal of Mathematical Physics, 47, 373-418. 
&lt;br&gt;https://doi.org/10.1063/1.2178586</mixed-citation></ref><ref id="hanspub.20671-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Geiser, J. and Tano, G. (2011) Higher Order Operator Splitting Methods via the Zassenhaus Product Formula: Theory and Application. Computer and Mathematic with Application, 62, 1994-2015.</mixed-citation></ref></ref-list></back></article>