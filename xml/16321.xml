<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AIRR</journal-id><journal-title-group><journal-title>Artificial Intelligence and Robotics Research</journal-title></journal-title-group><issn pub-type="epub">2326-3415</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AIRR.2015.44005</article-id><article-id pub-id-type="publisher-id">AIRR-16321</article-id><article-categories><subj-group subj-group-type="heading"><subject>AIRR20150400000_29867051.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject><subject> 工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  和声搜索算法的改进
  The Improvement of Harmony Search Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>康丽</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>寿元</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>邵</surname><given-names>增珍</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>null</addr-line></aff><aff id="aff1"><addr-line>山东师范大学信息科学与工程学院，山东 济南</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>1178982668@qq.com(张康)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>09</day><month>11</month><year>2015</year></pub-date><volume>04</volume><issue>04</issue><fpage>32</fpage><lpage>39</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   和声搜索算法是新近问世的一种启发式全局搜索算法，在许多组合优化问题中得到了成功应用。在有关问题上展示了较遗传算法、模拟退火算法和禁忌搜索更好的性能。但是，和声搜索算法在迭代时容易陷入局部搜索的状态，本文针对这一问题，对生成初始解向量进行了改进，对更新和声记忆库进行了改进。从而提高了算法的执行效率，避免算法陷入局部最优。 Harmony search algorithm is a new heuristic global search algorithm, which has been successfully applied in many combinatorial optimization problems. The better performance of genetic algorithm, simulated annealing algorithm and tabu search is demonstrated on the problem. However, the harmony search algorithm is easy to fall into local search. This paper makes an improvement on the generation of the initial solution vector and the harmony bank so as to improve the efficiency of the algorithm.
    
  
 
</p></abstract><kwd-group><kwd>和声搜索算法，初始解向量，和声记忆库, Harmony Search Algorithm</kwd><kwd> Initial Solution Vector</kwd><kwd> Harmony Bank</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>和声搜索算法的改进<sup> </sup></title><p>张康丽，陈寿元，邵增珍</p><p>山东师范大学信息科学与工程学院，山东 济南</p><disp-formula id="hanspub.16321-formula235"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2015年10月24日；录用日期：2015年11月7日；发布日期：2015年11月11日</p><disp-formula id="hanspub.16321-formula236"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>和声搜索算法是新近问世的一种启发式全局搜索算法，在许多组合优化问题中得到了成功应用。在有关问题上展示了较遗传算法、模拟退火算法和禁忌搜索更好的性能。但是，和声搜索算法在迭代时容易陷入局部搜索的状态，本文针对这一问题，对生成初始解向量进行了改进，对更新和声记忆库进行了改进。从而提高了算法的执行效率，避免算法陷入局部最优。</p><p>关键词 :和声搜索算法，初始解向量，和声记忆库</p><disp-formula id="hanspub.16321-formula237"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>2001年，韩国学者Geem Z W提出了和声搜索算法HS (Harmony Search)，该算法是一种新的启发式智能搜索算法，HS灵感来源于音乐创作中和声的调节，音乐家们在原有和声的基础上对各个乐器的音调进行调节，逐步实现一个自己满意的新和声。</p><p>HS算法通用好，依赖于问题程度低，一直受到广大研究人员的关注。它被应用到各种优化问题中，例如水网设计优化、土木工程结构优化、公交线路车辆调度优化等众多领域。文献[<xref ref-type="bibr" rid="hanspub.16321-ref1">1</xref>] 提出了一种求解数值优化问题的轮盘赌自适应和声搜索算法；文献 [<xref ref-type="bibr" rid="hanspub.16321-ref2">2</xref>] 阐述了和声搜索算法的起源、思想、基本步骤，并分析了参数HMS、HMCR、PAR对该算法的影响；文献 [<xref ref-type="bibr" rid="hanspub.16321-ref3">3</xref>] 首先描述了原始和声搜索算法的特点和流程，然后对和声搜索算法繁多的变种及其应用领域进行梳理和分类，最后指出和声搜索算法的未来研究方向；文献 [<xref ref-type="bibr" rid="hanspub.16321-ref4">4</xref>] 在和声算法中引入自适应的参数调节方式及遗传算子，使和声算法能够解决离散型数学问题；文献 [<xref ref-type="bibr" rid="hanspub.16321-ref5">5</xref>] 提出了一种提取种群中优良个体的算法。总的来说，和声搜索算法容易陷入局部最优的问题并没有引起足够的重视。本文中提出一种ALHS算法对此进行了部分改进，该算法首先采用区间分割法生成初始解向量，避免了收敛于局部最优解的可能性；然后利用了遗传算法的基于排序的概率分配方法和轮盘赌选择方法，提高和声记忆库的多样性，避免算法陷入局部最优，提高了算法的效率。实验结果表明改进的算法效率高于HS算法 [<xref ref-type="bibr" rid="hanspub.16321-ref2">2</xref>] 。</p></sec><sec id="s4"><title>2. 和声搜索算法</title>和声搜索算法原理<p>和声搜索算法的基本思想：首先对和声记忆库大小HMS (Harmony Memory Size)和各种参数进行初始化，然后按照一定的概率生成新的和声并且对新和声进行微调，如果新和声优于原和声记忆库中最差的和声则进行替换，按照上述步骤进行迭代直到找到最优解或满足停止条件为止 [<xref ref-type="bibr" rid="hanspub.16321-ref6">6</xref>] 。HS算法基本步骤为：</p><p>Step 1：确定需要优化问题的目标函数和HS的基本参数。</p><disp-formula id="hanspub.16321-formula238"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x9_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x10_hanspub.png" xlink:type="simple"/></inline-formula>是需要进行优化的目标函数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x11_hanspub.png" xlink:type="simple"/></inline-formula>是由<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x12_hanspub.png" xlink:type="simple"/></inline-formula>个决策向量组成的解向量，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x13_hanspub.png" xlink:type="simple"/></inline-formula>是决策向量，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x14_hanspub.png" xlink:type="simple"/></inline-formula>的下界和上界分别是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x15_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x16_hanspub.png" xlink:type="simple"/></inline-formula>。初始化的参数主要包含：</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x17_hanspub.png" xlink:type="simple"/></inline-formula>，决策变量的个数(I ≥ 1)</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x18_hanspub.png" xlink:type="simple"/></inline-formula>，决策变量的范围<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x19_hanspub.png" xlink:type="simple"/></inline-formula></p><p>HMS，和声记忆库的解向量个数</p><p>HMCR，和声记忆库的保留概率</p><p>PAR，新生成的解向量的微调概率</p><p>bw，(band width)微调时使用的干扰带宽</p><p>iter，迭代次数计数器(初始值为0)</p><p>Itermax，算法的最大迭代次数(停止条件)</p><p>Step 2：根据Step 1的约束对和声记忆库进行随机初始化。</p><p>根据下式可得到解向量的各个决策变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x20_hanspub.png" xlink:type="simple"/></inline-formula>，从而得到和声记忆库中各个初始化解向量。</p><disp-formula id="hanspub.16321-formula239"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x21_hanspub.png"  xlink:type="simple"/></disp-formula><p>Step 3：构建新的解向量</p><p>新的解向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x22_hanspub.png" xlink:type="simple"/></inline-formula>，其中每个决策变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x23_hanspub.png" xlink:type="simple"/></inline-formula>可通过三中方式产生。</p><p>1) 选择原解向量中的对应决策变量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x24_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>2) 在决策变量的取值范围内随机选择<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x25_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>3) 对于前两种方式中某些决策变量新型概率微调。具体构建流程如下：</p><p>For i=1 to n do</p><p>If r</p><p>xinew∈U{xi1,xi2,…,xiHMS}</p><p>If r</p><p>xinew=xinew&#177;r&#215;bw</p><p>End if</p><p>Else //随机选择产生新的决策向量</p><p>xinew=ximin+(ximax-ximin) &#215;r</p><p>End if</p><p>End for</p><p>Step 4： 更新和声记忆库。Xworst是和声记忆库中最差的解向量。</p><p>Xworst =Xnew,g(Xnew)优于g(Xworst)</p><p>=Xworst,g(Xnew)差于g(Xworst)</p><p>Step 5：判断算法是否满足停止条件。i<sub>ter</sub> = i<sub>ter</sub> + 1，若i<sub>ter</sub> &lt; I<sub>termax</sub>则跳转到Step 3继续迭代，否则输出最优解，算法结束。</p></sec><sec id="s5"><title>3. 改进的和声搜索算法</title><sec id="s5_1"><title>3.1. 生成初始解向量的改进</title><p>初始解向量采用区间分割法生成，可以保证随机产生的各个解向量具有差别性，在解空间上的分布状况均匀，避免了收敛于局部最优解的可能性，加快了和声搜索算法的收敛速度，增强了全局搜索的能力 [<xref ref-type="bibr" rid="hanspub.16321-ref8">8</xref>] 。</p><disp-formula id="hanspub.16321-formula240"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x26_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x27_hanspub.png" xlink:type="simple"/></inline-formula>为分割得到的子解空间，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x28_hanspub.png" xlink:type="simple"/></inline-formula>是各个决策向量子区间大小。n个决策向量子区间构成一个子解空间。</p></sec><sec id="s5_2"><title>3.2. 更新和声记忆库的改进</title><p>1) 基于排序的概率分配方法(Rank-Based Probability Assignment)</p><p>将和声记忆库中的解向量按照适应度值进行排序，概率与具体的适应度值无关，按照解向量在顺序表中的排名确定解向量的被选择概率。计算选择概率有两种方法本文采用第一种方法计算选择概率 [<xref ref-type="bibr" rid="hanspub.16321-ref4">4</xref>] 。</p><p>方法一(由Baker提出，其中i是解向量在顺序表中的排名)：</p><disp-formula id="hanspub.16321-formula241"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x29_hanspub.png"  xlink:type="simple"/></disp-formula><p>方法二(由Michalewicz提出，θ是排名第一的解向量的概率)：</p><disp-formula id="hanspub.16321-formula242"><graphic xlink:href="http://html.hanspub.org/file/2-2610064x30_hanspub.png"  xlink:type="simple"/></disp-formula><p>本文采用第一种方法计算选择概率，按照适应度值从小到大进行排序，则适应度值最小的解向量被选择的概率p(0) = 0，也就是说最优的解向量永远不会被替换[<xref ref-type="bibr" rid="hanspub.16321-ref10">10</xref>] 。</p><p>2) 轮盘赌选择方法(Roulette Wheel Selection)</p><p>通过概率分配方法得到选择概率后，计算各个解向量的累计概率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x31_hanspub.png" xlink:type="simple"/></inline-formula>，每次迭代产生一个<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x32_hanspub.png" xlink:type="simple"/></inline-formula>之间的随机数，通过与累计概率比较，判断是否选择进行更新。</p><p>若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x33_hanspub.png" xlink:type="simple"/></inline-formula>，则选择第1个解向量</p><p>若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2610064x34_hanspub.png" xlink:type="simple"/></inline-formula>，则选择第i个解向量[<xref ref-type="bibr" rid="hanspub.16321-ref11">11</xref>]</p><p>根据上述算法基本思想，算法部分代码(使用改进后的算法更新和声库)表示如下：</p><p>1) def refreshALHS():</p><p>2) global ALHS</p><p>3) newHM = createNew(ALHS)</p><p>4) for i in range(4):</p><p>for i in range(4 - i):</p><p>if calFxy(ALHS[i][<xref ref-type="bibr" rid="hanspub.16321-ref0">0</xref>], ALHM[i][<xref ref-type="bibr" rid="hanspub.16321-ref1">1</xref>]) &gt; calFxy(ALHS[i + 1][<xref ref-type="bibr" rid="hanspub.16321-ref0">0</xref>], ALHS[i + 1][<xref ref-type="bibr" rid="hanspub.16321-ref1">1</xref>]):</p><p>temp = ALHS[i]</p><p>ALHS[i] = ALHS[i + 1]</p><p>ALHS[i + 1] = temp</p><p>Pi = [<xref ref-type="bibr" rid="hanspub.16321-ref"></xref>]</p><p>lanmuda = round(random.uniform(1,2), 2)</p><p>r = random.random()</p><p>5) for i in range(5):</p><p>if i == 0:</p><p>Pi.append(0)</p><p>else:</p><p>temp = (1.0 / HMS) * (lanmuda - (lanmuda- (2 - lanmuda)) * (float(i - 1) / (HMS - 1)))</p><p>Pi.append(round(temp, 2))</p><p>if r &lt; sum(Pi[:2]):</p><p>ALHS[<xref ref-type="bibr" rid="hanspub.16321-ref1">1</xref>] = newHS</p><p>6) if sum(Pi[:2]) &lt;= r and r &lt; sum(Pi[:3]):</p><p>ALHS[<xref ref-type="bibr" rid="hanspub.16321-ref2">2</xref>] = newHS</p><p>7) if sum(Pi[:3]) &lt;= r and r &lt; sum(Pi[:4]):</p><p>ALHS[<xref ref-type="bibr" rid="hanspub.16321-ref3">3</xref>] = newHS</p><p>8) if sum(Pi[:4]) &lt;= r and r &lt; sum(Pi):</p><p>ALHS[<xref ref-type="bibr" rid="hanspub.16321-ref4">4</xref>] = newHS</p></sec></sec><sec id="s6"><title>4. 实验结果分析</title><sec id="s6_1"><title>4.1. Rosenbrock测试函数</title><p>试验环境：Windows 64位操作系统；Python2.7.10语言；PyCharm 4.5平台。目标函数为Rosenbrock函数[<xref ref-type="bibr" rid="hanspub.16321-ref12">12</xref>] ，该函数是一个用来测试最优化算法性能的非凸函数。Rosenbrock函数每个等高线大致呈抛物线形，其全域最小值也位于抛物线形山谷中。但山谷内的值变化不大，要找到全域最小值相当困难。其全域最小值位于(x, y) = (1,1)点，数值为f(x,y) = 0。实验参数：HMS = 5，HMCR = 0.9，PAR = 0.3，Bw = 0.01。</p><p>1) 稳定性测试</p><p>从图1，图2中可以看到：改进后的ALHS算法搜索到的目标函数的取值大部分在0附近，波动较小；未改进的HS算法搜索的目标函数的取值偏离最优值较多，波动较大。这就表明，ALHS算法在寻求最优值方面优于HS算法。通过实验可得(表1)，整体上，ALHS算法优于HS算法，但是随着迭代次数越来越多，效果明显度降低。</p><p>2) 性能测试</p></sec><sec id="s6_2"><title>4.2. 其它测试函数(图4~7)</title><p>图1. Rosenbrock函数图</p><p>图2. 稳定性测试算法对比结果图</p><p>图3. 性能结果对比图</p><p>图4. Girewank函数</p><p>图5. 性能结果对比图</p><p>图6. Sphere函数</p><p>图7. Sphere函数下性能结果图</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> HS algorithm and ALHS algorithm to find the optimal value of the dat</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >算法最优值f(x,y)\迭代次数</th><th align="center" valign="middle" >1000</th><th align="center" valign="middle" >5000</th><th align="center" valign="middle" >10,000</th><th align="center" valign="middle" >15,000</th><th align="center" valign="middle" >20,000</th></tr></thead><tr><td align="center" valign="middle" >HS-f(x,y) ALHS-f(x,y)</td><td align="center" valign="middle" >15.0733812 3.1549648</td><td align="center" valign="middle" >2.80783099 0.2028839</td><td align="center" valign="middle" >3.43908 0.0139705</td><td align="center" valign="middle" >0.13252056 0.0096196</td><td align="center" valign="middle" >1.9447976 0.0008727</td></tr></tbody></table></table-wrap><p>表1. HS算法与ALHS算法寻找最优值数据结果图</p></sec></sec><sec id="s7"><title>5. 结论</title><p>本文针对和声算法的搜索性能不足，提出了一种改进的和声算法ALHS。通过对生成初始解向量的改进，对和声记忆库的改进，改善了算法的性能。另外，本文详细说明了该算法的基本思想，通过实验对比分析具体证明了算法的有效性。在未来工作中，将重点在和声算法的新的应用领域进行研究[<xref ref-type="bibr" rid="hanspub.16321-ref5">5</xref>] 。</p></sec><sec id="s8"><title>文章引用</title><p>张康丽,陈寿元,邵增珍. 和声搜索算法的改进The Improvement of Harmony Search Algorithm[J]. 人工智能与机器人研究, 2015, 04(04): 32-39. http://dx.doi.org/10.12677/AIRR.2015.44005</p></sec><sec id="s9"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.16321-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">李永林, 叶春明, 刘长平. 轮盘赌选择自适应和声搜索算法[J]. 计算机应用研究, 2014, 31(6): 1665-1668.</mixed-citation></ref><ref id="hanspub.16321-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">薛亚娣. 和声搜索算法综述[J]. 技术天地, 2014, 3.</mixed-citation></ref><ref id="hanspub.16321-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">周雅兰, 黄韬. 和声搜索算法改进与应用[J]. 计算机科学, 2014, 6(41): 52-75.</mixed-citation></ref><ref id="hanspub.16321-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">赵鸿飞, 张琦, 朱春生. 基于改进自适应和声遗传算法的装配序列优化研究[J]. 计算机应用研究, 2013, 8(30): 2357-2364.</mixed-citation></ref><ref id="hanspub.16321-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">杨树欣, 李盼池. 和声搜索算法的改进研究[J]. 计算机技术与发展, 2015, 25(4): 93-97.</mixed-citation></ref><ref id="hanspub.16321-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Ingram, G. and Zhang, T.H. (2009) Overview of Applications and Developments in the Harmony Search Algorithm. Music-Inspired Harmony Search Algorithm, 191, 15-37.</mixed-citation></ref><ref id="hanspub.16321-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">李峰刚, 魏炎炎, 杨龙. 基于和声算法异构Hadoop集群资源分配优化[J]. 计算机工程与应用, 2014, 50(9): 98- 102.</mixed-citation></ref><ref id="hanspub.16321-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">黄鉴, 彭其渊. 多样性保持的和声搜索算法及其TSP求解[J]. 计算机应用研究, 2013, 12(20): 3583-3585.</mixed-citation></ref><ref id="hanspub.16321-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Das, S., Mukhopadhyay, A. and Roy, A. (2011) Exploratory Power of the Harmony Search Algorithm: Analysis and Improvements for global Numerical Optimization. IEEE Transactions on Systems, 41, 89-106.</mixed-citation></ref><ref id="hanspub.16321-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">李树荣, 陈国霞, 雷阳. 一种加快局部收敛速度的改进和声搜索算法[C].//Proceedings of the 31st Chinese Control Conference, 2012: 2368-2373.</mixed-citation></ref><ref id="hanspub.16321-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">张琛, 詹志辉. 遗传算法选择策略比较[J]. 计算机工程与设计, 2009, 30(23): 5471-5478.</mixed-citation></ref><ref id="hanspub.16321-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">王慧敏, 贺兴时, 威孟龙. 一种改进的和声搜索算法[J]. 纺织高校基础科学学报, 2013, 26(3): 383-387.</mixed-citation></ref></ref-list></back></article>