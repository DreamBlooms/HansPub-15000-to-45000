<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2017.72013</article-id><article-id pub-id-type="publisher-id">CSA-19725</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20170200000_99158512.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于Android的汽车实时监测系统的研究与实现
  Research and Implementation of Vehicle Real-Time Monitoring System Based on Android
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>徐</surname><given-names>丽娜</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>叶</surname><given-names>桦</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陶</surname><given-names>鹏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>东南大学自动化学院，江苏 南京</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>zhineng@seu.edu.cn(叶桦)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>16</day><month>02</month><year>2017</year></pub-date><volume>07</volume><issue>02</issue><fpage>109</fpage><lpage>116</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   汽车作为代步和运输工具已进入千家万户，实现汽车远程监测是保证人们正常出行的必要条件。本文就实现汽车实时监测和故障诊断，提出了基于Android的汽车实时监测系统，设计面向车主和汽修厂的手机、电脑、汽车一体化的监测系统。本文设计的汽车实时监测系统由远程监控端、Android客户端、OBD车载诊断接口三个部分构成。Android客户端向下利用手机Bluetooth和OBD车载诊断接口通信，获取汽车状态信息和DTC；向上利用Internet，将汽车状态信息上传到云端服务器。通过远程Web端异地登陆，实现汽车的远程监控和远程故障诊断及维修。 Auto-remote monitoring has been a necessary condition to ensure people’s normal safety along with the wide application of automobile as a mean of transport. In this paper, a real-time moni-toring system based on Android is put forward to realize the real-time monitoring and fault diagnosis of the automobile. And the monitoring system for mobile phone, computer and automobile is designed for vehicle owners and garages. The real-time monitoring system is composed of three parts which are remote monitoring terminal, Android client and OBD vehicle diagnosis interface. Android client accesses to vehicle status information and DTC down using the phone BLUETOOTH and OBD vehicle diagnostic interface communication. While on the other hand, car’s state information is uploaded to the cloud server up using INTERNET. The remote monitoring, remote fault diagnosis and maintenance of the vehicle can be then realized by remote web landing. 
   
  
  
 
</p></abstract><kwd-group><kwd>OBD-II，Android，远程监控，协议解析, OBD-II</kwd><kwd> Android</kwd><kwd> Remote Monitoring</kwd><kwd> Protocol Analysis</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于Android的汽车实时监测系统的 研究与实现<sup> </sup></title><p>徐丽娜，叶桦<sup>*</sup>，陶鹏</p><p>东南大学自动化学院，江苏 南京</p><disp-formula id="hanspub.19725-formula4"><graphic xlink:href="http://html.hanspub.org/file/1-1540715x5_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2017年1月29日；录用日期：2017年2月13日；发布日期：2017年2月16日</p><disp-formula id="hanspub.19725-formula5"><graphic xlink:href="http://html.hanspub.org/file/1-1540715x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>汽车作为代步和运输工具已进入千家万户，实现汽车远程监测是保证人们正常出行的必要条件。本文就实现汽车实时监测和故障诊断，提出了基于Android的汽车实时监测系统，设计面向车主和汽修厂的手机、电脑、汽车一体化的监测系统。本文设计的汽车实时监测系统由远程监控端、Android客户端、OBD车载诊断接口三个部分构成。Android客户端向下利用手机Bluetooth和OBD车载诊断接口通信，获取汽车状态信息和DTC；向上利用Internet，将汽车状态信息上传到云端服务器。通过远程Web端异地登陆，实现汽车的远程监控和远程故障诊断及维修。</p><p>关键词 :OBD-II，Android，远程监控，协议解析</p><disp-formula id="hanspub.19725-formula6"><graphic xlink:href="http://html.hanspub.org/file/1-1540715x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="http://image.hanspub.org:8080\Html/htmlimages\1-2890033x\e70a10f1-7c93-45ea-9603-062237856e4b.png" /><img src="http://image.hanspub.org:8080\Html\htmlimages\1-2890033x\e898c85e-ffc4-45c9-b817-14224a4d6960.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>随着人工智能的发展，汽车已经代替脚力，成为出行的主要交通工具之一。一方面，汽车在不同行业的应用越来越广泛；另一方面，随着电子技术在汽车上的应用范围不断增大，汽车的稳定性、安全性、灵活性和人工智能都有了明显的改善。但同时带来了汽车故障种类多、故障琐碎不易察等问题 [<xref ref-type="bibr" rid="hanspub.19725-ref1">1</xref>] 。相比于传统的机械故障，电子控制系统的故障小且隐蔽，能造成整个系统的瘫痪，带来了汽车维修工作的新挑战。</p><p>自1996年起美国所有车辆制造商采用OBD-II标准 [<xref ref-type="bibr" rid="hanspub.19725-ref2">2</xref>] ，车辆诊断技术越来越标准。OBD-II系统 [<xref ref-type="bibr" rid="hanspub.19725-ref3">3</xref>] 将汽车运行过程中的故障状态以故障码DTC的形式存在汽车的ECU组件中，汽车检修人员利用汽车通用故障诊断接口读取DTC，极大地方便了汽车故障排查和检修。但是大部分汽车不携带远程传输模块，所以维修人员的故障诊断受到时间和空间的限制，给客户和维修人员带来不便。随着INTERNET技术的发展，以及智能手机的普及，本文基于Android智能手机，利用智能手机的Bluetooth、GPS、Internet等技术，开发一款面向车主和故障维修人员的基于Android的远程诊断系统。</p></sec><sec id="s4"><title>2. 总体框架</title><p>基于Android的手机客户端利用蓝牙和基于K总线和CAN总线的OBD-II通用汽车诊断接口ELM327通信，传输DTC故障码和汽车实时状态。Android通过OBD协议解析，对收到的数据进行分析、处理。通过Android强大的UI界面设计，把处理过的汽车运行信息和DTC以图表的形式呈现给客户。同时手机APP把获得数据存储到本地的同时上传到远程服务器端。设计基于BS模式的远程监控Web端，利用AJAX与服务器建立通信传输用户指令和获取新的数据并加载页面，展示给用户，同时故障维修人员可以在远程登陆，帮助用户维修汽车，实现手机、电脑、汽车一体化的实时监测系统。整个系统结构见图1所示。</p><p>如图1所示，整个系统结构分为两个部分，第一部分由汽车、OBD通用诊断接口和Android手机构成，通过解析OBD-II协议，设计与OBD通用诊断接口通信的Android客户端。第二部分由服务器和</p><p>图1. 总体框架</p><p>Web前端构成，利用手机端上传到服务器的汽车记录，设计实现对汽车的远程监控。</p></sec><sec id="s5"><title>3. Android客户端</title><p>Android客户端是该诊断系统的信息源，利用Bluetooth与通用汽车诊断接口ELM327通信，解析OBD协议并对解析的数据进行分析、处理、显示和上传。Android客户端的设计包括蓝牙通信、数据库SQLite设计、协议解析和UI设计四部分。客户端设计流程图见图2所示。</p><sec id="s5_1"><title>3.1. 蓝牙通信</title><p>Bluetooth分为BLE和支持SPP协议的普通蓝牙，目前智能手机蓝牙均支持蓝牙4.0协议。虽然BLE低功耗蓝牙具有耗电量低、传输速度快等特点，但因其不适合长时间、多数据的可靠传输，本设计中采用的数据透传蓝牙是传统的支持SPP协议的蓝牙。</p></sec><sec id="s5_2"><title>3.2. 协议解析</title><p>目前生产的所有主流汽车上都配备有OBD并预留出OBD车载接口，OBD-II是国际统一的车辆故障码定义。车载OBD可以监测多个系统和部件，包括汽车的排放控制系统、燃油控制系统、转速系统、氧传感器等 [<xref ref-type="bibr" rid="hanspub.19725-ref4">4</xref>] ，获取数据并存储在OBD中。通用汽车诊断接口ELM327和车载OBD接口连接，获取OBD中的数据并通过自身蓝牙把数据传输到上位机。</p><p>ELM327作为目前主流的OBD通用故障诊断接口，可自动识别所有的OBD-II诊断协议及与其兼容的通讯协议。具有蓝牙和USB两种连接方式，分别与电脑和手机蓝牙通信，实现：</p><p>1) 清除故障代码，并关闭发动机故障报警指示灯；</p><p>2) 读取发动机实时运行数据；</p><p>3) 读取通用故障诊断代码(DTC)，并显示其定义。</p><p>在本设计中以Android作为ELM327的上位机，获取透传的OBD数据，解析OBD通信协议。</p><p>OBD数据传输流见图3所示：</p><p>OBD-II协议中定义的数据格式 [<xref ref-type="bibr" rid="hanspub.19725-ref5">5</xref>] 见图4所示：</p><p>车载OBD的ECU工作在9种模式下，在每种工作模式下支持不同的PID，每种PID值代表汽车部件不同状态信息，包括发动机冷却液温度、故障码DTC等，所以对OBD的请求和数据解析分为两个步骤 [<xref ref-type="bibr" rid="hanspub.19725-ref6">6</xref>] ：</p><p>Step1：向OBD设备请求一种工作模式下的PID支持并接收设备响应，表1和表2所示。</p><p>图2. 安卓客户端流程图</p><p>图3. OBD数据传输流</p><p>图4. OBD消息格式</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Request current powertrain diagnostic data request message (Pattern 01</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >消息类型</th><th align="center" valign="middle"  colspan="3"  >Request</th></tr></thead><tr><td align="center" valign="middle" >数据字节</td><td align="center" valign="middle" >描述(Hex)</td><td align="center" valign="middle" >字节值(Hex)</td><td align="center" valign="middle" >记录</td></tr><tr><td align="center" valign="middle" >#1</td><td align="center" valign="middle" >请求当前OBD设备</td><td align="center" valign="middle" >01</td><td align="center" valign="middle" >SIDRQ</td></tr><tr><td align="center" valign="middle" >#2</td><td align="center" valign="middle" >请求PID01-20的支持</td><td align="center" valign="middle" >00</td><td align="center" valign="middle" >PID</td></tr></tbody></table></table-wrap><p>表1. 请求当前模式下的PID支持(01模式)</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Request current powertrain diagnostic data response message (Pattern 01</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >消息类型</th><th align="center" valign="middle"  colspan="3"  >Response</th></tr></thead><tr><td align="center" valign="middle" >数据字节</td><td align="center" valign="middle" >描述(Hex)</td><td align="center" valign="middle" >字节值(Hex)</td><td align="center" valign="middle" >记录</td></tr><tr><td align="center" valign="middle" >#1</td><td align="center" valign="middle" >响应当前请求</td><td align="center" valign="middle" >41</td><td align="center" valign="middle" >SIDRQ</td></tr><tr><td align="center" valign="middle" >#2</td><td align="center" valign="middle" >PID响应</td><td align="center" valign="middle" >00</td><td align="center" valign="middle" >PID</td></tr><tr><td align="center" valign="middle" >#3</td><td align="center" valign="middle" >字节A，对PID 01，03-08支持</td><td align="center" valign="middle" >10111111b = $BF</td><td align="center" valign="middle" >DATA_A</td></tr><tr><td align="center" valign="middle" >#4</td><td align="center" valign="middle" >字节B，对PID 09，0B-10支持</td><td align="center" valign="middle" >10111111b = $BF</td><td align="center" valign="middle" >DATA_B</td></tr><tr><td align="center" valign="middle" >#5</td><td align="center" valign="middle" >字节C，对PID 11，13，15支持</td><td align="center" valign="middle" >10101000b = $A8</td><td align="center" valign="middle" >DATA_C</td></tr><tr><td align="center" valign="middle" >#6</td><td align="center" valign="middle" >字节D，对PID 19，1C，20支持</td><td align="center" valign="middle" >10010001b = $91</td><td align="center" valign="middle" >DATA_D</td></tr></tbody></table></table-wrap><p>表2. 当前模式下PID支持的响应信息(01模式)</p><p>Step2：向OBD设备请求一种工作模式下多种PID数据并接收数据，见表3和表4所示。</p><p>OBD支持多种通信协议，不同的汽车制造商采用不同的OBD通信协议，为了提高通用性，本设计支持12种车载OBD通信协议 [<xref ref-type="bibr" rid="hanspub.19725-ref5">5</xref>] 。<sup> </sup></p><p>在Android端APP内有“设置”功能，用于蓝牙选择和OBD协议选择，用户可根据车型自由选择通信协议。若用户不了解车型所使用的OBD协议时，也或设置“auto”由ELM327自动匹配，具有较强的灵活性和通用性。</p></sec><sec id="s5_3"><title>3.3. 数据库SQLite设计</title><p>SQLite是一个遵守ACID的关系型数据库管理系统，作为一个开源的轻量级数据库，其设计目标是应用于嵌入式设备。目前主流的Android设备均采用SQLite作为本地数据库，本设计中使用SQLite缓存用户行车记录。表是数据库的基本存储单元，一个表就代表一类具有实际意义的对象，用户不能通过对象来访问数据，但是可以通过表来访问数据，Android端行车记录表见表5所示。</p></sec><sec id="s5_4"><title>3.4. Android端UI设计</title><p>Android端解析OBD协议并对解析的数据进行分析、处理、存储最终显示给用户。Canvas绘制仪表盘，实时显示汽车转速、发动机温度等信息。利用重力传感器实时显示汽车运行方向，查询行车记录、汽车故障码等信息，实现汽车-手机-用户一体化 [<xref ref-type="bibr" rid="hanspub.19725-ref7">7</xref>] [<xref ref-type="bibr" rid="hanspub.19725-ref8">8</xref>] 。Android端设计见图5所示。</p></sec></sec><sec id="s6"><title>4. 远程监控端</title><p>设计以HTML为页面骨架，CSS决定页面样式，JavaScript决定页面行为 [<xref ref-type="bibr" rid="hanspub.19725-ref9">9</xref>] 。采用单页面应用，降低了服务器渲染页面和页面文件传输的负担，减少网络资源的占用；通过AJAX技术，与服务器进行部分数据交互而非刷新整个页面，实现页面异步更新。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Request current powertrain diagnostic data request message (Pattern 01</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >消息类型</th><th align="center" valign="middle"  colspan="3"  >Request</th></tr></thead><tr><td align="center" valign="middle" >数据字节</td><td align="center" valign="middle" >描述(Hex)</td><td align="center" valign="middle" >字节值(Hex)</td><td align="center" valign="middle" >记录</td></tr><tr><td align="center" valign="middle" >#1</td><td align="center" valign="middle" >请求当前OBD设备</td><td align="center" valign="middle" >01</td><td align="center" valign="middle" >SIDRQ</td></tr><tr><td align="center" valign="middle" >#2</td><td align="center" valign="middle" >PID：状态信息和DTC对应的PID值</td><td align="center" valign="middle" >19</td><td align="center" valign="middle" >PID</td></tr></tbody></table></table-wrap><p>表3. 请求当前模式下的PID (01模式)</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Request current powertrain diagnostic data response message (Pattern 01</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >消息类型</th><th align="center" valign="middle"  colspan="3"  >Response</th></tr></thead><tr><td align="center" valign="middle" >数据字节</td><td align="center" valign="middle" >描述(Hex)</td><td align="center" valign="middle" >字节值(Hex)</td><td align="center" valign="middle" >记录</td></tr><tr><td align="center" valign="middle" >#1</td><td align="center" valign="middle" >响应当前请求</td><td align="center" valign="middle" >41</td><td align="center" valign="middle" >SIDRQ</td></tr><tr><td align="center" valign="middle" >#2</td><td align="center" valign="middle" >PID：状态信息和DTC对应的PID值</td><td align="center" valign="middle" >19</td><td align="center" valign="middle" >PID</td></tr><tr><td align="center" valign="middle" >#3</td><td align="center" valign="middle" >氧传感器输出电压值(B2-S2)：0.8Volt</td><td align="center" valign="middle" >A0</td><td align="center" valign="middle" >DATA_A</td></tr><tr><td align="center" valign="middle" >#4</td><td align="center" valign="middle" >短期燃料剪修(B2-S2)：93.7%</td><td align="center" valign="middle" >78</td><td align="center" valign="middle" >DATA_B</td></tr></tbody></table></table-wrap><p>表4. 当前模式下PID值的响应数据(01模式)</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> The table of driving record</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >列名</th><th align="center" valign="middle" >数据类型</th><th align="center" valign="middle" >允许空值</th><th align="center" valign="middle" >主键/外键</th><th align="center" valign="middle" >对应中文属性名</th></tr></thead><tr><td align="center" valign="middle" >id</td><td align="center" valign="middle" >integer</td><td align="center" valign="middle" >否</td><td align="center" valign="middle" >主键</td><td align="center" valign="middle" >行车记录ID</td></tr><tr><td align="center" valign="middle" >startData</td><td align="center" valign="middle" >integer</td><td align="center" valign="middle" >否</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >记录开始时间</td></tr><tr><td align="center" valign="middle" >endData</td><td align="center" valign="middle" >integer</td><td align="center" valign="middle" >是</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >记录结束时间</td></tr><tr><td align="center" valign="middle" >rpmMax</td><td align="center" valign="middle" >integer</td><td align="center" valign="middle" >是</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >最大转速</td></tr><tr><td align="center" valign="middle" >speedMax</td><td align="center" valign="middle" >integer</td><td align="center" valign="middle" >是</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >最大速度</td></tr><tr><td align="center" valign="middle" >engineRuntime</td><td align="center" valign="middle" >text</td><td align="center" valign="middle" >是</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >行程时长</td></tr></tbody></table></table-wrap><p>表5. 行车记录表</p><p>图5. Android端UI设计</p><sec id="s6_1"><title>4.1. 单页面应用和响应式设计</title><p>本设计中采用以JavaScript和AJAX为基础的单页面应用设计，单页面设计即用户在网页上的所有操作都在同一个页面进行。其最大的优势是符合用户操作习惯，使得用户在网页上的操作类似于桌面应用，有较好的时效性和可移植性。在实现前后端分离的同时，降低了服务器对渲染页面和文件传输的负担，减少了网络资源的占用，加快了网络请求的响应速度。</p><p>为了兼容不同尺寸的浏览设备如手机、平板电脑，本设计采用基于BOOTSTRAPT的响应式设计 [<xref ref-type="bibr" rid="hanspub.19725-ref10">10</xref>] ，可让页面布局识别不同设备的分辨率和大小并自动调整，保证良好的用户体验的同时，兼容不同尺寸和不同类型的浏览器。</p></sec><sec id="s6_2"><title>4.2. AJAX数据交互</title><p>前端页面渲染的数据来源是后台服务器，本设计采用AJAX [<xref ref-type="bibr" rid="hanspub.19725-ref11">11</xref>] ，实现数据的异步更新。JavaScript向服务器提出请求并加载动作，整个过程不阻塞用户。AJAX保证浏览器和服务器之间异步传输数据，使得页面根据用户请求向服务器请求少量数据而非整个页面，AJAX构建流程见图6所示。</p><p>AJAX的工作原理是在在用户和服务器之间加了—个中间层(AJAX引擎)，实现数据的异步更新。除此之外，AJAX引擎可以替代本地服务器处理用户的数据验证和数据请求，在需要从本地服务器读取数据时由AJAX引擎代为向服务器提交请求，得页面根据用户请求向服务器请求少量数据而非整个页面。AJAX与后台交互数据采用AJAX get()方法从服务器端加载数据，通过AJAX post()方法从服务器端加载数据以及向服务器端传输数据。</p></sec><sec id="s6_3"><title>4.3. Web端界面设计</title><p>以BOOTSTRAPT作为页面框架渲染界面，JAVASCRIPT执行页面用户行为，AJAX实现异步页面刷新，实现用户随时随地远程获取汽车状态信息、历史故障码和行车记录的远程监控端。既有利于车主实时掌控汽车状态信息，维修人员也可远程登录客户账户，实现远程汽车检修。设计的Web端界面见图7所示。</p><p>图6. AJAX构建应用程序流程图</p><p>图7. Web端界面设计</p></sec></sec><sec id="s7"><title>5. 结论</title><p>本设计利用智能手机完善的数据处理能力及自带无线、蓝牙等通信功能的优势，并结合INTERNET技术，将汽车的实时检测扩展到远程监控。实现了基于Android的汽车实时监测系统与OBD通用诊断接口ELM327通信，通过对OBD-II协议的解析，可实时获取汽车故障码和状态信息，存储到本地数据库并同时传输到远程监控端。用户不需要购买额外设备，只需在手机上安装APP便可以实现汽车的实时远程监控和故障诊断，并实现故障维修人员的远程维修。系统具有较大的市场应用前景。</p></sec><sec id="s8"><title>文章引用</title><p>徐丽娜,叶 桦,陶 鹏. 基于Android的汽车实时监测系统的研究与实现 Research and Implementation of Vehicle Real-Time Monitoring System Based on Android[J]. 计算机科学与应用, 2017, 07(02): 109-116. http://dx.doi.org/10.12677/CSA.2017.72013</p></sec><sec id="s9"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.19725-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">袁卫波. 基于CAN总线的车辆在线故障诊断系统[D]: [硕士学位论文]. 西安: 长安大学载运工具运用工程专业, 2012.</mixed-citation></ref><ref id="hanspub.19725-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Zaldivar, J., Calafate, C.T., Cano, J., et al. (2011) Providing Accident Detection in Vehicular Networks through OBD- II Devices and Android-Based Smartphones. IEEE 36th Conference on Local Computer Networks (LCN).</mixed-citation></ref><ref id="hanspub.19725-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Lin, J., Chen, S., Shih, Y., et al. (2009) A Study on Remote On-Line Diagnostic System for Vehicles by Integrating the Technology of OBD, GPS, and 3G. World Academy of Science, Engineering and Technology, 56, 435-441.</mixed-citation></ref><ref id="hanspub.19725-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">OBD Solutions. &lt;br&gt;http://www.obdsol.com/</mixed-citation></ref><ref id="hanspub.19725-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">ELM327: OBD to RS232 Interpreter. Download from &lt;br&gt;http://www.elmelectronics.com/</mixed-citation></ref><ref id="hanspub.19725-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">International Organization for Standardization, “ISO 15031-5: Road Vehicles—Communication between Vehicle and External Equipment for Emissions-Related Diagnostics—Part 5: Emissions-Related Diagnostic Services”, 2006.</mixed-citation></ref><ref id="hanspub.19725-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">明日科技编著. Android从入门到精通[M]. 北京: 清华大学出版社, 2012.</mixed-citation></ref><ref id="hanspub.19725-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">苏雅. 基于Android智能手机的人员定位系统的开发与实现[D]: [硕士学位论文]. 南京: 东南大学, 2014.</mixed-citation></ref><ref id="hanspub.19725-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">颜一鸣. Web前端项目开发实践[M]. 武汉: 中南大学出版社, 2015.</mixed-citation></ref><ref id="hanspub.19725-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">舒后, 熊一帆, 葛雪娇. 基于Bootstrap框架的响应式网页设计与实现[J]. 北京印刷学院学报, 2016, 24(2): 47-52.</mixed-citation></ref><ref id="hanspub.19725-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">冯振兴. Ajax技术在Web系统中的应用研究[D]: [硕士学位论文]. 北京: 北京林业大学, 2008.</mixed-citation></ref></ref-list></back></article>