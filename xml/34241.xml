<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">ORF</journal-id><journal-title-group><journal-title>Operations Research and Fuzziology</journal-title></journal-title-group><issn pub-type="epub">2163-1476</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/ORF.2020.101010</article-id><article-id pub-id-type="publisher-id">ORF-34241</article-id><article-categories><subj-group subj-group-type="heading"><subject>ORF20200100000_71281563.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  支撑向量机的一致光滑牛顿法
  A Uniformly Smoothing Newton Method for Support Vector Machine
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>吴</surname><given-names>振</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>宇</surname><given-names>振盛</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>上海理工大学理学院，上海</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>05</day><month>12</month><year>2019</year></pub-date><volume>10</volume><issue>01</issue><fpage>86</fpage><lpage>99</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   提升光滑支撑向量机分类性能，本文引入了一种新的一致光滑逼近函数来替代正号函数，此函数不仅克服了支撑向量机模型求解过程中出现的不可微性，也在求解收敛速度上优于其他光滑函数。基于此一致光滑逼近函数我们设计了相应的牛顿算法并证明了该光滑函数的收敛性，最后通过数值模拟体现了该函数在光滑支撑向量机模型中的求解精度、效率和推广适应性的优越性能。 To improve the classification performance of smooth support vector machines, a new uniformly smooth approximation function is introduced to replace the positive sign function. It doesn’t only overcome the non-differentiability in the process of solving the support vector machine model, but also is superior to other smooth functions in solving convergence rate. Based on the uniform smooth approximation function, we design a corresponding Newton algorithm and es-tablish the convergence of the proposed algorithm. Finally, numerical simulation shows the su-perior performance of the function in accuracy, efficiency and generalization adaptability for solving the smooth support vector machine model. 
 
</p></abstract><kwd-group><kwd>支撑向量机，一致光滑函数，对偶问题，Newton-Armijo算法, Support Vector Machine</kwd><kwd> Smooth Function</kwd><kwd> Dual Problem</kwd><kwd> Newton-Armijo Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>支撑向量机的一致光滑牛顿法<sup> </sup></title><p>吴振<sup>*</sup>，宇振盛<sup>#</sup></p><p>上海理工大学理学院，上海</p><p>收稿日期：2020年1月30日；录用日期：2020年2月13日；发布日期：2020年2月20日</p><disp-formula id="hanspub.34241-formula6"><graphic xlink:href="//html.hanspub.org/file/10-1700197x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>提升光滑支撑向量机分类性能，本文引入了一种新的一致光滑逼近函数来替代正号函数，此函数不仅克服了支撑向量机模型求解过程中出现的不可微性，也在求解收敛速度上优于其他光滑函数。基于此一致光滑逼近函数我们设计了相应的牛顿算法并证明了该光滑函数的收敛性，最后通过数值模拟体现了该函数在光滑支撑向量机模型中的求解精度、效率和推广适应性的优越性能。</p><p>关键词 :支撑向量机，一致光滑函数，对偶问题，Newton-Armijo算法</p><disp-formula id="hanspub.34241-formula7"><graphic xlink:href="//html.hanspub.org/file/10-1700197x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/10-1700197x8_hanspub.png" /> <img src="//html.hanspub.org/file/10-1700197x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>随着智能时代的到来，机器学习领域越来越广泛受到社会青睐，成为很多学者的研究热门。2001年Lee等人通过对支撑向量机的深入研究首次使用了sigmoid积分函数 p ( x , α ) 对无约束的支撑向量机(Support Vector Machine, SVM) [<xref ref-type="bibr" rid="hanspub.34241-ref1">1</xref>] 进行光滑化，这是首次在支撑向量机中引入光滑的概念。得出了光滑支撑向量机(Smooth Support Vector Machine, SSVM) [<xref ref-type="bibr" rid="hanspub.34241-ref2">2</xref>] 模型，然后在Armijo线搜索的基础上采用了牛顿算法对此光滑支撑向量机模型进行求解，结果展现出了比一般的支撑向量机模型更好的分类性能，同时也提高了其计算的效率。同年Mangasarian等人也提出了RSVM (Reduced Support Vector Machine) [<xref ref-type="bibr" rid="hanspub.34241-ref3">3</xref>]，将模型研究的约束凸优化问题改进为无约束强凸优化问题，从而使相应算法在求解问题上提升了一定的速度，尽管该模型在实际过程中对于一些大规模数据问题的求解所花费的时间比较长，且需要保存的信息和计算量也比较多，在求解思路上，仍是一种主流的进步方法。从此越来越多的学者们逐渐将研究光滑函数作为SSVM模型的核心，并以此开辟了支撑向量机的一个新的研究方向。</p><p>2005年，袁玉波 [<xref ref-type="bibr" rid="hanspub.34241-ref4">4</xref>] 等人提出了两个多项式光滑函数，通过对支撑向量机模型的无约束目标函数进行光滑化处理，引出了PSSVM模型，也证明了PSSVM相比SSVM而言有着更好的分类性能。之后又提出了三阶样条光滑函数 [<xref ref-type="bibr" rid="hanspub.34241-ref5">5</xref>]，从而引出了新的支撑向量机的TSSVM模型。通过分析TSSVM模型的收敛性和对应数据实验结果可以说明TSSVM有着更优秀的分类效果。2008年，熊金志等人 [<xref ref-type="bibr" rid="hanspub.34241-ref6">6</xref>] 更是提出了高于三阶样条光滑函数一个数量级的六阶光滑函数。</p><p>随着光滑函数逼近正号函数的精度的提高，显然其函数本身也变得越来越复杂，这并不利于科学计算。本文主要介绍了一种新的一致光滑逼近函数来替代正号函数。克服了支撑向量机模型求解过程中出现的不可微性，并基于此一致光滑逼近函数设计了相应算法，通过理论计算并证明了该光滑函数的收敛性，最后通过数值模拟体现了该函数在光滑支撑向量机模型中的求解精度、效率和推广适应性的优越性能。</p></sec><sec id="s4"><title>2. 光滑支撑向量机</title><sec id="s4_1"><title>2.1. 支撑向量机</title><p>对于给定一组数据</p><p>{ ( x 1 , y 1 ) , ( x 2 , y 2 ) , ⋯ , ( x m , y m ) }</p><p>其中 x i ∈ ℝ d , y ∈ { − 1 , 1 } ，我们的目标是从数据中寻求一个假设函数 h : R → [ − 1 , 1 ] ，使得 h ( x i ) = y i ，即</p><p>∀ i , y i h ( x i ) = 1 (1)</p><p>更进一步，线性二分类模型认为假设函数的形式是基于对特征 x i 的线性组合，即</p><p>h ( x i ) : = s i g n ( w T x i + b ) (2)</p><p>其中 w i ∈ ℝ d , b ∈ ℝ 。</p><p>定义1. 线性二分类模型的目标是找到一组合适的参数 ( w , b ) ，使得</p><p>∀ i , y i ( w T x i + b ) &gt; 0 (3)</p><p>即，线性二分类模型希望在特征空间找到一个划分类别的超平面，将属于不同标记的样本分开。证明</p><p>y i h ( x i ) = 1 ⇔ y i s i g n ( w T x i + b ) = 1</p><p>⇔ y i ( ω T x i + b ) &gt; 0 (4)</p><p>由于能将样本分开的超平面有可能有很多，故SVM希望能找到一个离各个样本都比较远的划分超平面，即最优超平面。</p><p>当面对样本的随机扰动时，离各个样本都较远的划分超平面抗干扰的能力比较强，我们希望在优化间隔的同时，允许分类错误的样本出现，但这类样本应尽可能少：</p><p>{ min ω , b 1 2 ω T ω + C ∑ i = 1 m I ( . ) y i ≠ s i g n ( ω T φ ( x i ) + b ) s .t .   y i ( ω T φ ( x i ) + b ) ≥ 1 (5)</p><p>其中， I ( . ) 是指示函数，C是个可调节参数，用于权衡优化间隔和少量分类错误样本这两个目标。但是，指示函数不连续，更不是凸函数，使得优化问题不再是二次规划问题。所以我们需要对其进行简化。</p><p>公式(5)难以实际应用的原因在于指示函数只有两个离散取值0/1，对应样本分类正确/错误。为了能使优化问题继续保持为二次规划问题，我们需要引入一个取值为连续值的变量，刻画样本满足约束的程度。我们引入松弛变量 ξ i ，用于度量样本违背约束的程度。当样本违背约束的程度越大，松弛变量值越大。即</p><p>ξ i = { 0 ,     若 y i ( ω T φ ( x i ) + b ) ≥ 1 1 − y i ( ω T φ ( x i ) + b ) ,     若 y i = s i g n ( ω T φ ( x i ) + b ) (6)</p><p>定义2. (软间隔支撑向量机基本型)软间隔支撑向量机旨在找到一组合适的参数 ( w , b ) 使得</p><p>{ min ω , b 1 2 ω T ω + C ∑ i = 1 m ξ i s .t .   y i ( ω T φ ( x i ) + b ) ≥ 1 − ξ i i = 1 , 2 , ⋯ , m , ξ i ≥ 0 , i = 1 , 2 , ⋯ , m (7)</p><p>其中，C是个可调节参数，用于权衡优化间隔和少量样本违背大间隔约束这两个目标。当C比较大时，我们希望更多的样本满足大间隔约束；当C比较小时，我们允许有一些样本不满足大间隔约束。</p><p>定义 3. (软间隔支持向量机对偶型)软间隔支持向量机的对偶问题等价于找到一组合适的 α ，使得</p><p>{ min α 1 2 ∑ i = 1 m ∑ j = 1 m α i α j y i y j φ ( x i ) T φ ( x j ) − ∑ i = 1 m α i s .t .     ∑ i = 1 m α i y i = 0 ,   0 ≤ α i ≤ ξ i ,   i = 1 , 2 , ⋯ , m (8)</p></sec><sec id="s4_2"><title>2.2. SSVM</title><p>由软间隔支撑向量机的原始型和对偶形式我们可以对其进行求解得到 α i * ，于是分类函数</p><p>f ( x ) = s i g n [ ∑ i = 1 m y i α i * ( φ ( x i ) , φ ( x ) ) + b * ] = s i g n [ ∑ i = 1 m y i α i * K ( x i , x ) + b * ] (9)</p><p>其中，</p><p>b * = 1 m ∑ i = 1 m ( y i − ∑ i = 1 m y i α j * ( φ ( x j ) , φ ( x i ) ) )</p><p>令 X = ( x 1 , x 2 , ⋯ , x m ) T</p><p>x i = ( x i 1 , x i 2 , ⋯ , x i n )   ( i = 1 , 2 , ⋯ , m )</p><p>e = o n e s ( m , 1 )</p><p>D = d i a g ( y 1 , y 2 , ⋯ , y m ) , A = D K ( X , X T ) D</p><p>则问题(7)改写为</p><p>{ min α , b 1 2 α T A α + C e T ξ s .t .     D ( K ( X , X T ) D α + e b ) − e + ξ ≥ 0 , ξ ≥ 0 (10)</p><p>对于任何核函数，上式均是个凸二次规划问题，不妨取 A = I ，同时用b衡量分类间隔( 2 ‖ ( w , b ) ‖ 2 )，</p><p>于是在对偶问题中 b = − e T D α ，同时让松弛变量 ξ T ξ 最小，则(10)转化为</p><p>{ min α , b 1 2 ( α T α + b 2 ) + c 2 ξ T ξ s .t .     D ( K ( X , X T ) D α + e b ) − e + ξ ≥ 0 , ξ ≥ 0 (11)</p><p>由约束条件知，</p><p>ξ = ( e − D ( K ( X , X T ) D α + e b ) ) +</p><p>这里是非光滑的。将其代入问题(11)，得到一个强凸无约束优化问题：</p><p>min α , b 1 2 ( α T α + b 2 ) + c 2 ‖ ( e − D ( K ( X , X T ) D α + e b ) ) + ‖ 2 (12)</p><p>有唯一解。</p><p>令 z = ( α b ) , r = ( r 1 , r 2 , ⋯ , r l ) T ，</p><p>( r + ) i = max { r i , 0 } , r i = 1 − H i z , H i = y i [ K i − 1 ]</p><p>K i 是核矩阵 K i 的第i行。则将(13)改写为一般形式为</p><p>min z f ( z ) = 1 2 z T z + c 2 ‖ r + ‖ 2 2 (13)</p><p>用不同的光滑函数来近似逼近正号函数 ( ⋅ ) + ，可得不同的SSVM模型，典型的光滑函数有sigmoid函数的积分函数、多项式函数、样条函数和插值函数等等。</p><p>这里我们假定一个光滑函数 p ( r , k ) 来近似 r + ，则得到光滑支撑向量机SSVM：</p><p>min z f p ( z ) = 1 2 z T z + c 2 ( p ( r , k ) ) T p ( r , k ) (14)</p><p>即为常见的光滑支撑向量机模型。</p></sec></sec><sec id="s5"><title>3. 一致光滑逼近函数及其性质</title><p>基于对正号函数的逼近的考虑，我们寻找了一致光滑逼近函数来光滑目标函数中的不可微部分，利用一致光滑逼近函数来近似绝对值函数，从而通过新问题的求解来逼近原问题的解。</p><p>给出的一致光滑逼近函数如下所示：</p><p>h λ ( t ) = μ ln ( e t μ + e − t μ ) + ( λ − 1 ) μ ln 2 ,</p><p>μ &gt; 0 ,     λ ∈ [ 0 , 1 ] (15)</p><p>当 μ → 0 时，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x59_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>该函数是由<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x60_hanspub.png" xlink:type="simple"/></inline-formula>的两个一致光滑逼近函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x61_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x62_hanspub.png" xlink:type="simple"/></inline-formula> [<xref ref-type="bibr" rid="hanspub.34241-ref7">7</xref>] 的凸组合得到，其中</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x63_hanspub.png" xlink:type="simple"/></inline-formula>,<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x64_hanspub.png" xlink:type="simple"/></inline-formula>;</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x65_hanspub.png" xlink:type="simple"/></inline-formula>,<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x66_hanspub.png" xlink:type="simple"/></inline-formula>.</p><p>利用pycharm，采用精度<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x67_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x68_hanspub.png" xlink:type="simple"/></inline-formula>，在区间<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x69_hanspub.png" xlink:type="simple"/></inline-formula>上一致光滑逼近函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x70_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x71_hanspub.png" xlink:type="simple"/></inline-formula></p><p>及其凸组合形式<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x72_hanspub.png" xlink:type="simple"/></inline-formula>分别与正号函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x73_hanspub.png" xlink:type="simple"/></inline-formula>的逼近程度见图1，从图中可以看出，其凸组合形式的光滑函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x74_hanspub.png" xlink:type="simple"/></inline-formula>因其参数的选择不同可以有更好的适应性。</p><p>图1. 不同光滑函数的逼近程度</p><p>记<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x76_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x77_hanspub.png" xlink:type="simple"/></inline-formula>为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x78_hanspub.png" xlink:type="simple"/></inline-formula>的上方一致光滑逼近函数，</p><p>则：1)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x79_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>2)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x80_hanspub.png" xlink:type="simple"/></inline-formula>的值随参数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x81_hanspub.png" xlink:type="simple"/></inline-formula>的减小而单调下降，且当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x82_hanspub.png" xlink:type="simple"/></inline-formula>时，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x83_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>3)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x84_hanspub.png" xlink:type="simple"/></inline-formula>，且<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x85_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>证明1) <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x86_hanspub.png" xlink:type="simple"/></inline-formula></p><p>由于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x87_hanspub.png" xlink:type="simple"/></inline-formula></p><p>从而<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x88_hanspub.png" xlink:type="simple"/></inline-formula>且<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x89_hanspub.png" xlink:type="simple"/></inline-formula>与<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x90_hanspub.png" xlink:type="simple"/></inline-formula>中至少有一个等于0，因此</p><disp-formula id="hanspub.34241-formula8"><graphic xlink:href="//html.hanspub.org/file/10-1700197x91_hanspub.png"  xlink:type="simple"/></disp-formula><p>即</p><disp-formula id="hanspub.34241-formula9"><graphic xlink:href="//html.hanspub.org/file/10-1700197x92_hanspub.png"  xlink:type="simple"/></disp-formula><p>2)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x93_hanspub.png" xlink:type="simple"/></inline-formula>的值随参数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x94_hanspub.png" xlink:type="simple"/></inline-formula>的减小而单调下降的证明可参考于李兴斯等 [<xref ref-type="bibr" rid="hanspub.34241-ref8">8</xref>] [<xref ref-type="bibr" rid="hanspub.34241-ref9">9</xref>] 关于凝聚函数的性质推导过程。结合<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x95_hanspub.png" xlink:type="simple"/></inline-formula>，即<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x96_hanspub.png" xlink:type="simple"/></inline-formula>，这表明<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x97_hanspub.png" xlink:type="simple"/></inline-formula>有界，利用单调有界必有极限的定理及夹逼准则，则有<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x98_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>3)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x99_hanspub.png" xlink:type="simple"/></inline-formula>，而<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x100_hanspub.png" xlink:type="simple"/></inline-formula>，即<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x101_hanspub.png" xlink:type="simple"/></inline-formula>，因此<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x102_hanspub.png" xlink:type="simple"/></inline-formula>，且<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x103_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>我们给出了<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x104_hanspub.png" xlink:type="simple"/></inline-formula>时该函数与绝对值函数的逼近情况如图2。</p><p>记<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x105_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x106_hanspub.png" xlink:type="simple"/></inline-formula>为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x107_hanspub.png" xlink:type="simple"/></inline-formula>的下方一致光滑逼近函数，</p><p>则：1)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x108_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>2)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x109_hanspub.png" xlink:type="simple"/></inline-formula>的值随参数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x110_hanspub.png" xlink:type="simple"/></inline-formula>的减小而单调递增，且当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x111_hanspub.png" xlink:type="simple"/></inline-formula>时，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x112_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>3)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x113_hanspub.png" xlink:type="simple"/></inline-formula>，且<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x114_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>证明1) 由于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x115_hanspub.png" xlink:type="simple"/></inline-formula>，于是<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x116_hanspub.png" xlink:type="simple"/></inline-formula>，结合上文中叙述的</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x117_hanspub.png" xlink:type="simple"/></inline-formula>，则有</p><disp-formula id="hanspub.34241-formula10"><graphic xlink:href="//html.hanspub.org/file/10-1700197x118_hanspub.png"  xlink:type="simple"/></disp-formula><p>图2. 光滑函数y2与绝对值函数y1的逼近程度</p><p>2)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x120_hanspub.png" xlink:type="simple"/></inline-formula>的值随参数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x121_hanspub.png" xlink:type="simple"/></inline-formula>的减小而单调递增的证明可参考于杨庆之等人 [<xref ref-type="bibr" rid="hanspub.34241-ref10">10</xref>] [<xref ref-type="bibr" rid="hanspub.34241-ref11">11</xref>] 等关于凝聚函数法的文献。</p><p>结合<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x122_hanspub.png" xlink:type="simple"/></inline-formula>，即<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x123_hanspub.png" xlink:type="simple"/></inline-formula>，这表明<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x124_hanspub.png" xlink:type="simple"/></inline-formula>有界，利用单调有界必有极</p><p>限的定理及夹逼准则，则有<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x125_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>3)<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x126_hanspub.png" xlink:type="simple"/></inline-formula>，而<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x127_hanspub.png" xlink:type="simple"/></inline-formula>，即<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x128_hanspub.png" xlink:type="simple"/></inline-formula>，因此<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x129_hanspub.png" xlink:type="simple"/></inline-formula>，且<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x130_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>我们给出了<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x131_hanspub.png" xlink:type="simple"/></inline-formula>时该函数与绝对值函数的逼近情况如图3。</p><p>以上得到的两个一致光滑逼近函数均可以用作近似逼近正号函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x132_hanspub.png" xlink:type="simple"/></inline-formula>，然而其精度并不是很好，基于凸组合的特殊线性组合原理，从而将是由<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x133_hanspub.png" xlink:type="simple"/></inline-formula>的两个一致光滑逼近函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x134_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x135_hanspub.png" xlink:type="simple"/></inline-formula>的凸组合而得到的新的函数：</p><disp-formula id="hanspub.34241-formula11"><graphic xlink:href="//html.hanspub.org/file/10-1700197x136_hanspub.png"  xlink:type="simple"/></disp-formula><p>而<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x137_hanspub.png" xlink:type="simple"/></inline-formula>于是</p><disp-formula id="hanspub.34241-formula12"><graphic xlink:href="//html.hanspub.org/file/10-1700197x138_hanspub.png"  xlink:type="simple"/></disp-formula><p>从而相应的光滑函数为</p><disp-formula id="hanspub.34241-formula13"><label>(16)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/10-1700197x139_hanspub.png"  xlink:type="simple"/></disp-formula><p>图3. 光滑函数y3与绝对值函数y1的逼近程度</p><p>对于这样一个新的凸组合光滑逼近函数，将其与绝对值函数进行比较如图4所示。</p><p>当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x141_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x142_hanspub.png" xlink:type="simple"/></inline-formula>时</p><p>图4. 光滑函数y4与绝对值函数y1的逼近程度</p><p>当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x144_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x145_hanspub.png" xlink:type="simple"/></inline-formula>时，见图5。</p><p>对于给定的光滑因子k，</p><p>当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x146_hanspub.png" xlink:type="simple"/></inline-formula>时，逼近程度</p><p>图5. 更新后的光滑函数y4与绝对值函数y1的逼近程度</p><disp-formula id="hanspub.34241-formula14"><graphic xlink:href="//html.hanspub.org/file/10-1700197x148_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x149_hanspub.png" xlink:type="simple"/></inline-formula>时，逼近程度</p><disp-formula id="hanspub.34241-formula15"><graphic xlink:href="//html.hanspub.org/file/10-1700197x150_hanspub.png"  xlink:type="simple"/></disp-formula><p>故当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x151_hanspub.png" xlink:type="simple"/></inline-formula>时，</p><disp-formula id="hanspub.34241-formula16"><graphic xlink:href="//html.hanspub.org/file/10-1700197x152_hanspub.png"  xlink:type="simple"/></disp-formula><p>故当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x153_hanspub.png" xlink:type="simple"/></inline-formula>时，</p><disp-formula id="hanspub.34241-formula17"><graphic xlink:href="//html.hanspub.org/file/10-1700197x154_hanspub.png"  xlink:type="simple"/></disp-formula><p>故当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x155_hanspub.png" xlink:type="simple"/></inline-formula>时，</p><disp-formula id="hanspub.34241-formula18"><graphic xlink:href="//html.hanspub.org/file/10-1700197x156_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x157_hanspub.png" xlink:type="simple"/></inline-formula>时，逼近程度</p><disp-formula id="hanspub.34241-formula19"><graphic xlink:href="//html.hanspub.org/file/10-1700197x158_hanspub.png"  xlink:type="simple"/></disp-formula><p>显然，只需取<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x159_hanspub.png" xlink:type="simple"/></inline-formula>为趋向于0的合适的值我们即可得到较强的逼近精度。对于任意一个<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x160_hanspub.png" xlink:type="simple"/></inline-formula>，问题(14)和(15)的解的逼近精度始终满足于</p><disp-formula id="hanspub.34241-formula20"><graphic xlink:href="//html.hanspub.org/file/10-1700197x161_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x162_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>要求SSVM的解满足精度要求。只要使得<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x163_hanspub.png" xlink:type="simple"/></inline-formula>，只需有</p><disp-formula id="hanspub.34241-formula21"><graphic xlink:href="//html.hanspub.org/file/10-1700197x164_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x165_hanspub.png" xlink:type="simple"/></inline-formula>时，</p><p>故当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x166_hanspub.png" xlink:type="simple"/></inline-formula>时，解得<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x167_hanspub.png" xlink:type="simple"/></inline-formula></p><p>当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x168_hanspub.png" xlink:type="simple"/></inline-formula>时，解得<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x169_hanspub.png" xlink:type="simple"/></inline-formula></p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x170_hanspub.png" xlink:type="simple"/></inline-formula>时，解得<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x171_hanspub.png" xlink:type="simple"/></inline-formula></p></sec><sec id="s6"><title>4. Newton-Armijo算法</title><p>Newton-Armijo算法是对于牛顿法的一个改进。采用Armijo线搜索，并利用牛顿法进行求解。记式(13)的目标函数梯度为</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x172_hanspub.png" xlink:type="simple"/></inline-formula>,</p><p>使用光滑函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x173_hanspub.png" xlink:type="simple"/></inline-formula>代替<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x174_hanspub.png" xlink:type="simple"/></inline-formula>得到：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x175_hanspub.png" xlink:type="simple"/></inline-formula>，其中(<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x176_hanspub.png" xlink:type="simple"/></inline-formula>是k取定值时的<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x177_hanspub.png" xlink:type="simple"/></inline-formula>)</p><p>Hessian矩阵<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x178_hanspub.png" xlink:type="simple"/></inline-formula>，其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x179_hanspub.png" xlink:type="simple"/></inline-formula>；式(15)的目标函数梯度为：</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x180_hanspub.png" xlink:type="simple"/></inline-formula>,</p><p>Hessian矩阵<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x181_hanspub.png" xlink:type="simple"/></inline-formula>，其中</p><disp-formula id="hanspub.34241-formula22"><graphic xlink:href="//html.hanspub.org/file/10-1700197x182_hanspub.png"  xlink:type="simple"/></disp-formula><p>一般的Newton-Armijo算法</p><p>目标函数的下降方向<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x183_hanspub.png" xlink:type="simple"/></inline-formula>由方程<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x184_hanspub.png" xlink:type="simple"/></inline-formula>求得，由于使用了Armijo一维搜索，保证了目标函数值在迭代过程中的不断下降，其具体步骤如下：</p><p>Step 1</p><p>Initialization. Given the initial point<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x185_hanspub.png" xlink:type="simple"/></inline-formula>, let<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x186_hanspub.png" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x187_hanspub.png" xlink:type="simple"/></inline-formula>, parameter: <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x188_hanspub.png" xlink:type="simple"/></inline-formula>generated from the input data;</p><p>Step 2</p><p>Calculate<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x189_hanspub.png" xlink:type="simple"/></inline-formula>. If<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x190_hanspub.png" xlink:type="simple"/></inline-formula>, stop; or turn to step 3;</p><p>Step 3</p><p>Calculate Hessian matrix<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x191_hanspub.png" xlink:type="simple"/></inline-formula>, solve <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x192_hanspub.png" xlink:type="simple"/></inline-formula> and then we get<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x193_hanspub.png" xlink:type="simple"/></inline-formula>;</p><p>Step 4 (Armijo line search) select</p><disp-formula id="hanspub.34241-formula23"><graphic xlink:href="//html.hanspub.org/file/10-1700197x194_hanspub.png"  xlink:type="simple"/></disp-formula><p>and let</p><disp-formula id="hanspub.34241-formula24"><graphic xlink:href="//html.hanspub.org/file/10-1700197x195_hanspub.png"  xlink:type="simple"/></disp-formula><p>Step 5</p><p>Let<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x196_hanspub.png" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x197_hanspub.png" xlink:type="simple"/></inline-formula>, turn to step 2.</p><p>该算法每次迭代需要计算Hessian矩阵<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x198_hanspub.png" xlink:type="simple"/></inline-formula>，再确定搜索方向，所需要的工作量相当大，并且由于数据的特征比较多，相应的对于Hessian矩阵的计算就会变得比较复杂。</p><p>改进的Newton-Armijo算法</p><p>将问题(13)中的目标函数<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x199_hanspub.png" xlink:type="simple"/></inline-formula>光滑为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x200_hanspub.png" xlink:type="simple"/></inline-formula>，令<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x201_hanspub.png" xlink:type="simple"/></inline-formula>，然后求解该方程，由于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x202_hanspub.png" xlink:type="simple"/></inline-formula>中</p><disp-formula id="hanspub.34241-formula25"><graphic xlink:href="//html.hanspub.org/file/10-1700197x203_hanspub.png"  xlink:type="simple"/></disp-formula><p>比<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x204_hanspub.png" xlink:type="simple"/></inline-formula>中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x205_hanspub.png" xlink:type="simple"/></inline-formula>简单，因而这个改进的方法在计算起来速度更快。其具体步骤如下：</p><p>Step 1</p><p>Initialization. Given the initial point<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x206_hanspub.png" xlink:type="simple"/></inline-formula>, let<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x207_hanspub.png" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x208_hanspub.png" xlink:type="simple"/></inline-formula>, parameter: <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x209_hanspub.png" xlink:type="simple"/></inline-formula>generated from the input data;</p><p>Step 2</p><p>Calculate<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x210_hanspub.png" xlink:type="simple"/></inline-formula>. If<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x211_hanspub.png" xlink:type="simple"/></inline-formula>, stop; or turn to step 3;</p><p>Step 3</p><p>Calculate Hessian matrix<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x212_hanspub.png" xlink:type="simple"/></inline-formula>, solve <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x213_hanspub.png" xlink:type="simple"/></inline-formula> and then we get<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x214_hanspub.png" xlink:type="simple"/></inline-formula>;</p><p>Step 4 (Armijo line search) select</p><disp-formula id="hanspub.34241-formula26"><graphic xlink:href="//html.hanspub.org/file/10-1700197x215_hanspub.png"  xlink:type="simple"/></disp-formula><p>and let</p><disp-formula id="hanspub.34241-formula27"><graphic xlink:href="//html.hanspub.org/file/10-1700197x216_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x217_hanspub.png" xlink:type="simple"/></inline-formula>，而<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x218_hanspub.png" xlink:type="simple"/></inline-formula>(a是<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x219_hanspub.png" xlink:type="simple"/></inline-formula>的定义域下界)，因为<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x220_hanspub.png" xlink:type="simple"/></inline-formula>的一阶</p><p>充分必要条件是<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x221_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>Step 5</p><p>Let<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x222_hanspub.png" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x223_hanspub.png" xlink:type="simple"/></inline-formula>, turn to step 2.</p></sec><sec id="s7"><title>5. 数值结果和比较</title><sec id="s7_1"><title>5.1. 一致光滑牛顿法求解</title><p>数值实验数据来自用python编写的随机线性不可分数据集，统共样本数据有1000样本，测试样本有300个，每个样本有30个特征，采用了高斯核来将其映射到高维特征空间上得到分类结果如图6~9。</p><p>可以看出在小规模数据集下其分类的正确率都有着良好的性质。基于此结果的影响下，我们采用了其他数据集，例如区分数字的分类数据集USPS，我们实验选取了5000个训练样本，1800个测试样本，每个样本有着160个特征，在精度要求<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x224_hanspub.png" xlink:type="simple"/></inline-formula>的情况下使用不同Newton-Armijo算法求解算法下分类所需的迭代次数、时间、训练错误率和测试错误率如表1所示。</p></sec><sec id="s7_2"><title>5.2. 分析与比较</title><p>由图表中数据进行分析可知，我们得到一些关于不同光滑函数与算法的结合求解SVM的相关结论：</p><p>1) 一般来说，随着光滑函数与目标函数的逼近程度的靠近，求解SVM的解的精度会更好，在迭代次数有要求的情况下，光滑函数的选取决定了它是否能够满足实验精度要求，否则只能在最大迭代次数下才能得到满足实验精度的结果。新选取的光滑函数的参数选择也决定了它是否能够很好的契合实际问</p><p>图6. 分类结果(1)</p><p>图7. 分类结果(2)</p><p>图 8. 分类结果(3)</p><p>图9. 分类结果(4)</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Experimental results of different solving algorithms for different smooth function</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >Algorithm</th><th align="center" valign="middle" >Smooth function</th><th align="center" valign="middle" >iterations</th><th align="center" valign="middle" >time/s</th><th align="center" valign="middle" >Training error rate</th><th align="center" valign="middle" >Test error rate</th><th align="center" valign="middle" >lambda</th></tr></thead><tr><td align="center" valign="middle"  rowspan="4"  >General Newton-Armijo algorithm</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x229_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >69</td><td align="center" valign="middle" >6.378173</td><td align="center" valign="middle" >0.0089</td><td align="center" valign="middle" >0.0179</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x230_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >79</td><td align="center" valign="middle" >7.001273</td><td align="center" valign="middle" >0.0056</td><td align="center" valign="middle" >0.0156</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x231_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >34</td><td align="center" valign="middle" >4.912734</td><td align="center" valign="middle" >0.0032</td><td align="center" valign="middle" >0.0151</td><td align="center" valign="middle" >0.5</td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x232_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >32</td><td align="center" valign="middle" >4.721893</td><td align="center" valign="middle" >0.0012</td><td align="center" valign="middle" >0.0149</td><td align="center" valign="middle" >0.618</td></tr><tr><td align="center" valign="middle"  rowspan="4"  >Improved Newton-Armijo algorithm:</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x233_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >61</td><td align="center" valign="middle" >6.001282</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.0139</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x234_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >75</td><td align="center" valign="middle" >5.832902</td><td align="center" valign="middle" >0.0023</td><td align="center" valign="middle" >0.0187</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x235_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >4.027182</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.0123</td><td align="center" valign="middle" >0.5</td></tr><tr><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/10-1700197x236_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >27</td><td align="center" valign="middle" >3.891276</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.0146</td><td align="center" valign="middle" >0.618</td></tr></tbody></table></table-wrap><p>表1. 不同光滑函数求解算法的实验结果</p><p>题的解决思路。在这方面，凸组合形式的光滑函数给了我们一些新的想法，在逼近程度上与求解问题精度上做一个很好的平衡是一个好的思路。</p><p>2) 一般来说，光滑函数的逼近可以使得训练错误率的下降逐渐减小甚至为0，但是数据训练的时间也会越来越多。这就要求我们在求解大规模问题中需要寻求一个适应性很好的光滑函数，在光滑函数的逼近程度和函数本身的复杂中间需要我们做好平衡，如何保证在尽量减少计算量的情况下最大化计算效率和求解速度，并在算法参数和光滑参数的结合上做一个好的调整是一件值得考虑的事情。</p></sec></sec><sec id="s8"><title>6. 结论</title><p>综上可知，支撑向量机的光滑算法中，光滑函数的不同对于算法的使用有着不同的收敛速度及计算复杂度，很明显改进后的改进的Newton-Armijo算法的收敛速度优于一般的Newton-Armijo算法；尽管是同样的算法中实验，光滑函数的不同对于结果也有着不同的影响，其影响程度也与光滑函数的逼近程度相关，越逼近正号函数的模型，其解的精确度就越高，训练结果达到的正确率也就越高，但是其训练时间也就随之增加。今后待研究问题方向有：除却Newton-Armijo算法之外的BFGS-Armijo算法、Newton-PCG等其他算法在不同光滑函数的模型下求解SSVM模型的收敛速度及求解精确度的问题、在大规模数据中处理数据训练时间和精度的平衡、光滑算法的优化改进等等。</p></sec><sec id="s9"><title>文章引用</title><p>吴 振,宇振盛. 支撑向量机的一致光滑牛顿法A Uniformly Smoothing Newton Method for Support Vector Machine[J]. 运筹与模糊学, 2020, 10(01): 86-99. https://doi.org/10.12677/ORF.2020.101010</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.34241-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Vapnik, V.N. (1995) The Nature of Statistical Learning Theory. Spring Verlag, New York, 1-299.  
&lt;br&gt;https://doi.org/ 10.1007/978-1-4757-2440-0</mixed-citation></ref><ref id="hanspub.34241-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Lee, Y.J. and Mangasarian, O.L. (2001) SSVM: A Smooth Support Vector Machine for Classification. Computational Optimization and Applications, 20, 5-22. &lt;br&gt;https://doi.org/ 10.1023/A:1011215321374</mixed-citation></ref><ref id="hanspub.34241-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Lee, Y.J. and Mangasarian, O.L. (2001) RSVM: Reduced Support Vector Machine. Proceedings of the SIAM International Conference on Data Mining, Chicago, 5-7 April 2001, 1-17. &lt;br&gt;https://doi.org/ 10.1137/1.9781611972719.13</mixed-citation></ref><ref id="hanspub.34241-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">袁玉波, 严杰, 徐成贤. 多项式光滑的支撑向量机[J]. 计算机学, 2005, 28(1): 9-17.</mixed-citation></ref><ref id="hanspub.34241-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Yuan, Y., Fan, W. and Pu, D. (2007) Spline Function Smooth Support Vector for Classification. Journal of Industrial and Management Optimization, 3, 529-542.</mixed-citation></ref><ref id="hanspub.34241-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">黄仁泰, 熊金志. 一个支持向量机的新光滑函数及其性能分析[J]. 计算机工程与应用, 2008, 44(18): 64-65.</mixed-citation></ref><ref id="hanspub.34241-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">雍龙泉. 绝对值函数的一致光滑逼近函数[J]. 数学的实践与认识, 2015, 45(20): 250-255.</mixed-citation></ref><ref id="hanspub.34241-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">李兴斯. 解非线性规划的凝聚函数法[J]. 中国科学: A辑, 1991, 12(12): 1283-1288.</mixed-citation></ref><ref id="hanspub.34241-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">李兴斯. 一类不可微优化问题的有效解法[J]. 中国科学: A辑, 1994, 24(4): 371-377.</mixed-citation></ref><ref id="hanspub.34241-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">杨庆之, 杨德庄, 张敏洪. 调节熵函数法[J]. 计算数学, 2001, 23(1): 81-86.</mixed-citation></ref><ref id="hanspub.34241-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">杨庆之. 对凝聚函数法的分析[J]. 计算数学, 1996, 18(4): 405-410.</mixed-citation></ref></ref-list></back></article>