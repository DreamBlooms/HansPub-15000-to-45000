<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">GST</journal-id><journal-title-group><journal-title>Geomatics Science and Technology</journal-title></journal-title-group><issn pub-type="epub">2329-549X</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/GST.2020.82011</article-id><article-id pub-id-type="publisher-id">GST-35403</article-id><article-categories><subj-group subj-group-type="heading"><subject>GST20200200000_64601288.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  顾及点云曲率的快速点云表面模型重建算法
  A Fast Surface Reconstruction Algorithm Considering the Curvature of Point Cloud
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>若晗</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>郭</surname><given-names>丙轩</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>武汉大学测绘遥感信息工程国家重点实验室，湖北 武汉</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>27</day><month>03</month><year>2020</year></pub-date><volume>08</volume><issue>02</issue><fpage>88</fpage><lpage>95</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  针对现行点云表面模型重建算法的效率问题，提出一种顾及点云曲率的快速点云表面模型重建算法。首先将点云Delaunay三角化，然后利用点云曲率删减可视信息，用剩余可视信息构建图割问题后，求解图割问题得到点云表面模型。实验结果表明，本文算法能得到完整度高，细节丰富的表面模型，重建速度快。&lt;br/&gt;We describe a fast surface reconstruction algorithm considering the curvature of point cloud from a set of merged range scans. Our key contribution is improving the efficiency of the algorithm by deleting part of visual information. First, Delaunay edges are added to the point cloud to construct Delaunay structure. Then, part of visual information is deleted base of curvature of point cloud, and a graph-cuts problem is established based on the remaining visual information. Finally, a surface model is obtained by solving the graph-cuts problem. We tested our method on several publicly available sets of range scans. The experimental results show that the method can efficiently reconstruct high-quality surface model with rich details and high integrity.
 
</p></abstract><kwd-group><kwd>点云表面模型重建，Delaunay，可视信息，四面体，光线, Surface Reconstruction</kwd><kwd> Delaunay</kwd><kwd> Visual Information</kwd><kwd> Tetrahedron</kwd><kwd> Ray</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>顾及点云曲率的快速点云表面模型重建算法<sup> </sup></title><p>刘若晗，郭丙轩<sup>*</sup></p><p>武汉大学测绘遥感信息工程国家重点实验室，湖北 武汉</p><disp-formula id="hanspub.35403-formula89"><graphic xlink:href="//html.hanspub.org/file/6-2840278x5_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2020年4月9日；录用日期：2020年4月23日；发布日期：2020年4月30日</p><disp-formula id="hanspub.35403-formula90"><graphic xlink:href="//html.hanspub.org/file/6-2840278x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>针对现行点云表面模型重建算法的效率问题，提出一种顾及点云曲率的快速点云表面模型重建算法。首先将点云Delaunay三角化，然后利用点云曲率删减可视信息，用剩余可视信息构建图割问题后，求解图割问题得到点云表面模型。实验结果表明，本文算法能得到完整度高，细节丰富的表面模型，重建速度快。</p><p>关键词 :点云表面模型重建，Delaunay，可视信息，四面体，光线</p><disp-formula id="hanspub.35403-formula91"><graphic xlink:href="//html.hanspub.org/file/6-2840278x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/6-2840278x8_hanspub.png" /> <img src="//html.hanspub.org/file/6-2840278x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>逼真的三维模型数据正逐渐成为城市管理和服务的重要数据源 [<xref ref-type="bibr" rid="hanspub.35403-ref1">1</xref>]。 三维重建的方法主要包括手工建模 [<xref ref-type="bibr" rid="hanspub.35403-ref2">2</xref>] 、基于三维激光扫描数据建模 [<xref ref-type="bibr" rid="hanspub.35403-ref3">3</xref>] 和基于影像建模 [<xref ref-type="bibr" rid="hanspub.35403-ref4">4</xref>]。 近年来，基于影像的三维重建由于其高效便捷、成本低廉等优势成为研究热点。而利用影像多视匹配获取的密集点云进行点云表面模型重建是三维重建的核心问题之一 [<xref ref-type="bibr" rid="hanspub.35403-ref5">5</xref>]。 点云表面模型重建主要面临的问题有弱纹理区域的重建、误匹配的影响、噪声的影响、数据冗余问题、精度问题、效率问题等。</p><p>国内外已有大量学者进行了点云表面模型重建的研究。Kazhdan等提出了基于隐式曲面方程的泊松点云表面模型重建算法，采用隐函数拟合三维点云，得到水密表面模型，然而算法易受噪声影响，细节容易丢失 [<xref ref-type="bibr" rid="hanspub.35403-ref6">6</xref>]。 Rocchini提出了Marching Cubes算法，在每一个体素中抽取相应的等值面，但是该方法对照相机位置有严格要求，且体素大小直接影响三维重建的效果 [<xref ref-type="bibr" rid="hanspub.35403-ref7">7</xref>]。 Calakli等提出了Smooth Signed Distance表面模型重建，用变分方法得到表面模型，算法也易受噪声干扰 [<xref ref-type="bibr" rid="hanspub.35403-ref8">8</xref>]。 Labatut提出了利用图割问题构建表面模型的算法，鲁棒性强，不易受噪声干扰，但算法时间代价高 [<xref ref-type="bibr" rid="hanspub.35403-ref9">9</xref>]。 Michal Jancosek提出了一种用可视信息进行增强的表面模型重建算法，对弱纹理区域重建的准确性高 [<xref ref-type="bibr" rid="hanspub.35403-ref10">10</xref>]。 这些方法各有优点与特色，针对算法鲁棒性、弱纹理区域重建、消除噪声、数据冗余问题、精度问题、效率问题等各个方面做出了研究与改进，但每种算法都不能面面俱到，也不能完全解决问题，尤其是效率问题。因此，提出一种快速点云表面模型重建算法迫在眉睫。</p><p>本文提出一种顾及点云曲率的快速点云表面模型重建算法，利用图割算法进行点云表面模型重建。首先对点云进行三维Delaunay三角剖分，将空间分割为多个四面体 [<xref ref-type="bibr" rid="hanspub.35403-ref11">11</xref>]。 然后利用点云曲率删减可视信息，用剩余可视信息对Delaunay结构中的四面体加权，构建图割问题。最后求解图割问题，将四面体分为S和T两个子集，提取分割边界得到点云表面。实验结果证明，本文算法效率高，重建模型细节丰富，完整度高。</p></sec><sec id="s4"><title>2. 快速点云表面模型重建算法</title><p>本文算法分为Delaunay三角化、基于点云曲率删减可视信息、利用可视信息加权构建图割问题、图割求解四步。</p><sec id="s4_1"><title>2.1. Delaunay三角化</title><p>给三维点云添加互不相交的边，将点云所在空间分割为多个四面体，这个过程叫做三角剖分。如果点云的一个三角剖分只包含Delaunay边，该三角剖分叫做Delaunay三角剖分。Delaunay三角剖分具有空球属性，即任意四面体的外接球中仅包含点集中的四个点。任意点集的Delaunay三角剖分结构是唯一的。Delaunay结构分割出的四面体即待分割的目标群体。四面体是图割算法网格图中的顶点，四面体之间的邻近关系形成网格图的边。</p></sec><sec id="s4_2"><title>2.2. 基于点云曲率删减可视信息</title><p>基于影像的三维重建算法中，可视信息指每个三维点由哪些摄像机产生 [<xref ref-type="bibr" rid="hanspub.35403-ref12">12</xref>] ，三维点与相应摄像机的摄影中心连线构成一段光线。用于三维重建的影像必须有一定重叠率，重叠率不满足最低要求会产生航摄漏洞，影响重建效果。对重叠率的要求导致每个三维点由多个摄像机产生，每个三维点都有多条光线。据统计，基于无人机影像的三维重建，光线数量是三维点数量的20~40倍。光线数量庞大导致点云表面模型重建算法时间代价高，也造成数据冗余。</p><p>因此，本文通过点云曲率对光线进行删减，用剩余光线进行可视信息加权部分。光线删减方法详见第三章。</p></sec><sec id="s4_3"><title>2.3. 利用可视信息加权</title><p>利用可视信息构建图割问题，需要依次遍历所有光线，根据每条光线与Delaunay三角剖分结构的相交结果对四面体加权。单条光线的加权过程如图1所示。加权公式为公式(1)。</p><p>w = α &#215; ( 1.0 − e − d 2 2 &#215; σ ) (1)</p><p>公式(1)中α为光线权值，σ为平滑系数。</p><p>图1. 单条光线加权流程</p></sec><sec id="s4_4"><title>2.4. 图割求解</title><p>可视信息构建出一个有向图G(V,E)， V = { v 1 , v 2 , v 3 , ⋯ , v n } 为顶点集合，E为有向边集合。额外增加两个特殊顶点，源点s和终点t。运用最大流最小割算法 [<xref ref-type="bibr" rid="hanspub.35403-ref13">13</xref>] 将顶点集合分割为两个子集S和T。S集合中的顶点与源点s相连，T集合中的顶点与终点t相连。 S ∩ T = ∅ ， S ∪ T = V 。割集的能量方程为</p><p>C ( S , T ) = ∑ V p ∈ S \ { s } ∧ V q ∈ T \ { t } w p g + ∑ V p ∈ S \ { s } w p t + ∑ V p ∈ T \ { t } w p s (2)</p><p>公式(2)中第一项为顶点之间的连接边，衡量顶点的不连续性。第二项与第三项衡量顶点连接特殊顶点须耗费的代价值。使得能量方程最小的割集为图割结果。分割边界对应的三角面是模型表面。</p></sec></sec><sec id="s5"><title>3. 基于点云曲率的光线删减</title><sec id="s5_1"><title>3.1. 单点光线删减</title><p>图割构网算法最终将点云所在空间划分为“内”和“外”两类 [<xref ref-type="bibr" rid="hanspub.35403-ref14">14</xref>]。 若摄影中心C拍摄到点P，则给线段CP所在空间提供“外”空间支持，使其更倾向于被划分为“外”。如图2(a)所示，球形物体、墙壁、地面所在空间是“内”空间，即存在实体的空间。其余空间(被光线穿过的空间)是不存在实体的“外”空间。点云所在空间被分割为多个四面体，四面体最终被分类为S和T两类，对应两种空间。点云表面是内空间和外空间的分界，即两类四面体的分割边界。</p><p>图2. “内”、“外”空间示意图</p><p>图2(a)、图2(b)中均有一个球形物体、一面墙壁和地面。红、绿、蓝三种颜色分别标注出A、B、C三个传感器对应的光线。图2(a)均匀删减光线后得到图2(b)，删减光线后的“内”、“外”空间未改变，则空间分割边界同样未改变。另外，论文 [<xref ref-type="bibr" rid="hanspub.35403-ref9">9</xref>] 证明图割构网算法具有鲁棒性，在光线欠采样、分布不均、没有准确传感器位置的情况下，依然可以正确重构出三维网。因此，均匀删减部分光线后，依然可以重建正确的点云表面。</p><p>每个三维点有多条光线。删减光线时，遍历所有三维点，每个点随机删除部分光线，以保证光线删减均匀。</p></sec><sec id="s5_2"><title>3.2. 基于点云曲率的光线删减</title><p>过曲面上某个点具有无穷个正交曲率，其中存在一条曲线使得该曲线的曲率为极大，这个曲率为极大值Kmax，垂直于极大曲率面的曲率为极小值Kmin。这两个曲率属性为主曲率，代表法曲率的极值。Kmax和Kmin的平均值称为曲面的平均曲率，刻画了曲面的弯曲程度。</p><p>根据平均曲率进行点云排序，利用排序结果将点云分类为特征点、中间点和平面点。特征点曲率最大，中间点次之，平面点曲率最小。图3将特征点显示为红色，中间点显示为蓝色、平面点显示为白色。图3(a)，图3(b)，图3(c)，图3(d)中的点云分别为Stanford 3D扫描库中的blade，Lund University提供的Alcatraz courtyard、House、Uoft。图3表明，平均曲率较大的点勾勒出模型大致轮廓，可以较多展现模型细节。平均曲率较小的点一般分布在平面上。平均曲率可以代表点的重要程度，而且平均曲率计算简单，时间代价小。因此本算法根据点的平均曲率决定单点光线的删减比例：特征点光线全部保留，中间点和平面点删减部分光线，平面点的光线删减比例高于中间点。</p><p>图3. 点云平均曲率显示</p></sec></sec><sec id="s6"><title>4. 实验结果分析</title><sec id="s6_1"><title>4.1. 数据准备</title><p>以VS2015为平台，采用C++语言实现本算法，用CGAL开源库 [<xref ref-type="bibr" rid="hanspub.35403-ref15">15</xref>] 实现Delaunay结构构建，PCL开源库 [<xref ref-type="bibr" rid="hanspub.35403-ref16">16</xref>] 实现点云曲率计算。计算机硬件环境为Intel Core i3 CPU 2.4 GHz。用Colmap开源代码对空三解算后的影像进行多视密集匹配，生成实验需要的三维密集点云。</p></sec><sec id="s6_2"><title>4.2. 实验结果</title><p>用Lund University, Carl Olsson提供的House、Alcatraz courtyard、Uoft公开数据集进行实验。House数据集包含12张影像，AC数据集包含133张影像，Uoft数据集包含77张影像。分别用本文方法、OpenMVS表面重建方法和Poisson表面重建方法 [<xref ref-type="bibr" rid="hanspub.35403-ref6">6</xref>] 对密集匹配得到的点云进行点云表面模型重建。本文算法得到的重建结果如图4所示。</p><p>图4. 点云表面模型</p><p>图4中的模型分别为Alcatraz courtyard、house、Uoft。对比图3中相应点云，可以看出，本文算法重建出的点云表面模型完整还原了真实地物的几何结构信息，重建结果符合真实状况，较好的呈现出阶梯、门窗等表面细节。</p><p>在模型局部细节处对三种重建算法进行对比，对比结果如图5和图6所示。</p><p>图5. 植被重建结果对比</p><p>图6. 建筑物重建结果对比</p><p>图5由上至下依次为本文方法、OpenMVS方法、Poisson方法和原图，结果表明，本文算法重建出的点云表面模型较为完整的还原了植物的表面轮廓，OpenMVS方法重建出的植被在红圈处有一个空洞，Poisson方法未能正确重建出植物表面，重建出的表面有多处缺失。图6由左至右依次为本文方法、OpenMVS方法、Poisson方法和原图。本文算法和OpenMVS方法都正确重建出建筑物的窗户轮廓，Poisson重建的窗户轮廓存在扭曲变形。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> System resulting data of standard experimen</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >数据集 时间统计/S</th><th align="center" valign="middle" >Uoft</th><th align="center" valign="middle" >House</th><th align="center" valign="middle" >Alcatraz_courtyard</th></tr></thead><tr><td align="center" valign="middle" >本文方法</td><td align="center" valign="middle" >23.3</td><td align="center" valign="middle" >6.3</td><td align="center" valign="middle" >42.1</td></tr><tr><td align="center" valign="middle" >OpenMVS</td><td align="center" valign="middle" >55.6</td><td align="center" valign="middle" >10.4</td><td align="center" valign="middle" >120.7</td></tr><tr><td align="center" valign="middle" >Poisson</td><td align="center" valign="middle" >28.3</td><td align="center" valign="middle" >10.9</td><td align="center" valign="middle" >43.4</td></tr></tbody></table></table-wrap><p>表1. 标准试验系统结果数据</p><p>统计三种方法的运行时长，得到表1。表1结果表明，本文方法建模效率高，在三种方法中用时最短。</p><p>实验表明，Poisson表面重建算法重建出的模型具有水密性的封闭特征、良好的几何表面特性和细节特性，算法速度较快。但是Poisson表面重建算法抗噪性较差，而且处理非密闭点云时会产生多余面片。OpenMVS方法是一种基于Delaunay三角化的构网方法，鲁棒性强，但曲面重建耗时较长，不适合处理海量点云。本文提出的方法鲁棒性强，建模效率高，且能获得较为完整、符合真实状况的模型，在高效率的同时兼顾模型精度。</p></sec></sec><sec id="s7"><title>5. 结论与展望</title><p>本文提出了一种顾及点云曲率的快速点云表面模型重建算法，首先将点云Delaunay三角化，然后利用点云曲率将点云分类，根据类别删减可视信息，利用剩余可视信息构建图割问题。最后，求解图割问题得到点云表面。实验结果表明，本文方法重建效率高，重建结果符合真实状况，重建出的地物细节丰富，完整度高。</p><p>本文在已有研究基础上，仍需在以下方面进一步深入研究：1) 如何修正模型表面的拓扑连接错误。2) 如何对复杂、质量缺陷的点云进行表面模型重建。</p></sec><sec id="s8"><title>致谢</title><p>本文工作在郭丙轩教授的指导和帮助下完成。感谢Lund University提供的数据集。</p></sec><sec id="s9"><title>基金项目</title><p>国家自然科学基金重大研究计划重点支持项目(91638203)；</p><p>国家重点研发计划(2016YFB0502200，2018YFB0505401)；</p><p>国土资源部城市土地资源监测与仿真重点实验室开放基金资助课题(KF-2018-03-052)。</p></sec><sec id="s10"><title>文章引用</title><p>刘若晗,郭丙轩. 顾及点云曲率的快速点云表面模型重建算法A Fast Surface Reconstruction Algorithm Considering the Curvature of Point Cloud[J]. 测绘科学技术, 2020, 08(02): 88-95. https://doi.org/10.12677/GST.2020.82011</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.35403-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">杨建思, 杜志强, 彭正洪, 等. 数字城市三维景观模型的建模技术[J]. 武汉大学学报(工学版), 2003, 36(3): 37-40.</mixed-citation></ref><ref id="hanspub.35403-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">詹总谦, 林元培, 艾海滨. 基于3ds Max二次开发的建筑物快速三维重建[J]. 测绘通报, 2016(11): 22-25.</mixed-citation></ref><ref id="hanspub.35403-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">杨必胜, 梁福逊, 黄荣刚. 三维激光扫描点云数据处理研究进展、挑战与趋势[J]. 测绘学报, 2017, 46(10): 1509-1516.</mixed-citation></ref><ref id="hanspub.35403-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">张卫龙. 局部信息约束的三维重建方法研究[D]: [博士学位论文]. 武汉: 武汉大学, 2019.</mixed-citation></ref><ref id="hanspub.35403-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">马东岭, 王晓坤, 李广云. 利用图割算法进行城市密集点云表面模型重建[J]. 测绘通报, 2019(2): 45-48.</mixed-citation></ref><ref id="hanspub.35403-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Kazhdan, M. (2006) Poisson Surface Reconstruction. Symposium on Geometry Processing, Goslar, 61-70.</mixed-citation></ref><ref id="hanspub.35403-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Rocchini, C., Cignoni, P., Ganovelli, F., et al. (2001) Marching Intersections: An Efficient Resampling Algorithm for Surface Management. International Conference on Shape Modeling &amp; Applications, Los Alamitos, 296.</mixed-citation></ref><ref id="hanspub.35403-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Calakli, F. and Taubin, G. (2012) SSD-C: Smooth Signed Distance Colored Surface Reconstruction. In: Ex-panding the Frontiers of Visual Analytics and Visualization, Springer, London, 323-338. &lt;br&gt;https://doi.org/10.1007/978-1-4471-2804-5_18</mixed-citation></ref><ref id="hanspub.35403-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Labatut, P., Pons, J.P. and Keriven, R. (2009) Robust and Efficient Surface Reconstruction from Range Data. Computer Graphics Forum, 28, 2275-2290. &lt;br&gt;https://doi.org/10.1111/j.1467-8659.2009.01530.x</mixed-citation></ref><ref id="hanspub.35403-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Jancosek, M. and Pajdla, T. (2011) Multi-View Recon-struction Preserving Weakly-Supported Surfaces. Computer Vision and Pattern Recognition (CVPR), Colorado Springs, 3121-3128. &lt;br&gt;https://doi.org/10.1109/CVPR.2011.5995693</mixed-citation></ref><ref id="hanspub.35403-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Cao, T., et al. (2014) A GPU Accelerated Algo-rithm for 3D Delaunay Triangulation. In: Proceedings of the Symposium on Interactive 3D Graphics, ACM, New York, 47-54. &lt;br&gt;https://doi.org/10.1145/2556700.2556710</mixed-citation></ref><ref id="hanspub.35403-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">詹洋, 尹颜朋. 基于Minimum s-t Cut三维表面重建算法[J]. 现代计算机(专业版), 2018(2): 34-37.</mixed-citation></ref><ref id="hanspub.35403-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Boykov, Y. and Kolmogorov, V. (2001) An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Vision. In: International Workshop on Energy Minimization Methods in Computer Vision and Pattern Recognition, Springer, Berlin, 359-374. &lt;br&gt;https://doi.org/10.1007/3-540-44745-8_24</mixed-citation></ref><ref id="hanspub.35403-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Jancosek, M. and Pajdla, T. (2014) Exploiting Visibility Infor-mation in Surface Reconstruction to Preserve Weakly Supported Surfaces. International Scholarly Research Notices, 2014, Article ID: 798595. &lt;br&gt;https://doi.org/10.1155/2014/798595</mixed-citation></ref><ref id="hanspub.35403-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Boissonnat, J.D., Devillers, O., Pion, S., et al. (2002) Triangulations in CGAL. Computational Geometry, 22, 5-19. &lt;br&gt;https://doi.org/10.1016/S0925-7721(01)00054-2</mixed-citation></ref><ref id="hanspub.35403-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Rusu, R.B. and Cousins, S. (2011) 3D Is Here: Point Cloud Library (PCL). IEEE International Conference on Robotics and Automation, Shanghai, 9-13 May 2011, 1-4. &lt;br&gt;https://doi.org/10.1109/ICRA.2011.5980567</mixed-citation></ref></ref-list></back></article>