<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2020.92018</article-id><article-id pub-id-type="publisher-id">SEA-35372</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20200200000_22768709.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于改进粒子群算法的组合测试用例生成方法
  Combinatorial Test Case Generation Method Based on Improved Particle Swarm Optimization Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>娜</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>金</surname><given-names>瑜婷</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>涂</surname><given-names>小妹</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>董</surname><given-names>亮亮</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>包</surname><given-names>晓安</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>浙江理工大学信息学院，浙江 杭州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><aff id="aff3"><addr-line>浙江理工大学信息学院，浙江 杭州；浙江广厦建设职业技术学院，浙江 东阳</addr-line></aff><pub-date pub-type="epub"><day>07</day><month>04</month><year>2020</year></pub-date><volume>09</volume><issue>02</issue><fpage>148</fpage><lpage>158</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  组合测试难以对所有可能取值的组合进行全面覆盖，针对如何生成最小测试用例集的问题，提出了一种基于约束处理和评估指标的类IPO策略和CS-SPSO算法相结合的测试用例集生成方法。首先，考虑测试用例的特性对粒子进行编码，将得到的初始种群划分为若干子种群。其次，利用简化粒子群算法搜索各子种群中的最优测试用例并在种群间进行随机交流。接着，利用布谷鸟搜索的全局搜索能力来寻找适应度更好的测试用例，引入动态步长加速算法收敛。最后，与改进的类IPO策略相结合生成组合测试用例集。实验结果表明，与基本的PSO、CS算法以及基本的IPO策略相比，本文提出的算法在用例规模和执行时间上具有一定的优势。
   The combined test is difficult to achieve fully coverage about the all possibilities. In order to gen-erate the least number of test cases, a method of test case set generation based on the combination of IPO strategy and CS-SPSO algorithm is proposed. Firstly, considering the characteristics of test cases to code particle, the initial population was divided into several subpopulations. Secondly, the simplified particle swarm optimization algorithm was used to search the optimal test cases in each subpopulation and communicated randomly among the populations. Then, the global search ability of cuckoo search was used to find the test case with better adaptability, and the dynamic step size was introduced to accelerate the convergence of the algorithm. Finally, combined it with the improved IPO strategy to generate combinational test cases. The experimental results show that, compared with the basic PSO, CS algorithm and the basic IPO Strategy, the proposed algorithm has certain advantages in case size and execution time.
 
</p></abstract><kwd-group><kwd>组合测试，粒子群算法，布谷鸟搜索，IPO策略, Combination Testing</kwd><kwd> Particle Swarm Optimization</kwd><kwd> Cuckoo Search</kwd><kwd> IPO Strategy</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于改进粒子群算法的组合测试用例生成方法<sup> </sup></title><p>张娜<sup>1</sup>，金瑜婷<sup>1,2</sup>，涂小妹<sup>1,2</sup>，董亮亮<sup>1</sup>，包晓安<sup>1</sup></p><p><sup>1</sup>浙江理工大学信息学院，浙江 杭州</p><p><sup>2</sup>浙江广厦建设职业技术学院，浙江 东阳</p><p>收稿日期：2020年4月9日；录用日期：2020年4月22日；发布日期：2020年4月29日</p><disp-formula id="hanspub.35372-formula87"><graphic xlink:href="//html.hanspub.org/file/6-2690427x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>组合测试难以对所有可能取值的组合进行全面覆盖，针对如何生成最小测试用例集的问题，提出了一种基于约束处理和评估指标的类IPO策略和CS-SPSO算法相结合的测试用例集生成方法。首先，考虑测试用例的特性对粒子进行编码，将得到的初始种群划分为若干子种群。其次，利用简化粒子群算法搜索各子种群中的最优测试用例并在种群间进行随机交流。接着，利用布谷鸟搜索的全局搜索能力来寻找适应度更好的测试用例，引入动态步长加速算法收敛。最后，与改进的类IPO策略相结合生成组合测试用例集。实验结果表明，与基本的PSO、CS算法以及基本的IPO策略相比，本文提出的算法在用例规模和执行时间上具有一定的优势。</p><p>关键词 :组合测试，粒子群算法，布谷鸟搜索，IPO策略</p><disp-formula id="hanspub.35372-formula88"><graphic xlink:href="//html.hanspub.org/file/6-2690427x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/6-2690427x7_hanspub.png" /> <img src="//html.hanspub.org/file/6-2690427x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>软件测试是保证软件质量的一个必不可少的环节 [<xref ref-type="bibr" rid="hanspub.35372-ref1">1</xref>]。 由于人们对软件功能的要求越来越高，结构越来越复杂，影响软件质量的因素也变得越来越多。这些因素本身以及相互之间都有可能触发软件故障，对这些可能的影响因素进行百分百覆盖极耗费人力物力，因此选择少而精的测试用例就显得至关重要了 [<xref ref-type="bibr" rid="hanspub.35372-ref2">2</xref>]。 组合测试作为一种基于规约的测试用例生产技术，能在保证错误检出率的前提下采用较少的测试用例来测试系统 [<xref ref-type="bibr" rid="hanspub.35372-ref3">3</xref>]。 组合测试生成最小测试用例集是一个NP完全问题 [<xref ref-type="bibr" rid="hanspub.35372-ref4">4</xref>]、因此不少学者利用启发式搜索算法将其转换成搜索问题，进而生成最小的测试用例集 [<xref ref-type="bibr" rid="hanspub.35372-ref5">5</xref>]。 例如Sangeeta [<xref ref-type="bibr" rid="hanspub.35372-ref6">6</xref>]、戚荣志 [<xref ref-type="bibr" rid="hanspub.35372-ref7">7</xref>] 的并行化遗传算法；曾梦凡 [<xref ref-type="bibr" rid="hanspub.35372-ref8">8</xref>]、王小银 [<xref ref-type="bibr" rid="hanspub.35372-ref9">9</xref>] 的蚁群算法；V. Chandra [<xref ref-type="bibr" rid="hanspub.35372-ref10">10</xref>]、Bao [<xref ref-type="bibr" rid="hanspub.35372-ref11">11</xref>] 的粒子群优化算法等。</p><p>其中，粒子群优化算法(Particle Swarm Optimization, PSO)是Kenney和Eberhart [<xref ref-type="bibr" rid="hanspub.35372-ref12">12</xref>] 提出的一种基于群体智能协作的全局随机搜索算法，相对于无法解决复杂优化问题的传统优化算法，粒子群算法以需调整的参数少、易实现、搜索与收敛快等优点引起了学术界的重视，广泛地应用在了组合测试用例生成中。粒子群算法用若干个测试用例作为初始化种群，种群中的一个粒子代表一种可能的测试用例；然后对粒子进行速度和位置更新，根据适应度函数找到个体最优解和全局最优解。</p><p>粒子群算法在生成组合测试用例上存在易陷入局部最优、收敛精度低、不易收敛等问题。因此，Chen [<xref ref-type="bibr" rid="hanspub.35372-ref13">13</xref>] 等人研究了搜索空间、适应值函数和启发式的合理设定提出了一种基于粒子群优化的成对组合测试用例集生成算法框架来提高单个测试用例的新组合覆盖能力。Yang [<xref ref-type="bibr" rid="hanspub.35372-ref14">14</xref>] 等人提出了以种群粒子优劣为依据对惯性权重进行自适应调整的方法来优化粒子群算法并将其与one-test-at-time策略相结合来生成组合测试用例集，该方法可解决粒子群算法易受配置参数影响的问题。Bao [<xref ref-type="bibr" rid="hanspub.35372-ref11">11</xref>] 等人提出了以粒子群早熟收敛程度为依据来动态调整惯性权值，将动态调整的简化粒子群优化算法应用到组合测试中提升了算法的基本检错能力和执行能力。Mahmoud [<xref ref-type="bibr" rid="hanspub.35372-ref15">15</xref>] 等人提出了一种基于模糊逻辑的自适应群优化算法，在生成覆盖数组大小时动态调整参数来克服优化过程中的问题并提高运算效率。但仍存在算法执行时间长，后期种群多样性差，组合因素选取的随机性等问题。</p><p>为了解决算法执行时间长、种群多样性差，组合测试的NP问题以及因素选取的随机性问题，本文提出一种基于改进的混合简化粒子群和布谷鸟优化算法(CS-SPSO)的组合测试用例集生成方法。该方法首先排除了速度这一不必要因素对粒子群优化过程的影响，加快了算法的运算速度；其次在初始化粒子群后，将其划分成N个子种群进行初步搜索，并在迭代过程中随机交流子种群间的当前最优粒子，增加了种群解的多样性；接着将N个子种群的最优解作为布谷鸟搜索的初始种群，避免了种群随机初始化导致的低离散度问题；同时在位置搜索中引入动态步长，解决种群寻优后期震荡，收敛速度慢的问题；最后使用基于约束处理和评估指标的类IPO策略生成组合测试用例集，不仅降低了排序的随机性，还提高了策略运行效率。</p></sec><sec id="s4"><title>2. 基于粒子群和布谷鸟搜索的改进算法</title><sec id="s4_1"><title>2.1. 简化粒子群算法</title><p>粒子群算法是进化算法的一种，通过不断迭代并使用适应度函数来找到最优解。其改进研究有很多，其中Li等人 [<xref ref-type="bibr" rid="hanspub.35372-ref16">16</xref>] 研究发现，粒子群算法可以没有粒子自身速度的概念，没有自身速度因素可避免人为确定参数最大值最小值范围对粒子收敛速度和精度的影响。从而提出了一种简化粒子群优化算法(Simplified Particle Swarm Optimization, SPSO)，具体定义如下：</p><p>假设d维的搜索空间中有n个粒子数，则第i个粒子在第t代的位置 x i = ( x i 1 t , x i 2 t , ⋯ , x i d t ) ，若个体历史最优位置为 p i = ( p i 1 , p i 2 , ⋯ , p i d ) ，整个粒子群的历史最优解位置为 g = ( g 1 , g 2 , ⋯ , g d ) ，则在第t + 1代时，第i个粒子在第j维空间中不含速度项的简化粒子群算法公式为：</p><p>x i j t + 1 = w x i j t + c 1 r 1 ( p i j t − x i j t ) + c 2 r 2 ( g t − x i j t ) (1)</p><p>其中，式(1)右边的第一项为历史部分，表示过去位置对现在所处位置的影响，其他两项的含义与基本粒子群算法中一样。</p></sec><sec id="s4_2"><title>2.2. 布谷鸟搜索</title><p>布谷鸟搜索(Cuckoo Search, CS)是由剑桥大学Yang教授和S. Deb [<xref ref-type="bibr" rid="hanspub.35372-ref17">17</xref>] 受自然界启发而提出的一种将布谷鸟育雏行为和L&#233;vy飞行相互结合的全局搜索算法，具有全局搜索能力强、参数少、易实现等优点，但同时也存在收敛速度慢、进化后期种群多样性差等不足 [<xref ref-type="bibr" rid="hanspub.35372-ref18">18</xref>]。</p><p>假设d维的搜索空间中有n个鸟窝，则第i个鸟窝在第t代的位置为 x i t ，布谷鸟搜索算法的搜索路径使用了随机性较强的L&#233;vy飞行的搜索方式，那么布谷鸟寻找鸟窝的路径以及位置的更新公式为 [<xref ref-type="bibr" rid="hanspub.35372-ref19">19</xref>]：</p><p>x i t + 1 = x i t + ε ⊗ L ( λ ) (2)</p><p>其中， ε 为步长控制量；<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/6-2690427x16_hanspub.png" xlink:type="simple"/></inline-formula>为点乘运算； L ( λ ) 为莱维随机步长， λ 取值为(1, 3]。</p><p>宿主鸟以Pa概率发现外来鸟卵，用随机数 r ∈ [ 0 , 1 ] 与概率Pa进行对比，如果 r &gt; P a 就改变位置，反之不变，并结合适应度值可判断最优鸟窝。新建鸟窝位置的公式如下定义：</p><p>x i t + 1 = x i t + r ⊗ H e a v i s i d e ( P a − θ ) ⊗ ( x j t − x k t ) (3)</p><p>其中， θ 为服从均匀分布的随机数； H e a v i s i d e ( x ) 为跳跃函数，当自变量 x &gt; 0 时， H e a v i s i d e ( x ) = 1 ，反之为0； x j t ， x k t 为第t代中的两个随机鸟窝位置。</p></sec><sec id="s4_3"><title>2.3. CS-SPSO算法</title><p>本文根据测试用例特征进行粒子编码，将简化粒子群算法的初始种群划分成若干子种群，在种群间进行随机交流以提高搜索效率，基于各子种群的最优个体得到初始鸟窝位置，使用布谷鸟搜索进一步寻找全局最优个体，在搜索路径中增加了动态步长因子，使得最终生成的测试用例兼具收敛性和多样性。</p><p>基于各因素取值随机生成初始种群，种群中的粒子包含d个因素，即为一条可能的测试用例。首先</p><p>将初始种群划分为N个子种群 X = { X 1 , X 2 , ⋯ , X N } ，每个子种群有n个粒子 X i = ( x 1 t , x 2 t , ⋯ , x n t ) ；当个体迭代更新时需根据其适应度函数值 F ( x i ) 进行评估，公式如下：</p><p>F ( x i ) = C o v ( x i ) / A l l C o v ( x i ) (4)</p><p>其中， A l l C o v ( x i ) 为需覆盖组合集的总个数， C o v ( x i ) 为测试用例覆盖需覆盖组合集的个数。</p><p>接着在子种群中利用简化粒子群算法进行最优值搜索，并根据式(1)进行粒子更新；在迭代过程中，每达到种群交流周期 t ′ 时，当前种群中的最优粒子根据式(5)进行随机交换。</p><p>x b e s t = { x b e s t k ,     f i t n e s s ( x b e s t k ) &gt; f i t n e s s ( x b e s t ) x b e s t ,         o t h e r (5)</p><p>其中，xbest为当前种群最优解；xbest<sub>k</sub>为第k个子种群的最优解，k为区间 [ 1 , N ] 上的随机整数。</p><p>迭代完成后，得到所有子种群的最优解集合 X b e s t = { x b e s t 1 , x b e s t 2 , ⋯ , x b e s t N } ，根据式(2)对X<sub>best</sub>进行</p><p>多次更新并保留原解，当种群达到一定规模后作为布谷鸟搜索算法的初始种群。根据固定步长进行鸟窝位置更新易导致算法后期震荡，收敛时间变长，本文使用基于动态步长的L&#233;vy飞行对当前种群更新，动态步长 ε 的公式如下：</p><p>ε = ε min + ( ε max − ε min ) ( t max − t ) / t max (6)</p><p>其中， ε max 和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/6-2690427x41_hanspub.png" xlink:type="simple"/></inline-formula>分别为步长的最大值和最小值， t max 为最大迭代次数，t为当前迭代次数。</p><p>位置更新后根据公式(3)对劣解进行更新，当达到最大迭代次数或满足停止条件时，输出最优解。</p></sec></sec><sec id="s5"><title>3. 改进的组合测试用例集生成</title><sec id="s5_1"><title>3.1. 基于CS-SPSO的单条测试用例生成</title><p>粒子群算法和布谷鸟搜索算法都是采用适应度函数值来衡量位置的优劣情况。在使用CS-SPSO算法生成测试用例时，粒子可能会飞出有效的搜索空间，为解决这个问题需进行边界处理。根据文献 [<xref ref-type="bibr" rid="hanspub.35372-ref14">14</xref>] 的建议，本文将采用Robinson提出的反射墙策略，即当超过边界时使用下式对其进行反弹，反射墙公式如下：</p><p>f ( x i , j ) = { 2 l i − x i , j + 1 ,           if   x i , j &gt; l i − x i , j + 1 ,                     if   x i , j &lt; 1 x i , j ,                                       else (7)</p><p>其中， l i 代表初始粒子个数，结合以上策略，图1为基于CS-SPSO算法生成单条测试用例的流程图。</p><p>CS-SPSO算法的时间复杂度由目标函数的时间复杂度F(n)计算决定，当F(n)运算阶数高于n，时间复杂度为O(F(n))；当相等或低于时，时间复杂度为O(n)。根据本文测试用例生成算法的流程图1可知，种群划分增加了循环次数，但子种群数量较少并不会影响时间复杂度；在每一代引入动态步长因子也未增加时间复杂度。总的时间复杂度公式如下：</p><p>T ( n ) = O ( F ( n ) ) (8)</p><p>算法的空间复杂度取决于种群规模N&#183;n和搜索维度D的影响，计算公式如下：</p><p>S ( n ) = O ( D ⋅ N ⋅ n ) (9)</p><p>图1. 基于CS-SPSO的测试用例生成流程图</p><p>本文所提负载均衡算法的算法复杂度随着维度的升高，其时间复杂度和空间复杂度都升高。</p></sec><sec id="s5_2"><title>3.2. 改进的组合测试用例集生成方法</title><p>Tai和Lei [<xref ref-type="bibr" rid="hanspub.35372-ref20">20</xref>] 提出了一种不同于one-test-at-time的IPO策略，该策略包括水平扩展阶段和垂直扩展阶段。Chen [<xref ref-type="bibr" rid="hanspub.35372-ref13">13</xref>] 等人借鉴IPO策略提出了类IPO策略，该策略只考虑了两两组合的情况，本文将在类IPO策略的基础上提出改进的类IPO策略，并将其与改进后的CS-SPSO算法相结合来生成可覆盖任意维度的组合测试用例集。图2即为改进的类IPO策略的整体框架。</p><p>改进的类IPO策略利用等价类分析和约束条件对因素进行约束处理，以选取代表取值进行组合，有效减少测试组合数目；将用例的错误检出率 C i 和响应时间 T i 作为评估指标，以减少排序的随机性，提高策略运行效率，其中具体的评估公式如下：</p><p>ρ = 0.6 C i + 0.4 T i (10)</p><p>图2. 改进的类IPO策略框架</p><p>改进的类IPO策略的具体算法伪代码如下所示：</p><p>改进的类IPO策略不仅提升了其运行效率还考虑了可变力度组合测试，可以满足任意强度的覆盖表。</p></sec></sec><sec id="s6"><title>4. 实验分析</title><p>为了验证本文提出的基于改进粒子群算法的布谷鸟搜索优化算法(CS-SPSO)的有效性，将在mac操作系统的Idea工具上，采用Java (JDK 1.8)语言编程分别实现CS-SPSO算法与基本的PSO算法和CS算法的对比，以及基本IPO策略和改进的类IPO策略的对比，以此来验证改进后算法的性能。本文采用10个具有代表性、复杂程度不同且组合维度不同的实例(见表1)进行实验分析，其中有覆盖矩阵(CA)和混合覆盖矩阵(MCA)各5组。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> 10 coverage tables used in the experimen</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >CA</th><th align="center" valign="middle" >MCA</th></tr></thead><tr><td align="center" valign="middle" >CA 1 ( 2 , 4 , 3 )</td><td align="center" valign="middle" >MCA 6 ( 2 , 4 , 8 2 3 2 )</td></tr><tr><td align="center" valign="middle" >CA 2 ( 2 , 6 , 10 )</td><td align="center" valign="middle" >MCA 7 ( 2 , 8 , 4 3 3 2 2 3 )</td></tr><tr><td align="center" valign="middle" >CA 3 ( 3 , 9 , 5 )</td><td align="center" valign="middle" >MCA 8 ( 3 , 7 , 5 1 3 4 2 2 )</td></tr><tr><td align="center" valign="middle" >CA 4 ( 3 , 5 , 7 )</td><td align="center" valign="middle" >MCA 9 ( 4 , 7 , 5 2 4 3 3 2 )</td></tr><tr><td align="center" valign="middle" >CA 5 ( 4 , 8 , 5 )</td><td align="center" valign="middle" >MCA 10 ( 4 , 6 , 8 2 7 2 6 2 )</td></tr></tbody></table></table-wrap><p>表1. 实验采用的10个覆盖表</p><sec id="s6_1"><title>4.1. 参数设置</title><p>用CS-SPSO算法生成t-way组合测试用例集时，既要考虑基本粒子群算法的参数，又要考虑布谷鸟搜索算法的参数。本文算法的设置将参考文献 [<xref ref-type="bibr" rid="hanspub.35372-ref21">21</xref>] [<xref ref-type="bibr" rid="hanspub.35372-ref22">22</xref>]：学习因 c 1 = c 2 = 2 ， r 1 和 r 2 是[0, 1]内的随机数，子种群个数 N = 5 ， w max = 0.9 ， w min = 0.4 ， P a = 0.25 。其中种群的迭代次数 T max 的选取对算法有一定的影响。当 T max 过大时，会消耗大量时间而实际测试用例规模不会减少太多。当 T max 过小时，无法达到最小测试用例集的要求。所以将选择CA2，CA3，CA4，MCA7，MCA8，MCA9进行实验来找到实际的最优迭代次数。</p><p>图3. 不同迭代次数下组合测试用例集规模分布</p><p>经过图3的对比分析发现，增加迭代次数可显著降低测试用例集规模，但是当达到一定程度时，测试用例集规模会趋于稳定。对比 T max 取500和1000的数据可知，两者平均测试用例集数很接近，因此考虑时间因素取500为宜。</p><p>步长 ε 是布谷鸟搜索算法中的重要参数，可影响算法的收敛速度。基本布谷鸟搜索中的步长是固定值，当步长过大时，算法后期收敛速度慢；当步长过短时，算法会陷入局部最优，因此本文提出了根据迭代次数进行动态调节的步长<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/6-2690427x78_hanspub.png" xlink:type="simple"/></inline-formula>，下面图4是L&#233;vy飞行步长的对比图。</p><p>图4. 改进CS算法和CS算法L&#233;vy飞行步长对比图</p><p>经过图4的对比可证明其动态步长的有效性，在算法后期可加快其收敛速度，提高算法的搜索性能。</p></sec><sec id="s6_2"><title>4.2. PSO、CS和改进的CS-SPSO算法的比较</title><p>为了规避CS-SPSO算法执行过程中随机因素对实验结果的影响，故对每组实例独立运行100次取平均值作为实验的对比数据。</p><p>表2是从测试用例集规模和算法运行时间这两个方面对不同算法进行比较。从用例规模上看，除了覆盖表CA1、MCA9以外，基于CS-SPSO算法在总体用例规模上都优于基本的PSO算法和CS算法。在因素的取值个数较多或t-way维度比较高的覆盖表中，其优势更加明显，例如CA5、MCA10等，经对比可发现本文提出的CS-SPSO算法对缩减测试用例集规模有一定的效果。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Comparison of PSO, CS and improved CS-SPSO algorithm</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >Covering Array</th><th align="center" valign="middle"  colspan="2"  >PSO</th><th align="center" valign="middle"  colspan="2"  >CS</th><th align="center" valign="middle"  colspan="2"  >CS-SPSO</th></tr></thead><tr><td align="center" valign="middle" >size</td><td align="center" valign="middle" >time/s</td><td align="center" valign="middle" >size</td><td align="center" valign="middle" >time/s</td><td align="center" valign="middle" >size</td><td align="center" valign="middle" >time/s</td></tr><tr><td align="center" valign="middle" >CA1</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >10.8</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >11.2</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >9.7</td></tr><tr><td align="center" valign="middle" >CA2</td><td align="center" valign="middle" >128.5</td><td align="center" valign="middle" >184.1</td><td align="center" valign="middle" >127.4</td><td align="center" valign="middle" >186</td><td align="center" valign="middle" >117.6</td><td align="center" valign="middle" >172.3</td></tr><tr><td align="center" valign="middle" >CA3</td><td align="center" valign="middle" >178</td><td align="center" valign="middle" >281.4</td><td align="center" valign="middle" >179.7</td><td align="center" valign="middle" >283.9</td><td align="center" valign="middle" >166.2</td><td align="center" valign="middle" >278.3</td></tr><tr><td align="center" valign="middle" >CA4</td><td align="center" valign="middle" >351.9</td><td align="center" valign="middle" >317.3</td><td align="center" valign="middle" >350.4</td><td align="center" valign="middle" >309.3</td><td align="center" valign="middle" >346.7</td><td align="center" valign="middle" >264.9</td></tr><tr><td align="center" valign="middle" >CA5</td><td align="center" valign="middle" >940.1</td><td align="center" valign="middle" >1843.7</td><td align="center" valign="middle" >937.5</td><td align="center" valign="middle" >1857.3</td><td align="center" valign="middle" >819.9</td><td align="center" valign="middle" >1427.5</td></tr><tr><td align="center" valign="middle" >MCA6</td><td align="center" valign="middle" >67.3</td><td align="center" valign="middle" >85.4</td><td align="center" valign="middle" >68.5</td><td align="center" valign="middle" >86.9</td><td align="center" valign="middle" >64</td><td align="center" valign="middle" >79.4</td></tr><tr><td align="center" valign="middle" >MCA7</td><td align="center" valign="middle" >24.3</td><td align="center" valign="middle" >267.5</td><td align="center" valign="middle" >22.9</td><td align="center" valign="middle" >268</td><td align="center" valign="middle" >17.8</td><td align="center" valign="middle" >250</td></tr><tr><td align="center" valign="middle" >MCA8</td><td align="center" valign="middle" >52.7</td><td align="center" valign="middle" >49.1</td><td align="center" valign="middle" >56.1</td><td align="center" valign="middle" >53.4</td><td align="center" valign="middle" >49</td><td align="center" valign="middle" >46.4</td></tr><tr><td align="center" valign="middle" >MCA9</td><td align="center" valign="middle" >393.5</td><td align="center" valign="middle" >867.2</td><td align="center" valign="middle" >412.3</td><td align="center" valign="middle" >892.6</td><td align="center" valign="middle" >572.4</td><td align="center" valign="middle" >796.4</td></tr><tr><td align="center" valign="middle" >MCA10</td><td align="center" valign="middle" >5521.8</td><td align="center" valign="middle" >17951.6</td><td align="center" valign="middle" >5597.6</td><td align="center" valign="middle" >17821</td><td align="center" valign="middle" >4936</td><td align="center" valign="middle" >13829.9</td></tr></tbody></table></table-wrap><p>表2. PSO、CS和改进的CS-SPSO算法的比较</p><p>从时间性能上看，不考虑CA1、MCA9这些在用例规模上不占优势的覆盖表，CS-SPSO相较于PSO算法和CS算法具有一定优势，在CA5、MCA10这些维度比较高的覆盖表上其优势更加明显。由此可见，本文提出的CS-SPSO算法可有效缩减执行时间。</p></sec><sec id="s6_3"><title>4.3. 基本IPO策略和改进的类IPO策略的对比</title><p>在执行过程中，为了避免算法因随机因素对结果产生的影响，因此，本实验将对各实例覆盖表独立运行100次，将求取的平均值作为参考数据。</p><p>本文将利用基本IPO策略和改进的类IPO策略与改进的CS-SPSO算法相结合生成测试用例的方法来验证改进后的类IPO策略的有效性。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Comparison of basic IPO strategy and improved IPO strateg</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >Covering Array</th><th align="center" valign="middle"  colspan="2"  >基本IPO策略</th><th align="center" valign="middle"  colspan="2"  >改进的类IPO策略</th></tr></thead><tr><td align="center" valign="middle" >size</td><td align="center" valign="middle" >time/s</td><td align="center" valign="middle" >size</td><td align="center" valign="middle" >time/s</td></tr><tr><td align="center" valign="middle" >CA1</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >9.3</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >9.7</td></tr><tr><td align="center" valign="middle" >CA2</td><td align="center" valign="middle" >128.5</td><td align="center" valign="middle" >165.1</td><td align="center" valign="middle" >117.6</td><td align="center" valign="middle" >172.3</td></tr><tr><td align="center" valign="middle" >CA3</td><td align="center" valign="middle" >178</td><td align="center" valign="middle" >272</td><td align="center" valign="middle" >166.2</td><td align="center" valign="middle" >278.3</td></tr><tr><td align="center" valign="middle" >CA4</td><td align="center" valign="middle" >351.9</td><td align="center" valign="middle" >289.3</td><td align="center" valign="middle" >346.7</td><td align="center" valign="middle" >264.9</td></tr><tr><td align="center" valign="middle" >CA5</td><td align="center" valign="middle" >940.1</td><td align="center" valign="middle" >1852.7</td><td align="center" valign="middle" >819.9</td><td align="center" valign="middle" >1427.5</td></tr><tr><td align="center" valign="middle" >MCA6</td><td align="center" valign="middle" >67.3</td><td align="center" valign="middle" >75.4</td><td align="center" valign="middle" >64</td><td align="center" valign="middle" >79.4</td></tr><tr><td align="center" valign="middle" >MCA7</td><td align="center" valign="middle" >24.3</td><td align="center" valign="middle" >247.4</td><td align="center" valign="middle" >17.8</td><td align="center" valign="middle" >250</td></tr><tr><td align="center" valign="middle" >MCA8</td><td align="center" valign="middle" >49</td><td align="center" valign="middle" >45.9</td><td align="center" valign="middle" >49</td><td align="center" valign="middle" >46.4</td></tr><tr><td align="center" valign="middle" >MCA9</td><td align="center" valign="middle" >472.3</td><td align="center" valign="middle" >859.2</td><td align="center" valign="middle" >572.4</td><td align="center" valign="middle" >796.4</td></tr><tr><td align="center" valign="middle" >MCA10</td><td align="center" valign="middle" >5521.8</td><td align="center" valign="middle" >14921.4</td><td align="center" valign="middle" >4936</td><td align="center" valign="middle" >13829.9</td></tr></tbody></table></table-wrap><p>表3. 基本IPO策略和改进的类IPO策略的比较</p><p>表3也是从测试用例集规模和算法运行时间这两个方面对不同算法进行比较。从用例规模上看，除了覆盖表CA1、MCA8、MCA9以外，改进的类IPO策略在总体用例规模上都优于基本的IPO策略。在复杂度较高的覆盖表中，优势更加明显，例如CA5、MCA10等。从时间性能上看，在复杂度较高的CA5和MCA10覆盖表中，本文提出的改进的类IPO策略可有效缩减执行时间。</p><p>综上所述，本文提出的基于改进粒子群算法的布谷鸟搜索优化算法和改进的类IPO策略，在因素的取值个数较多或t-way维度比较高的情况下，其生成测试用例集规模和算法执行时间上都具有一定的优势。</p></sec></sec><sec id="s7"><title>5. 结束语</title><p>为了解决组合测试的NP问题、因素选取的随机性问题以及算法种群多样性差、执行时间过长等问题，本文提出一种基于改进粒子群算法的布谷鸟搜索优化算法(CS-SPSO)的组合测试用例集生成方法。种群的划分和子种群间粒子的交流增强了种群的多样性，还有效避免了CS算法利用随机函数易导致初始鸟巢的离散程度低、位置分配不够均匀的问题，布谷鸟搜索中步长的动态调节解决种群寻优后期震荡，收敛速度慢的问题。其中，改进的类IPO策略利用约束处理和评估指标减少排序的随机性，提高策略运行效率还能使其可应用于任意强度的覆盖表。但本文提出的方法在小种群的运算上还存在一些局限，在未来的工作中，可对初始种群划分、子种群并行化计算等方面进行深入研究。</p></sec><sec id="s8"><title>基金项目</title><p>国家自然科学基金资助项目(No. 61502430)；浙江省重点研发计划项目(No. 2020C03094)；浙江省自然科学基金青年基金(No. LQ20F050010)。</p></sec><sec id="s9"><title>文章引用</title><p>张 娜,金瑜婷,涂小妹,董亮亮,包晓安. 基于改进粒子群算法的组合测试用例生成方法Combinatorial Test Case Generation Method Based on Improved Particle Swarm Optimization Algorithm[J]. 软件工程与应用, 2020, 09(02): 148-158. https://doi.org/10.12677/SEA.2020.92018</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.35372-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">申情, 蒋云良, 沈张果, 等. 基于组合混沌遗传算法的最小测试用例集生成[J]. 电信科学, 2016, 32(6): 93-102.</mixed-citation></ref><ref id="hanspub.35372-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">宋晓秋, 梁凡. 两两组合测试用例生成的遍历搜索算法[J]. 计算机工程与设计, 2019, 40(2): 433-437.</mixed-citation></ref><ref id="hanspub.35372-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Lei, Y., Kacker, R., Kuhn, D.R., et al. (2008) IPOG/IPOG-D: Efficient Test Generation for Multi-Way Combinatorial Testing. Software Testing, Verification and Reliability, 18, 24. &lt;br&gt;https://doi.org/10.1002/stvr.381</mixed-citation></ref><ref id="hanspub.35372-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">艾华, 宋晓秋, 安恒. 简单循环约减三三组合测试用例生成方法[J]. 计算机工程与设计, 2018, 39(12): 3728-3733.</mixed-citation></ref><ref id="hanspub.35372-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Nie, C.H. and Leung, H. (2011) A Survey of Combinatorial Testing. ACM Computing Surveys, 43, 1-29.&lt;br&gt;https://doi.org/10.1145/1883612.1883618</mixed-citation></ref><ref id="hanspub.35372-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Sabharwal, S., Bansal, P., Mittal, N., et al. (2016) Construction of Mixed Covering Arrays for Pair-Wise Testing Using Probabilistic Approach in Genetic Algorithm. Arabian Journal for Science and Engineering, 41, 2821-2835.&lt;br&gt;https://doi.org/10.1007/s13369-015-2022-1</mixed-citation></ref><ref id="hanspub.35372-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">戚荣志, 王志坚, 黄宜华, 等. 基于Spark的并行化组合测试用例集生成方法[J]. 计算机学报, 2018, 41(6): 1064-1079.</mixed-citation></ref><ref id="hanspub.35372-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">曾梦凡, 陈思洋, 张文茜, 等. 利用蚁群算法生成覆盖表: 探索与挖掘[J]. 软件学报, 2016, 27(4): 855-878.</mixed-citation></ref><ref id="hanspub.35372-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">王小银, 王曙燕, 孙家泽. 基于蚁群算法的三三组合测试用例集的生成[J]. 计算机应用研究, 2015, 32(11): 3328-3331.</mixed-citation></ref><ref id="hanspub.35372-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Chandra, P., Subhash, T., Vrushali, K., et al. (2018) A Critical Review on Automated Test Case Generation for Conducting Combinatorial Testing Using Particle Swarm Optimization. In-ternational Journal of Engineering &amp; Technology, 38, 22-28. &lt;br&gt;https://doi.org/10.14419/ijet.v7i3.8.15212</mixed-citation></ref><ref id="hanspub.35372-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">包晓安, 鲍超, 金瑜婷, 等. 基于动态调整简化粒子群优化的组合测试用例生成方法[J]. 计算机科学, 2018, 45(11): 199-203.</mixed-citation></ref><ref id="hanspub.35372-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Kennedy, J. (2011) Particle Swarm Optimization. Proceedings of 1995 IEEE International Conference of Neural Networks, 4, 1942-1948.</mixed-citation></ref><ref id="hanspub.35372-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">陈翔, 顾庆, 王子元, 等. 一种基于粒子群优化的成对组合测试算法框架[J]. 软件学报, 2011, 22(12): 2879-2893.</mixed-citation></ref><ref id="hanspub.35372-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">包晓安, 杨亚娟, 张娜, 等. 基于自适应粒子群优化的组合测试用例生成方法[J]. 计算机科学, 2017, 44(6): 177-181.</mixed-citation></ref><ref id="hanspub.35372-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Mahmoud, T. and Ahmed, B.S. (2015) An Efficient Strategy for Covering Array Construction with Fuzzy Logic-Based Adaptive Swarm Optimization for Software Testing Use. Expert Systems with Applications, 42, 8753-8765.&lt;br&gt;https://doi.org/10.1016/j.eswa.2015.07.029</mixed-citation></ref><ref id="hanspub.35372-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">胡旺, 李志蜀. 一种更简化而高效的粒子群优化算法[J]. 软件学报, 2007, 18(4): 861-868.</mixed-citation></ref><ref id="hanspub.35372-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Yang, X.S. and Deb, S. (2010) Cuckoo Search via Levy Flights. Mathematics, 22, 210-214.</mixed-citation></ref><ref id="hanspub.35372-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Yang, X.S. and Deb, S. (2013) Multiobjective Cuckoo Search for Design Optimization. Computers &amp; Operations Research, 40, 1616-1624. &lt;br&gt;https://doi.org/10.1016/j.cor.2011.09.026</mixed-citation></ref><ref id="hanspub.35372-ref19"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">Yang, X.S. and Deb, S. (2010) Engineering Optimization by Cuckoo Search. International Journal of Mathematical Modelling and Numerical Optimisation, 1, 330-343. &lt;br&gt;https://doi.org/10.1504/IJMMNO.2010.035430</mixed-citation></ref><ref id="hanspub.35372-ref20"><label>20</label><mixed-citation publication-type="other" xlink:type="simple">Tai, K.C. and Lei, Y. (2002) A Test Generation Strategy for Pairwise Testing. IEEE Transactions on Software Engineering, 28, 109-111. &lt;br&gt;https://doi.org/10.1109/32.979992</mixed-citation></ref><ref id="hanspub.35372-ref21"><label>21</label><mixed-citation publication-type="other" xlink:type="simple">张煜培, 赵知劲, 郑仕链. 利用多目标PSO优化的累积时延和信道容量联合优化的频谱切换算法[J]. 电信科学, 2018, 34(7): 62-71.</mixed-citation></ref><ref id="hanspub.35372-ref22"><label>22</label><mixed-citation publication-type="other" xlink:type="simple">Ahmed, B.S., Abdulsamad, T.S. and Potrus, M.Y. (2015) Achievement of Minimized Combinatorial Test Suite for Configuration-Aware Software Functional Testing Using the Cuckoo Search algorithm. Information and Software Technology, 66, 13-29. &lt;br&gt; https://doi.org/10.1016/j.infsof.2015.05.005</mixed-citation></ref></ref-list></back></article>