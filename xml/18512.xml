<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">JSST</journal-id><journal-title-group><journal-title>Journal of Security and Safety Technology</journal-title></journal-title-group><issn pub-type="epub">2330-4677</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/JSST.2016.43006</article-id><article-id pub-id-type="publisher-id">JSST-18512</article-id><article-categories><subj-group subj-group-type="heading"><subject>JSST20160300000_32488887.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于改进朴素贝叶斯算法Android恶意应用的检测研究
  Detection of Malicious Application Based on Improved Naive Bayesian Algorithm Android
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>石</surname><given-names>汝振</given-names></name><xref ref-type="aff" rid="aff1"><sub>1</sub></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>南京邮电大学通信与信息工程学院，江苏 南京</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>shiruzhen0@126.com</email></corresp></author-notes><pub-date pub-type="epub"><day>07</day><month>09</month><year>2016</year></pub-date><volume>04</volume><issue>03</issue><fpage>39</fpage><lpage>44</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   随着智能手机的普及，Android手机上的应用也越来越广泛，随之而来的问题是Android安全问题越来越严峻。各种恶意应用也层出不穷，严重威胁到用户的信息安全。本文首先介绍了当前的手机安全状况，并对当前的Android恶意应用的检测技术进行了分析。由于Android应用越来越严峻的形势，本文提出了一种基于改进的朴素贝叶斯算法，并应用此算法设计了恶意应用检测系统。本文中的系统应用了逆向分析的方式来产生恶意应用分类器。然后，本文对实验结果进行了分析。 With the popularity of smart phones, Android mobile applications are becoming more widely and the attendant problem about the Android security issues becomes more critical. Malicious applications are endless. It is a serious threat to the user’s information security. This paper describes the current status of mobile security and the current Android malicious application detection techniques are analyzed. As the situation of Android applications becomes more and more serious, an improved Naive Bayes algorithm is proposed. The malicious application detection system is designed by using this algorithm. The system uses a reverse analysis method to produce the malicious application classifier. The experimental results are analyzed.
    
  
 
</p></abstract><kwd-group><kwd>Android，朴素贝叶斯，逆向分析，分类器, Android</kwd><kwd> Naive Bayes</kwd><kwd> Reverse Analysis</kwd><kwd> Classifier</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于改进朴素贝叶斯算法Android恶意应用的检测研究<sup> </sup></title><p>石汝振</p><p>南京邮电大学通信与信息工程学院，江苏 南京</p><disp-formula id="hanspub.18512-formula191"><graphic xlink:href="http://html.hanspub.org/file/2-2880055x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2016年8月19日；录用日期：2016年9月9日；发布日期：2016年9月12日</p><disp-formula id="hanspub.18512-formula192"><graphic xlink:href="http://html.hanspub.org/file/2-2880055x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>随着智能手机的普及，Android手机上的应用也越来越广泛，随之而来的问题是Android安全问题越来越严峻。各种恶意应用也层出不穷，严重威胁到用户的信息安全。本文首先介绍了当前的手机安全状况，并对当前的Android恶意应用的检测技术进行了分析。由于Android应用越来越严峻的形势，本文提出了一种基于改进的朴素贝叶斯算法，并应用此算法设计了恶意应用检测系统。本文中的系统应用了逆向分析的方式来产生恶意应用分类器。然后，本文对实验结果进行了分析。</p><p>关键词 :Android，朴素贝叶斯，逆向分析，分类器</p><disp-formula id="hanspub.18512-formula193"><graphic xlink:href="http://html.hanspub.org/file/2-2880055x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>根据360发布的《2015年中国手机安全状况报告》 [<xref ref-type="bibr" rid="hanspub.18512-ref1">1</xref>] 显示：</p><p>2015全年，360互联网安全中心累计截获Android平台新增恶意程序样本1874.0万个。分别是2013年，2014年的27.9倍、5.7倍。平均每天截获新增恶意程序样本也高达51,342个。</p><p>2015全年，360互联网安全中心累计监测到Android用户感染恶意程序3.7亿人次，分别是2013年、2014年的3.8倍和1.1倍；平均每天感染量达到了100.6万人次。</p><p>在所有手机恶意程序中，资费消耗类恶意程序的感染量仍然保持最多，占比高达73.6%；其次为恶意扣费(21.5%)和隐私窃取(4.1%)。</p><p>恶意应用的开发者们不断的开发着新的恶意代码,新的木马病毒样本不断被发现。从恶意扣费、窃取隐私、隐式安装恶意软件、窃取网银密码等到远程控制操作用户的手机。Android智能手机不仅仅给用户带来了方便也导致了Android安全问题越来越严重。Android手机上恶意应用的检测越来越被人们所重视。</p><p>机器学习算法可应用于Android平台上恶意代码检测，例如朴素贝叶斯算法(Native Bayes NB算法)。但朴素贝叶斯算法存在着较高误判率的缺陷 [<xref ref-type="bibr" rid="hanspub.18512-ref2">2</xref>] ，本文提出了应用改进的朴素贝叶斯算法进行机器学习，对Android软件进行字节码级别的静态分析后，提取出软件的特征值信息作为样本特征。本文基于该原理实现了对Android应用进行恶意应用检测的框架，对Android软件进行特征码扫描后，通过基于改进的朴素贝叶斯算法分类器的判定区分是否是恶意应用，从而有效提高了恶意代码检测的精确度，降低了误判率。</p></sec><sec id="s4"><title>2. Android恶意应用检测技术</title><p>Android恶意代码的检测一般分为静态检测和动态检测，在此基础上一般采用特征值检测技术和基于启发式的检测技术这两种方式 [<xref ref-type="bibr" rid="hanspub.18512-ref3">3</xref>] 。</p><sec id="s4_1"><title>2.1. 特征值匹配技术</title><p>特征值检测是目前大多数反病毒产品普遍使用的检测技术。该技术的主要工作原理是根据特定的规则对目标文件进行扫描，并提取出特征值，与病毒库中已有的特征按照某种匹配算法进行完全匹配或者计算出相似度，若得到完全匹配或者相似度超过规定的阈值，则表示检测为病毒文件 [<xref ref-type="bibr" rid="hanspub.18512-ref4">4</xref>] 。所以特征值匹配需要分析大量的样本，并且不断的更新特征库，特征值匹配技术原理比较简单，而且在一定情况下具有容易实现，准确率高等众多优点。但是这种技术过分依赖于对特征值提取的精确程度，具有一定的不稳定性，而且对新出现的恶意代码的检测效果不理想。</p></sec><sec id="s4_2"><title>2.2. 基于启发式的检测技术</title><p>启发式的检测技术包含动态和静态启发检测，静态启发是指对Android apk文件进行反编译生成smile代码和java代码，通过对文件外部静态信息分类，模拟跟踪代码执行流程来判断是否为恶意软件 [<xref ref-type="bibr" rid="hanspub.18512-ref5">5</xref>] 。动态启发是指在系统中设置若干的特征点来监控软件行为，通过软件的恶意行为来判断是否是恶意软件。常用的启发式检测技术基于机器学习算法例如神经网络、朴素贝叶斯算法、决策树等。</p></sec></sec><sec id="s5"><title>3. 朴素贝叶斯算法分析与改进</title><sec id="s5_1"><title>3.1. 基本原理</title><p>朴素贝叶斯算法是目前公认的最简单而且有效的概率分类方法 [<xref ref-type="bibr" rid="hanspub.18512-ref6">6</xref>] 。它是一种假定各个因素之间不存在任何联系，即完全独立得到的一种简化的贝叶斯算法。可以将朴素贝叶斯分类器应用于恶意代码的过滤，利用这种方法可以根据结果集自动学习，因此需要一定的恶意代码库来提取恶意代码的特征值来训练过滤器。</p><p>朴素贝叶斯方法是基于最小错误概率规则，尽量降低分类犯错误的概率。朴素贝叶斯方法通过在程序中的恶意代码的特征信息来计算程序中包含恶意代码的可能性。当判断某段代码是否是恶意代码的时候，利用提取出的特征集合A。定义B代表所有类别的一个随机取值，B代表的是恶意样本或者普通代码，进行机器学习的目的就是计算P(B|A)来判断B是恶意代码还是普通代码。由贝叶斯公式可得，</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2880055x9_hanspub.png" xlink:type="simple"/></inline-formula> 公式2.1</p><p>由于贝叶斯公式的条件是特征集合A中的各个特征值相互独立，如果软件样本包含多种属性A<sub>1</sub>，A<sub>2</sub>，A<sub>3</sub>…A<sub>n</sub></p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2880055x10_hanspub.png" xlink:type="simple"/></inline-formula> 公式2.2</p><p>从中选取最大概率作为其分类。</p></sec><sec id="s5_2"><title>3.2. 朴素贝叶斯算法的改进</title><p>在恶意代码的实际分类中，由于只有两类即是否是恶意代码，所以相应的会出现两种分类错误：1)将恶意代码判断成正常代码；2) 将正常代码判断成恶意代码；如果是将恶意代码判断成为正常代码，就会带来严重的后果，使用户信息丢失等等。在传统方法中一般当P(B<sub>0</sub>|A)&gt;P(B<sub>1</sub>|A)时就判定是否是恶意代码，但是这种方法并不精确存在很高的误判率和漏判率所以直接应用时分类偏差会比较大。</p><p>为了更准确的识别恶意代码，减少误判，设当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2880055x11_hanspub.png" xlink:type="simple"/></inline-formula>时 [<xref ref-type="bibr" rid="hanspub.18512-ref7">7</xref>] ，即当恶意代码的概率是</p><p>非恶意代码的θ倍时，将其判定为恶意代码。当θ越大，其为恶意代码的可能性就越大。由上述公式可以表示为，</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2880055x12_hanspub.png" xlink:type="simple"/></inline-formula> 公式2.3</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2880055x13_hanspub.png" xlink:type="simple"/></inline-formula> 公式2.4</p><p>也就是当P(B<sub>1</sub>|A) &gt; h时可以判定此应用为恶意Android应用。</p></sec></sec><sec id="s6"><title>4. Android恶意代码静态检测系统的设计</title><sec id="s6_1"><title>4.1. 生成恶意代码检测分类器</title><p>通过对训练样本进行分析，得到样本的特征值集合，流程图如图1所示，首先收集Android的恶意软件的样本集，对样本集进行逆向分析，在分析出的信息中提取出分类器需要的信息特征，将这些特征作为分类器的样本输入，经过改进的朴素贝叶斯算法处理之后得到Android恶意软件的检测分类器 [<xref ref-type="bibr" rid="hanspub.18512-ref8">8</xref>] 。</p></sec><sec id="s6_2"><title>4.2. 应用分类器对Android应用进行检测</title><p>当测试是否是恶意应用时，需要先对测试的样本进行逆向分析，提取出特征信息，送入分类器进行检测。流程图如图2所示。</p><p>图1. 恶意代码检测分类器的生成</p><p>图2. 分类器样本的检测</p></sec><sec id="s6_3"><title>4.3. Android应用的静态逆向分析</title><p>APK文件的反编译可以使用dex2jar把classes.dex文件反编译为java代码，反编译成功后的代码可以通过jd-gui进行阅读 [<xref ref-type="bibr" rid="hanspub.18512-ref9">9</xref>] 。使转化后的java代码清晰易懂；或者把classes.dex文件反编译为smali代码，smali代码是一种面向对象的汇编代码，其可读性较强，修改后的smali代码还可以重新打包和签名生成新的APK文件 [<xref ref-type="bibr" rid="hanspub.18512-ref6">6</xref>] 。反编译成smali代码常用的工具是apktool，此工具集合了解压缩XML、文件解析、smali正反编译、组装等各个功能。运用反编译工具可实现对apk文件的反编译，从而提取出所需要的特征信息，对其所申请的权限进行分析，运用字符串的比较算法比较签名等从而得到最终结果。</p></sec></sec><sec id="s7"><title>5. 试验与结果分析</title><p>通过网络收集到的软件样本600个，其中有恶意应用300个，合法应用300个。得出基于朴素贝叶斯算法的实验结果如表1所示。</p><p>由表1得知，应用朴素贝叶斯算法时，300个恶意应用中仍然有35.5个被判定为合法应用，300个合法应用中有37.7个被判定为恶意应用。实验数据说明了朴素贝叶斯算法存在着一定的缺陷。</p><p>由公式2.3和2.4可得h的范围是0~10，所以需要大量的实验来得到h值的大小。从中选取了部分h值实验结果如表2所示。可得当0 &lt; h &lt; 0.35时分类器的判断正确概率接近100%。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Experiment based on naive Bayes algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >系统判定为合法应用</th><th align="center" valign="middle" >系统判定为恶意应用</th><th align="center" valign="middle" >总数</th></tr></thead><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >262.3</td><td align="center" valign="middle" >37.7</td><td align="center" valign="middle" >300</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >35.5</td><td align="center" valign="middle" >265.5</td><td align="center" valign="middle" >300</td></tr><tr><td align="center" valign="middle" >总数</td><td align="center" valign="middle" >297.8</td><td align="center" valign="middle" >302.2</td><td align="center" valign="middle" >600</td></tr></tbody></table></table-wrap><p>表1. 基于朴素贝叶斯算法的实验</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Experiment based on improved naive Bayes algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >系统判定为合法应用</th><th align="center" valign="middle" >系统判定为恶意应用</th><th align="center" valign="middle" >数量</th><th align="center" valign="middle" >H值</th></tr></thead><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >258.2</td><td align="center" valign="middle" >41.8</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.55</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >40.1</td><td align="center" valign="middle" >259.9</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.55</td></tr><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >265.5</td><td align="center" valign="middle" >35.5</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.5</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >37.7</td><td align="center" valign="middle" >262.3</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.5</td></tr><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >265.8</td><td align="center" valign="middle" >34.2</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.40</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >10.4</td><td align="center" valign="middle" >289.6</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.40</td></tr><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >272</td><td align="center" valign="middle" >28</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.35</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.35</td></tr><tr><td align="center" valign="middle" >实际为合法应用</td><td align="center" valign="middle" >287</td><td align="center" valign="middle" >13</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.27</td></tr><tr><td align="center" valign="middle" >实际为恶意应用</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >300</td><td align="center" valign="middle" >0.27</td></tr></tbody></table></table-wrap><p>表2. 基于改进朴素贝叶斯算法的实验</p></sec><sec id="s8"><title>6. 结束语</title><p>本文对现有的恶意应用的检测技术进行了分析，在一种朴素贝叶斯算法的基础上提出了一种改进型的朴素贝叶斯算法，并设计了一个检测系统对该改进算法的优势进行了检测。提高了恶意应用的检测概率，但是也存在着将合法应用判定为恶意应用的误差，这是算法需要进一步改进的地方。</p></sec><sec id="s9"><title>文章引用</title><p>石汝振. 基于改进朴素贝叶斯算法Android恶意应用的检测研究Detection of Malicious Application Based on Improved Naive Bayesian Algorithm Android[J]. 安防技术, 2016, 04(03): 39-44. http://dx.doi.org/10.12677/JSST.2016.43006</p></sec><sec id="s10"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.18512-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">2015年中国手机安全报告[R]. http://zt.360.cn/1101061855.php?dtid=1101061451&amp;did=1101593997</mixed-citation></ref><ref id="hanspub.18512-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">王辉, 陈泓予, 刘淑芬. 基于改进朴素贝叶斯算法的入侵检测系统[J]. 计算机科学, 2014, 41(4): 111-119.</mixed-citation></ref><ref id="hanspub.18512-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Kosmopoulosa, A., Paliouras, G. and Androutsopoulos, I. (2008) Adaptice Spam Filtering Using Only Naïve Bayes Text Classifiers. CEAS 2008 5th Conference on Email and Anti-Spam, Mountain View, 21-22 August 2008, 3 p.</mixed-citation></ref><ref id="hanspub.18512-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">蔡志平. 计算机病毒检测技术研究与实现[D]: [硕士学位论文]. 长沙: 国防科技大学, 2001: 50-56.</mixed-citation></ref><ref id="hanspub.18512-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">彭国军, 李晶雯, 孙润康, 肖云倡. Android恶意软件检测研究与进展[J]. 武汉大学学报(理学版), 2015, 61(1): 21- 33.</mixed-citation></ref><ref id="hanspub.18512-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">楼赟程, 施勇, 薛质. 基于逆向工程的Android恶意行为检测方法[J]. 信息安全与通信保密, 2015(4): 83-87.</mixed-citation></ref><ref id="hanspub.18512-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">郑炜, 沈文, 张英鹏. 基于改进朴素贝叶斯算法的垃圾过滤器的研究[J]. 西北工业大学学报, 2010, 28(8): 622- 628.</mixed-citation></ref><ref id="hanspub.18512-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">郑吉飞. Android恶意代码的静态检测研究[D]: [硕士学位论文]. 武汉: 华中师范大学, 2013.</mixed-citation></ref><ref id="hanspub.18512-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">侯勤胜, 曹天杰. Android恶意软件的分析与检测[J]. 河南科技大学学报: 自然科学版, 2015, 36(10): 54-59.</mixed-citation></ref></ref-list></back></article>