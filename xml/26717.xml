<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">PM</journal-id><journal-title-group><journal-title>Pure  Mathematics</journal-title></journal-title-group><issn pub-type="epub">2160-7583</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/PM.2018.85064</article-id><article-id pub-id-type="publisher-id">PM-26717</article-id><article-categories><subj-group subj-group-type="heading"><subject>PM20180500000_62202480.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  带等级约束的多维任务调度问题
  Multidimensional Task Scheduling Problem under a Grade of Service Provision
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>代</surname><given-names>兵飞</given-names></name><xref ref-type="aff" rid="aff1"><sub>1</sub></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib></contrib-group><aff id="aff1"><label>1</label><addr-line>云南大学数学与统计学院，云南 昆明</addr-line></aff><pub-date pub-type="epub"><day>23</day><month>08</month><year>2018</year></pub-date><volume>08</volume><issue>05</issue><fpage>480</fpage><lpage>485</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   根据向量调度问题和带等级约束的任务调度问题，我们提出了带等级约束的多维任务调度问题。我们首先设计了一个5 d/4-近似算法。然后，我们给出一个动态规划算法和一个完全多项式时间近似方案。 According to vector scheduling problem and task scheduling problem under a grade of service provision, we propose multidimensional task scheduling problem under a grade of service provision. We first design a 5 d/4 approximation algorithm. Then, we give a dynamic programming algorithm and a fully polynomial time approximation scheme.
    
  
 
</p></abstract><kwd-group><kwd>向量调度，动态规划，服务等级，近似算法, Vector Scheduling</kwd><kwd> Dynamic Programming</kwd><kwd> A Grade of Service Provision</kwd><kwd> Approximation Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>带等级约束的多维任务调度问题<sup> </sup></title><p>代兵飞</p><p>云南大学数学与统计学院，云南 昆明</p><p><img src="//html.hanspub.org/file/3-1250678x1_hanspub.png" /></p><p>收稿日期：2018年8月12日；录用日期：2018年8月30日；发布日期：2018年9月6日</p><disp-formula id="hanspub.26717-formula42"><graphic xlink:href="//html.hanspub.org/file/3-1250678x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>根据向量调度问题和带等级约束的任务调度问题，我们提出了带等级约束的多维任务调度问题。我们首先设计了一个5 d/4-近似算法。然后，我们给出一个动态规划算法和一个完全多项式时间近似方案。</p><p>关键词 :向量调度，动态规划，服务等级，近似算法</p><disp-formula id="hanspub.26717-formula43"><graphic xlink:href="//html.hanspub.org/file/3-1250678x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by author and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/3-1250678x7_hanspub.png" /> <img src="//html.hanspub.org/file/3-1250678x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>向量调度问题是经典的完工时间最小化问题的推广。一般来说，向量调度问题是将n个d-维向量分配给m台机器以使得所有机器、所有维数的最大负载尽可能小。在文 [<xref ref-type="bibr" rid="hanspub.26717-ref1">1</xref>] 中，由于Graham创造性的工作，单维负载均衡问题被广泛的研究。然而在许多问题中，一项任务可能需要不同的资源来完成，因此任务就无法用单一的量来度量。例如，如果一项任务同时需要CPU和内存，任务的需求最好用一个2-维向量来刻画，向量的每个分量对应一种资源的数目。</p><p>Chekuri和Khanna [<xref ref-type="bibr" rid="hanspub.26717-ref2">2</xref>] 首次提出向量调度问题，算法调度d-维工件给机器加工以使得所有机器、所有维数的最大负载尽可能小。当d是任意常数时，除非 P = N P ，Chekuri和Khanna证明向量调度问题不能在常数因子内近似。此外，他们 [<xref ref-type="bibr" rid="hanspub.26717-ref2">2</xref>] 设计了一个 O ( ln 2 d ) -近似算法。当d是固定常数时，他们提出了一个运行时间为 ( n d / ε ) O ( ( ln ( d / ε ) ε ) d ) 的多项式时间近似方案(PTAS)。最近，Bansal等人 [<xref ref-type="bibr" rid="hanspub.26717-ref3">3</xref>] 在 exp ( ( 1 / ε ) O ( d log log d ) ) + n d 时间内设计了一个有效的多项式时间近似方案(EPTAS)。</p><p>对于在线向量调度问题，Zhu等人 [<xref ref-type="bibr" rid="hanspub.26717-ref4">4</xref>] 提出了一个竞争比为 O ( log d m ) 的在线算法。Meyerson等人 [<xref ref-type="bibr" rid="hanspub.26717-ref5">5</xref>] 改进了文 [<xref ref-type="bibr" rid="hanspub.26717-ref4">4</xref>] 中的算法，而且得到了一个 O ( log d ) -近似算法。通过给出一个在线下界，Im等人 [<xref ref-type="bibr" rid="hanspub.26717-ref6">6</xref>] 证明 Θ ( log d / log log d ) 是在线向量调度问题的最优竞争比。</p><p>对于经典的带等级约束的离线调度问题，当机器台数m为固定常数时，Hwang等人在文 [<xref ref-type="bibr" rid="hanspub.26717-ref7">7</xref>] 证明了LG-LPT算法的近似比：当 m = 2 时为5/4，当 m ≥ 3 时为 2 − 1 / ( m − 1 ) 。在2007年，Glass和Kellerer在文 [<xref ref-type="bibr" rid="hanspub.26717-ref8">8</xref>] 对离线排序问题的特殊情形：当任务的加工时间只能是1或者 λ 时，证明了近似比趋于<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/3-1250678x20_hanspub.png" xlink:type="simple"/></inline-formula>。当任务的加工时间无限制时，他们给出了一个3/2-近似算法。Ou等人在文 [<xref ref-type="bibr" rid="hanspub.26717-ref9">9</xref>] 给出了一个4/3-近似算法同时设计了一个多项式时间近似方案。Li等人在文 [<xref ref-type="bibr" rid="hanspub.26717-ref10">10</xref>] 中对 l p 范数下具有等级约束的问题进行研究，并给出了一个基于线性规划解的全范数2-近似算法。</p><p>近年来，许多研究人员开始关注云计算中的资源分配问题。Liu等人在文 [<xref ref-type="bibr" rid="hanspub.26717-ref11">11</xref>] 研究了异构物理机环境下的资源管理问题。云供应商给物理机提供异构资源，资源种类分别为CPU，存储，硬盘大小等。在实际问题中，为了提高异构资源的利用效率，一些异构资源只能分配给一些特定的物理机。受Liu等人的启发，结合文 [<xref ref-type="bibr" rid="hanspub.26717-ref2">2</xref>] 和 [<xref ref-type="bibr" rid="hanspub.26717-ref7">7</xref>] 的创作思想，我们提出一种新的调度模型：带等级约束的多维任务调度问题。在这里，每个多维任务和每台机器都有一个等级，我们需要把每个多维任务调度到等级不高于它的机器上加工。目标是最小化所有机器、所有维数的最大负载。明显地，当 d = 1 时，带等级约束的多维任务调度问题就是经典的带等级约束的平行机调度问题。在本文，我们研究两台平行机上带等级约束的多维任务调度问题。为了便于分析，我们把这个问题简记为 P 2 | G o S , V C | C max 。</p></sec><sec id="s4"><title>2. 预备知识</title><p>对于 P 2 | G o S , V C | C max 问题，给定实例 I = ( M , J , p , g ) 。集合 M = { M 1 , M 2 } 包含两台平行机。集合 J = { J 1 , J 2 , ⋯ , J n } 包含n项任务。每一项任务 J j 对应一个d-维向量 p j = ( p j 1 , p j 2 , ⋯ , p j d ) 。在这里，我们要求 p j k 是整数。 g ( J j ) 是任务 J j 的等级，机器 M i 也有一个等级 g ( M i ) 。当 g ( J j ) ≥ g ( M i ) 时，任务 J j 可以在机器 M i 上加工。任务 J j 到达后即可开始加工，加工过程不可中断而且每项任务只需加工一次。把n项任务分配给两台机器加工，我们可以得到任务集J的一个划分 ( S 1 , S 2 ) 。在这里，我们令 P i = max k ∑ J j ∈ S i p j k ( i = 1 , 2 ; k = 1 , ⋯ , d ) 。对于 P 2 | G O S , V C | C max 问题，我们的目标是使 max i P i 最小，也就是使所有机器、所有维数的最大负载尽可能小。</p><p>为了理解问题 P 2 | G O S , V C | C max 。我们给出一个例子：给定两台机器M<sub>1</sub>和M<sub>2</sub>，它们的等级分别为1和2。3个任务 J 1 = ( 3 , 1 , 1 ) T 、 J 2 = ( 3 , 2 , 5 ) T 、 J 3 = ( 1 , 0 , 1 ) T ，工件的等级分别是1，2，2。对于这个实例，最优的分配方案是把任务 J 1 和 J 3 分配给机器M<sub>1</sub>，任务 J 2 分配给机器M<sub>2</sub>，最优方案对应的最优值是5。</p><p>在实例I的基础上，我们构造实例 I ^ = ( M , J , p ^ , g ) 。实例I与实例 I ^ 的差别是特征p与 p ^ ：在实例I中，任务 J j 对应一个d-维向量 p j = ( p j 1 , p j 2 , ⋯ , p j d ) T 。在实例 I ^ 中，任务 J j 对应一个1维向量 p ^ j = ∑ k = 1 d p j k 。对应于实例I的目标函数，因为实例 I ^ 的每项任务对应一个1维向量，所以实例 I ^ 的目标是使 max i ( ∑ J j ∈ S i p ^ j ) ( i = 1 , 2 ) 最小。</p></sec><sec id="s5"><title>3. 5 d 4 -近似算法</title><p>对于实例 I ^ = ( M , J , p ^ , g ) ，调用文 [<xref ref-type="bibr" rid="hanspub.26717-ref7">7</xref>] 的LG-LPT算法，我们可以得到任务集J的一个调度方案 ( S 1 , S 2 ) 。由实例 I ^ 和实例I的关系， ( S 1 , S 2 ) 也是实例 I = ( M , J , p , g ) 的一个调度方案。对于调度方案 ( S 1 , S 2 ) ，我们假设实例 I ^ 和实例I的目标值分别是 O U T ( I ^ ) 和 O U T ( I ) 。我们令 O P T ( I ^ ) 和 O P T ( I ) 分别表示实例 I ^ 和实例I的最优值。</p><p>对与实例I，我们设计了一个近似比为 5 4 d -近似算法。</p><p>算法1：近似算法</p><p>步骤1：根据实例I，构造实例 I ^ ；</p><p>步骤2：对于实例 I ^ ，调用LG-LPT算法，我们得到调度方案 ( S 1 , S 2 ) ；</p><p>步骤3：对于调度方案 ( S 1 , S 2 ) ，实例I和实例 I ^ 的目标值分别是 O U T ( I ) 和 O U T ( I ^ ) ；</p><p>步骤4：返回 O U T ( I ) 。</p><p>定理1：对于问题 P 2 | G o S , V C | C max ，算法1是一个 5 4 d -近似算法。</p><p>证明：根据文 [<xref ref-type="bibr" rid="hanspub.26717-ref7">7</xref>] 的结论可知，当机器台数 m = 2 时，对于实例 I ^ ，我们有</p><p>O U T ( I ^ ) ≤ 5 4 O P T ( I ^ ) (1)</p><p>对于某个 S i ，我们假设 O U T ( I ) = max k ∑ J j ∈ S i p j k 。根据实例I的目标函数值的定义，我们有 O U T ( I ) ≤ ∑ J j ∈ S i ∑ k = 1 d p j k 。再根据实例 I ^ 的目标函数值的定义，我们有 O U T ( I ^ ) ≥ ∑ J j ∈ S i ∑ k = 1 d p j k 。因此，我们有</p><p>O U T ( I ) ≤ O U T ( I ^ ) (2)</p><p>我们用反证法证明 O P T ( I ^ ) ≤ d O P T ( I ) ，假设 O P T ( I ^ ) &gt; d O P T ( I ) 。我们设 ( S 1 * , S 2 * ) 是实例I的一个最优调度方案。根据实例I的目标函数值的定义，对于任意的 S i * ，我们有 d O P T ( I ) ≥ ∑ J j ∈ S i * ∑ k = 1 d p j k 。结合假设 O P T ( I ^ ) &gt; d O P T ( I ) ，我们有</p><p>O P T ( I ^ ) &gt; d O P T ( I ) ≥ ∑ J j ∈ S i * ∑ k = 1 d p j k</p><p>上式说明，如果用调度方案 ( S 1 * , S 2 * ) 求解实例 I ^ ，我们可以得到一个比 O P T ( I ^ ) 更小的目标值，这与 O P T ( I ^ ) 的最优性矛盾，所以我们有</p><p>O P T ( I ^ ) ≤ d O P T ( I ) (3)</p><p>联立(1)式、(2)式、(3)式，我们可以得到</p><p>O U T ( I ) ≤ 5 4 d O P T (I)</p><p>因此对于 P 2 | G o S , V C | C max 问题，算法1是一个 5 4 d -近似算法。</p></sec><sec id="s6"><title>4. 动态规划算法</title><p>在这一部分，我们将给出问题 P 2 | G o S , V C | C max 的动态规划算法。对于问题 P 2 | G o S , V C | C max ，动态规划算法的设计策略是把n项任务所有可能的调度方案遍历一次，因此我们可以得到问题的最优解。</p><p>我们令 e i 表示第i列元素全为1，其余元素全为0的 d &#215; 2 维矩阵。 p k 表示任务 J k 对应的向量， p k = ( p k 1 , p k 2 , ⋯ , p k d ) T 。 p k ⊗ e i 表示向量 p k 与矩阵 e i 的第i列元素对应相乘。</p><p>比如 p 1 ⊗ e 2 = ( p 11 p 12 ⋮ p 1 d ) ⊗ ( 0 0 ⋮ 0 1 1 ⋮ 1 ) = ( 0 0 ⋮ 0 p 11 p 12 ⋮ p 1 d ) 。</p><p>我们用空间 Φ k ( k = 0 , 1 , ⋯ , n ) 表示分配完前k个任务后所有可能的负载矩阵集，而且空间 Φ k 可由空间 Φ k − 1 拓展得到。 Φ k 的元素都是 d &#215; 2 维负载矩阵，负载矩阵的第j列,第i行表示第j台机器的第i个负载分量。 v k = max { i | g ( M i ) ≤ g ( J k ) } 表示能加工任务 J k 的下标最大的机器的下标。</p><p>我们假设负载空间 Φ k − 1 = { A 1 , A 2 , ⋯ , A l } 。</p><p>我们下面定义 Φ k = Φ k − 1 + { p k ⊗ e i | i = 1 , ⋯ , v k } 。</p><p>如果 v k = 1 ，我们有 Φ k = Φ k − 1 + { p k ⊗ e i | i = 1 } = { A 1 + p k ⊗ e 1 , A 2 + p k ⊗ e 1 , ⋯ , A l + p k ⊗ e 1 } 。</p><p>如果 v k = 2 ，我们有 Φ k = Φ k − 1 + { p k ⊗ e i | i = 1 , 2 } = { A 1 + p k ⊗ e 1 , A 2 + p k ⊗ e 1 , ⋯ , A l + p k ⊗ e 1 ,       A 1 + p k ⊗ e 2 , A 2 + p k ⊗ e 2 , ⋯ , A l + p k ⊗ e 2 }</p><p>如果B是一个负载矩阵，我们定义B的最大元素是B中所有元素的最大值。</p><p>例如负载矩阵 B = ( b 11 b 12 ⋮ b 1 d b 21 b 21 ⋮ b 21 ) ，则B的最大元素为 max { b 11 , ⋯ , b 1 d , b 21 , ⋯ , b 2 d } 。</p><p>动态规划算法</p><p>步骤1：我们将机器和任务都按等级从低到高的顺序重新标号，使得 g ( M 1 ) ≤ g ( M 2 ) 且 g ( J 1 ) ≤ g ( J 2 ) ≤ ⋯ ≤ g ( J n ) ；</p><p>步骤2：令 Φ 0 = { ( 0 ) d &#215; 2 } ；</p><p>步骤3：对于 j = 1 , ⋯ , n ，做如下循环</p><p>Φ k = Φ k − 1 + { p k ⊗ e i | i = 1 , ⋯ , v k } ；</p><p>步骤4：对于 Φ n 中的每个矩阵，我们分别提取最大元素得到集合 α = { c 1 , c 2 , ⋯ , c | Φ n | }</p><p>然后返回集合 α 中的最小值。</p><p>根据动态规划算法可知，负载空间 Φ n 包含了所有可能的负载矩阵，自然也包含对应于最优解的负载矩阵，所有动态规划算法可以得到问题 P 2 | G o S , V C | C max 的最优解。</p><p>定理2 当d为固定常数时，动态规划算法的运行时间为 O ( n 2 d + 1 p max 2 d ) ，其中 p max = max j , k p j k ( j = 1 , ⋯ , n ; k = 1 , ⋯ , d ) 。</p><p>证明：由于 p max = max j , k p j k ，则任意机器、任意维数的负载不超过 n p max 。当任务 J j 被调度后，因为负载矩阵中的每个元素在集合 { 0 , 1 , ⋯ , n p max } 内取值，所以我们可以在 O ( 1 + n p max ) 2 d 时间内得到当前的负载矩阵。又因为一共有n项任务，所以动态规划算法的运行时间为 O ( n ( 1 + n p max ) 2 d ) = O ( n 2 d + 1 p max 2 d ) 。</p></sec><sec id="s7"><title>5. 完全多项式时间近似方案</title><p>在这一部分，对于问题 P 2 | G o S , V C | C max ，当任务维数d为固定常数时，我们用动态规划算法设计了一个完全多项式时间近似方案。</p><p>定理3 当d是固定常数时，问题 P 2 | G o S , V C | C max 在 O ( n 2 d + 1 ( d ε ) 2 d ) 时间内存在一个完全多项式时间近似方案。</p><p>证明：我们用L表示算法1求解实例I得到的目标值。根据定理1，我们有</p><p>O P T ( I ) ≤ L ≤ 5 4 d O P T (I)</p><p>在实例 I = ( M , J , p , g ) 的基础上，我们构造实例 I ′ = ( M , J , p ^ , g ) 。实例I与实例 I ′ 的差别是特征p与 p ^ ：在实例I中，任务 J j 对应一个d-维向量 p j = ( p j 1 , p j 2 , ⋯ , p j d ) T 。在实例 I ′ 中，任务 J j 对应一个d-维向量 p ^ j = ( p ′ j 1 , p ′ j 2 , ⋯ , p ′ j d ) T 。在这里，我们有 p ′ j k = ⌊ p j k 4 ε L / 5 d n ⌋ ⋅ 4 ε L 5 d n         ( k = 1 , 2 , ⋯ , d ) 。因为 p ′ j k = ⌊ p j k 4 ε L / 5 d n ⌋ ⋅ 4 ε L 5 d n ，所以 p ′ j k ≤ p j k ≤ p ′ j k + 4 ε L 5 d n 。因为动态规划可以得到实例 I ′ = ( M , J , p ^ , g ) 的最优方案 ( S ′ 1 , S ′ 2 ) ，我们假设最优值 O P T ( I ′ ) = max i , k ∑ J j ∈ S ′ i p ′ j k   ( i = 1 , 2 ; k = 1 , 2 , ⋯ , d ) 。假设实例I的最优方案是 ( O 1 , O 2 ) ，则实例I的最优值 O P T ( I ) = max i , k ∑ J j ∈ O i p j k   ( i = 1 , 2 ; k = 1 , 2 , ⋯ , d ) 。</p><p>用实例 I ′ 的最优调度方案 ( S ′ 1 , S ′ 2 ) 求解实例I，我们可以得到下面的链式不等式</p><p>max i , k ∑ J j ∈ S ′ i p j k ≤ max i , k ∑ J j ∈ S ′ i ( p ′ j k + 4 ε L 5 d n ) = max i , k ∑ J j ∈ S ′ i p ′ j k + | S i ' | 4 ε L 5 d n ≤ max i , k ∑ J j ∈ S ′ i p ′ j k + 4 ε L 5 d ≤ max i , k ∑ J j ∈ O i p ′ j k + 4 ε L 5 d ≤ max i , k ∑ J j ∈ O i p j k + 4 ε L 5 d ≤ O P T ( I ) + ε O P T ( I ) = ( 1 + ε ) O P T (I)</p><p>当动态规划算法求解实例 I ′ 时，由于 O P T ( I ′ ) ≤ O P T ( I ) ≤ L ，我们只需要考虑负载不超过L的调度方案。因为任意机器的负载分量都是 4 ε L 5 d n 的整数倍，而且一共有n项任务，因此实例 I ′ 可以在 O ( n ( 5 d n 4 ε + 1 ) 2 d ) = O ( n 2 d + 1 ( d ε ) 2 d ) 时间内得到最优方案。</p></sec><sec id="s8"><title>6. 结论</title><p>在本文，对于两台平行机上的 P 2 | G o S , V C | C max 问题，我们首先设计了一个5 d/4-近似算法。然后，我们给出了一个求最优解的动态规划算法和一个完全时间多项式近似方案。对于带等级约束的多维向量调度问题，当机器台数为 m ( m ≥ 3 ) 时，我们以后将设计一个近似算法而且给出一个完全多项式时间近似方案。</p></sec><sec id="s9"><title>文章引用</title><p>代兵飞. 带等级约束的多维任务调度问题 Multidimensional Task Scheduling Problem under a Grade of Service Provision[J]. 理论数学, 2018, 08(05): 480-485. https://doi.org/10.12677/PM.2018.85064</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.26717-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Graham, R.L., et al. (1979) Optimization and Approximation in Deterministic Sequencing and Scheduling: A Survey. Annals of Dis-crete Mathematics, 5, 287-326. &lt;br&gt;https://doi.org/10.1016/S0167-5060(08)70356-X</mixed-citation></ref><ref id="hanspub.26717-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Chekuri, C. and Khanna, S. (2004) On Multidimensional Packing Problems. SIAM Journal on Computing, 33, 837-851.  
&lt;br&gt;https://doi.org/10.1137/S0097539799356265</mixed-citation></ref><ref id="hanspub.26717-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Bansal, N., Vredeveld, T. and Zwaan, R.V.D. (2014) Approximating Vector Scheduling: Almost Matching Upper and Lower Bounds. LATIN 2014: Theoretical Informatics, Springer, Berlin Heidel-berg.</mixed-citation></ref><ref id="hanspub.26717-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Zhu, X., Li, Q., Mao, W., et al. (2014) Online Vector Scheduling and Generalized Load Balancing. Journal of Parallel &amp; Distributed Computing, 74, 2304-2309. &lt;br&gt;https://doi.org/10.1016/j.jpdc.2013.12.006</mixed-citation></ref><ref id="hanspub.26717-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Meyerson, A., Roytman, A. and Tagiku, B. (2013) Online Multidimensional Load Balancing. Approximation, Randomization, and Combinatorial Optimization. Algorithms and Techniques, Springer, Berlin, Heidelberg, 287-302.</mixed-citation></ref><ref id="hanspub.26717-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Im, S., Kell, N., Kulkarni, J., et al. (2014) Tight Bounds for Online Vector Scheduling. 525-544.</mixed-citation></ref><ref id="hanspub.26717-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Hwang, H.C., Chang, S.Y. and Lee, K. (2004) Parallel Machine Scheduling under a Grade of Service Provision. Computers &amp; Operations Research, 31, 2055-2061. &lt;br&gt;https://doi.org/10.1016/S0305-0548(03)00164-3</mixed-citation></ref><ref id="hanspub.26717-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Glass, C.A. and Kellerer, H. (2007) Parallel Machine Scheduling with Job Assignment Restrictions. Naval Research Logistics (NRL), 54, 250-257. &lt;br&gt;https://doi.org/10.1002/nav.20202</mixed-citation></ref><ref id="hanspub.26717-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Ou, J., Leung, J.Y.T. and Li, C.L. (2008) Scheduling Parallel Machines with Inclusive Processing Set Restrictions. Naval Research Logistics (NRL), 55, 328-338. &lt;br&gt;https://doi.org/10.1002/nav.20286</mixed-citation></ref><ref id="hanspub.26717-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Li, W., Li, J. and Zhang, T. (2012) Two Approximation Schemes for Scheduling on Parallel Machines under a Grade of Service Provision. Asia-Pacific Journal of Operational Research, 29, 1250029.  
&lt;br&gt;https://doi.org/10.1142/S0217595912500297</mixed-citation></ref><ref id="hanspub.26717-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Liu, X., Li, W. and Zhang, X. (2018) Strategy-Proof Mechanism for Provi-sioning and Allocation Virtual Machines in Heterogeneous Clouds. IEEE Transactions on Parallel &amp; Distributed Systems, 99, 1650-1663.</mixed-citation></ref></ref-list></back></article>