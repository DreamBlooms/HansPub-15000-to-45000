<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2019.86045</article-id><article-id pub-id-type="publisher-id">SEA-33542</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20190600000_56541121.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  工业智能边缘计算中基于数据流相关性的计算卸载研究
  Research on Computing Offloading Based on data Stream Correlation in Industrial Intelligent Edge Computing
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>莹</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>逸飞</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>浙江理工大学信息学院，浙江 杭州</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>22</day><month>11</month><year>2019</year></pub-date><volume>08</volume><issue>06</issue><fpage>364</fpage><lpage>371</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  大数据时代背景下为满足工业物联网的高实时性需求，我们运用边缘计算和机器学习技术提出了一种工业智能边缘计算中基于数据流相关性的计算卸载方法。采用拓扑排序、决策树等方式寻求任务相关性，避免无关数据卸载、多任务场景下重复数据多次卸载及无序卸载导致的缓存过多，存储器容量不足等问题。本研究设计了两种调度算法，分别对应多任务决策所需特征数据重复率高和低的两种不同场景下所采用的计算卸载算法，保证了任务处理的实时性；此外本研究均严格控制在带宽约束下，保证了调度的可靠性。
   In order to meet the high real-time demand under the background of industrial Internet of Things in the era of big data, we propose a task offloading method based on data stream correlation in industrial intelligent edge computing based on edge computing and machine learning. Topological sorting, decision tree are adopted to seek task relevance, so as to avoid problems such as excessive cache and insufficient memory capacity caused by irrelevant data offloading, repeat data offloading multiple times and unordered offloading in multi-task scenarios. In this study, two scheduling algorithms are designed, respectively corresponding to two different scenarios of high and low repetition rate of characteristic data required by multi-task decision so as to ensure the real-time performance of task processing. In addition, this study is strictly controlled under the constraint of bandwidth to ensure the reliability of scheduling.
 
</p></abstract><kwd-group><kwd>边缘计算，机器学习，工业物联网，计算卸载, Edge Computing</kwd><kwd> Machine Learning</kwd><kwd> Industrial Internet of Things</kwd><kwd> Computation Offloading</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>工业智能边缘计算中基于数据流相关性的 计算卸载研究<sup> </sup></title><p>王莹，李逸飞</p><p>浙江理工大学信息学院，浙江 杭州</p><p>收稿日期：2019年11月27日；录用日期：2019年12月12日；发布日期：2019年12月19日</p><disp-formula id="hanspub.33542-formula5"><graphic xlink:href="//html.hanspub.org/file/12-2690395x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>大数据时代背景下为满足工业物联网的高实时性需求，我们运用边缘计算和机器学习技术提出了一种工业智能边缘计算中基于数据流相关性的计算卸载方法。采用拓扑排序、决策树等方式寻求任务相关性，避免无关数据卸载、多任务场景下重复数据多次卸载及无序卸载导致的缓存过多，存储器容量不足等问题。本研究设计了两种调度算法，分别对应多任务决策所需特征数据重复率高和低的两种不同场景下所采用的计算卸载算法，保证了任务处理的实时性；此外本研究均严格控制在带宽约束下，保证了调度的可靠性。</p><p>关键词 :边缘计算，机器学习，工业物联网，计算卸载</p><disp-formula id="hanspub.33542-formula6"><graphic xlink:href="//html.hanspub.org/file/12-2690395x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/12-2690395x7_hanspub.png" /> <img src="//html.hanspub.org/file/12-2690395x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>随着大数据的不断发展，数字化的思想逐步渗透到工业制造业中。工业4.0趋势 [<xref ref-type="bibr" rid="hanspub.33542-ref1">1</xref>] 就是将更多的物联网设备部署到工厂中，用算法取代人脑，用自动化设备取代人力，逐步实现工业智能化。然而，不可忽视的是随着联网设备的不断扩充，多用户多任务并行处理需求。传统集中式云计算已无法满足当下工业生产的实时性需求。边缘计算将部分计算卸载到边缘，在边缘端实现对数据流的简单计算或筛选 [<xref ref-type="bibr" rid="hanspub.33542-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.33542-ref3">3</xref>]，减轻云端计算及存储压力。同时由于计算位置上的变化，边缘设备更靠近用户端，可实现短时间内的有效交互，大大降低传输时延。边缘计算的出现为时间敏感型工业生产带来福音。</p><p>据IDC数据统计，到2020年将会有超过500亿的终端联网设备，超过50%的数据需要在网络边缘侧分析、处理与储存。边缘服务器往往是由较近的路由器，基站等设备构成，虽然能为云端解压，但受其有限的计算及存储能力限制，无法满足大型任务需求。针对目前多用户多任务并行处理的现况，必须有一套合理的计算卸载方案来保证边缘服务器计算的可靠性。</p><p>现有方案中，Yaozhong Song [<xref ref-type="bibr" rid="hanspub.33542-ref4">4</xref>] 等人基于QoS面向物联网任务提出了一种在边缘计算网络中定期分配传入任务的方法，增加了可以在边缘计算网络中处理的任务数量，然而其并没有考虑到任务之间的关联性，及任务之间的优先级关系。Feng Wei [<xref ref-type="bibr" rid="hanspub.33542-ref5">5</xref>] 等人面向移动边缘计算物联网设备之间分配资源提出了一种选择最低能耗优先的算法，充分考虑服务器资源及无线信道分配，使用户端到边缘端的任务分配更加科学。然而其并没有讨论带宽对分配方案的影响，也没有讨论任务间的相关性。Zhang D [<xref ref-type="bibr" rid="hanspub.33542-ref6">6</xref>] 等针对异构边缘计算设计了一种基于社交传感的任务分配方法，考虑了任务的动态性，然而其也没有考虑任务的关联性并且仅能用于某一单独的任务，无法满足多任务并存场景。Boutheina Dab [<xref ref-type="bibr" rid="hanspub.33542-ref7">7</xref>] 等面向边缘计算的多任务联合分配及资源分配提出基于多用户WiFi的MEC架构，满足任务延迟约束下移动边缘端的能量消耗最小，他们默认服务器接收所有数据，但由于边缘服务器计算能力存储能力有限，这一想法虽然能短期内使时延及能耗最小化，但在大数据任务中将很难实现。</p><p>现有关于边缘计算的计算卸载问题大多考虑任务截止时间，容量，计算能力等限制，根据指定优先级进行任务分配。工厂往往部署多个传感器收集不同的特征数据，利用机器学习决策树思想发现，任务中常存在很多决策无关的特征数据流，放弃无关数据的处理不仅可避免决策无关数据的传输开销，而且能减轻边缘端计算及存储压力，同时由于先到的处理优先级低的特征数据必须进行缓存等待优先级高的特征数据流到达，所以按特征数据流的优先级进行传输，可避免边缘服务器缓存过多导致容量不足的问题。</p><p>本文将基于边缘计算框架，联系机器学习算法和多数据流思想，对问题进行深入研究。</p></sec><sec id="s4"><title>2. 系统模型</title><p>智能边缘计算的架构如图1所示，考虑多个任务集合，每个任务都含有若干个特征数据流。多传感器作为用户端，各自接收数据组成一个特征数据流。云端根据多任务需求生成决策树，并将训练好的模型放置边缘服务器上 [<xref ref-type="bibr" rid="hanspub.33542-ref8">8</xref>] [<xref ref-type="bibr" rid="hanspub.33542-ref9">9</xref>]。各个边缘服务器依照自身计算能力和存储能力选择是否接收用户端的计算卸载请求。</p><p>图1. 工业智能边缘计算框架</p></sec><sec id="s5"><title>3. 问题描述</title><p>为满足当下工业生产实时性需要，考虑任务相关性，在MEC (Multi-Access Edge Computing)多接入边缘服务器计算能力存储能力限制下，设计满足多个任务并存场景的计算卸载方案。应用场景图如图2。</p><p>本文以多任务平均决策时间为优化目标 [<xref ref-type="bibr" rid="hanspub.33542-ref10">10</xref>] [<xref ref-type="bibr" rid="hanspub.33542-ref11">11</xref>]，首先对基于数据流相关性面向工业智能边缘计算的任务卸载方法进行建模。考虑 A = { a 1 , a 2 , ⋯ , a n } 为一个数量为n的任务集合，每个任务 a w 都含有 q n 个特征数据流，由 F m = { f 1 , f 2 , ⋯ , f q n } 表示，每个 f i ∈ F m 。 B i 表示特征 f i 调度到边缘服务器e上所需带宽， d i 表示特征数据流 f i 的数据量， f i 常用 [ B i , d i ] 表示。在不同计算调度方案中， f i 的卸载顺序不同，因此引入次序的概念，用字母m表示。 t s m 为第m个特征数据流传输开始时间， t e m 为第m个特征数据流传输结束时间。由下式表示：</p><p>图2. 应用场景图</p><p>t s m = { min { t e ( m − 1 ) } m &gt; 1 0 m = 1 t e m = { t s m + d i B i } (1)</p><p>用 T n = { T a 1 , T a 2 , ⋯ , T a n } 表示n个任务的对应决策时间，边缘服务器某一时刻j接收计算卸载请求的任务集合由 A j 表示。故由(1)可得多任务决策时间为：</p><p>T n = max { t e m }       ( a n ∈ A j ) (2)</p><p>因此，优化目标多个任务各自完成时间的平均值为：</p><p>T &#175; = 1 p ∑ a w ⊆ A j T a w         ( p = | A j | ) (3)</p><p>为保证调度方案可靠性，我们引入带宽约束， F b 表示并行计算的数据流集合：</p><p>∑ f i ∈ F b B i ≤ B (4)</p><p>因此，多任务计算卸载方法可以表示为：</p><p>min T &#175; = 1 P ∑ a w ⊆ A j T a w ( p = | A j | ) st . ∑ f i ∈ F b B i ≤ B</p></sec><sec id="s6"><title>4. 一种工业智能边缘计算中基于数据流相关性的任务卸载方法</title><p>一种工业智能边缘计算中基于数据流相关性的任务卸载方法，包括步骤：S1：MEC服务器依据不同任务的决策需求，生成相应的决策树，用户端收集特征数据，将同一任务对应的特征数据流归为一个特征数据流组；S2：用户端选择重复率最高的任务向服务器发送计算卸载请求；S3：服务器按重复率选择调度算法，接收任务所包含的特征数据组；S4：服务器计算任务的累积完成时间，以及计算此时多任务平均完成时间。</p><p>具体流程如图3：</p><p>1) 某一周期内用户端收集生产线数据并全部上传至MEC服务器上；</p><p>2) 服务器依据多任务的决策数据及结果，制定相应的决策树；</p><p>3) 将任务涉及到的特征编为一组；</p><p>a w = { f 1 , f 2 , ⋯ , f q n }</p><p>重复上述步骤，生成所有任务的决策树并整理。</p><p>4) 计算任意K个任务的特征数据流重复率。用u表示。</p><p>u = d q ∑ f i ⊆ A j d i − d q</p><p>5) 用户端选择重复率最高的任务向服务器发送计算卸载请求；</p><p>计算卸载请求为：</p><p>[ B i , d i , u ]</p><p>6) 计算K个特征数据流组中各个特征数据流的预期最小传输时间 d i B i ；</p><p>7) 如果重复率高于阈值选择调度算法为重复优先算法，则将选定的K个特征数据流组中重复特征数据流按预期最小传输时间由小到大进行排序，依次排入调度表中(满足带宽限制的情况下可并行传输)；</p><p>8) 当并行计算的某个特征数据流完成传输，则选择剩余特征数据流中预期最小传输时间最小的特征数据流排入调度表中(满足带宽限制)。若不满足带宽限制则安排预期最小传输时间第二小的特征数据流排入调度表中，以此类推，直到该服务器要接收的多特征数据流组中各个特征数据全部传输完成；</p><p>9) 如果重复率低于阈值选择调度算法为TMF算法(Topological Sort and Expected Minimum Completion Time First 拓扑排序及预期最小完成时间优先联合算法)，则把服务器即将接收K个特征数据流组中的特征，依据决策树模型进行拓扑排序，依次排入调度表中(满足带宽限制的情况下可并行传输)；</p><p>10) 当并行传输的某个特征完成传输，则选择剩余特征中拓扑排序靠前的特征排入调度表中。注意当遇到同一位次有多个特征可供选择时，将这些特征中预期最小传输时间的特征数据流排入调度表中(满足带宽限制)。若不满足带宽限制则将该位次下预期最小传输时间第二小的特征数据流排入调度表中，以此类推，直到该服务器把将要接收的多特征数据流组中全部特征数据流传输完成。</p><p>图3. 算法流程图</p></sec><sec id="s7"><title>5. 结果评估</title><p>用python对两种算法进行验证，随机模拟了10,000组数据，将重复优先算法和TMF算法和传统贪婪算法(预期最小完成时间优先)以及普通卸载进行对比(如图4)。实验表明(如表1)面向工业智能边缘计算多任务并存场景下，在服务器计算能力允许的范围内，考虑避免重复数据多次卸载的重复优先算法和TMF算法以及预期最小完成时间优先算法因为处理数据量的减少，都比普通卸载时间优化13.71%以上。</p><p>其中，在多任务重复率低于32.6%时，重复优先算法与预期最小完成时间最优效果相仿，都比随机卸载时间节省15%~17%。而TMF算法比随机卸载时间节省21.93%。故在多应用重复率较低时，我们可采用TMF算法进行计算卸载。在多任务重复率在67.1%~92.7%时TMF算法与预期最小完成时间最优效果相仿，都比随机卸载时间节省15%~16%。而重复优先算法效果较优，相比随机卸载时间节省22.32%。因此，灵活根据重复率选择重复优先算法和TMF算法在解决此类问题上具有更高的优化性，满足了工业生产的实时性及可靠性需要。</p><p>图4. 实验结果</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Comparison of algorithm</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >算法</th><th align="center" valign="middle" >最优解数目</th><th align="center" valign="middle" >平均优化率</th><th align="center" valign="middle" >预估算法最优区间(重复率)</th></tr></thead><tr><td align="center" valign="middle" >普通传输</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >NULL</td></tr><tr><td align="center" valign="middle" >预期最小完成时间优先</td><td align="center" valign="middle" >0.05%</td><td align="center" valign="middle" >13.71%</td><td align="center" valign="middle" >NULL</td></tr><tr><td align="center" valign="middle" >TMF</td><td align="center" valign="middle" >46.29%</td><td align="center" valign="middle" >21.93%</td><td align="center" valign="middle" >0%~32.6%</td></tr><tr><td align="center" valign="middle" >重复优先</td><td align="center" valign="middle" >53.66%</td><td align="center" valign="middle" >22.32%</td><td align="center" valign="middle" >67.1%~92.7%</td></tr></tbody></table></table-wrap><p>表1. 算法比较</p></sec><sec id="s8"><title>6. 结语</title><p>本文运用边缘计算和机器学习技术，结合多数据流相关性思想。基于传统贪婪算法(预期最小传输时间优先算法)，提出了一种工业智能边缘计算中基于数据流相关性的计算卸载方法，避免无关数据卸载、多任务场景下重复数据多次卸载及无序卸载导致的缓存过多，存储器容量不足等问题。仿真结果表明该方法相比传统算法具有更高的卸载效率，满足工业场景的实时性需求和可靠性需要。</p></sec><sec id="s9"><title>文章引用</title><p>王 莹,李逸飞. 工业智能边缘计算中基于数据流相关性的计算卸载研究Research on Computing Offloading Based on data Stream Correlation in Industrial Intelligent Edge Computing[J]. 软件工程与应用, 2019, 08(06): 364-371. https://doi.org/10.12677/SEA.2019.86045</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.33542-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Li, Z., Zhou, X. and Qin, Y. (2019) A Survey of Mobile Edge Computing in the Industrial Internet. 2019 7th Interna-tional Conference on Information, Communication and Networks (ICICN), Macao, 24-26 April 2019, 94-98. &lt;br&gt;https://doi.org/10.1109/ICICN.2019.8834959</mixed-citation></ref><ref id="hanspub.33542-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Khan, S., Paul, D., et al. (2018) Artificial Intelligence Frame-work for Smart City Microgrids: State of the Art, Challenges, and Opportunities. 2018 Third International Conference on Fog and Mobile Edge Computing (FMEC), Barcelona, 23-26 April 2018, 283-288. &lt;br&gt;https://doi.org/10.1109/FMEC.2018.8364080</mixed-citation></ref><ref id="hanspub.33542-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Tang, B., Chen, Z., Hefferman, G., et al. (2017) Incorporating Intelligence in Fog Computing for Big Data Analysis in Smart Cities. IEEE Transactions on Industrial Informatics, 13, 2140-2150.</mixed-citation></ref><ref id="hanspub.33542-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Song, Y., Yau, S.S., Yu, R., et al. (2017) An Approach to QoS-Based Task Distribution in Edge Computing Networks for IoT Applications. 2017 IEEE International Conference on Edge Computing (EDGE), Honolulu, 25-30 June 2017, 32-39. &lt;br&gt;https://doi.org/10.1109/IEEE.EDGE.2017.50</mixed-citation></ref><ref id="hanspub.33542-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Wei, F., Chen, S. and Zou, W. (2018) A Greedy Algorithm for Task Offloading in Mobile Edge Computing System. China Communications, 15, 149-157. &lt;br&gt;https://doi.org/10.1109/CC.2018.8543056</mixed-citation></ref><ref id="hanspub.33542-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Zhang, D., Ma, Y., Zheng, C., et al. () Cooperative-Competitive Task Allocation in Edge Computing for Delay-Sensitive Social Sensing. 2018 IEEE/ACM Symposium on Edge Computing (SEC), Seattle, 25-27 October 2018, 243-259. &lt;br&gt;https://doi.org/10.1109/SEC.2018.00025</mixed-citation></ref><ref id="hanspub.33542-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Dab, B., Aitsaadi, N. and Langar, R. (2019) A Novel Joint Offloading and Resource Allocation Scheme for Mobile Edge Computing. 2019 16th IEEE Annual Consumer Communications &amp; Networking Conference (CCNC), Las Vegas, NV, 11-14 January 2019, 1-2. &lt;br&gt;https://doi.org/10.1109/CCNC.2019.8651879</mixed-citation></ref><ref id="hanspub.33542-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Liu, C., Cao, Y., Luo, Y., et al. (2018) A New Deep Learning-Based Food Recognition System for Dietary Assessment on An Edge Computing Service Infrastructure. IEEE Transactions on Services Computing, 11, 249-261</mixed-citation></ref><ref id="hanspub.33542-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Ali, M., Anjum, A., Yaseen, M.U., et al. (2018) Edge Enhanced Deep Learning System for Large-Scale Video Stream Analytics. 2018 IEEE 2nd International Conference on Fog and Edge Computing (ICFEC), Washington, DC, 1-3 May 2018, 1-10. &lt;br&gt;https://doi.org/10.1109/CFEC.2018.8358733</mixed-citation></ref><ref id="hanspub.33542-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">黄鸿, 莫李思, 孙罡. 一种基于端口聚合流量的Coflow调度机制[J]. 通信技术, 2018, 51(7): 1594-1601.</mixed-citation></ref><ref id="hanspub.33542-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">马腾, 胡宇翔, 张校辉. 基于深度增强学习的数据中心网络Coflow调度机制[J]. 电子学报, 2018, 46(7): 84-91.</mixed-citation></ref></ref-list></back></article>