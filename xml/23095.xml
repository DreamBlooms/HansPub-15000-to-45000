<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AAM</journal-id><journal-title-group><journal-title>Advances in Applied Mathematics</journal-title></journal-title-group><issn pub-type="epub">2324-7991</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AAM.2017.69136</article-id><article-id pub-id-type="publisher-id">AAM-23095</article-id><article-categories><subj-group subj-group-type="heading"><subject>AAM20170900000_94250915.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于蚁群算法的赋权图点覆盖问题
  Vertex Covering Problem of Weighted Graphs Based on Ant Colony Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>吴</surname><given-names>佩雯</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>京荣</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>姬</surname><given-names>璐烨</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>兰州交通大学数理学院，甘肃 兰州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>12</month><year>2017</year></pub-date><volume>06</volume><issue>09</issue><fpage>1119</fpage><lpage>1125</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  
    点覆盖问题是一个在实际生活中具有重要意义的NP完全问题。蚁群算法为近年来新出现的一种仿生类随机寻优算法。文章运用蚁群算法研究了赋权图的最小点覆盖问题。给出了一个基于蚁群算法的近似算法，得出最小点覆盖问题的近似解。通过修改蚂蚁的状态转移概率公式，简化状态转移规则，建立了相应的数学模型，从而得出求解点覆盖的近似算法，最后进行了实例解析。实验结果表明该算法是行之有效的。
    Point covering problem is a NP complete problem in real life. Ant colony algorithm is a new bionic stochastic optimization algorithm emerging in recent years. In this paper, the minimum coverage problem of weighting graphs is studied by using the ant colony algorithm. An approximate algo-rithm based on ant colony algorithm is proposed to solve the minimum point covering problem. By modifying the state transition probability formula of ants and simplifying the state transition rules, the corresponding mathematical model is established, and then the approximate algorithm for solving the point coverage is obtained. Finally, an example is analyzed. The experimental results show that the algorithm is effective. 
  
 
</p></abstract><kwd-group><kwd>点覆盖，蚁群算法，状态转移规则，赋权图, Point Coverage</kwd><kwd> Ant Colony Algorithm</kwd><kwd> State Transition Rule</kwd><kwd> Weighted Graph</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于蚁群算法的赋权图点覆盖问题<sup> </sup></title><p>吴佩雯，陈京荣，姬璐烨</p><p>兰州交通大学数理学院，甘肃 兰州</p><p>收稿日期：2017年11月27日；录用日期：2017年12月14日；发布日期：2017年12月21日</p><disp-formula id="hanspub.23095-formula10"><graphic xlink:href="//html.hanspub.org/file/12-2620547x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>点覆盖问题是一个在实际生活中具有重要意义的NP完全问题。蚁群算法为近年来新出现的一种仿生类随机寻优算法。文章运用蚁群算法研究了赋权图的最小点覆盖问题。给出了一个基于蚁群算法的近似算法，得出最小点覆盖问题的近似解。通过修改蚂蚁的状态转移概率公式，简化状态转移规则，建立了相应的数学模型，从而得出求解点覆盖的近似算法，最后进行了实例解析。实验结果表明该算法是行之有效的。</p><p>关键词 :点覆盖，蚁群算法，状态转移规则，赋权图</p><disp-formula id="hanspub.23095-formula11"><graphic xlink:href="//html.hanspub.org/file/12-2620547x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/12-2620547x7_hanspub.png" /> <img src="//html.hanspub.org/file/12-2620547x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>对于无向图 G = ( V , E ) 的顶点覆盖是指它的顶点集 V 中存在一个子集 K ，在 G 中任给一条边都至少有一个端点存在 K 中。点覆盖 K 称为 G 的最小点覆盖当且仅当 G 中没有覆盖 K ′ 使得 | K ′ | &lt; | K | 。求图 G 的最小点覆盖即为图论中的典型问题——最小点覆盖问题(MVCP) [<xref ref-type="bibr" rid="hanspub.23095-ref1">1</xref>] 。最小点覆盖问题是组合优化中一个经典的NP完全问题 [<xref ref-type="bibr" rid="hanspub.23095-ref2">2</xref>] 。大量的现实生活中的问题都可以转化为最小点覆盖的问题来求其解决方法。例如：垃圾处理厂的最佳位置，通过监控尽可能少的点来监控一个大型网络，无线传感器网络节点设置问题等。最小点覆盖问题的研究虽然已有很长时间，但是至今人们还没有找到一个多项式算法，所以依然是国内外学者研究的热点问题之一。早期有边删除(Edge Deletion)算法 [<xref ref-type="bibr" rid="hanspub.23095-ref3">3</xref>] ，深度优先搜索(Depth First Search)算法 [<xref ref-type="bibr" rid="hanspub.23095-ref4">4</xref>] 等。Pitt给出了一个近似比为2的随机算法 [<xref ref-type="bibr" rid="hanspub.23095-ref5">5</xref>] 。</p><p>Avis等设计了几个算法，其整数规划的近似比为2，匹配算法的近似比为2，贪心算法的近似比为 Δ / 2 + 3 / 2 ，其中 Δ 为图的最大度 [<xref ref-type="bibr" rid="hanspub.23095-ref6">6</xref>] 。Delbot等改进了文献 [<xref ref-type="bibr" rid="hanspub.23095-ref7">7</xref>] 中的算法，并证明所得算法的近似比都不大于文献 [<xref ref-type="bibr" rid="hanspub.23095-ref7">7</xref>] 的结果 [<xref ref-type="bibr" rid="hanspub.23095-ref7">7</xref>] 。最小点覆盖问题的参数化算法在1993年被Buss等第一次提出，其时间复杂性为 O ( k n + 2 k k 2 k + 2 ) [<xref ref-type="bibr" rid="hanspub.23095-ref8">8</xref>] 。点覆盖问题的智能化算法是Khuri等在1994年提出的，其将最小加权点覆盖问题看成一个有约束的组合优化问题并且引入了遗传算法进行求解 [<xref ref-type="bibr" rid="hanspub.23095-ref9">9</xref>] 。Stefan等采用禁忌搜索和模拟退火相结合的混合算法来研究最小权点覆盖问题，其结果优于很多启发式逼近算法 [<xref ref-type="bibr" rid="hanspub.23095-ref10">10</xref>] 。周康等在闭环DNA算法中通过删除实验得到了最小点覆盖的补集，通过求其补集从而得到其最小点覆盖 [<xref ref-type="bibr" rid="hanspub.23095-ref11">11</xref>] 。吕健康等根据顶</p><p>点度特点以及贪婪算法的思想设计了混合贪婪算法，并证明了在最坏条件下的时间复杂度为 O ( | V | 2 ) [<xref ref-type="bibr" rid="hanspub.23095-ref12">12</xref>] 。郑光勇等针对最小点覆盖的特点设计了化学反应优化算法中的四个重要算子，将化学反应优化算法与求解最小点覆盖问题进行结合设计了一个新的近似算法 [<xref ref-type="bibr" rid="hanspub.23095-ref13">13</xref>] 。</p><p>蚁群优化算法(Ant Colony Optimization, ACO)是由Dorigo等人在1991年提出的一种源于大自然中生物世界的新的仿生类算法 [<xref ref-type="bibr" rid="hanspub.23095-ref14">14</xref>] 。作为一种通用性随机优化方法，它借鉴了昆虫王国中蚂蚁的觅食行为特性，通过蚂蚁的内部搜索机制，在一系列求解困难的组合优化问题中取得了显著成效，其具有鲁棒性、并行分布式计算、易与其他算法结合等特点。蚁群优化算法虽为近年来新兴的一种算法，但在多个领域中有着广泛应用，如通讯网络路由的自主选择、自动控制、路径选择、系统工程、图着色等领域 [<xref ref-type="bibr" rid="hanspub.23095-ref15">15</xref>] [<xref ref-type="bibr" rid="hanspub.23095-ref16">16</xref>] [<xref ref-type="bibr" rid="hanspub.23095-ref17">17</xref>] 。</p><p>本文通过修改蚁群算法的启发式函数和状态转移概率公式，得出了基于蚁群算法解决了点赋权图的最小点覆盖问题的一种近似算法。并对算法的有效性进行检验。</p></sec><sec id="s4"><title>2. 蚁群算法解决最小点覆盖问题的基本原理</title><p>蚁群优化算法与求解其他的组合优化问题进行比较，其在求解最小点覆盖问题中有着明显的差异，其差异可通过与旅行商问题(Travelling Salesman Problem, TSP)的算法比较看出 [<xref ref-type="bibr" rid="hanspub.23095-ref18">18</xref>] 。TSP问题中所要解决的问题是城市之间的一种点排列顺序，但是在MWVC案例中其顶点顺序并不是最重要的。在TSP问题中蚁群算法的启发式函数是静态的，它代表的是城市之间的距离，而城市之间的距离不发生改变故路径的计算方法不会改变。与此相反，在用蚁群算法解决最小权点覆盖问题时，启发式函数为权值和顶点临时度(已经在解决方案中包括但没有被其他点覆盖的边数)的比值。这个比值为动态变化的，因为当有更多的点被覆盖时，该点的临时度产生了变化。这两个差异导致的结果有两方面：一方面蚂蚁的信息素留在了顶点上；另一方面启发式函数是动态更新的。蚁群算法可用于解决启发式函数为动态的和解集是由其子集构成的这类问题。例如，集合划分、最大独立集和最小团、最大边填装等问题。</p><p>首先，用动态启发式函数来表示最小点覆盖问题，对问题进行简化。因为蚂蚁在搜索过程中可以从一个顶点移动到任何顶点，因此需作图 G 的完全连通图 G c = ( V , E c ) ，若该边在图 G 中则其边权值为1，反之为0。</p><p>定义 G c k = ( V , E c k ) ，这表示 k 个顶点加入到解集后的图，并定义相应的函数： ψ ( i , j ) = V a l u e ( E c k ( i , j ) )</p><p>定义动态启发式函数：</p><p>η j k = ∑ ( r , j ) ∈ E c ψ k ( r , j ) ω ( j ) (1)</p><p>在方程(1)中， ω ( j ) 指点 j 的权值，用方程(1)中启发函数 η j k 定义状态转移规则方程：</p><p>p j k = { 1 , q &gt; q 0 , j = max i ∈ A k { τ i η i k β } 0 , q &gt; q 0 , j ≠ max i ∈ A k { τ i η i k β } τ j η j k β ∑ r ∈ A K τ j η j k β , q ≤ q 0 (2)</p><p>在方程(2)中， q 0 为指定搜索率的标准参数， q 为随机变量，它决定每一步的选择类型。 A k 是可用顶点列表。不同于 T S P 的状态转移规则，它与最后被选择的点无关，可用 τ i 代替 τ i j 。</p><p>信息素修正规则的目的是在更短路径上分配更多的信息素。信息素修正规则与真实蚂蚁一致，不仅存储信息素还需要适当挥发他们。</p><p>在该系统中信息素更新规则如下。首先，在每个周期完成后，在当前最优解的顶点上留下的信息素强度得到加强。让顶点子集 V ′ c 成为当前最好的解决方案，在顶点 i 上留下的信息素将按照全局更新规则进行更新，如下所示：</p><p>τ i = { ( 1 − ρ ) τ i + ρ Δ τ i , i ∈ v ′ ( 1 − ρ ) τ i , otherwise (3)</p><p>Δ τ i = { 0 , i ∉ V ′ 1 ∑ j ∈ V ′ ω ( j ) , i ∈ V ′ (4)</p><p>ρ ∈ ( 0 , 1 ) 为一个模拟信息素强度蒸发率的参数。</p><p>局部信息素更新规则目的是避免解集陷入局部最优的状态，同时为短路径增加信息素。局部信息素的更新在每个步骤结束时进行。更新规则如下：</p><p>τ i = ( 1 − φ ) τ i + φ τ 0 (5)</p><p>τ 0 为信息素放在每个顶点的初始值。参数 φ 是规定的特殊局部更新规则的值。</p></sec><sec id="s5"><title>3. 算法设计</title><p>对赋权图 G = ( V , E ) ，做出图 G 的完全图 G c = ( V , E c ) ，使得图 G 的任意两点之间均有边相连。</p><p>Step1：定义连接函数 ψ k ：</p><p>ψ k ( i , j ) = { 1 , ( i , j ) ∈ E 0 , ( i , j ) ∈ E c − E</p><p>由此函数确定各边的连接值。</p><p>Step2：若蚂蚁 k 访问了 E c 中的某个点，则与该点相连的边连接值修改为0。即： ψ k ( i , j ) = 0 。</p><p>Step3：计算每一点的动态启发因子 η j k ：</p><p>η j k = ∑ ( r , j ) ∈ E c ψ k ( r , j ) ω (j)</p><p>其中 ω ( j ) 是 v j 的权值， ∑ ( r , j ) ∈ E c ψ k ( r , j ) 表示 E 中与 v j 相连而没有被覆盖的顶点连接值之和。</p><p>Step4：对局部信息素进行更新：</p><p>τ i = ( 1 − φ ) τ i + φ τ 0</p><p>由此可求出 max { τ i η j k β } 。</p><p>Step5：由状态转移公式计算出蚂蚁 k 选择下一顶点的概率：</p><p>p j k = { 1 , j = max i ∈ A K { τ i η j k β } 0 , j ≠ max i ∈ A K { τ i η j k β }</p><p>Step6：当完成一次环游时对全局信息素进行更新，更新函数：</p><p>τ i = { ( 1 − ρ ) τ i + ρ Δ τ i , i ∈ v ′ ( 1 − ρ ) τ i , otherwise</p><p>对于图 G 来说，当所有点的边连接值为0时，算法结束。即当蚂蚁完成所有搜索时，对于全部的点 i ，有 ∑ ( r , j ) ∈ E c ψ k ( r , j ) = 0 ，此时可得到一个点覆盖集 S k 。选择不同的初始点，得到不同的解集集。后选择总权值最小的点覆盖集即为图的最小点覆盖集。</p></sec><sec id="s6"><title>4. 算法实例</title><p>首先，做出原图的完全图。原图如图1所示，其完全图如图2所示。</p><p>其次，对算法中的参数进行赋值。探索率 q 0 = 0.1 ，蒸发率 φ = 0.1 ,   ρ = 0.1 ，对启发式的影响因素 β = 5 ，信息素的初始值 τ 0 = 1 / ( n ∑ j ∈ v ′ ω ( j ) ) 。</p><p>Step1：由连接函数 ψ k ( i , j ) = { 1 , ( i , j ) ∈ E 0 , ( i , j ) ∈ E c − E 给定各边的连接，蚂蚁1以 v 1 为出发点，有 S 1 = { v 1 } ；</p><p>Step2：用连接函数 ψ k ( i , j ) = 0 更新与点 v 1 关联边的连接值；</p><p>Step3：计算 τ i η j k β ，有 τ i η j k β ≠ 0 转Step4；</p><p>Step4：计算 max { τ i η j k β } = 0.001 ， j = 3 ，将其并入集合 S 1 ， S 1 = { v 1 , v 3 } ，转Step2；</p><p>Step2：用连接函数 ψ k ( i , j ) = 0 更新与点 v 3 关联边的连接值；</p><p>Step3：进行局部信息素更新，计算 τ i η j k β ，有 τ i η j k β ≠ 0 转Step4；</p><p>Step4：计算 max { τ i η j k β } = 0.002 ， j = 6 ，将其并入集合 S 1 ， S 1 = { v 1 , v 2 , v 6 } ，转Step2；</p><p>Step2：用连接函数 ψ k ( i , j ) = 0 更新与点 v 6 关联边的连接值；</p><p>Step3：进行局部信息素更新，计算 τ i η j k β ，有 τ i η j k β ≠ 0 转Step4；</p><p>Step4：计算 max { τ i η j k β } = 0.004 ， j = 5 ，将其并入集合 S 1 ， S 1 = { v 1 , v 3 , v 6 , v 5 } ，转Step2；</p><p>Step2：用连接函数 ψ k ( i , j ) = 0 更新与点 v 5 关联边的连接值；</p><p>Step3：进行局部信息素更新，计算 τ i η j k β ，有 τ i η j k β = 0 ，输出 S 1 = { v 1 , v 3 , v 5 , v 6 } ；</p><p>Step5：计算 | S 1 | = min j ∈ S 1 ω ( j ) = 13 ，算法停止。</p><p>Step6：一次环游完成，对全局信息素进行更新；</p><p>Step7：计算 S = min { S 1 , S 2 , ⋯ , S k , ⋯ , S n } ，输出最小点覆盖集 S 2 = { v 1 , v 2 , v 5 , v 3 } 。</p><p>计算结果如表1所示。</p></sec><sec id="s7"><title>5. 结束语</title><p>本文研究了蚁群算法在求解最小点覆盖中的应用。对蚁群算法的模型进行了改进，避免了局部收敛的问题，得到一个点覆盖问题的最优解，使算法简单、可行。</p><p>在现实生活中最小点覆盖问题是一个十分重要的并且具有现实意义的难题。蚁群算法是一种近年来新兴的仿生类算法。蚁群算法求解点覆盖问题与其他算法相比具有较好的性能。对于点数较多和较复杂</p><p>图1. 原图</p><p>图2. 完全图</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Calculated result</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >蚂蚁</th><th align="center" valign="middle" >初始点</th><th align="center" valign="middle" >点覆盖</th><th align="center" valign="middle" >点覆盖数</th><th align="center" valign="middle" >点赋权值</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >v 1</td><td align="center" valign="middle" >S 1 = { v 1 , v 3 , v 5 , v 6 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >13</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >v 2</td><td align="center" valign="middle" >S 2 = { v 1 , v 2 , v 5 , v 3 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >12</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >v 3</td><td align="center" valign="middle" >S 3 = { v 1 , v 3 , v 5 , v 6 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >13</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >v 4</td><td align="center" valign="middle" >S 4 = { v 1 , v 2 , v 3 , v 4 , v 5 }</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >18</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >v 5</td><td align="center" valign="middle" >S 5 = { v 1 , v 2 , v 3 , v 5 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >12</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >v 6</td><td align="center" valign="middle" >S 6 = { v 1 , v 3 , v 5 , v 6 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >13</td></tr></tbody></table></table-wrap><p>表1. 计算结果</p><p>的图，一般算法的时间复杂性较高，计算复杂。利用蚁群算法求解可通过增加蚂蚁数量来提高精度。从当前来看蚁群算法是求解图最小点覆盖的问题的一个较好算法。</p></sec><sec id="s8"><title>基金项目</title><p>国家自然科学基金项目：随机环境下公交优先控制理论与方法研究(61463026)；基于演化博弈理论的城市交通网络路径选择模型与算法研究(61463027)；甘肃省自然科学基金(216177)。</p></sec><sec id="s9"><title>文章引用</title><p>吴佩雯,陈京荣,姬璐烨. 基于蚁群算法的赋权图点覆盖问题 Vertex Covering Problem of Weighted Graphs Based on Ant Colony Algorithm[J]. 应用数学进展, 2017, 06(09): 1119-1125. http://dx.doi.org/10.12677/AAM.2017.69136</p></sec><sec id="s10"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.23095-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Johnson, D.S. (1974) Approximation Algorithms for Combinatorial Problems. JCSS, 9, 256-278.</mixed-citation></ref><ref id="hanspub.23095-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Karp, R.M. (1972) Reducibility among Combinatorial Problems. Plenum Press, New York, 85-100.  
https://doi.org/10.1007/978-1-4684-2001-2_9</mixed-citation></ref><ref id="hanspub.23095-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Garey, M.R. and Andjohnson, D. (1979) Computers and In-tractability. Freeman and Co., New York.</mixed-citation></ref><ref id="hanspub.23095-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Savage, C. (1982) Depth-First Search and the Vertex Cover Problem. Information Processing Letters, 14, 233-235.  
https://doi.org/10.1016/0020-0190(82)90022-9</mixed-citation></ref><ref id="hanspub.23095-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Pitt, L. (1985) A Simple Probabilistic Approximation Algo-rithm for Vertex Cover. Department of Computer Science, Yale University, New Haven.</mixed-citation></ref><ref id="hanspub.23095-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Avis, D. and Imamura, T. (2007) A List Heuristic for Vertex Cover. Operations Research Letters, 35, 201-204.  
https://doi.org/10.1016/j.orl.2006.03.014</mixed-citation></ref><ref id="hanspub.23095-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Delbot, F. and Andlaforest, C. (2008) A Better List Heuristic for Vertex Cover. Information Processing Letters, 107, 125-127. https://doi.org/10.1016/j.ipl.2008.02.004</mixed-citation></ref><ref id="hanspub.23095-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Buss, J.F. and Goldsmith, J. (1993) Nondeterminism within P. Springer Berlin Heidelberg, 480(3): 348-359.  
https://doi.org/10.1137/0222038</mixed-citation></ref><ref id="hanspub.23095-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Khuri, S. and Back, T. (1994) An Evolutionary Heuristic for the Minimum Vertex Cover Problem. Genetic Algorithms within the Framework of Evolutionary Computation, 86-90.</mixed-citation></ref><ref id="hanspub.23095-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Voß, S. and Fink, A. (2012) A Hybridized Tabu Search Approach for the Minimum Weight Vertex Cover Problem. Journal of Heuristics, 18, 869-876. https://doi.org/10.1007/s10732-012-9211-9</mixed-citation></ref><ref id="hanspub.23095-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">周康, 许进. 最小顶点覆盖问题的闭环DNA算法[J]. 计算机工程与应用, 2006, 20(9): 7-9.</mixed-citation></ref><ref id="hanspub.23095-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">吕健康, 张国基. 求一般图的最小顶点覆盖集问题的混合贪婪算法[J]. 科学技术与工程, 2010, 20(10): 4891-4895.</mixed-citation></ref><ref id="hanspub.23095-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">郑光勇, 李肯立, 潘果, 徐雨明. 化学反应优化算法求解最小顶点覆盖问题[J]. 小型微型计算机系统, 2015, 36(2): 301-305.</mixed-citation></ref><ref id="hanspub.23095-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Dorigo, M., Maniezzo, V. and Colorni, A. (1996) Ant System: Optimization by a Colony of Cooperating Agents. IEEE Transaction on Systems, Man, and Cybernetics-Part B, 26, 29-41. https://doi.org/10.1109/3477.484436</mixed-citation></ref><ref id="hanspub.23095-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">陈京荣, 俞建宁, 李引珍. 基于蚁群算法的多属性路径选择模型[J]. 系统工程, 2009, 27(5): 30-34.</mixed-citation></ref><ref id="hanspub.23095-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">陈烨. 带杂交算子的蚁群算法[J]. 计算机工程, 2001, 27(12): 74-76, 126.</mixed-citation></ref><ref id="hanspub.23095-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">何小峰, 马良 求解图着色问题的量子蚁群算法[J]. 运筹学学报, 2013, 2(17): 19-26.</mixed-citation></ref><ref id="hanspub.23095-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Shyu, S.J., Yin, P.-Y. and Lin, B.M.T. (2004) An Ant Colony Optimization Algorithm for the Minimum Weight Vertex Cover Problem. Annals of Operations Research, 131, 283-304.  
https://doi.org/10.1023/B:ANOR.0000039523.95673.33</mixed-citation></ref></ref-list></back></article>