<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2020.109175</article-id><article-id pub-id-type="publisher-id">CSA-37818</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20200900000_49567524.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于邻接点求解最大团问题
  Solving Maximum Clique Problem Based on Adjacent Points
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>丽娟</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>莹港</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>杨</surname><given-names>燕</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>鑫楷</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>云南大学，云南 昆明</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>02</day><month>09</month><year>2020</year></pub-date><volume>10</volume><issue>09</issue><fpage>1655</fpage><lpage>1662</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   由于最大团问题(maximum clique problem, MCP)的复杂性、挑战性，以及在数据挖掘等各个领域的广泛应用，使得在计算机科学领域求解MCP问题具有非常重要的意义。本文通过介绍最大团问题以及研究意义，描述了最大团问题的研究现状，指出目前精确性算法和启发式算法解决最大团问题存在的不足，根据最大团中两两节点间均有边相连的性质提出了基于邻接点求解最大团算法，并论证该算法的正确性和完整性，最后将此算法应用于包含任意节点求其最大团的问题。 The maximum clique problem (MCP) is a significant problem in computer science field because of its complexity, challenging and extensive applications in data mining and other fields. This paper first briefly introduces the maximum clique problem and its research significance, then describes the research status of the maximum clique problem, and points out the deficiencies of the current deterministic algorithm and heuristic algorithm to solve the maximum clique problem. An algorithm for solving maximum clique based on adjacent points is presented according to the nature of edge connection between two nodes in the maximum clique. Based on the nature of edge connection between two nodes in the maximum clique, an algorithm for solving the maximum clique based on adjacent points is proposed, and its correctness and integrity are demonstrated. Finally, the algorithm is applied to the problem of finding the maximum clique containing any node. 
  
 
</p></abstract><kwd-group><kwd>最大团问题(MCP)，邻接点，NP完全问题, Maximum Clique Problem</kwd><kwd> Adjacency Point</kwd><kwd> NP Complete Problem</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>由于最大团问题(maximum clique problem, MCP)的复杂性、挑战性，以及在数据挖掘等各个领域的广泛应用，使得在计算机科学领域求解MCP问题具有非常重要的意义。本文通过介绍最大团问题以及研究意义，描述了最大团问题的研究现状，指出目前精确性算法和启发式算法解决最大团问题存在的不足，根据最大团中两两节点间均有边相连的性质提出了基于邻接点求解最大团算法，并论证该算法的正确性和完整性，最后将此算法应用于包含任意节点求其最大团的问题。</p></sec><sec id="s2"><title>关键词</title><p>最大团问题(MCP)，邻接点，NP完全问题</p></sec><sec id="s3"><title>Solving Maximum Clique Problem Based on Adjacent Points</title><p>Lijuan Zhang, Yinggang Wang, Yan Yang, Xinkai Wang</p><p>Yunnan University, Kunming Yunnan</p><p><img src="//html.hanspub.org/file/14-1541860x4_hanspub.png" /></p><p>Received: Sep. 7<sup>th</sup>, 2020; accepted: Sep. 18<sup>th</sup>, 2020; published: Sep. 25<sup>th</sup>, 2020</p><p><img src="//html.hanspub.org/file/14-1541860x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>The maximum clique problem (MCP) is a significant problem in computer science field because of its complexity, challenging and extensive applications in data mining and other fields. This paper first briefly introduces the maximum clique problem and its research significance, then describes the research status of the maximum clique problem, and points out the deficiencies of the current deterministic algorithm and heuristic algorithm to solve the maximum clique problem. An algorithm for solving maximum clique based on adjacent points is presented according to the nature of edge connection between two nodes in the maximum clique. Based on the nature of edge connection between two nodes in the maximum clique, an algorithm for solving the maximum clique based on adjacent points is proposed, and its correctness and integrity are demonstrated. Finally, the algorithm is applied to the problem of finding the maximum clique containing any node.</p><p>Keywords:Maximum Clique Problem, Adjacency Point, NP Complete Problem</p><disp-formula id="hanspub.37818-formula10"><graphic xlink:href="//html.hanspub.org/file/14-1541860x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/14-1541860x7_hanspub.png" /> <img src="//html.hanspub.org/file/14-1541860x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>在无向图G = (V, E)中，团(clique)指图G的一个完全子图，完全子图是指在图内节点之间均有边相连。最大团问题旨在给定的图G中找出一个或若干个团，团内所包含的节点数是最多的。最大团问题在生物信息学、编码理论、计算机视觉、组合拍卖、经济学分析、社会网络分析等实际问题中，存在着广泛的应用，与最大独立集、最小顶点覆盖、图染色等其他经典的NP难度问题也密切相关。</p><p>在已有求解最大团问题的算法中，根据求解方式及结果精确度的不同主要被分为两种：精确性算法和启发式算法。启发式算法是以牺牲准确性来达到提高求解速度的目的，而精确性算法采用对所有可能解进行保留的方法，从而保证了所求解为全局最优。虽然在理论的角度上分析，对所有可能解进行保留验证对比的方法使得精确性算法在时间复杂度上居高不下，但近年来的研究进步使得精确性算法的实际求解能力得到显著提升。</p><p>本文研究基于邻接点的最大团精确性算法。论文紧紧围绕最大团中两两节点间均有边相连的性质展开，具体组织结构如下：第二部分介绍关于求解最大团的研究现状：接着对最大团问题相关概念进行介绍，并由最大团的性质提出一种求解最大团问题的算法及并进行算法示例；然后证明基于邻接点求解最大团问题的算法具有正确性及完整性；并利用本文所提出的基于邻接点求解最大团的方法实际应用于求包含任意节点的最大团；最后总结全文并阐述未来工作。</p></sec><sec id="s6"><title>2. 研究现状</title><p>求解最大团问题在多项式时间内可以转化为其他问题，然而，由于任意图上的最大团问题是一个单项式时间算法，现有的多项式算法主要集中在一些特殊图上——如处处h可断图 [<xref ref-type="bibr" rid="hanspub.37818-ref1">1</xref>]、循环图 [<xref ref-type="bibr" rid="hanspub.37818-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.37818-ref3">3</xref>]、无爪图 [<xref ref-type="bibr" rid="hanspub.37818-ref4">4</xref>] 等。</p><p>现有的求解最大团问题的算法主要分为两种：精确性算法和启发式算法。最初提出求解最大团问题时，研究人员的主要研究方向为精确性算法，最早的精确性算法(Exact algorithm)——枚举法于1957年由Hararv和Ross提出 [<xref ref-type="bibr" rid="hanspub.37818-ref5">5</xref>]，随后1981年，Tsouros [<xref ref-type="bibr" rid="hanspub.37818-ref6">6</xref>] 引进深度优先来解决时间复杂度太高的问题，结果证明取得了一定的效果，而后来又基于枚举法提出了分支定界法，分支定界法明确只求得图中的最大团，避免产生冗余的候选最大团，因此采用分支定界法求解最大团的关键在于找到较好的上界、下界以及确定的分支策略，在很大程度上改善了算法的时间复杂度以及空间质量。</p><p>随着对最大团问题研究的深入以及图规模的增长，精确性算法因其求解时间长效率低，启发式算法凭借其能够在较短的时间里得到近似解获得研究学者们的青睐，经典的启发式算法包括：蚂蚁算法 [<xref ref-type="bibr" rid="hanspub.37818-ref7">7</xref>]、遗传算法 [<xref ref-type="bibr" rid="hanspub.37818-ref8">8</xref>]、神经网络 [<xref ref-type="bibr" rid="hanspub.37818-ref9">9</xref>]、模拟退火 [<xref ref-type="bibr" rid="hanspub.37818-ref10">10</xref>] 和禁忌搜索 [<xref ref-type="bibr" rid="hanspub.37818-ref11">11</xref>] 等。</p><p>但启发式算法得到的结果只是近似解，并不适用于挖掘精确结果的情况。而近年来，精确性算法凭借其结果完全性、准确性的特点依旧是学者们的主要研究方向之一。2003年Tomita和Seki等人提出了MCQ算法 [<xref ref-type="bibr" rid="hanspub.37818-ref12">12</xref>]，MCQ算法是基于近似顶点染色的分支限界算法，其顶点染色不仅用于团上界值的估计，分支顶点的排列顺序也依赖于顶点染色的结果。MCQ采用顺序顶点染色方法，在搜索树的每个节点上对候选顶点以预先排列好的顺序，逐一为每个顶点分配其能够获得的最小颜色编号。如果染色数上界不能达到完全剪枝的目的，则所有的候选节点按照其获得的颜色编号由小到大排列(相同颜色编号的顶点排列在一起)。Tomita的实验表明，MCQ在性能上显著地超越了同期最好的其它算法。而后基于MCQ算法改进提出的MCR算法 [<xref ref-type="bibr" rid="hanspub.37818-ref13">13</xref>] 也进一步提升了算法的性能，利用Carraghan和Pardalos提出的退化顺序作为初始顶点排列顺序。2007年Konc和Janezic延续了MCQ算法的基本框架，在顶点的排列顺序上进行了改进 [<xref ref-type="bibr" rid="hanspub.37818-ref14">14</xref>]。沿着MCQ、MCR的算法思路，Tomita等五位研究者在2010年提出了更加高效的MCS算法 [<xref ref-type="bibr" rid="hanspub.37818-ref15">15</xref>]。MCS算法引入了RE-NUMBER程序，对部分已染色的顶点进行重新调整，以进一步减少分支顶点数量。2013年Li和Fang等提出了IncMaxCLQ中，引入了被称为渐进上界的线性时间复杂度上界计算方法 [<xref ref-type="bibr" rid="hanspub.37818-ref16">16</xref>]。2015年Segunda等将MaxSAT推理的思想融入到BBMC算法中，提出了改进的BBMCX算法 [<xref ref-type="bibr" rid="hanspub.37818-ref17">17</xref>]。与Li等人的在MaxCLQ中使用的MaxSAT推理不同，BBMCX算法将MaxSAT推理限定在最多三个颜色分类中。Segunda等把运用MaxSAT推理获得的上界称为亚染色数界。实验表明集合了亚染色数界的BBMCX算法，在搜索树大小和执行时间上比其前身BBMC算法有了进一步的改进。</p></sec><sec id="s7"><title>3. 最大团问题及基于邻接点求解最大团算法</title><sec id="s7_1"><title>3.1. 最大团问题描述</title><p>给定无向图G = (V, E)，其中V为节点集；E为边集。若 U ⊆ V ，且对任意两个节点 u , v ∈ U 有 ( u , v ) ∈ E ，则称U是G完全子图。</p><p>团是指图的节点集的一个子集，使得其导出子图为完全子图，如果一个团不是其他任何团的子集，则称该团为极大团。一个图中含有节点数最多的极大团称为该图的最大团。</p><p>本文是基于邻接点求解最大团问题的，对于邻接点有以下定义：若节点u和v之间有边相连，则节点u和v互为邻接点。表1为本文最大团问题所需符号表示。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Symbolic representation required for maximum clique proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >符号</th><th align="center" valign="middle" >含义</th></tr></thead><tr><td align="center" valign="middle" >G</td><td align="center" valign="middle" >给定所求的图(一般为无向无权图)</td></tr><tr><td align="center" valign="middle" >V</td><td align="center" valign="middle" >图G的节点集合</td></tr><tr><td align="center" valign="middle" >E</td><td align="center" valign="middle" >图G的边集合</td></tr><tr><td align="center" valign="middle" >C</td><td align="center" valign="middle" >图G中的团</td></tr><tr><td align="center" valign="middle" >N(v)</td><td align="center" valign="middle" >节点v的邻接节点集合</td></tr><tr><td align="center" valign="middle" >IN(v)</td><td align="center" valign="middle" >N(v)与其中各节点邻接点集的交集</td></tr><tr><td align="center" valign="middle" >Maximal-Clique[v]</td><td align="center" valign="middle" >包含节点v的极大团集合</td></tr><tr><td align="center" valign="middle" >Maximal-Clique[k]</td><td align="center" valign="middle" >图G中含k个节点的极大团集合，k值随循环变化</td></tr><tr><td align="center" valign="middle" >Maximum-Clique(G)</td><td align="center" valign="middle" >图G中最大团的集合</td></tr></tbody></table></table-wrap><p>表1. 最大团问题所需符号表示</p></sec><sec id="s7_2"><title>3.2. 基于邻接点求解最大团问题算法基本思想</title><p>由最大团的性质可知，假设无向图中包含一节点v，则节点v的邻接点可能与节点v共同组成最大团，根据此性质可以提出这么一个想法：v的所有邻接点集合 N ( v ) = { v i , ⋯ , v j } (1 ≤ i ≤ n，n为图G中的节点数)内存在节点它们之间任意两点之间都存在边相连，那么节点v与这些节点组成的图必定在包含节点v的极大团中。</p><p>由于最大团内任意节点之间均有边相连，则可在其中任意一个的邻接点集中找到其他组成最大团的节点。</p><p>基于以上，提出了一种基于邻接点的基本算法，如算法1所示。</p><p>算法1 基于邻接点求解最大团</p><p>输入：无向图G = (V, E)。</p><p>输出：Maximum-Clique(G)：图G中最大团的。</p><p>变量：Maximal-Clique[k]：图G中含k个节点的极大团集合，求解过程中存储当前已经得到的极大团序列。</p><p>步骤：</p><p>1. 对利用邻接矩阵对图G中的节点及边信息进行存储。</p><p>2. 将节点v<sub>i</sub>与其邻接点集合N(v<sub>i</sub>)中的各节点分别组成C<sub>1</sub>，此时Maximal-Clique[k] = C<sub>1</sub> (k = 2)。</p><p>3. 若N(v<sub>i</sub>)与其中各节点邻接点集的交集IN(v<sub>i</sub>) ≠ ∅，则将IN(v<sub>i</sub>)内各节点与对应C<sub>1</sub>分别组成C<sub>2</sub>，此时Maximal-Clique[k] = C<sub>2</sub> (k = 3)，并删除原先较小的Maximal-Clique[<xref ref-type="bibr" rid="hanspub.37818-ref2">2</xref>]。</p><p>4. 重复步骤3，直到交集IN(v<sub>i</sub>) = ∅。</p><p>5. 此时Maximum-Clique(G) = Maximal-Clique[k]。</p></sec><sec id="s7_3"><title>3.3. 算法示例</title><p>图1为所需求解最大团的无向图，对图1进行步骤1、2的操作。</p><p>图1. 所需求解无向图</p><p>根据算法，得到各节点的邻接表，此时得到的极大团如下所示：</p><p>C<sub>1</sub> = {(1, 2), (1, 3), (2, 3), (2, 12), (3, 4), (3, 9), (3, 11), (3, 12), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (6, 7), (7, 8), (8, 9), (8, 10), (9, 10), (9, 12)}。</p><p>第二次递归，判断组成当前Maximal-Clique[k]各v<sub>i</sub>的N(v<sub>i</sub>)中是否存在交集，若存在则加入当前极大团得到较大的Maximal-Clique[k]，第二次递归结果图2所示：</p><p>图2. 包含3个节点的极大团</p><p>第三次递归，在构成Maximal-Clique[<xref ref-type="bibr" rid="hanspub.37818-ref3">3</xref>]的各节点的N(v<sub>i</sub>)中寻找交集，得到图3极大团：</p><p>图3. 包含4个节点的极大团</p><p>此时得到的极大团包含节点数最多，即为所求的最大团。</p></sec></sec><sec id="s8"><title>4. 算法的正确性和完整性</title><p>算法正确性的意义是算法的结果图一定是极大团，且结果图中包含的节点数一定是最多的。算法完整性的意义是当包含节点数最多的极大团不止一个时，算法所求的结果中一定包含所有的节点最多的极大团。</p><p>引理1 对于任意的一个图，算法所求的结果图是团。</p><p>证明1) 对于任意的一个图G，经过一次递归后得到结果图Maximal-Clique[<xref ref-type="bibr" rid="hanspub.37818-ref2">2</xref>]，其中的结果图的节点集一定都包含于图G节点集，此时结果图Maximal-Clique都为团。</p><p>2) 假设当子图G的结果图Maximal-Clique为团，根据算法后续递归Maximal-Clique[k]中的节点都是图G中的节点，并且Maximal-Clique[k]一定为完全子图。</p><p>综合证明1)和2)，根据数学归纳法可以得出——对于任意的一个图，基于邻接点求解的结果图必定是团。</p><p>引理2对于任意的一个图，所得到的团是极大团且一定包含所有的极大团。</p><p>证明在此算法图G中的点表示为v (图中各节点)和N(v) (各节点的邻接点集)。对于v，在算法开始时就需要遍历各节点以获得邻接点集，所以不会存在丢失任意节点的邻接点集。对于N(v)，各节点都会通过邻接表存储其邻接点，因此对于任意节点其邻接点都不会丢失。</p><p>上面已经证明，在图G中包含任何节点的团中没有遗漏节点，也就是说，得到的团是一个极大团。此外，在相应的子图中可以找到包含图中任何节点的团，即它包含了所有的极大团。因此，对于任何一个图，结果图都是完备的，也就是说，结果图不仅是一个极大团，而且它包含了所有的极大团。</p><p>引理3最大团就是在极大团中含有节点数最多的一个或若干个。</p><p>证明极大团是指团内任意节点间均有边相连，且不是任何一个团的子集，而最大团则是含有节点数最多的完全子图，所以可知含有节点数最多的极大团就是最大团。</p><p>定理4基于邻接点求解最大团问题的方法是正确的。</p><p>证明由上述证明首先可知本文提出的算法对于任何求解的无向图，最后得到的结果一定是团。然后根据算法的遍历过程可知，所求结果一定是极大团，且包含所有的极大团。最后可以证明含有节点数最多的极大团就是最大团。由此可以证明算法是正确的。</p><p>定理5基于邻接点求解最大团问题是完整的。</p><p>证明根据算法的步骤3及步骤4，算法通过遍历当前组成极大团节点的邻接点来找到共同的邻接点，从而将共同邻接点加入到极大团中组成新的极大团，则可知包含图中任意一个节点的团均可以在对应的子图中找到，由此可知算法不会遗漏任何极大团，算法求解最大团是完整的。</p></sec><sec id="s9"><title>5. 求包含任意节点的最大团</title><p>与大多求解最大团的算法相比，本算法的特点是基于节点逐渐加入邻接节点构成极大团，从而得到最大团，且不会漏掉任何一个极大团，所以算法正确性较高。</p><p>此算法第一步是得到每个节点的邻接链表，由此我们可以提出求解包含任意指定节点的最大团的应用。应用具体方式方法与本算法的区别只是在开始时就指定任意一个节点，此时定义Maximal-Clique[v]表示含有节点v的极大团，具体步骤如下：</p><p>1) 得到指定节点v的邻接链表N(v)；</p><p>2) 求v邻接链表的各节点的邻接表N(v<sub>i</sub>)；</p><p>3) v与其N(v)的各节点组成Maximal-Clique[v-2]；</p><p>4) 判断 N ( v ) ∩ N ( v i ) ≠ ∅ 是否成立，若成立则将交集中的节点加入得到Maximal-Clique[v-3]；</p><p>5) 重复4)直到 N ( v ) ∩ N ( v i ) = ∅ ；</p><p>6) 此时包含节点数最多的极大团即是所要求的包含指定节点v的最大团。</p><p>以图1为例，指定求解包含节点5的最大团的过程如下：</p><p>1) 节点5的邻接链表N(5) = {4, 6, 7, 8}；</p><p>2) 得到N(4) = {3, 5, 6, 7}，N(6) = {5, 6, 7}，N(7) = {4, 5, 6, 8}，N(8) = {5, 7, 9, 10}；</p><p>3) 得到包含节点5的Maximal-Clique[5-2] = {(5, 4), (5, 6), (5, 7), (5, 8)}；</p><p>4) N(5)∩N(4) = {6, 7}，N(5)∩N(6) = {4, 7}，N(5)∩N(7) = {4, 6, 8}，N(5)∩N(8) = {7}。将交集中的节点加入对应的Maximal-Clique[5-2]得到新的Maximal-Clique[5-3]，如图4所示。</p><p>图4. 包含节点5的3-极大团</p><p>5) 递归最终求得所需的包含节点5的最大团，结果为图5。</p><p>图5. 包含节点5的最大团</p></sec><sec id="s10"><title>6. 总结和未来工作</title><p>本文根据最大团内两两节点间均有边相连的性质，提出了一种求解最大团问题的算法，并将该算法应用到求解包含任意节点的最大团问题当中。下一步的工作将在本文的基础上，将关联分析中的问题转化为解决图论中的问题，并将求解最大团问题应用于关联规则挖掘步骤当中。</p></sec><sec id="s11"><title>基金项目</title><p>云南省教育厅科学研究基金项目，项目编号：2019J0008；2020J0002。云南省科技厅面上项目，项目编号：202001BB050063。</p></sec><sec id="s12"><title>文章引用</title><p>张丽娟,王莹港,杨 燕,王鑫楷. 基于邻接点求解最大团问题Solving Maximum Clique Problem Based on Adjacent Points[J]. 计算机科学与应用, 2020, 10(09): 1655-1662. https://doi.org/10.12677/CSA.2020.109175</p></sec><sec id="s13"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.37818-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">贾晓峰, 朱必文. 一类图中的最大团[J]. 系统科学与数学, 1998, 8(3): 226-233.</mixed-citation></ref><ref id="hanspub.37818-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">马红平, 贾晓峰. 一类循环图中的最大团[J]. 华北工学院学报, 2001, 22(5): 384-386.</mixed-citation></ref><ref id="hanspub.37818-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">黄培铣, 邓国勋, 王化等. 一类循环图的最大团与最大独立集[J]. 广西师范大学(自然科学版), 1992, 10(1): 12-15.</mixed-citation></ref><ref id="hanspub.37818-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">戎文晋, 贾晓峰. 关于无爪图最大团数的一个估计[J]. 太原理工大学学报(自然科学版), 2002, 33(6): 676-677.</mixed-citation></ref><ref id="hanspub.37818-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Adleman, L.M. (1994) Molecular Computa-tion of Solution to Combinatorial Optimization. Science, 226, 1021-1024. 
&lt;br&gt;https://doi.org/10.1126/science.7973651</mixed-citation></ref><ref id="hanspub.37818-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Loukakis, E. and Tsouros, C. (1981) A Depth First Search Algorithm to Generate the Family of Maximal Independent Sets of a Graph Lexicographically. Computing, 27, 349-366. &lt;br&gt;https://doi.org/10.1007/BF02277184</mixed-citation></ref><ref id="hanspub.37818-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Enet, S. and Solnon, C. (2003) Searching for Maximum Cliques with Ant Colony Optimization. Applications of Evolutionary Computing. Springer, Berlin Heidelberg, 236-245. &lt;br&gt;https://doi.org/10.1007/3-540-36605-9_22</mixed-citation></ref><ref id="hanspub.37818-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Furtado, P. and Madeira, H. (2000) Vmhist: Efficient Multidimen-sional Histograms with improved Accuracy. Proceedings of the 2nd International Conference on Data Warehousing and Knowledge Discovery (DaWak 2000), London, 4-6 September 2000, 431-436. &lt;br&gt;https://doi.org/10.1007/3-540-44466-1_44</mixed-citation></ref><ref id="hanspub.37818-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Srinivas, M.A., Gardner, P.C. and Ballard, D.H. (1987) Graph Problems and Connectionist Architectures. Technical Report TR 167, University of Rochester, Rochester.</mixed-citation></ref><ref id="hanspub.37818-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Geng, X., Xu, J., Xiao, J., et al. (2007) A Simple Simulated Annealing Algorithm for the Maximum Clique Problem. Information Sciences, 177, 5064-5071. &lt;br&gt;https://doi.org/10.1016/j.ins.2007.06.009</mixed-citation></ref><ref id="hanspub.37818-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Aarts, E. and Korst, J. (1989) Simulated Annealing and Boltzmann Machines, John Wiley&amp; Sons, Chichester.</mixed-citation></ref><ref id="hanspub.37818-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Tomita, E. and Seki, T. (2003) An Efficient Branch-and-Bound Algorithm for Finding a Maximum Clique. Proceedings of Discrete Mathematics and Theoretical Computer Science, 2731, 278-289. 
&lt;br&gt;https://doi.org/10.1007/3-540-45066-1_22</mixed-citation></ref><ref id="hanspub.37818-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Tomita, E. and Kameda, T. (2007) An Efficient Branch-and-Bound Algorithm for Finding a Maximum Clique with Computational Experiments. Journal of Global Optimization, 37, 95-111. 
&lt;br&gt;https://doi.org/10.1007/s10898-006-9039-7</mixed-citation></ref><ref id="hanspub.37818-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Konc, J. and Janezic, D. (2007) An Improved Branch and Bound Algorithm for the Maximum Clique Problem. Communications in Mathematical and in Computer Chemistry, 58, 569-590.</mixed-citation></ref><ref id="hanspub.37818-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Tomita, E., Sutani, Y., Higashi, T., et al. (2010) A Simple and faster Branch-and-Bound Algorithm for Finding a Maximum Clique. Proceedings of WALCOM: Algorithms and Computation, 4th International Workshop, WALCOM 2010, Dhaka, 10-12 February 2010, 191-203. &lt;br&gt;https://doi.org/10.1007/978-3-642-11440-3_18</mixed-citation></ref><ref id="hanspub.37818-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Li, C.M., Fang, Z.W. and Xu, K. (2013) Combining MaxSAT Reasoning and Incremental Upper Bound for the Maximum Clique Problem. 2013 IEEE 25th International Conference on Tools with Artificial Intelligence, Herndon, 4-6 November 2013, 939-946. &lt;br&gt;https://doi.org/10.1109/ICTAI.2013.143</mixed-citation></ref><ref id="hanspub.37818-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">San Segundo, P., Nikolaev, A. and Batsyn, M. (2015) Infra-Chromatic Bound for Exact Maximum Clique Search. Computers &amp; Operations Research, 64, 293-303. &lt;br&gt;https://doi.org/10.1016/j.cor.2015.06.009</mixed-citation></ref></ref-list></back></article>