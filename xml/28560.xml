<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2019.91016</article-id><article-id pub-id-type="publisher-id">CSA-28560</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20190100000_39386679.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于HBase的电动葫芦能测数据管理系统设计
  Design of Data Management System for Electric Hoist Energy Efficiency Measurement Based on HBase
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>梅</surname><given-names>俊</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>松雷</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>章</surname><given-names>国宝</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>东南大学自动化学院，江苏 南京</addr-line></aff><aff id="aff3"><addr-line>江苏省特种设备安全监督检验研究院无锡分院，江苏 无锡</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>01</month><year>2019</year></pub-date><volume>09</volume><issue>01</issue><fpage>132</fpage><lpage>142</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   针对影响电动葫芦能效的因素属于多维关系矩阵，为了便于分析能效数据、建立统计模型以及指定能效分级标准等，本文提出了基于HBase存储多维因素数据的后端数据管理系统设计方案，运用优化配置的MySQL以及Redis分别存储常规数据以及热点数据。本文设计后端系统结合服务化与微服务的优点，采用Spring Boot + MyBatis架构，按功能划分为公共模块子系统(权限、消息、日志、配置、文档等)与业务子系统(架构、任务调度、RPC、部署等)，在保证健全性的同时，使得系统耦合度最低，可扩展性得到保障。最后，后台压力测试、数据库性能测试、HBase性能对比测试的结果展现出了管理系统的优化设计效果，系统可满足不同型号电动葫芦多种测试条件的能效检测的信息管理需求，为能效数据分析提供支持。 The factors affecting the energy efficiency of electric hoist belong to the multidimensional relation-ship matrix. For subsequent data analysis, statistical model and energy efficiency grading standard, this paper proposes a web data management system design using HBase to store multi-dimensional factor data. Simultaneously, MySQL and Redis are used to store regular data and hotspot data respectively. Combining the advantages of service and micro-services, the web back-end system in this paper adopts the SSM architecture, and divides the functions into common module subsystems (permissions, messages, logs, configurations, documents, etc.) and business subsystems (architecture, task scheduling, RPC, deployment, etc.). While ensuring soundness, the system coupling degree is the lowest and the scalability is guaranteed. Finally, the results of back-end system stress testing, database performance testing and HBase performance comparison testing show the optimal design effect of the management system. The system can meet the information management requirements of energy efficiency testing of various types of electric hoist in various conditions, and provide support for energy efficiency data analysis. 
  
 
</p></abstract><kwd-group><kwd>数据采集，后台服务，存储优化，HBase, Data Collection</kwd><kwd> Web Services</kwd><kwd> Storage Optimization</kwd><kwd> HBase</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于HBase的电动葫芦能测数据管理系统设计<sup> </sup></title><p>梅俊<sup>1</sup>，王松雷<sup>2</sup>，章国宝<sup>1</sup></p><p><sup>1</sup>东南大学自动化学院，江苏 南京</p><p><sup>2</sup>江苏省特种设备安全监督检验研究院无锡分院，江苏 无锡</p><p><img src="//html.hanspub.org/file/16-1541269x1_hanspub.png" /></p><p>收稿日期：2018年12月31日；录用日期：2019年1月15日；发布日期：2019年1月22日</p><disp-formula id="hanspub.28560-formula26"><graphic xlink:href="//html.hanspub.org/file/16-1541269x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>针对影响电动葫芦能效的因素属于多维关系矩阵，为了便于分析能效数据、建立统计模型以及指定能效分级标准等，本文提出了基于HBase存储多维因素数据的后端数据管理系统设计方案，运用优化配置的MySQL以及Redis分别存储常规数据以及热点数据。本文设计后端系统结合服务化与微服务的优点，采用Spring Boot + MyBatis架构，按功能划分为公共模块子系统(权限、消息、日志、配置、文档等)与业务子系统(架构、任务调度、RPC、部署等)，在保证健全性的同时，使得系统耦合度最低，可扩展性得到保障。最后，后台压力测试、数据库性能测试、HBase性能对比测试的结果展现出了管理系统的优化设计效果，系统可满足不同型号电动葫芦多种测试条件的能效检测的信息管理需求，为能效数据分析提供支持。</p><p>关键词 :数据采集，后台服务，存储优化，HBase</p><disp-formula id="hanspub.28560-formula27"><graphic xlink:href="//html.hanspub.org/file/16-1541269x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/16-1541269x7_hanspub.png" /> <img src="//html.hanspub.org/file/16-1541269x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>特种设备的能源消耗巨大，近年来国际上对于特种设备的能效监管与检测极为重视。作为特种设备重要的组成部分，起重机械关于能效测试、能效分级等仍没有确立非试行的统一规范或标准 [<xref ref-type="bibr" rid="hanspub.28560-ref1">1</xref>] 。电动葫芦的能效研究也将为后续展开的其他起重机械能效评价研究提供非常有益的借鉴 [<xref ref-type="bibr" rid="hanspub.28560-ref2">2</xref>] 。</p><p>应江苏省特种设备检查监督研究院无锡分院的要求，进行电动葫芦的能效测试及能耗分级，能效影响因素涵盖多类：电动葫芦型号(电机、电气、机械传动部分)、电机运行状态(运行速度、电机功率)、测试环境(不同工作级别、起重量、起升高度)等 [<xref ref-type="bibr" rid="hanspub.28560-ref3">3</xref>] [<xref ref-type="bibr" rid="hanspub.28560-ref4">4</xref>] 。但国内外对于起重机类特种设备基本是关于数据检测终端、远程监控系统的研发，电动葫芦能效因素统计模型、能效分级等数据分析理论都基于少量数据集的仿真基础建立，使得最终结果缺乏说服力。在此背景下，为了适用于多维因素大数据集进行数据分析、建立统计模型，本文提出了基于HBase的能效检测数据存储系统设计方案，根据配置注册电动葫芦型号以及其历史多维因素数据、常规数据，通过RPC获取深度学习模块的最优选择后推送合适的检测任务，任务调度模块适时采集热点数据并存储。</p></sec><sec id="s4"><title>2. 后台设计</title><p>本文设计系统基于Maven构建、Jenkins作为持续集成，项目后端使用Spring Boot (Spring + Spring MVC) + MyBatis框架搭建，去除XML配置；项目前端基于Angular JS + Bootstrap + jQuery框架，使用Thymeleaf模板引擎生成复用静态页面。后端系统采用微服务化的特点 [<xref ref-type="bibr" rid="hanspub.28560-ref5">5</xref>] ，分为业务与公共模块子系统，各子系统均按功能模块化设计，系统组件图如图1。</p><p>图1. 能测数据管理系统组件图</p><sec id="s4_1"><title>2.1. 业务子系统</title><p>业务子系统包括SSM架构、任务调度模块、RPC调用模块、部署模块以及数据解析模块。各模块对应技术组件以及功能实现见表1。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1"><xref ref-type="table" rid="table">Table </xref>1</xref></label><caption><title> Business subsystem function realization tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >模块</th><th align="center" valign="middle" >组件</th><th align="center" valign="middle" >功能实现</th></tr></thead><tr><td align="center" valign="middle" >架构</td><td align="center" valign="middle" >SSM</td><td align="center" valign="middle" >详见2.1.1小节</td></tr><tr><td align="center" valign="middle" >任务调度</td><td align="center" valign="middle" >Spring Scheduled</td><td align="center" valign="middle" >结合cron表达式注解定期采集特定检测周期数据</td></tr><tr><td align="center" valign="middle" >RPC</td><td align="center" valign="middle" >Dubbo [<xref ref-type="bibr" rid="hanspub.28560-ref6">6</xref>]</td><td align="center" valign="middle" >使得主业务子系统调用额外部署的远程模块，如数据分析模块等</td></tr><tr><td align="center" valign="middle" >部署</td><td align="center" valign="middle" >Nginx + keepalived</td><td align="center" valign="middle" >详见2.1.2小节</td></tr><tr><td align="center" valign="middle" >数据解析</td><td align="center" valign="middle" >FastJson</td><td align="center" valign="middle" >序列化与反序列化json，使用Fast Json Http Message Converter，提高JSON序列化速度</td></tr></tbody></table></table-wrap><p>表1. 业务子系统各模块功能实现表</p><sec id="s4_1_1"><title>2.1.1. SSM架构</title><p>SSM框架是Spring MVC，Spring以及MyBatis的整合，属于MVC设计模式，系统架构按层次、模块划分，其中，Spring MVC主要转发请求、分派视图，Spring处理请求，MyBatis持久化数据对象。能测数据管理系统基于此架构设计，架构层面较为突出的特点如下：</p><p>1) 使用Model、Mapper、MapperXML、Service、ServiceImpl、Controller等后缀名命名模型层、持久层、控制层基础代码，使得代码结构清晰、层次分明；</p><p>2) 基于Spring注解，统一管理各Exception类型、创建Rest风格Controller、AOP切面处理事务等，去XML配置，配合注解模块化统一管理异常、Controller业务方法Bean、事务管理器等；</p><p>3) 持久化集成MyBatis、通用Mapper组件、Page Helper物理分页组件，减少单表业务SQL开发量。</p></sec><sec id="s4_1_2"><title>2.1.2. 部署模块</title><p>负载均衡使用nginx分发数据包与请求，同时实现主从热备；通过使用keepalived检测nginx状态从而达到高可用(HA, High Availability)的目的，nginx与keepalived之间的关系如图2。</p><p>图2. Nginx + keepalived组件关系图</p><p>本文应用部署时使用虚拟IP (VIP)作为用户访问、内部访问的统一入口，nginx配置具体路由，外界通过虚拟IP访问具体Nginx服务器，keepalived配置后，nginx-master会向nginx-slave持续发送心跳，此心跳信息表征nginx-master的状态，从而保证Nginx的高可用。</p></sec></sec><sec id="s4_2"><title>2.2. 公共模块子系统</title><p>公共模块子系统包括权限模块、配置中心模块、图表显示模块、消息模块、推送模块、日志模块、文档模块以及存储模块。各模块对应技术组件以及功能实现见表2。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2"><xref ref-type="table" rid="table">Table </xref>2</xref></label><caption><title> Common module subsystem function realization tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >模块</th><th align="center" valign="middle" >组件</th><th align="center" valign="middle" >功能实现</th></tr></thead><tr><td align="center" valign="middle" >权限</td><td align="center" valign="middle" >Shiro</td><td align="center" valign="middle" >详见2.2.1小节</td></tr><tr><td align="center" valign="middle" >配置中心</td><td align="center" valign="middle" >Apollo</td><td align="center" valign="middle" >管理多维因素数据、常规数据、热点数据所在的数据库服务器地址</td></tr><tr><td align="center" valign="middle" >图表显示</td><td align="center" valign="middle" >d3</td><td align="center" valign="middle" >图表组件实时显示采集能效相关数据</td></tr><tr><td align="center" valign="middle" >消息</td><td align="center" valign="middle" >Rabbit MQ</td><td align="center" valign="middle" >详见2.2.2小节</td></tr><tr><td align="center" valign="middle" >推送</td><td align="center" valign="middle" >netty-socketio</td><td align="center" valign="middle" >基于Netty框架的Socket.io服务器端的java实现， 允许客户端无请求的情况下在服务器端主动推送检测任务流程</td></tr><tr><td align="center" valign="middle" >日志</td><td align="center" valign="middle" >SLF4J + Log4j2</td><td align="center" valign="middle" >业务日志和调试日志分开打印，同时基于时间和文件大小分割日志文件</td></tr><tr><td align="center" valign="middle" >文档</td><td align="center" valign="middle" >Swagger2</td><td align="center" valign="middle" >Swagger2生成RESTful APIs文档</td></tr><tr><td align="center" valign="middle" >存储</td><td align="center" valign="middle" >HBase等</td><td align="center" valign="middle" >具体实现与优化详见第三章</td></tr></tbody></table></table-wrap><p>表2. 公共模块子系统各模块功能实现表</p><sec id="s4_2_1"><title>2.2.1. 权限模块</title><p>Apache Shiro支持认证、授权、加密和会话管理，能测数据管理系统通过实现Realm定义系统内部的权限规则，Security Manager通过从Realm获取用户的信息与权限认证验证Subject。下述是权限模块的核心功能以及实现：</p><p>1) 使用配置文件定义Realm进行用户登录、URL权限管理；</p><p>2) 常规方案仅使用Redis存取会话信息，本文使用Shiro session配合Redis实现“安全型”会话管理。引入spring-session-data-redis，@Enable Redis Http Session配置session过期时间，redis缓存会话数据实现分布式session同步，重启服务会话不丢失。</p></sec><sec id="s4_2_2"><title>2.2.2. 消息模块</title><p>消息中间件采用RabbitMQ [<xref ref-type="bibr" rid="hanspub.28560-ref7">7</xref>] ，使发消息者(多终端、各类型数据)与收消息者(各持久化服务)完全解耦，同时在发消息者与队列之间加了一层抽象——交换机，发消息者传输数据给交换机，交换机以“Direct”匹配key再转发的方式将数据投送至绑定的队列。</p></sec></sec></sec><sec id="s5"><title>3. 存储设计</title><p>存储模块主要包括多维因素数据(机械传动部分、电机运行特性、测试环境等因素) HBase存储、常规数据(电动葫芦基本信息注册数据、多种检测任务周期信息等) MySQL存储以及热点数据(检测任务周期的实时数据) Redis存储，实际部署环境拓扑图如图3。</p><p>图3. 部署数据库拓扑图</p><sec id="s5_1"><title>3.1. 多维因素HBase数据库</title><p>HBase是一个列存储、多维度 [<xref ref-type="bibr" rid="hanspub.28560-ref8">8</xref>] 、可伸缩、结构稀疏的分布式nosql数据库，数学模型可以看成以行键(Row Key)、单元(Cell)、时间戳(timestamp)标识的Map数据结构的数据库 [<xref ref-type="bibr" rid="hanspub.28560-ref9">9</xref>] ，其中，单元包括列族(Column Family)、列标识(Column Qualifier)，每个列族包括多个列标识，创建表时，仅需定义表名与列族，列标识也无需预定义，因此不同行键对应的同一列族的列标识可以不一致。定位数据也必须指定行健、列族名、列标识名、版本号(时间戳)。</p><p>列存储中查询中的索引规则是通过列来定义，因此HBase中数据本身即索引，每次查询只会访问涉及的列，极大的降低了IO操作频率，同时，每一列的字段数据类型一致，列聚集存储可以进行高效压缩，节省物理空间。能效数据统计模型、能效分级等数据分析需求的数据量较为庞大，出于存储、索引性能、多维因素存储的考虑，HBase成为最佳选择。能测信息管理系统整合HBase存储多维因素数据步骤如下：</p><p>1) 在Spring Boot中引入hbase-client以及spring-data-hadoop依赖；</p><p>2) 设置好quorum与port后，配置Hbase Properties与HBase Configuration获取Hbase Template与Connection实例；应用Connection实例，获取表名称(<xref ref-type="table" rid="table">Table </xref>Name)、行键(Row Key)、列族(Column Family)、列标识(Column Qualifier)等信息实现create、put、scan、get、count等操作，并封装成Service类；</p><p>3) 调用HBase Service类创建表，列族(含有多个列标识)对应机械传动部分因素(电动葫芦型号、电机、传动摩擦)、电机运行状态(运行速度、电机功率)、测试环境(不同工作级别、起重量、起升高度)。</p><p>为了便于展示列族与列标识，针对Row Key为id1时，展开列族的数据结构见表3。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table">Table </xref>3</label><caption><title> Attributes of column family in multidimensional factor data tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >TableName</th><th align="center" valign="middle" >Row Key</th><th align="center" valign="middle" >Column Family</th><th align="center" valign="middle" >Column Qualifier</th></tr></thead><tr><td align="center" valign="middle" >multid_factor</td><td align="center" valign="middle" >id1</td><td align="center" valign="middle" >mechanical</td><td align="center" valign="middle" >type, motor, friction</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" >electrical</td><td align="center" valign="middle" >speed, power</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" >environmental</td><td align="center" valign="middle" >level, weight, height</td></tr></tbody></table></table-wrap><p>表3. 多维因素数据表的列族属性</p><p>多维因素数据表multid_factor数据模型见表4。</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table">Table </xref>4</label><caption><title> HBase multidimensional factor data table multid_facto</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >Row Key</th><th align="center" valign="middle"  rowspan="2"  >timestamp</th><th align="center" valign="middle"  colspan="3"  >Column Family: mechanical</th><th align="center" valign="middle"  colspan="2"  >Column Family: electrical</th><th align="center" valign="middle" >…</th></tr></thead><tr><td align="center" valign="middle" >column: type</td><td align="center" valign="middle" >column: motor</td><td align="center" valign="middle" >column: friction</td><td align="center" valign="middle" >column: speed</td><td align="center" valign="middle" >column: power</td><td align="center" valign="middle" >…</td></tr><tr><td align="center" valign="middle" >id1</td><td align="center" valign="middle" >1539576300</td><td align="center" valign="middle"  colspan="3"  >{type:, motor:, friction:}</td><td align="center" valign="middle"  colspan="2"  >{speed:, power:}</td><td align="center" valign="middle" >…</td></tr><tr><td align="center" valign="middle" >id2</td><td align="center" valign="middle" >1539576330</td><td align="center" valign="middle"  colspan="3"  >…</td><td align="center" valign="middle"  colspan="2"  >…</td><td align="center" valign="middle" >…</td></tr><tr><td align="center" valign="middle" >…</td><td align="center" valign="middle" >…</td><td align="center" valign="middle"  colspan="3"  >…</td><td align="center" valign="middle"  colspan="2"  >…</td><td align="center" valign="middle" >…</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表4. HBase多维因素数据表multid_factor</p><p>优化配置措施：</p><p>1) 由于过多的Column Family之间会互相影响，本系统限制每张表列族不超过4个；列族名、列标识名的长度影响I/O读写的性能以及发送的数据量，设置简洁。</p><p>2) Row Key是HBase的key-value存储中的key，HBase通过对Row Key按字典序(存储排序)来建立索引，本系统考虑存储数据scan范围较大的特点采取散列字段(高2个字节，0~65,535程序循环产生)+时间字段(低4个字节，保留小时分钟毫秒)的组成方式优化Row Key的Hash以获得固定长度的Row Key，使数据分布均匀，均衡负载。</p></sec><sec id="s5_2"><title>3.2. 常规MySQL数据库</title><p>MySQL是一个关系型数据库管理系统，表结构涉及字段名称、字段类型、字段长度、是否为空、主键；表操作支持insert、delete、update、select (条件、排序、分组、多表等)；支持事务以及配置事务粒度；表间关系支持多种关联映射；表数据有多种约束类型，如primary key(PK)、unique等。</p><p>能测信息管理系统使用MyBatis及相关组件整合MySQL步骤如下：</p><p>1) 在Spring Boot中引入mybatis-spring-boot-starter，添加mysql、jdbc相关依赖spring-boot-starter-jdbc、mysql-connector-java；</p><p>2) 配置MySQL远程地址、登录信息、驱动名称、线程池信息等；</p><p>3) 创建常规数据(检测执行人、检测时间、工作周期等基本信息)、实时热点数据(时间、高度等)的实体类，创建数据操作相关方法的接口Interface，使用通用Mapper组件配置生成对应的MapperXML进行数据库CRUD操作，使用PageHelper组件实现物理分页；同时，可以创建Service进一步封装上述的数据操作相关方法，对外仅暴露Service，降低系统模块耦合度；</p><p>4) 开启事务，方法级别指定事务管理器，配置事务传播行为、隔离级别、读写类型等；</p><p>检测任务相关信息表detect_info数据模型见表5。</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table">Table </xref>5</label><caption><title> <xref ref-type="table" rid="table">Table </xref>data model of information related to detection tas</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >名称</th><th align="center" valign="middle" >类型</th><th align="center" valign="middle" >长度</th><th align="center" valign="middle" >NULL</th><th align="center" valign="middle" >PK</th><th align="center" valign="middle" >数据举例</th></tr></thead><tr><td align="center" valign="middle" >id</td><td align="center" valign="middle" >int</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >not null</td><td align="center" valign="middle" >primary key</td><td align="center" valign="middle" >{1,2,3,4,…}</td></tr><tr><td align="center" valign="middle" >execStaff</td><td align="center" valign="middle" >varchar</td><td align="center" valign="middle" >24</td><td align="center" valign="middle" >null</td><td align="center" valign="middle" >no</td><td align="center" valign="middle" >{甲|乙|丙|…}</td></tr><tr><td align="center" valign="middle" >workLevel</td><td align="center" valign="middle" >string</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >null</td><td align="center" valign="middle" >no</td><td align="center" valign="middle" >{M1|M2|…|M8}</td></tr><tr><td align="center" valign="middle" >operationSpeed</td><td align="center" valign="middle" >string</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >null</td><td align="center" valign="middle" >no</td><td align="center" valign="middle" >{Single|Double}</td></tr><tr><td align="center" valign="middle" >updateTime</td><td align="center" valign="middle" >date</td><td align="center" valign="middle" >default</td><td align="center" valign="middle" >null</td><td align="center" valign="middle" >unique</td><td align="center" valign="middle" >{3.24,4.19,5.27,4.28,…}</td></tr></tbody></table></table-wrap><p>表5. 检测任务相关信息表数据模型</p><p>优化配置措施：</p><p>1、使用Druid Spring Boot Starter集成Alibaba Druid数据库连接池与监控，Druid数据库连接池，监控数据库访问性能，统计SQL的执行性能。</p><p>2、AOP切换多数据源数据库，实现读写分离。</p><p>3、@Transational注解事务，实现非侵入式的方法级别的事务回滚。</p></sec><sec id="s5_3"><title>3.3. 热点Redis数据</title><p>Redis是一款支持String、List、Hash、Set、Sorted Set数据类型的内存高速缓存数据库，key-value存储类型使得数据查询性能极高，支持主从模式，支持持久化，支持事务，set/get、add/remove等都是原子操作。</p><p>管理系统使用Redis存储检测任务周期的实时数据，用以图表显示、即时分析、能效计算等，并设置key的过期时间为检测周期的2倍，过期之前不采用redis持久化，而是转存于MySQL成为常规历史检测数据；系统以主备方式保证Redis的High Availability，redis-master以异步rehash的方式保证redis-slave数据同步，实现数据最终一致性。</p><p>能测信息管理系统整合Redis步骤如下：</p><p>1) 基于Spring Boot架构，使用spring-boot-starter-data-redis引入redis；</p><p>2) 添加配置文件，设置spring.redis.host、spring.redis.port等Redis服务器与连接池信息；</p><p>3) 使用RedisTemplate进行set、get、add、remove、hasKey等操作。</p><p>数据模型见表6。</p><table-wrap id="table6" ><label><xref ref-type="table" rid="table">Table </xref>6</label><caption><title> Data type stored by Redi</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >Key</th><th align="center" valign="middle" >类型</th><th align="center" valign="middle" >操作</th><th align="center" valign="middle" >子系统下指标常权</th></tr></thead><tr><td align="center" valign="middle" >execTimeSec</td><td align="center" valign="middle" >list</td><td align="center" valign="middle" >lpush</td><td align="center" valign="middle" >{3.00,15.00,18.00,…}</td></tr><tr><td align="center" valign="middle" >workLevel</td><td align="center" valign="middle" >string</td><td align="center" valign="middle" >set</td><td align="center" valign="middle" >{M1|M2|…|M8}</td></tr><tr><td align="center" valign="middle" >operationSpeed</td><td align="center" valign="middle" >string</td><td align="center" valign="middle" >set</td><td align="center" valign="middle" >{Single|Double}</td></tr><tr><td align="center" valign="middle" >height</td><td align="center" valign="middle" >list</td><td align="center" valign="middle" >lpush</td><td align="center" valign="middle" >{3.24,4.19,5.27,4.28,…}</td></tr></tbody></table></table-wrap><p>表6. Redis存储的数据类型</p><p>优化配置措施：</p><p>1、redis-master不做任何持久化工作，转存至MySQL代替RDB内存快照、AOF日志文件。</p><p>2、主备方式代替主从方式，对外提供一个虚拟IP(VIP)，keepalived保证Redis HA，WEB app通过VIP进行存储操作，正常时主机redis-master提供服务，宕机时VIP自动漂移到备机redis-slave上；另外，主备数据同步使用异步同步，在性能得到保证的同时，最终一致性已足够需求。</p></sec></sec><sec id="s6"><title>4. 测试</title><sec id="s6_1"><title>4.1. 后台压力测试</title><p>后台完整测试一般需涵盖工具类等方法测试、Controller类等RESTful API请求测试以及并发访问压力性能测试。其中基本方法测试基于Junit4，RESTful API测试基于Mock技术，性能、效率测试基于ContiPerf。</p><p>能测信息管理系统基于ContiPerf进行性能测试步骤如下：</p><p>1) 在dev环境下引入org.databene.contiperf组件进行性能测试；</p><p>2) 使用注解@PerfTest (invocations = 100, threads = 10)设置启动10个线程执行任务100次；</p><p>3) 运行测试，访问：target/contiperf-report/index.html。</p><p>得到ContiPerf报表如图4。</p><p>图4. ContiPerf性能测试报告</p><p>图4中throughput显示每秒执行任务次数162次，平均响应时间为0.041 s，性能满足需求。后端系统使用内嵌的Tomcat作为Servlet容器，启动ContiPerf测试后用VisualVM查看应用所占的资源情况如图5。</p><p>图5. VisualVM监控信息</p><p>如上图所示，ContiPerf开启测试后，Daemon threads后台线程10个，使用的堆内存为约90MB，对于资源使用情况符合预期。</p></sec><sec id="s6_2"><title>4.2. 数据库性能测试</title><p>Apache JMeter是一款开源的压力测试工具，支持数据库、http请求等的压力测试，同时也支持混合应用场景多线程组并发测试，本文使用JMeter进行数据库压力测试，步骤如下：</p><p>1) 新建测试计划，添加线程组，设置线程数100；</p><p>2) 添加JDBC Connection Configuration，设置待测远程数据库服务器地址以及登录信息；</p><p>3) 添加JDBC Request，设置待测select语句，本次测试以单表条件查询为例，select id, workLevel from detect_info where DATE(updateTime) &gt;= DATE('2018-10-15') limit 15；</p><p>4) 添加监听器，依次添加察看结果树与聚合报告；</p><p>配置完成，执行测试后，聚合报告结果如图6。</p><p>图6. JMeter聚合报告压力测试结果</p><p>如图6所示，总的select语句请求数Samples为34158条，Average平均响应时间为0.079s，Error%测试出现的错误请求数百分比为0.06%，Throughput(TPS，吞吐量)每秒处理的请求数243.2条，能承受较大的并发请求量。</p></sec><sec id="s6_3"><title>4.3. HBase性能对比测试</title><p>针对既有的检测数据ER模型管理系统解决方案 [<xref ref-type="bibr" rid="hanspub.28560-ref10">10</xref>] ，本文参考该方案搭建MySQL数据库、表(建mechanical、electrical、environmental三类能效因素表，并将HBase已load数据完全写入，保证两者的测试数据量一样)，并使用Druid连接池、查询索引优化，使用Apache JMeter压测三表联合查询语句“select type, motor, friction, speed, power, level, weight, height from (mechanical left join electrical on mechanical.id=electrical.id) left join environmental on mechanical.id=environmental.id”进行对比测试，设置线程数100。</p><p>对于本文设计的HBase多维因素数据表multid_factor，使用“Yahoo！CloudServing Benchmark(YCSB)”进行其数据服务性能基础测试，步骤如下：</p><p>1) 配置workload类型为workloadb，即Read mostly workload；</p><p>2) 设置load初始化Hbase表数据“./ycsb load hbase10-P../workloads/workloadb-p threads = 100-cp /etc/hbase/conf-p table = multid_factor-p columnfamily = mechanical-p columnfamily = electrical-p columnfamily = environmental-p recordcount = 10000-s &gt; ./load.report”；</p><p>3) 运行负载测试“./ycsb run hbase10 …(如步骤2)中所示) -s &gt; ./run.report”。</p><p>归纳JMeter聚合报告结果与YCSB命令行返回测试结果报告run.report，得出MySQL常规方案与本文设计HBase多维数据存储方案性能核心指标对比见表7。</p><table-wrap id="table7" ><label><xref ref-type="table" rid="table">Table </xref>7</label><caption><title> Comparison table of the core indexes of MySQL and HBase performanc</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >DB</th><th align="center" valign="middle" >数据量</th><th align="center" valign="middle" >请求类型/数</th><th align="center" valign="middle" >吞吐量(ops/s)</th><th align="center" valign="middle" >AverageLatency (s)</th></tr></thead><tr><td align="center" valign="middle" >MySQL</td><td align="center" valign="middle" >10,000</td><td align="center" valign="middle" >READ/1000</td><td align="center" valign="middle" >144.48</td><td align="center" valign="middle" >0.097</td></tr><tr><td align="center" valign="middle" >HBase</td><td align="center" valign="middle" >10,000</td><td align="center" valign="middle" >SELECT/1000</td><td align="center" valign="middle" >376.79</td><td align="center" valign="middle" >0.036</td></tr></tbody></table></table-wrap><p>表7. MySQL与HBase性能核心指标对比表</p><p>如表7所示，关于多维的较大数据查询，在相同数据量、请求数、线程数的压测情况下，即使常规方案数据库针对多表的查询数据建立索引，吞吐量以及平均响应时间仍然逊于“数据本身即索引”的HBase多维数据表。另外，在多维因素增加维度的情况下，常规库数据库多表查询的响应时间也会有所增长，而HBase因为本身列存储的性质则不会因为增加列族而变化。</p></sec></sec><sec id="s7"><title>5. 结束语</title><p>本文基于HBase、MySQL以及Redis分别存储能效检测多维因素数据、常规数据以及热点数据，以SSM架构，结合配置中心、任务调度、日志文档、权限、消息、图表显示、推送等模块，根据配置注册电动葫芦型号以及其历史多维因素数据、常规数据，智能推送合适的检测任务，任务调度适时采集热点数据并实时图表显示，使用的消息队列支持多终端设备同时采集，同时可生成日志报表。该系统设计探讨了多维度数据的存储、索引等优化方案，具有较好的高可用性、可扩展性、高效率等特点，可满足不同型号电动葫芦多种测试条件的能效检测的信息管理需求，为相关人员提供便捷检测与技术支持。</p></sec><sec id="s8"><title>基金项目</title><p>KJ(Y)2015018，江苏省特检院资助项目。</p></sec><sec id="s9"><title>文章引用</title><p>梅 俊,王松雷,章国宝. 基于HBase的电动葫芦能测数据管理系统设计Design of Data Management System for Electric Hoist Energy Efficiency Measurement Based on HBase[J]. 计算机科学与应用, 2019, 09(01): 132-142. https://doi.org/10.12677/CSA.2019.91016</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.28560-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">张志坚. 电动单梁起重机质量安全分析与研究[D]: [硕士学位论文]. 杭州: 浙江工业大学, 2014.</mixed-citation></ref><ref id="hanspub.28560-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">陶冶. 电动葫芦单梁桥式起重机的参数化设计及有限元分析[D]: [硕士学位论文]. 太原: 太原科技大学, 2014.</mixed-citation></ref><ref id="hanspub.28560-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">贾薛铖, 王松雷, 徐榕, 等. 电动葫芦能效测试方法研究[J]. 起重运输机械, 2014(12): 11-15.</mixed-citation></ref><ref id="hanspub.28560-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">秦伟皓. 电动葫芦能源利用效率测算方法研究[D]: [硕士学位论文]. 上海: 上海交通大学, 2014.</mixed-citation></ref><ref id="hanspub.28560-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Suryotrisongko, H., Jayanto, D.P. and Tjahyanto, A. (2017) Design and Development of Backend Application for Public Complaint Systems Using Microservice Spring Boot. Procedia Computer Science, 124, 736-743.  
&lt;br&gt;https://doi.org/10.1016/j.procs.2017.12.212</mixed-citation></ref><ref id="hanspub.28560-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">王琪, 卢军. 基于Dubbo的分布式能效管理系统的设计与实现[J]. 电子设计工程, 2018, 26(11): 174-178.</mixed-citation></ref><ref id="hanspub.28560-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">鱼朝伟, 詹舒波. 基于RabbitMQ的异步全双工消息总线的实现[J]. 软件, 2016(2): 139-146.</mixed-citation></ref><ref id="hanspub.28560-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Liang, S. and Yang, Y. (2016) Towards Performance Evaluation of Hbase Based Multidimensional Cloud Index. IEEE International Conference on Computer Science &amp; Network Technology, Harbin, 19-20 December 2015, 629-632.</mixed-citation></ref><ref id="hanspub.28560-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Vora, M.N. (2012) Hadoop-Hbase for Large-Scale Data. IEEE International Conference on Computer Science &amp; Network Technology, Harbin, 24-26 December 2011, 601-605.</mixed-citation></ref><ref id="hanspub.28560-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Satoto, K.I., Isnanto, R.R., Kridalukmana, R., et al. (2017) Optimizing MySQL Database System on Information Systems Research, Publications and Community Service. IEEE International Conference on Information Technology, Semarang, Indonesia, 19-20 October 2016, 1-5.</mixed-citation></ref></ref-list></back></article>