<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2019.910204</article-id><article-id pub-id-type="publisher-id">CSA-32429</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20191000000_47343134.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  赋权图点覆盖问题的蚁群算法求解
  Ant Colony Algorithm for Vertex Covering Problem of Weighted Graphs
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>孙</surname><given-names>森</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>京荣</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>吴</surname><given-names>佩雯</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>兰州交通大学，甘肃 兰州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>30</day><month>09</month><year>2019</year></pub-date><volume>09</volume><issue>10</issue><fpage>1823</fpage><lpage>1830</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   点覆盖问题为组合优化中一个经典的NP完全问题。目前，该问题在有效的多项式时间内无法找到最优解。文章针对蚁群算法可能出现的早期停滞问题进行改进，通过对信息素浓度进行限定，信息素浓度不会在好的顶点继续加强，也不会忽略掉潜在的一些搜索区域。该算法有效地避免了局部最优，提高了算法的准确度，得到时间复杂性为0[(n-1)<sup>2</sup>-n]的解决方案。 Vertex covering problem is a classical NP complete problem in combinatorial optimization. At present, the problem cannot find the optimal solution in the effective polynomial time. This paper improves the early stagnation problem of ant colony algorithm. By limiting the pheromone concentration, the pheromone concentration will not continue to strengthen at the good vertex, nor will it ignore some potential search areas. This algorithm effectively avoids local optimization, improves the accuracy of the algorithm, and obtains a solution with time complexity of 0[(n-1)<sup>2</sup>-n]. 
  
 
</p></abstract><kwd-group><kwd>点覆盖，蚁群算法，信息素更新，时间复杂性, Vertex Coverage</kwd><kwd> Ant Colony Algorithm</kwd><kwd> Pheromone Updating</kwd><kwd> Time Complexity</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>赋权图点覆盖问题的蚁群算法求解<sup> </sup></title><p>孙森，陈京荣<sup>*</sup>，吴佩雯</p><p>兰州交通大学，甘肃 兰州</p><disp-formula id="hanspub.32429-formula13"><graphic xlink:href="//html.hanspub.org/file/2-1541522x5_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2019年9月16日；录用日期：2019年10月1日；发布日期：2019年10月8日</p><disp-formula id="hanspub.32429-formula14"><graphic xlink:href="//html.hanspub.org/file/2-1541522x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>点覆盖问题为组合优化中一个经典的NP完全问题。目前，该问题在有效的多项式时间内无法找到最优解。文章针对蚁群算法可能出现的早期停滞问题进行改进，通过对信息素浓度进行限定，信息素浓度不会在好的顶点继续加强，也不会忽略掉潜在的一些搜索区域。该算法有效地避免了局部最优，提高了算法的准确度，得到时间复杂性为 0 [ ( n − 1 ) 2 ⋅ n ] 的解决方案。</p><p>关键词 :点覆盖，蚁群算法，信息素更新，时间复杂性</p><disp-formula id="hanspub.32429-formula15"><graphic xlink:href="//html.hanspub.org/file/2-1541522x9_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/2-1541522x10_hanspub.png" /> <img src="//html.hanspub.org/file/2-1541522x11_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>点覆盖是指给定一个无向图<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1541522x12_hanspub.png" xlink:type="simple"/></inline-formula>，其中V为顶点集，若存在 V ( G ) 的一个子集S，使得G中任意一条边的两个端点至少有一个在S中，则S为G的点覆盖集。若图G中不存在点覆盖 S ′ ，使 | S ′ | &lt; | S | ，则称S为G的一个最小点覆盖集，其中 | S | 和 | S ′ | 即集合S和 S ′ 的顶点个数 [<xref ref-type="bibr" rid="hanspub.32429-ref1">1</xref>] 。</p><p>在运筹学和管理科学领域，点覆盖问题也是NP-hard最常用的问题之一 [<xref ref-type="bibr" rid="hanspub.32429-ref2">2</xref>] 。在现实生活中有许多的问题都可以利用最小点覆盖问题原理进行解决。对该问题研究虽然已经有很长时间，但是人们至今没有找到一个多项式算法可以求得其精确解 [<xref ref-type="bibr" rid="hanspub.32429-ref3">3</xref>] 。Niedermeier等 [<xref ref-type="bibr" rid="hanspub.32429-ref4">4</xref>] 提出当每个点的权值最小为1，n个点总权值最多为k时，可以找到时间复杂度为 O ( 1.3788 k + k n ) 的解决方案。Chvatal等 [<xref ref-type="bibr" rid="hanspub.32429-ref5">5</xref>] 运用贪婪启发式算法，选取顶点权值与度之比最小的点解决集合覆盖问题。1993年参数化算法第一次用来解决该问题 [<xref ref-type="bibr" rid="hanspub.32429-ref6">6</xref>] 。寇磊等 [<xref ref-type="bibr" rid="hanspub.32429-ref7">7</xref>] 运用改进的Dijkstra算法解决该问题，并且得出该近似算法的时间复杂度为 O ( n 3 ) 。王丽丽等通过线性规划松弛来实现对每个实例中参数k范围的预测，介绍了一种求解该问题实例计算成本的方法 [<xref ref-type="bibr" rid="hanspub.32429-ref8">8</xref>] 。骆伟忠等将启发式操作和核心化操作相融合，给出了基于核心化技术的点覆盖问题的改进算法 [<xref ref-type="bibr" rid="hanspub.32429-ref9">9</xref>] 。郝斌斌等人研究了一种基于该问题的共享单车投放点选取问题 [<xref ref-type="bibr" rid="hanspub.32429-ref10">10</xref>] 。目前对于蚁群算法的研究已经不再仅仅局限于单一的范围中，近年来往往利用遗传算法结合贪婪启发式算法和基于重力的转启发式算法研究最小点覆盖问题并得到近似解。</p><p>1992年意大利学者Dorigo等人提出了蚁群算法 [<xref ref-type="bibr" rid="hanspub.32429-ref11">11</xref>] 。2000年在国际顶级期刊《Nature》上发表了关于蚁群算法系统的研究综述，首次将蚁群算法推向国际领域，人们开始对蚁群算法进行广泛地研究和应用 [<xref ref-type="bibr" rid="hanspub.32429-ref12">12</xref>] 。吴佩雯等人对蚁群算法解决点覆盖问题给出了简单的近似算法 [<xref ref-type="bibr" rid="hanspub.32429-ref13">13</xref>] 。葛洪伟等人将SCHF启发函数与蚁群算法相结合得到了一个新的算法对集合问题进行求解 [<xref ref-type="bibr" rid="hanspub.32429-ref14">14</xref>] 。</p><p>目前蚁群算法研究点覆盖问题还不完善，蚁群算法虽然具有系统性、分布式计算、自组织、正反馈等优势，但是当处理数据量巨大时其会出现求解时间长或者得不到最优解，而且蚂蚁在循环中可能会出现早期停滞问题导致算法陷入局部最优。因此为了避免上述问题的出现，引入信息素浓度限定这一概念，对信息素浓度进行限定，提出了一种改进的蚁群算法。当每个点的权值最小为1时，得到时间复杂性为 0 [ ( n − 1 ) 2 ⋅ n ] 的解决方案，其中n为图G的顶点数。</p></sec><sec id="s4"><title>2. 基本原理</title><p>蚁群算法的灵感来源于现实生活中真正蚂蚁的自然优化机制，它是一种启发式算法。蚂蚁依靠相互协作可以在洞穴和食物源之间找到一条最短路径 [<xref ref-type="bibr" rid="hanspub.32429-ref15">15</xref>] 。探究发现这是由于蚂蚁在通过一条路时会留下一种信息素，当其它蚂蚁选择路径时，会依靠信息素浓度判断并找出一条最短路径 [<xref ref-type="bibr" rid="hanspub.32429-ref16">16</xref>] 。</p><p>设m为蚂蚁的数目， b i ( t ) 表示t时刻在节点i的蚂蚁数目， m = ∑ i = 1 n b i ( t ) τ i j ( t ) 为某时刻t在路段 ( i , j ) 上的信息素，信息素轨迹和参数初始化， τ i j ( t 0 ) = C ，(C为常数)，为使算法初期各个蚂蚁更好获得较好的解，将信息素大小设置为 τ max 。 η i j 表示路段 ( i , j ) 上的能见度。</p><p>计算状态转移规则，将初始节点i置于蚂蚁 k ( k = 1 , 2 , ⋯ , m ) 的解集 C k 中，蚂蚁k按状态转移规则选择下一节点j，并将j放入当前解集 C k 中。</p><p>p i j k ( t ) = { [ τ i j ( t ) ] α [ η i k ( t ) ] β ∑ s ∈ a l l o w e d k [ τ i s ( t ) ] α [ η i s ( t ) ] β ,       若   j ∈ a l l o w e d k 0 ,                                                                                       否 则 (1)</p><p>在公式(1)中 a l l o w e d k = { 0 , 1 , 2 , ⋯ , n − 1 } 为允许访问下一节点的集合。 α , β 为参数因子，由ant-cycle模型得出的最好的经验结果为 0 ≪ α ≪ 5 ， 0 ≪ β ≪ 5 。</p><p>在每只蚂蚁走完一步或者完成一次环游，记录最好解<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1541522x37_hanspub.png" xlink:type="simple"/></inline-formula>，并进行信息素更新。</p><p>τ i j ( t + 1 ) = ρ τ i j ( t ) + Δ τ i j b e s t (2)</p><p>Δ τ i j b e s t = { 1 / L b e s t ,       若 i , j 为 最 优 路 径 0 ,                             否 则 (3)</p><p>式(3)中 ρ 为信息素的挥发系数，一般 0 &lt; ρ &lt; 1 。当达到最大迭代次数或者找寻到最优路径，则算法停止，输出全局最优解。</p></sec><sec id="s5"><title>3. 模型建立</title><p>根据最小点覆盖的特点，蚂蚁在搜索过程中是可以从一个点转移到其他任一顶点的，故作图G的完全图 G C = ( V , E C ) ，如果一个边是G中的边那么它的权值是1，如果它未出现在原来的图G中，那么它的权值为0。</p><p>定义 G c k = ( V , E C ) 为k个顶点加入解集后的图，定义 Ψ k ( i , j ) = V a l u e ( E c k ( i , j ) ) 。</p><p>定义动态启发函数</p><p>η j k = ∑ ( i , j ) ∈ E c Ψ k ( i , j ) ω ( j ) (4)</p><p>在式(4)中， ω ( j ) 指顶点j的权值，用启发函数 η j k 定义状态转移概率方程</p><p>p j k = { 1 , q &lt; q 0 , j = max i ∈ A k τ i η i k β 0 , q &lt; q 0 , j ≠ max i ∈ A k τ i η i k β τ j η j k β ∑ γ ∈ A k τ i η i k β , q ≥ q 0 (5)</p><p>在式(5)中， q 0 是标准参数且q是一个随机变量，它决定每一步选择的类型。 A k 是可用的顶点的列表。不同于TSP的状态转移规则，它并不取决于最后一个被选择的点，这就是为什么用 τ i 来代替 τ i j 。对一个完全指定的蚂蚁群系统全球(当蚂蚁完成它们的所有路径时)，信息素更新为</p><p>τ i ( t + 1 ) = ρ τ i ( t ) + Δ τ i b e s t (6)</p><p>Δ τ i j b e s t = 1 / L b e s t (7)</p><p>在式(7)中的 L b e s t 为当前迭代最优解。每条路径上的信息素 τ i ( t ) 都限于 [ τ min , τ max ] 范围中。每次迭代之后都应将信息素限定在该范围内。若 τ i ( t ) ≥ τ max ，则 τ i ( t ) = τ max ；若 τ i ( t ) ≤ τ min ，则 τ i ( t ) = τ min ，与此同时要保证 τ min &gt; 0 。</p><p>局部信息素更新的主要目的是为了减少算法陷入局部最优的状态，同时增加短路径上的信息素浓度。在每一步结束时执行局部信息素的更新，更新规则为</p><p>τ i = ( 1 − φ ) τ i + φ τ 0 (8)</p><p>式(8)中，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1541522x64_hanspub.png" xlink:type="simple"/></inline-formula>的值是指被选择的点的度数与权值之间的最佳比。参数 φ 是被指定的特殊的局部更新规则的值。</p></sec><sec id="s6"><title>4. 算法设计</title><p>对点赋权图 G = ( V , E ) ，做出图G的完全图 G C = ( V , E C ) 。</p><p>首先，定义连接函数</p><p>Ψ k ( i , j ) = { 1 ,         i , j ∈ E 0 ,         i , j ∈ E C − E (9)</p><p>由此函数即可确定各边的连接值。对于蚂蚁k，当蚂蚁k访问到i点，则 Ψ k ( i , j ) = 0 ，其中j表示所有与i相邻的顶点。</p><p>然后计算动态启发因子</p><p>η j k = ∑ ( i , j ) ∈ E c Ψ k ( i , j ) ω ( j ) (10)</p><p>其中 ω ( j ) 为j点的权值， ∑ ( i , j ) ∈ E c Ψ k ( i , j ) 表示顶点j所关联的所有的边的连接值之和。因此可求出 max { η j k β } 。</p><p>由此给出蚂蚁k接下来访问新的顶点的状态转移概率</p><p>P j k = { 1 ,       j = max { η j k β } 0 ,     j ≠ max { η j k β } (11)</p><p>对于图G，当所有的连接值均为0时，算法停止。当蚂蚁完成环游，对于所有点i，有 ∑ ( i , j ) ∈ E c Ψ k ( i , j ) = 0 ，此时可得到一个点覆盖集 S k 。更新初始点，得到n个新的点覆盖集，计算 min j ∈ S k ω ( j ) ，则得到图的最小点覆盖集。</p><p>算法实现步骤</p><p>Step1. 初始化：做出图G的完全图 G C = ( V , E C ) ，由连接函数</p><p>Ψ k ( i , j ) = { 1 ,         i , j ∈ E 0 ,         i , j ∈ E C − E</p><p>给定的各边连接值，令 S k = { v i } ， k = 1 ；</p><p>Step2. 用连接函数 Ψ k ( i , j ) = 0 更新与i点相关联的所有边的连接值，计算</p><p>η j k = ∑ ( i , j ) ∈ E c Ψ k ( i , j ) ω (j)</p><p>若有 η j k = 0 则输出点覆盖，算法停止。否则，转Step3；</p><p>Step3. 计算 max { η j k β } ，由</p><p>P j k = { 1 ,           j = max { η j k β } 0 ,       j ≠ max { η j k β }</p><p>确定下一个选择的顶点，并将其并入集合 S k ，转Step2；</p><p>Step4. 计算 | S k | = min j ∈ S 1 ω ( j ) ，更新初始点，转Step2；</p><p>Step5. 计算 S = min { S 1 , S 2 , ⋯ , S k , ⋯ , S n } ，输出最小点覆盖集S，算法停止。由此得出算法的时间复杂度为 0 [ ( n − 1 ) 2 ⋅ m ] ，其中n为图G的顶点数，m为蚂蚁数目，若 m ≈ n ，则蚁群算法的时间复杂度为 0 [ ( n − 1 ) 2 ⋅ n ] 。</p></sec><sec id="s7"><title>5. 算例分析</title><p>求图1的点覆盖来阐释算法的具体执行过程，其中图G是8个顶点，12条边的点赋权图且图2中的图 G C 是图G的完全图。</p><p>图1. 图G</p><p>图2. 图G<sub>C </sub></p><p>Step1. 由连接函数</p><p>Ψ k ( i , j ) = { 1 ,           i , j ∈ E 0 ,       i , j ∈ E C − E</p><p>给定的各边连接值，蚂蚁1以 v 1 为出发点，有 S 1 = { v 1 } ，期望启发因子 β 赋值为2；</p><p>Step2. 用连接函数 Ψ k ( i , j ) = 0 更新与点 v 1 关联边的连接值，计算 η j k β 有 η j k β ≠ 0 ，转Step3；</p><p>Step3. 计算 max { η j k β } = 12.25 , j = 7 ，将其并入集合 S 1 = { v 1 , v 7 } ，转Step2；</p><p>Step2. 用 Ψ k ( i , j ) = 0 更新 v 7 关联边的连接值，计算 η j k β ，有 η j k β ≠ 0 ，转Step3；</p><p>Step3. 计算 max { η j k β } = 16 / 9 , j = 3 ，将其并入集合 S 1 = { v 1 , v 7 , v 3 } ，转Step2；</p><p>Step2. 用连接函数 Ψ k ( i , j ) = 0 更新与点 v 3 关联的边的连接值，计算 η j k β ，有 η j k β ≠ 0 ，转Step3；Step3.计算 max { η j k β } = 4 / 9 , j = 5 ，将其并入集合 S 1 = { v 1 , v 7 , v 3 , v 5 } ，转Step2；</p><p>Step2. 用连接函数 Ψ k ( i , j ) = 0 更新与点 v 5 关联的边的连接值，计算 η j k β ，有 η j k β = 0 ，输出 S 1 = { v 1 , v 2 , v 3 } ；</p><p>Step4. 计算 | S k | = min j ∈ S 1 ω ( j ) = 10 ，算法停止；</p><p>Step5. 计算 S = min { S 1 , S 2 , ⋯ , S k , ⋯ , S n } 得 S = min { v 1 , v 3 , v 5 , v 7 } ，输出最小点覆盖集 S = { v 1 , v 3 , v 5 , v 7 } ，算法停止。</p><p>比较表1中点覆盖的点覆盖数和权值，集合 { v 1 , v 3 , v 5 , v 7 } 的点覆盖数和权值最小，点覆盖数为4，点覆盖权值为10。该算法点覆盖数和权值没有出现局部最优。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Number of point overlays and point overlays of each vertex in figure </title></caption><table><tbody><thead><tr><th align="center" valign="middle" >蚂蚁</th><th align="center" valign="middle" >初始点</th><th align="center" valign="middle" >点覆盖</th><th align="center" valign="middle" >点覆盖数</th><th align="center" valign="middle" >点覆盖权值</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >v 1</td><td align="center" valign="middle" >S 1 = { v 1 , v 3 , v 5 , v 7 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >10</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >v 2</td><td align="center" valign="middle" >S 2 = { v 1 , v 2 , v 3 , v 5 , v 7 }</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >14</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >v 3</td><td align="center" valign="middle" >S 3 = { v 1 , v 3 , v 5 , v 7 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >10</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >v 4</td><td align="center" valign="middle" >S 4 = { v 1 , v 3 , v 4 , v 5 , v 7 }</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >15</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >v 5</td><td align="center" valign="middle" >S 5 = { v 1 , v 3 , v 5 , v 7 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >10</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >v 6</td><td align="center" valign="middle" >S 6 = { v 1 , v 3 , v 5 , v 6 , v 7 }</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >16</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >v 7</td><td align="center" valign="middle" >S 7 = { v 1 , v 3 , v 5 , v 7 }</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >10</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >v 8</td><td align="center" valign="middle" >S 8 = { v 1 , v 3 , v 5 , v 7 , v 8 }</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >14</td></tr></tbody></table></table-wrap><p>表1. 图G各顶点的点覆盖数及点覆盖值</p><p>为使该算例更具代表性，选取 n = | V | = 3 r + 4 ，图3中最优覆盖有r + 2个点，为 { B 1 , B 2 , ⋯ , B r + 2 } ，用20只蚂蚁对该实例求解，计算结果见表2。</p><p>从表2中可知当图规模较小时，蚁群算法的早期停滞问题并没有出现。然而，随着图的复杂程度增加、点数的增多和r的增大，蚁群算法在计算过程中出现了停滞现象，所得结果是存在局部最优现象的。对信息素浓度的限定，有效的避免了该现象的出现，所得结果更加接近最优结果，计算精度方面得到了一定的提升。</p><p>图3. 算例</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> The calculation result</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >r</th><th align="center" valign="middle" >n</th><th align="center" valign="middle" >最优点覆盖数</th><th align="center" valign="middle" >近似算法点覆盖数</th></tr></thead><tr><td align="center" valign="middle" >15</td><td align="center" valign="middle" >49</td><td align="center" valign="middle" >17</td><td align="center" valign="middle" >18</td></tr><tr><td align="center" valign="middle" >20</td><td align="center" valign="middle" >64</td><td align="center" valign="middle" >22</td><td align="center" valign="middle" >23</td></tr><tr><td align="center" valign="middle" >25</td><td align="center" valign="middle" >79</td><td align="center" valign="middle" >27</td><td align="center" valign="middle" >30</td></tr><tr><td align="center" valign="middle" >30</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >32</td><td align="center" valign="middle" >35</td></tr><tr><td align="center" valign="middle" >35</td><td align="center" valign="middle" >109</td><td align="center" valign="middle" >37</td><td align="center" valign="middle" >41</td></tr></tbody></table></table-wrap><p>表2. 计算结果</p></sec><sec id="s8"><title>6. 结论</title><p>蚁群算法相较各种成熟的智能计算方法，仍在实验探索阶段，但从当前的应用效果来看这种新型系统寻优思想对解决一些实际问题表现突出，解决赋权图点覆盖问题是可行的。</p><p>本文主要对蚂蚁选择下一顶点的状态转移概率进行改进，同时对信息素浓度进行限定，设置了最大值与最小值，这样可以使信息素浓度不会在好的顶点上继续加强也不会忽略掉一些潜在的搜索区域，使得解决点覆盖问题的精确度更高，运行效率更快。通过实例计算表明该近似算法提高了准确性，所得解更加趋近于最优解。</p></sec><sec id="s9"><title>基金项目</title><p>国家自然科学基金(61463027，61463026)，甘肃省自然科学基金(1610RJZA038)。</p></sec><sec id="s10"><title>文章引用</title><p>孙 森,陈京荣,吴佩雯. 赋权图点覆盖问题的蚁群算法求解Ant Colony Algorithm for Vertex Covering Problem of Weighted Graphs[J]. 计算机科学与应用, 2019, 09(10): 1823-1830. https://doi.org/10.12677/CSA.2019.910204</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.32429-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Johnson, D.S. (1979) Approximation Algorithms for Combinatorial Problems. Journal of Computer and System Scienc-es, 9, 256-278. &lt;br&gt;https://doi.org/10.1016/S0022-0000(74)80044-9</mixed-citation></ref><ref id="hanspub.32429-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">谢政. 网络最优化[M]. 北京: 科学出版社, 2014.</mixed-citation></ref><ref id="hanspub.32429-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Balaji, S., Swaminathan, V. and Kannan, K. (2010) An Effective Algorithm for Minimum Weighted Vertex Cover Problem. International Journal of Computational and Mathematical Sciences, 4, 34-38.</mixed-citation></ref><ref id="hanspub.32429-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Niedermeier, R. and Rossmanith, P. (2003) On Efficient Fixed-Parameter Algorithms for Weighted Vertex Cover. Journal of Algorithms, 47, 63-77. &lt;br&gt;https://doi.org/10.1016/S0196-6774(03)00005-1</mixed-citation></ref><ref id="hanspub.32429-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Chvatal, V. (1979) A Greedy Heuristic for the Set-Covering Problem. Mathematics of Operations Research, 4, 233-235. &lt;br&gt;https://doi.org/10.1287/moor.4.3.233</mixed-citation></ref><ref id="hanspub.32429-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Taoka, S. and Watanabe, T. (2012) Performance Comparison of Ap-proximation Algorithms for the Minimum Weight Vertex Cover Problem. ISCAS, 209, 632-635. &lt;br&gt;https://doi.org/10.1109/ISCAS.2012.6272111</mixed-citation></ref><ref id="hanspub.32429-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">寇磊, 崔笑川, 陈京荣. 最小权点覆盖问题的一个近似算法[J]. 数学的实践与认识, 2015, 45(12): 201-206.</mixed-citation></ref><ref id="hanspub.32429-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">王丽丽, 崔晋川. 求解最小点覆盖问题实例的计算成本的一种度量方法[J]. 数学的实践与认识, 2017, 47(23): 142-149.</mixed-citation></ref><ref id="hanspub.32429-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">骆伟忠, 蔡昭权. 基于核心化技术的点覆盖改进算法[J]. 计算机工程与科学, 2018, 40(8): 1405-1411.</mixed-citation></ref><ref id="hanspub.32429-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">郝斌斌, 吕斌, 陈京荣. 基于最小点覆盖的共享单车投放点选取方法[J]. 交通信息安全, 2018, 36(5): 147-152.</mixed-citation></ref><ref id="hanspub.32429-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Colorni, A., Dorlgo, M. and Maniezzo, V. (1992) An Investigation of Some Properties of an Ant Algorithm. In: Proceedings of the Parallel Problem Solving from Nature Conference, Elsevier Publishing, Brussels, 509-520.</mixed-citation></ref><ref id="hanspub.32429-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Bonabeau, E., Dorigo, M. and Teraulaz, G. (2000) Inspiration Foe Optimzation from Social Insect Behavior. Nature, 406, 39-42. &lt;br&gt;https://doi.org/10.1038/35017500</mixed-citation></ref><ref id="hanspub.32429-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">吴佩雯, 陈京荣, 姬璐烨. 基于蚁群算法的赋权图点覆盖问题[J]. 应用数学进展, 2017, 6(9): 1119-1125.</mixed-citation></ref><ref id="hanspub.32429-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">葛洪伟, 高阳. 基于蚁群算法的集合覆盖问题[J]. 计算机工程与应用, 2007, 43(4): 49-50, 255.</mixed-citation></ref><ref id="hanspub.32429-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">范辉, 华臻, 李晋江, 原达. 点覆盖问题的蚂蚁算法求解[J]. 计算机工程与应用, 2004, 40(23): 71-73.</mixed-citation></ref><ref id="hanspub.32429-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Bouamama, S., Blum, C. and Boukerram, A. (2012) A Population-Based Iterated Greedy Algorithm for the Minimum Weight Vertex Cover Problem. Applied Soft Computing Journal, 12, 1632-1639.  
&lt;br&gt;https://doi.org/10.1016/j.asoc.2012.02.013</mixed-citation></ref></ref-list></back></article>