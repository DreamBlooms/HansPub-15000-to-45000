<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">ORF</journal-id><journal-title-group><journal-title>Operations Research and Fuzziology</journal-title></journal-title-group><issn pub-type="epub">2163-1476</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/ORF.2020.103018</article-id><article-id pub-id-type="publisher-id">ORF-36835</article-id><article-categories><subj-group subj-group-type="heading"><subject>ORF20200300000_85445393.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  有效集方法求解欠定线性方程组的稀疏非负解
  Sparse Nonnegative Solution of Underdetermined Linear Equations by Active Set Method
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>鹏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>宇</surname><given-names>振盛</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>上海理工大学理学院，上海</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>31</day><month>07</month><year>2020</year></pub-date><volume>10</volume><issue>03</issue><fpage>172</fpage><lpage>184</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  针对欠定线性方程组稀疏非负解的求解问题，本文首先将原问题松弛为l
  <sub>0</sub>正则优化模型。随之提出有效集方法识别严格L-稳定点邻域内的零分量，基于这种快速识别技术，设计了有效集Barzilar-Borwein算法求解
  l<sub>0</sub>正则极小化模型。最后的数据实验证明该算法可以快速有效地求解欠定线性方程组的稀疏非负解。
   In this paper, for acquiring the sparse nonnegative solution of underdetermined linear equations, the original problem is relaxed into a 
  l
  <sub>0</sub> regularized optimization model. An active set identification technique is developed to accurately identify the zero components in a neighbourhood of the strict L-stationary point. Based on the active set identification technique, we propose an active set Barzilar-Borwein method to solve a 
  l
  <sub>0</sub> regularized minimization model. Numerical results show that the algorithm can effectively solve the sparse nonnegative solutions of underdetermined linear equations.
 
</p></abstract><kwd-group><kwd>稀疏非负解，l<sub>0</sub>正则优化模型，严格L-稳定点，有效集Barzilar-Borwein算法, Sparse Nonnegative Solution</kwd><kwd>l<sub>0</sub> Regularized Optimization Model</kwd><kwd> Strict L-Stationary Point</kwd><kwd> Active Set Barzilar-Borwein Method</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>有效集方法求解欠定线性方程组的 稀疏非负解<sup> </sup></title><p>张鹏<sup>*</sup>，宇振盛<sup>#</sup></p><p>上海理工大学理学院，上海</p><disp-formula id="hanspub.36835-formula21"><graphic xlink:href="//html.hanspub.org/file/2-1700209x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2020年7月9日；录用日期：2020年7月24日；发布日期：2020年7月31日</p><disp-formula id="hanspub.36835-formula22"><graphic xlink:href="//html.hanspub.org/file/2-1700209x9_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>针对欠定线性方程组稀疏非负解的求解问题，本文首先将原问题松弛为 l 0 正则优化模型。随之提出有效集方法识别严格L-稳定点邻域内的零分量，基于这种快速识别技术，设计了有效集Barzilar-Borwein算法求解 l 0 正则极小化模型。最后的数据实验证明该算法可以快速有效地求解欠定线性方程组的稀疏非负解。</p><p>关键词 :稀疏非负解， l 0 正则优化模型，严格L-稳定点，有效集Barzilar-Borwein算法</p><disp-formula id="hanspub.36835-formula23"><graphic xlink:href="//html.hanspub.org/file/2-1700209x13_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/2-1700209x14_hanspub.png" /> <img src="//html.hanspub.org/file/2-1700209x15_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>基于欠定线性方程组 A x = b ，这里 b ∈ R m ， x ∈ R n ，A是 m &#215; n ( m &lt; n ) 的矩阵，b是已知的，x是未知的，本文只考虑非负解 x ≥ 0 的部分。寻找欠定线性方程组的稀疏非负解，就是求解如下的优化问题：</p><p>min ‖ x ‖ 0 s .t .   A x = b , x ≥ 0. (1)</p><p>其中 ‖ x ‖ 0 指向量x中非零分量的个数。这类问题在信号处理，图像恢复和多光谱数据处理等领域引起了广泛的研究 [<xref ref-type="bibr" rid="hanspub.36835-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.36835-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.36835-ref3">3</xref>]。</p><p>在现有的研究成果中，主要用贪婪法和松弛法来解决问题(1)。贪婪法主要包括正交匹配追踪算法 [<xref ref-type="bibr" rid="hanspub.36835-ref4">4</xref>]，正则化正交匹配追踪算法 [<xref ref-type="bibr" rid="hanspub.36835-ref5">5</xref>] 以及压缩采样匹配追踪 [<xref ref-type="bibr" rid="hanspub.36835-ref6">6</xref>] 和子空间追踪 [<xref ref-type="bibr" rid="hanspub.36835-ref7">7</xref>]。这种类型的算法由于其相对较快的计算速度，而在实践中得到了广泛的应用。然而，当信号不是很稀疏或观测噪声水平较高时，贪婪法的性能无法得到保证。</p><p>松弛法是通过用一定的非负连续函数代替 l 0 范数，将 l 0 极小化模型转化为更易于处理的模型。常用于逼近 l 0 极小化模型的是 l 1 极小化模型。 l 1 极小化是一个凸优化问题，在矩阵A满足适当的条件下， l 1 极小化可以精确地恢复稀疏信号。因此， l 1 极小化被认为是解决稀疏性问题的非常有用的工具并得到了广泛的运用。此外，一些非凸函数 l p ( 0 &lt; p &lt; 1 ) 范数被提出作为 l 0 范数的松弛。与 l 1 极小化方法相比，非凸松弛模型通常具有更好的稀疏性，但通常较难求解。</p><p>求解约束优化问题(1)主要有两种算法。第一种算法是迭代重加权算法，其中两个最重要的迭代重加权算法是重加权 l 1 极小化 [<xref ref-type="bibr" rid="hanspub.36835-ref8">8</xref>] 和迭代重加权最小二乘算法 [<xref ref-type="bibr" rid="hanspub.36835-ref9">9</xref>]。另一种方法通常称为正则化方法，它通过引入正则化参数将问题(1)转化为下面的优化问题：</p><p>min ϕ ( x ) : = f ( x ) + μ ‖ x ‖ 0 s .t .   x ≥ 0. (2)</p><p>其中 f ( x ) = 1 2 ‖ A x − b ‖ 2 2 ，且 μ &gt; 0 是给定的正则化参数。</p><p>本文的其他内容如下：首先给出一些符号定义和关于问题(2)的一阶优化条件。基于Cheng和Chen [<xref ref-type="bibr" rid="hanspub.36835-ref10">10</xref>] 的研究，我们在加入非负约束 x ≥ 0 后，重新定义了四种关于问题(2)的稳定点：基本稳定点，强基本稳定点，L-稳定点，严格L-稳定点，并说明了它们之间的关系。随之提出了有效集方法求解问题(2)，这种方法能够精准地找出L-稳定点邻域内的值为零的分量。接着提出了有效集Barzilar-Borwein算法求解问题(2)。最后进行了数据实验，证明了该算法可以有效的求解欠定线性方程组的稀疏非负解。</p></sec><sec id="s4"><title>2. 符号说明</title><p>在本节中，我们将定义一些符号说明。假设 x * 是问题(2)的最优解，我们定义有效集 γ ( x * ) 是 x * 中零分量的下标集合，无效集 τ ( x * ) 是 x * 中非零分量的下标集合：</p><p>γ ( x * ) = { i : x i * = 0 } 和 τ ( x * ) = { i : x i * &gt; 0 } .</p><p>定义2.1 [<xref ref-type="bibr" rid="hanspub.36835-ref11">11</xref>] 令 ν ∈ R n ， α &gt; 0 ，若向量值函数 h 0 ( ν , α ) 满足</p><p>h 0 ( ν , α ) i = { ν i , | ν i | &gt; 2 α , 0 , | ν i | ≤ 2 α .     i = 1 , 2 , ⋯ , n .</p><p>则称 h 0 ( ν , α ) 为硬阈值算子。</p><p>注2.1 硬阈值算子是 l 0 极小化问题的最优解，即</p><p>h 0 ( ν , α ) = arg min u ∈ R n { ‖ u ‖ 1 : u = arg min x ∈ R n { α ‖ x ‖ 0 + 1 2 ‖ x − ν ‖ 2 } } .</p><p>在最近的研究中，Beck和Hallak [<xref ref-type="bibr" rid="hanspub.36835-ref12">12</xref>] 提出了下面问题的一些基本定义</p><disp-formula id="hanspub.36835-formula24"><label>(3)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/2-1700209x51_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中 μ &gt; 0 ， B ⊆ R n 。</p><p>定义2.2 (基本稳定点)如果 B = R + n ，则有：</p><p>g i ( x * ) = 0 , ∀ i ∈ τ ( x * ) . (4)</p><p>其中 g i ( x * ) 表示 f ( x * ) 在第i个分量的梯度。那我们称满足条件(4)的 x * 为问题(2)的基本稳定点。</p><p>定义2.3 (L-稳定点)向量 x * 称作问题(3)的L-稳定点需满足：</p><p>x * ∈ p r o x μ L g B ( x * − 1 L g ( x * ) ) = arg min x ∈ B { μ L ‖ x ‖ 0 + 1 2 ‖ x − ( x * − 1 L g ( x * ) ) ‖ 2 } .</p><p>其中 L &gt; 0 ， g B ( x ) = δ B ( x ) + ‖ x ‖ 0 且 δ B ( x ) 是集合B的指标函数，而指标函数也就是</p><p>δ B ( x ) = { 0 , x ∈ B ; 1 , x ∉ B .</p><p>当 B = R + n 时，问题 等价于问题 ，则上述条件等价于下面的条件：</p><p>{ 0 ≤ g i ( x * ) ≤ 2 μ L , i ∈ γ ( x * ) ; x i * ≥ 2 μ L 且 g i ( x * ) = 0 , i ∈ τ ( x * ) .</p><p>向量 x * 满足如下条件就称为问题(2)的严格L-稳定点：</p><p>{ 0 ≤ g i ( x * ) ≤ 2 μ L , i ∈ γ ( x * ) ; x i * &gt; 2 μ L 且 g i ( x * ) = 0 , i ∈ τ ( x * ) . (5)</p><p>向量 x * 满足如下条件就称为问题(2)的强基本稳定点：</p><p>{ 0 ≤ g i ( x * ) ≤ 2 μ L , i ∈ γ ( x * ) ; g i ( x * ) = 0 , i ∈ τ ( x * ) .</p><p>由上述条件不难得出由问题(2)的严格L-稳定点可以推出问题(2)的L-稳定点，强基本稳定点和基本稳定点。</p><p>对于函数 ϕ ( x ) ，称 d ∈ R n 是函数 ϕ ( x ) 在x处的下降方向，如果常数 δ &gt; 0 ，使得</p><p>ϕ ( x + α d ) &lt; ϕ ( x ) , ∀ α ∈ ( 0 , δ ) .</p><p>我们用 D ( x ) 表示函数 ϕ ( x ) 的所有下降方向的集合：</p><p>D ( x ) = { d ∈ R n | ϕ ( x + α d ) &lt; ϕ ( x ) , ∀ α ∈ ( 0 , δ ) } .</p><p>类似于文献 [<xref ref-type="bibr" rid="hanspub.36835-ref10">10</xref>] 的定理2.1，下面的定理将给出集合 D ( x ) 更精确的表达形式，这将有利于我们设计线性搜索方法解决问题(2)。</p><p>定理2.1 假设 x &gt; 0 ，由于 f ( x ) 是连续可微的，集合 D ( x ) 可表示为：</p><p>D ( x ) = { d ∈ R n | g τ ( x ) T d τ ( x ) &lt; 0 , d γ ( x ) = 0 } .</p></sec><sec id="s5"><title>3. 有效集估计</title><p>通常来说，有效集的效率很大程度上取决于如何找到最优点处的有效约束。接下来，将介绍有效集的估计并用它来逼近原问题的严格L-稳定点。我们用集合 A ( x ) 逼近 γ ( x * ) ，集合 F ( x ) 逼近 τ ( x * ) ：</p><p>A ( x ) = { i : 0 ≤ x i ≤ 1 L g i ( x ) + 2 μ L } ,</p><p>和</p><p>F ( x ) = { i : x i &gt; 1 L g i ( x ) + 2 μ L } .</p><p>下面的定理表明，当点 x k 足够接近严格L-稳定点时，则上述有效集的逼近集合 A ( x k ) 是集合 γ ( x * ) 的子集。</p><p>定理3.1 假设 x * 是问题(2)的严格L-稳定点，序列 { x k } 收敛于 x * ，则对于足够大的k有：</p><p>A ( x k ) ⊆ γ ( x * ) 且 τ ( x * ) ⊆ F ( x k ) .</p><p>证明：假设 x * 是问题(2)的严格L-稳定点，如果 τ ( x * ) = ∅ ，由于</p><p>A ( x k ) ∪ F ( x k ) = γ ( x * ) ∪ τ ( x * ) = { 1 , 2 , ⋯ , n } .</p><p>所以结论成立。假设 τ ( x * ) ≠ ∅ ，对于任意的 i ∈ τ ( x * ) ，由(5)可知：</p><p>x i * − 1 L g i ( x * ) = x i * &gt; 2 μ L .</p><p>因为 g ( x ) 是连续的，故有：</p><p>x i k − 1 L g i ( x k ) &gt; 2 μ L .</p><p>因此， i ∈ F ( x k ) 也就是 τ ( x * ) ⊆ F ( x k ) 。</p><p>另一方面，对于任意的 i ∈ A ( x k ) ，有</p><p>0 ≤ x i k ≤ 1 L g i ( x k ) + 2 μ L .</p><p>由于序列 { x k } 收敛于 x * ，可得：</p><p>0 ≤ x i * ≤ 1 L g i ( x * ) + 2 μ L .</p><p>对于足够大的k，可得 x i * = 0 。再由最优性条件，我们有 0 ≤ g i ( x * ) ≤ 2 μ L 。因此， i ∈ γ ( x * ) 也就是 A ( x k ) ⊆ γ ( x * ) ，证毕。</p><p>下面的定理表明，当 x k 是问题(2)的严格L-稳定点时，我们可以得到集合 A ( x k ) = γ ( x k ) 。</p><p>定理3.2 假设<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1700209x118_hanspub.png" xlink:type="simple"/></inline-formula>是问题的严格L-稳定点，则有：</p><p>A ( x k ) = γ ( x k ) , F ( x k ) = τ ( x k ) .</p><p>证明：假设 x k 是问题的严格L-稳定点，对于任意的 i ∈ γ ( x k ) ，由条件(5)可得 i ∈ A ( x k ) 。而对于任意的 i ∈ A ( x k ) ，我们有 x i k = 0 。但事实上，如果存在 x i k ≠ 0 ，由条件(5)可得 g i ( x k ) = 0 且有：</p><p>x i k ≤ 2 μ L ⇒ x i k = 0.</p><p>由此可得 i ∈ γ ( x k ) ，故 A ( x k ) = γ ( x k ) 。同理可得 F ( x k ) = τ ( x k ) ，证毕。</p></sec><sec id="s6"><title>4. 有效集算法</title><p>在本节中，首先给出搜索方向的定义和一些相关性质，然后介绍一种有效集Barzilar-Borwein算法来求解问题(2)，并分析了该算法的全局收敛性。</p><sec id="s6_1"><title>4.1. 搜索方向的一些性质</title><p>令 x k ∈ Ω 是第k个迭代点，为了简化表述，令</p><p>A k = A ( x k ) , F k = { i ∈ F ( x k ) : x i &gt; 0 } .</p><p>为了定义搜索方向，进一步将 A k 分成两个部分：</p><p>A 1 k = { i ∈ A k : x i k g i ( x k ) ≥ 0 } , A 2 k = { i ∈ A k : x i k g i ( x k ) &lt; 0 } .</p><p>搜索方向 d k = ( d A 1 k k , d A 2 k k , d F k k ) ，定义 d F k k 为：</p><p>d i k = − λ k g i k , i ∈ F k . (6)</p><p>其中 0 &lt; λ min ≤ λ k &lt; λ max 是Barzilar-Borwein算法的步长，其精确的定义将在4.2节中给出。集合 A 1 k 表示零分量的下标集合，且包含满足条件(5)的变量的下标集合。集合 A 2 k 包含不满足条件(5)的变量的下标集合。因此，给出定义：</p><p>d i k = − x i k , i ∈ A 1 k . (7)</p><p>d i k = − g i k , i ∈ A 2 k . (8)</p><p>下面的定理表明 d k = 0 当且仅当 x k 是问题(2)的一个严格L-稳定点。</p><p>定理4.1 假设 d k 由上述定义式(6)~(8)所表示。 d k = 0 当且仅当 x k 是问题(2)的一个严格L-稳定点。</p><p>证明：令 d k = 0 ，由 A 2 k 的定义和搜索方向 d i k = − g i k = 0 ，可得 A 2 k = ∅ 。如果 i ∈ A i k ，由 A 1 k 的定义和 d i k = − x i k = 0 可得：</p><p>x i k = 0 且 g i ( x k ) ≤ 2 μ L .</p><p>如果 i ∈ F k ，由 F k 的定义可知：</p><p>x i k &gt; 2 μ L 且 g i ( x k ) = 0.</p><p>反过来，假设 x k 是问题(2)的严格L-稳定点。如果 i ∈ A k ，我们称 x i k = 0 ， d i k = − x i k = 0 且 A 2 k = ∅ 。事实上，如果 x i k ≠ 0 ，由式(5)可得：</p><p>g i ( x k ) = 0 且 x i k ≤ 2 μ L ⇒ x i k = 0.</p><p>这与假设条件矛盾。因此，对 ∀ i ∈ F k 有：</p><p>g i ( x k ) = 0 且 d i k = 0.</p><p>证毕。</p><p>定理4.2 假设 x k → x * 且 d k → 0 ，其中 d k 由式(6)~(8)所表示，则 x * 是问题(2)的一个L-稳定点。</p><p>证明：对于 ∀ i ∈ A 1 k ，当 x k → x * 时，由于 d i k = − x i k → 0 ，可得 x i * = 0 。再由 A 1 k 的定义，我们可得：</p><p>x i * = 0 且 g i ( x * ) ≤ 2 μ L ,</p><p>对于 ∀ i ∈ A 2 k ，由 d i k = − g i k → 0 ，可得：</p><p>g i ( x * ) = 0.</p><p>对于 ∀ i ∈ F k ，由于 g ( x ) 的连续性和 d k → 0 ，有</p><p>x i * ≥ 2 μ L 且 g i ( x * ) = 0.</p><p>证毕。</p><p>下面的定理表明，如果 x k 是问题(2)的强基本稳定点，由(6)~(8)定义的 d k 是f在 x k 处的下降方向。</p><p>定理4.3 假设 d k 由(6)~(8)式定义，可得</p><p>( g k ) T d k ≤ 0. (9)</p><p>此外，等号成立当且仅当 x k 是问题(2)的强基本稳定点。</p><p>证明：由 A 1 k 的定义可知：</p><p>g i k d i k = − g i k x i k ≤ 0 , ∀ i ∈ A i k .</p><p>再由 A 2 k 的定义可知：</p><p>g i k d i k = − ( g i k ) 2 &lt; 0.</p><p>对于任意的 i ∈ F k ，我们有：</p><p>( g i k ) T d i k ≤ − λ min ‖ ( g i k ) T ‖ 2 ≤ 0.</p><p>综上所述，我们可以得到 ( g k ) T d k ≤ 0 。</p><p>假设 x k 是问题(2)的强基本稳定点。对于任意的 i = 1 , 2 , ⋯ , n ，有 x i k g i ( x k ) = 0 。由此，对于任意的 i ∈ A 1 k ，有 d i k = − x i k ，则有 ( g k ) T d k = 0 。由 A 2 k 的定义可知 A 2 k = ∅ 。对于任意的 i ∈ F k ，我们有 g i k = 0 。相反地，假设不等式(9)的左边等于0，我们有：</p><p>g i ( x k ) = 0 且 x i k &gt; 2 μ L , ∀ i ∈ F k .</p><p>由 A 2 k 的定义可知 A 2 k = ∅ 。由<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1700209x211_hanspub.png" xlink:type="simple"/></inline-formula>的定义可得：</p><p>x i k = 0 , 0 ≤ g i k ≤ 2 μ L 或 0 &lt; x i k ≤ 2 μ L , g i k = 0.</p><p>由此可知， x k 是问题 的强基本稳定点，证毕。</p></sec><sec id="s6_2"><title>4.2. 算法</title><p>基于上述讨论和非单调线性搜索 [<xref ref-type="bibr" rid="hanspub.36835-ref13">13</xref>]，类似于文献 [<xref ref-type="bibr" rid="hanspub.36835-ref10">10</xref>]，我们提出了一种有效集Barzilar-Borwein算法来求解问题(2)。但不同于文献 [<xref ref-type="bibr" rid="hanspub.36835-ref10">10</xref>] 的是我们在加入非负约束后，重新定义了有效集和有效集部分的搜索方向，产生了不同的迭代点，加快了算法的收敛速度。</p><p>算法4.1 (有效集Barzilar-Borwein算法，简记ABB算法)</p><p>步0 初始化 x 0 ∈ R + n ，取 η , δ ∈ ( 0 , 1 ) ， λ 0 = 1 且 λ max &gt; λ min &gt; 0 ，正整数M，取 k = 0 。</p><p>步1 进行收敛性检验，如果满足停止条件，则用近似解 x k 终止。</p><p>步2 计算 λ k : λ min ≤ λ k ≤ λ max 且 d k 由式(6)~(8)确定。</p><p>步3 如果<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1700209x222_hanspub.png" xlink:type="simple"/></inline-formula>，满足不等式</p><p>ϕ ( x k + α k d k ) ≤ ϕ ( x k ) − δ ( α k ‖ d k ‖ ) 2 . (10)</p><p>执行步5，否则执行步4。</p><p>步4 确定 α k : = max { η j , j = 0 , 1 , ⋯ } 满足不等式</p><p>f ( x k + α k d k ) ≤ max 0 ≤ j ≤ m ( k ) f ( x k − j ) − δ ( α k ‖ d k ‖ ) 2 . (11)</p><p>其中 m ( 0 ) = 0 ， 0 ≤ m ( k ) ≤ min [ m ( k − 1 ) + 1 , M ] ，执行步5。</p><p>步5 计算 x k + 1 : = x k + α k d k ，取 k : = k + 1 ，返回步1。</p><p>接下来，将给出 λ k 的显性形式，运用了Barzilar-Borwein (BB)算法 [<xref ref-type="bibr" rid="hanspub.36835-ref14">14</xref>] 的基本思想。类似于Barzilar-Borwein步的思想，通过求解下面的优化问题：</p><p>min λ ∈ R ‖ D ( λ ) s F k k − 1 − y F k k − 1 ‖ 2 .</p><p>其中 s F k k − 1 = x F k k − x F k k − 1 且 y F k k − 1 = g F k k − g F k k − 1 ，我们得到Barzilar-Borwein步长如下：</p><p>λ B B k = ‖ s F k k − 1 ‖ 2 ( s F k k − 1 ) T y F k k − 1 .</p><p>为了控制 λ B B k 的大小值，我们用区间 [ λ min , λ max ] 来限制，其中 λ min &lt; λ max 是给定的正常数。因此，我们设</p><p>λ k = max { λ min , min { λ max , λ B B k } } (12)</p><p>为了简单起见，我们将步长(12)代入式(6)，简化了算法4.1。</p></sec><sec id="s6_3"><title>4.3. 全局收敛性分析</title><p>下面将分析算法4.1的全局收敛性。类似于文献 [<xref ref-type="bibr" rid="hanspub.36835-ref13">13</xref>] 中的分析，可以得到了如下的引理。</p><p>引理4.1 假设序列<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1700209x239_hanspub.png" xlink:type="simple"/></inline-formula>是由算法4.1产生。如果存在一个正整数 k 1 ，对于所有 k &gt; k 1 ，满足线性搜索(11)，我们有：</p><p>lim k → ∞ α k d k = 0. (13)</p><p>下面的定理和定理4.2表明序列 { x k } 的任意聚点都是问题(2)的L-稳定点和强基本稳定点。</p><p>定理4.4 假设序列 { x k } 是由算法4.1产生。如果对于所有的k都有 d k ≠ 0 ，则序列 { x k } 的任意聚点 x * 都是问题(2)的L-稳定点或强基本稳定点。</p><p>证明：假设对于所有的k都有 d k ≠ 0 ，且 x * 为序列 { x k } 的任意聚点。则存在一个无限指标集合K，满足 k ∈ K 使得：</p><p>lim k → ∞ x k = x * .</p><p>考虑到不同集合 A 1 k , A 2 k , F k 的数量是有限的，对于任意的 k ∈ K ，我们考虑两种情况。情形(1)：如果存在一个无限指标集合 K 1 ⊆ K ，对于所有的 k ∈ K 1 ，线搜索(11)都满足。通过对不等式(10)求和，可得</p><disp-formula id="hanspub.36835-formula25"><graphic xlink:href="//html.hanspub.org/file/2-1700209x257_hanspub.png"  xlink:type="simple"/></disp-formula><p>则由定理4.2可知结论成立。情形(2)：如果存在一个正整数 k 1 ，对于所有的 k &gt; k 1 ，线搜索(11)都满</p><p>足。如果序列 { α k } k ∈ K 有一个非零的极限值，我们由(13)式可知</p><p>lim k → ∞ d k = 0.</p><p>则由定理4.2可得知结论成立。否则，如果我们有 lim k → ∞ α k = 0 ，对于所有的 k ≥ 1 ，由线搜索(11)规则可得</p><p>f ( x k + α k η d k ) − f ( x k ) ≥ f ( x k + α k η d k ) − max 0 ≤ j ≤ m ( k ) f ( x k − j ) &gt; − δ ( α k η ‖ d k ‖ ) 2 . (14)</p><p>另一方面，对于充分大的 k ∈ K ，由中值定理可得</p><p>f ( x k + α k η d k ) − f ( x k ) = α k η ( g ( x k + θ k α k η d k ) − g ( x k ) ) T d k + α k η g ( x k ) T d k .</p><p>其中 θ k ∈ ( 0 , 1 ) 。将上述等式带入(14)，可得</p><p>( g ( x k + θ k α k η d k ) − g ( x k ) ) T d k + g ( x k ) T d k &gt; − δ α k η ‖ d k ‖ 2 .</p><p>由于序列<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/2-1700209x269_hanspub.png" xlink:type="simple"/></inline-formula>是有界的，不失一般性地，存在 d * 使得 lim k → ∞ d k = d * ，结合引理4.1可知， lim k → ∞ α k = 0 。再由最后一个不等式取极限得 g ( x * ) T d * &gt; 0 。由定理4.3得出矛盾，故结论成立，证毕。</p></sec></sec><sec id="s7"><title>5. 数值实验</title><p>下面将进行一些数值实验来验证算法4.1对于求解欠定线性方程组的稀疏非负解是有效的。所有的实验结果都是在联想笔记本电脑(2.50 GHz, 8.00 GB of RAM)上实现的，数学软件采用MATLAB R2016a。</p><p>基于文献 [<xref ref-type="bibr" rid="hanspub.36835-ref15">15</xref>] 的实验证实了 l 0 优化问题可连续的有效性，我们将算法中嵌入连续化过程。具体方法就是在考虑求解问题(2)前，先求解如下一系列问题</p><p>x μ k * : = arg min x ∈ R + n { ϕ μ k ( x ) = f ( x ) + μ k ‖ x ‖ 0 } .</p><p>其中 μ 0 &gt; μ 1 &gt; ⋯ &gt; μ N 且N是一个正整数。我们用问题的解 x μ k − 1 * 作为下一个问题的初始迭代点。取 μ 0 = 1 2 ‖ A T b ‖ ∞ 2 ， μ N = 10 − 15 μ 0 ，区间 [ μ N , μ 0 ] 经过取对数化处理后，再将其分成N个均匀分布的子区间。我们选择序列 { μ k } 作为子区间的端点，并对 μ k 做了一个处理，即令 μ k = max { μ k , 0.005 } 。算法中涉及的参数设计如下：</p><p>λ 0 = 1 , M = 10 , λ min = 10 − 3 , λ max = 10 , δ = 10 − 2 , η = 0.5 。首先用标准高斯分布的独立样本填充 m &#215; n 的度量矩阵A，并且对这些行进行正交化。而真实解 x * 是一个具有有效集 A * 的T-稀疏信号，观测向量b定义为：</p><p>b = A x * + e</p><p>其中e是根据均值为零且方差为10<sup>-2</sup>的高斯分布绘制的。</p><p>在实验中，我们研究了参数N和L对算法的影响，设 n = 5 &#215; 10 3 和 n = 10 4 ， m = r o u n d ( 0.2 ∗ n ) ，并考虑了稀疏度的范围： x * 的非零分量的数量T在1到60都是可行的。算法的初始点是零向量，当满足 ‖ g ( x k ) τ ( x k ) ‖ ∞ ≤ 10 − 5 或 ‖ g ( x k ) γ ( x k ) ‖ ∞ ≤ 0 .05 条件时，停止运算。下面将从平均迭代步数(Iter)、平均误差( ‖ x k − x * ‖ ∞ )和运算时间(Time)三个方面来对ABB算法的性能进行评估。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> n = 5 &#215; 10 <sup>3</sup> , L = 1 / 5 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.86</td><td align="center" valign="middle" >4.14e−02</td><td align="center" valign="middle" >18.85</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >31.62</td><td align="center" valign="middle" >4.47e−02</td><td align="center" valign="middle" >19.21</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >35.55</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >22.03</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >30.47</td><td align="center" valign="middle" >5.56e−02</td><td align="center" valign="middle" >20.35</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >35.53</td><td align="center" valign="middle" >5.62e−02</td><td align="center" valign="middle" >21.48</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.55</td><td align="center" valign="middle" >5.49e−02</td><td align="center" valign="middle" >24.86</td></tr></tbody></table></table-wrap><p>表1. n = 5 &#215; 10 <sup>3</sup> , L = 1 / 5 时ABB算法求解问题的计算结果</p><table-wrap-group id="2"><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> n = 5 &#215; 10 <sup>3</sup> , L = 1 / 4 , the results of ABB algorithm to solve the proble</title></caption><table-wrap id="2_1"><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.15</td><td align="center" valign="middle" >4.14e−02</td><td align="center" valign="middle" >18.03</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >31.04</td><td align="center" valign="middle" >4.47e−02</td><td align="center" valign="middle" >19.08</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >35.22</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >20.67</td></tr></tbody></table></table-wrap><table-wrap id="2_2"><table><tbody><thead><tr><th align="center" valign="middle" >(10, 31:60)</th><th align="center" valign="middle" >30.50</th><th align="center" valign="middle" >5.56e−02</th><th align="center" valign="middle" >19.33</th></tr></thead><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >35.80</td><td align="center" valign="middle" >5.62e−02</td><td align="center" valign="middle" >20.59</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.53</td><td align="center" valign="middle" >5.49e−02</td><td align="center" valign="middle" >24.70</td></tr></tbody></table></table-wrap></table-wrap-group><p>表2. n = 5 &#215; 10 3 , L = 1 / 4 时ABB算法求解问题的计算结果</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> n = 5 &#215; 10 <sup>3</sup> , L = 1 / 2 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.85</td><td align="center" valign="middle" >4.14e−02</td><td align="center" valign="middle" >18.87</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >31.89</td><td align="center" valign="middle" >4.47e−02</td><td align="center" valign="middle" >19.09</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >35.63</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >21.33</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >32.47</td><td align="center" valign="middle" >5.56e−02</td><td align="center" valign="middle" >24.51</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >35.90</td><td align="center" valign="middle" >5.62e−02</td><td align="center" valign="middle" >25.47</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.90</td><td align="center" valign="middle" >5.49e−02</td><td align="center" valign="middle" >27.64</td></tr></tbody></table></table-wrap><p>表3. n = 5 &#215; 10 3 , L = 1 / 2 时ABB算法求解问题的计算结果</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> n = 5 &#215; 10 <sup>3</sup> , L = 1 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.96</td><td align="center" valign="middle" >4.14e−02</td><td align="center" valign="middle" >19.03</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >31.85</td><td align="center" valign="middle" >4.47e−02</td><td align="center" valign="middle" >20.55</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >35.52</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >21.10</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >34.17</td><td align="center" valign="middle" >5.56e−02</td><td align="center" valign="middle" >23.65</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >36.10</td><td align="center" valign="middle" >5.62e−02</td><td align="center" valign="middle" >24.88</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.73</td><td align="center" valign="middle" >5.49e−02</td><td align="center" valign="middle" >26.78</td></tr></tbody></table></table-wrap><p>表4. n = 5 &#215; 10 3 , L = 1 时ABB算法求解问题的计算结果</p><p>由上述表1~4可以看出，当问题的规模取 n = 5 &#215; 10 3 时， T = 31 : 60 , N = 15 ，ABB算法产生了较大的平均误差。在 T = 1 : 30 , N = 10 时，ABB算法产生的平均误差较小。而L的取值变化对于ABB算法产生的平均误差影响很小。</p><p>对于上述表格中计算的数据，我们将绘图分析在 T = 1 : 30 时，L和N的取值变化对于ABB算法求解问题的平均迭代次数和运算时间产生的影响。</p><p>图1. 不同L水平下，N取值变化对平均迭代次数的影响</p><p>图2. 不同L水平下，N取值变化对运算时间的影响</p><p>图3. 不同N水平下，L取值变化对平均迭代次数的影响</p><p>图4. 不同N水平下，L取值变化对运算时间的影响</p><p>由图1和图2可以明显看出，当L的值一定时，随着N的取值变大，迭代步数和运算时间都会增加。同样的，由图3和图4可以明显看出，当N的取值一定时，可以看出 L = 1 / 4 时，平均迭代步数和运算时间都是最小的。由此可知，当 L = 1 / 4 , N = 10 时，可以得到最优的实验结果。</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> n = 10 4 , L = 1 / 5 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.86</td><td align="center" valign="middle" >4.77e−02</td><td align="center" valign="middle" >76.62</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >30.62</td><td align="center" valign="middle" >4.70e−02</td><td align="center" valign="middle" >77.02</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >34.55</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >79.56</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >28.47</td><td align="center" valign="middle" >5.53e−02</td><td align="center" valign="middle" >80.35</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >33.53</td><td align="center" valign="middle" >5.72e−02</td><td align="center" valign="middle" >81.46</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.27</td><td align="center" valign="middle" >5.48e−02</td><td align="center" valign="middle" >84.06</td></tr></tbody></table></table-wrap><p>表5. n = 10 4 , L = 1 / 5 时ABB算法求解问题的计算结果</p><table-wrap id="table6" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> n = 10 4 , L = 1 / 4 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.41</td><td align="center" valign="middle" >4.77e−02</td><td align="center" valign="middle" >75.03</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >30.59</td><td align="center" valign="middle" >4.70e−02</td><td align="center" valign="middle" >76.08</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >34.62</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >78.77</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >27.70</td><td align="center" valign="middle" >5.53e−02</td><td align="center" valign="middle" >77.53</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >32.03</td><td align="center" valign="middle" >5.72e−02</td><td align="center" valign="middle" >80.49</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.23</td><td align="center" valign="middle" >5.48e−02</td><td align="center" valign="middle" >82.50</td></tr></tbody></table></table-wrap><p>表6. n = 10 4 , L = 1 / 4 时ABB算法求解问题的计算结果</p><table-wrap id="table7" ><label><xref ref-type="table" rid="table7">Table 7</xref></label><caption><title> n = 10 4 , L = 1 / 2 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.84</td><td align="center" valign="middle" >4.77e−02</td><td align="center" valign="middle" >76.97</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >30.90</td><td align="center" valign="middle" >4.70e−02</td><td align="center" valign="middle" >80.09</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >34.69</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >81.53</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >30.27</td><td align="center" valign="middle" >5.53e−02</td><td align="center" valign="middle" >80.51</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >33.80</td><td align="center" valign="middle" >5.72e−02</td><td align="center" valign="middle" >81.67</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >40.30</td><td align="center" valign="middle" >5.48e−02</td><td align="center" valign="middle" >83.54</td></tr></tbody></table></table-wrap><p>表7. n = 10 4 , L = 1 / 2 时ABB算法求解问题的计算结果</p><table-wrap id="table8" ><label><xref ref-type="table" rid="table8">Table 8</xref></label><caption><title> n = 10 4 , L = 1 , the results of ABB algorithm to solve the proble</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >(N, T)</th><th align="center" valign="middle" >Iter</th><th align="center" valign="middle" >‖ x k − x * ‖ ∞</th><th align="center" valign="middle" >Time (sec.)</th></tr></thead><tr><td align="center" valign="middle" >(10, 1:30)</td><td align="center" valign="middle" >26.98</td><td align="center" valign="middle" >4.77e−02</td><td align="center" valign="middle" >77.03</td></tr><tr><td align="center" valign="middle" >(15, 1:30)</td><td align="center" valign="middle" >30.93</td><td align="center" valign="middle" >4.70e−02</td><td align="center" valign="middle" >79.55</td></tr><tr><td align="center" valign="middle" >(20, 1:30)</td><td align="center" valign="middle" >34.66</td><td align="center" valign="middle" >4.60e−02</td><td align="center" valign="middle" >81.10</td></tr><tr><td align="center" valign="middle" >(10, 31:60)</td><td align="center" valign="middle" >31.43</td><td align="center" valign="middle" >5.53e−02</td><td align="center" valign="middle" >80.65</td></tr><tr><td align="center" valign="middle" >(15, 31:60)</td><td align="center" valign="middle" >34.07</td><td align="center" valign="middle" >5.72e−02</td><td align="center" valign="middle" >82.68</td></tr><tr><td align="center" valign="middle" >(20, 31:60)</td><td align="center" valign="middle" >39.90</td><td align="center" valign="middle" >5.48e−02</td><td align="center" valign="middle" >83.78</td></tr></tbody></table></table-wrap><p>表8. n = 10 4 , L = 1 时ABB算法求解问题的计算结果</p><p>由表5~8中的结果可知，当问题规模达到 n = 10 4 时，我们依旧可以得到相同的结论。当L的值一定时，随着N的取值变大，迭代步数和运算时间都会增加。当N的取值一定时，可以看出 L = 1 / 4 时，平均迭代步数和运算时间都是最小的。由此可知，当 L = 1 / 4 , N = 10 时，可以得到最优的实验结果。综上可知，ABB算法可以快速有效地求解欠定线性方程组的稀疏非负解。</p></sec><sec id="s8"><title>6. 小结</title><p>本文主要讨论了求解欠定线性方程组的稀疏非负解问题。首先将线性约束条件惩罚到目标函数上，给出了 l 0 正则优化模型的严格L-稳定点定义。随之提出有效集方法识别严格L-稳定点邻域内的零分量，基于这种快速精准的识别技术，设计了有效集Barzilar-Borwein算法，并且证明了由该算法产生的序列的任意聚点都是强稳定点。最后进行了数据实验，证明了该算法可以快速有效地求解欠定线性方程组的稀疏非负解。</p></sec><sec id="s9"><title>文章引用</title><p>张 鹏,宇振盛. 有效集方法求解欠定线性方程组的稀疏非负解Sparse Nonnegative Solution of Underdetermined Linear Equations by Active Set Method[J]. 运筹与模糊学, 2020, 10(03): 172-184. https://doi.org/10.12677/ORF.2020.103018</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.36835-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Donoho, D.L. (2006) Compressed Sensing. IEEE Transactions on Information Theory, 52, 1289-1306.  
&lt;br&gt;https://doi.org/10.1109/TIT.2006.871582</mixed-citation></ref><ref id="hanspub.36835-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Bruckstein, A.M., Donoho, D.L. and Elad, M. (2009) From Sparse Solutions of Systems of Equations to Sparse Modeling of Signals and Images. SIAM Review, 51, 34-81. &lt;br&gt;https://doi.org/10.1137/060657704</mixed-citation></ref><ref id="hanspub.36835-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Candès, E. and Tao, T. (2006) Near Optimal Signal Recovery from Random Projections: Universal Encoding Strategies. IEEE Transactions on Information Theory, 52, 5406-5425. &lt;br&gt;https://doi.org/10.1109/TIT.2006.885507</mixed-citation></ref><ref id="hanspub.36835-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Tropp, J.A. and Gilbert, A. (2007) Signal Recovery from Random Measurements via Orthogonal Matching Pursuit. IEEE Transactions on Information Theory, 53, 4655-4666. &lt;br&gt;https://doi.org/10.1109/TIT.2007.909108</mixed-citation></ref><ref id="hanspub.36835-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Needell, D. and Vershynim, R. (2010) Signal Recovery from In-complete and Inaccurate Measurements via Regularized Orthogonal Matching Pursuit. IEEE Journal of Selected Topics in Signal Processing, 4, 310-316.  
&lt;br&gt;https://doi.org/10.1109/JSTSP.2010.2042412</mixed-citation></ref><ref id="hanspub.36835-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Needell, D. and Tropp, J.A. (2008) CoSaMP: Iterative Signal Recovery from Incomplete and Inaccurate Samples. Applied and Computational Harmonic Analysis, 26, 301-321. &lt;br&gt;https://doi.org/10.1016/j.acha.2008.07.002</mixed-citation></ref><ref id="hanspub.36835-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Dai, W. and Milenkovic, O. (2009) Subspace Pursuit for Com-pressive Sensing Signal Reconstruction. IEEE Transactions on Information Theory, 55, 2230-2249. &lt;br&gt;https://doi.org/10.1109/TIT.2009.2016006</mixed-citation></ref><ref id="hanspub.36835-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Candès, E., Wakin, M.B. and Boyd, S.P. (2008) Enhancing Spar-sity by Reweighted L1 Minimization. Journal of Fourier Analysis and Applications, 14, 877-905. &lt;br&gt;https://doi.org/10.1007/s00041-008-9045-x</mixed-citation></ref><ref id="hanspub.36835-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Gorodnitsky, I.F. and Rao, B.D. (1997) Sparse Signal Recon-struction from Limited Data Using FOCUSS: A Reweighted Minimum Norm Algorithm. IEEE Transactions on Signal Processing, 45, 600-616.  
&lt;br&gt;https://doi.org/10.1109/78.558475</mixed-citation></ref><ref id="hanspub.36835-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Cheng, W., Chen, Z. and Hu, Q. (2019) An Active Set Barzilar-Borwein Algorithm for L0 Regularized Optimization. Journal of Global Optimization, 76, 769-791. &lt;br&gt;https://doi.org/10.1007/s10898-019-00830-w</mixed-citation></ref><ref id="hanspub.36835-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Zeng, J.S., Lin, S.B. and Xu, Z.B. (2014) Sparse Solution of Underdetermined Linear Equations via Adaptively Iterative Thresholding. Signal Processing, 97, 152-161. &lt;br&gt;https://doi.org/10.1016/j.sigpro.2013.10.031</mixed-citation></ref><ref id="hanspub.36835-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Beck, A. and Hallak, N. (2018) Proximal Mapping for Sym-metric Penalty and Sparsity. SIAM Journal on Optimization, 28, 496-527. &lt;br&gt;https://doi.org/10.1137/17M1116544</mixed-citation></ref><ref id="hanspub.36835-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Grippo, L., Lampariello, F. and Lucidi, S. (1986) A Non-Monotone Line Search Technique for Newton’s Method. SIAM Journal of Numerical Analysis, 23, 707-716. &lt;br&gt;https://doi.org/10.1137/0723046</mixed-citation></ref><ref id="hanspub.36835-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Barzilai, J. and Borwein, J.M. (1988) Two Point Step Size Gradient Method. IMA Journal of Numerical Analysis, 8, 141-148. &lt;br&gt;https://doi.org/10.1093/imanum/8.1.141</mixed-citation></ref><ref id="hanspub.36835-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Jiao, Y.L., Jin, B.J. and Lu, X.L. (2015) A Primal Dual Active Set with Continuation Algorithm for the L0 Regularized Optimization Problem. Applied and Computational Harmonic Analysis, 39, 400-426.  
&lt;br&gt;https://doi.org/10.1016/j.acha.2014.10.001</mixed-citation></ref></ref-list></back></article>