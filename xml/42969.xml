<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2021.116169</article-id><article-id pub-id-type="publisher-id">CSA-42969</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20210600000_92758291.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于改进条件变分自编码器的入侵检测研究
  Research on Intrusion Detection Based on Improved Conditional Variational Auto Encoder
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>朱</surname><given-names>琼</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>袁</surname><given-names>永晖</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>田</surname><given-names>春岐</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>中国航发上海商用航空发动机制造有限责任公司，上海</addr-line></aff><aff id="aff3"><addr-line>同济大学电子与信息工程学院，上海</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>02</day><month>06</month><year>2021</year></pub-date><volume>11</volume><issue>06</issue><fpage>1637</fpage><lpage>1648</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   现有的入侵检测方法大多集中于提高整体检测率，而应用于不平衡样本集上，传统方法往往在少数类攻击样本的识别上存在识别准确率低、误报率高的问题。因此，提出了一个结合入侵检测条件变分自编码器(Intrusion Detection Conditional Variational Auto Encoder, IDCVAE)和深度信念网络(Deep Belief Nets, DBN)的入侵检测方法。该方法首先利用IDCVAE学习数据的稀疏表示，然后使用其解码器部分扩充少数类样本，解决样本不均衡问题。最后利用DBN对平衡后的新数据集进行特征提取和分类。实验结果表明，本文的方法在保持整体检测率较高的同时，有效地提高了少数类攻击的检测率及误报率。 At present, most of the existing intrusion detection methods focus on improving the overall detection rate. However, traditional methods often perform poorly in detecting minority class samples. Therefore, this paper proposed an intrusion detection method based on Intrusion Detection Conditional Variational Auto Encoder (IDCVAE) and Deep Belief Nets (DBN). IDCVAE can learn potential sparse representations in network data features and oversampling the minority class data. Deep belief network can effectively extract and classify the balanced new data set. Experimental results show that, the method in this paper effectively improves the detection rate of minority while keeping the high overall detection rate and low false alarm rate. 
  
 
</p></abstract><kwd-group><kwd>入侵检测，条件变分自编码器，生成网络，过采样，深度信念网络, Intrusion Detection</kwd><kwd> Conditional Variational Auto Encoder</kwd><kwd> Generative Network</kwd><kwd> Oversampling</kwd><kwd> Deep Belief Nets</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>现有的入侵检测方法大多集中于提高整体检测率，而应用于不平衡样本集上，传统方法往往在少数类攻击样本的识别上存在识别准确率低、误报率高的问题。因此，提出了一个结合入侵检测条件变分自编码器(Intrusion Detection Conditional Variational Auto Encoder, IDCVAE)和深度信念网络(Deep Belief Nets, DBN)的入侵检测方法。该方法首先利用IDCVAE学习数据的稀疏表示，然后使用其解码器部分扩充少数类样本，解决样本不均衡问题。最后利用DBN对平衡后的新数据集进行特征提取和分类。实验结果表明，本文的方法在保持整体检测率较高的同时，有效地提高了少数类攻击的检测率及误报率。</p></sec><sec id="s2"><title>关键词</title><p>入侵检测，条件变分自编码器，生成网络，过采样，深度信念网络</p></sec><sec id="s3"><title>Research on Intrusion Detection Based on Improved Conditional Variational Auto Encoder</title><p>Qiong Zhu<sup>1</sup>, Yonghui Yuan<sup>2</sup>, Chunqi Tian<sup>2</sup></p><p><sup>1</sup>AECC Shanghai Commercial Aircraft Engine Manufacturing Co., LTD., Shanghai</p><p><sup>2</sup>College of Electronics and Information Engineering, Tongji University, Shanghai</p><p><img src="//html.hanspub.org/file/4-1542195x4_hanspub.png" /></p><p>Received: May 10<sup>th</sup>, 2021; accepted: Jun. 1<sup>st</sup>, 2021; published: Jun. 8<sup>th</sup>, 2021</p><p><img src="//html.hanspub.org/file/4-1542195x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>At present, most of the existing intrusion detection methods focus on improving the overall detection rate. However, traditional methods often perform poorly in detecting minority class samples. Therefore, this paper proposed an intrusion detection method based on Intrusion Detection Conditional Variational Auto Encoder (IDCVAE) and Deep Belief Nets (DBN). IDCVAE can learn potential sparse representations in network data features and oversampling the minority class data. Deep belief network can effectively extract and classify the balanced new data set. Experimental results show that, the method in this paper effectively improves the detection rate of minority while keeping the high overall detection rate and low false alarm rate.</p><p>Keywords:Intrusion Detection, Conditional Variational Auto Encoder, Generative Network, Oversampling, Deep Belief Nets</p><disp-formula id="hanspub.42969-formula30"><graphic xlink:href="//html.hanspub.org/file/4-1542195x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2021 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-1542195x7_hanspub.png" /> <img src="//html.hanspub.org/file/4-1542195x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>近些年来，随着云计算、5G通讯以及人工智能的迅猛发展，网络安全问题也日益严重。入侵检测系统(Intrusion Detection System, IDS) [<xref ref-type="bibr" rid="hanspub.42969-ref1">1</xref>] 作为防范网络攻击的重要手段，已经成为了许多大型组织和机构防御网络攻击的首选。相较于传统的被动防御策略，入侵检测系统可以主动检测并发掘网络内部和外部的攻击行为，在攻击生效前，就能拦截攻击并向管理人员发出安全预警。</p><p>国内外众多学者在这一领域提出了许多行之有效的方案，包括异常检测方法、聚类算法、集成学习、浅层学习、深度学习 [<xref ref-type="bibr" rid="hanspub.42969-ref2">2</xref>] 等。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref3">3</xref>] 提出使用改进后的K-means算法对初始聚类中心进行优化，从而提升入侵检测模型的检测速度。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref4">4</xref>] 提出用遗传算法来提升SVM在入侵检测数据中的分类效果。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref5">5</xref>] 利用贝叶斯网络显著地提高了攻击数据的识别准确率。但其缺点在于需要大量的先验知识且对输入数据的表达形式非常敏感。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref6">6</xref>] 将一系列的集成方法应用到异常检测中，取得了不错的效果。随着近些年来深度网络的不断发展，神经网络在入侵检测中也得到了广泛的应用。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref7">7</xref>] 应用深度神经网络(deep neural network)与预处理后的数据，建立了深度学习模型。并在KDD Cup 99数据集上准确率、检测率都取得了较好的效果。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref8">8</xref>] 提出了一种多尺度卷积CNN模型。用多种不同的尺度卷积核对大量高维无标签原始数据进行了多层次特征提取，再采用正则化方法优化网络结构学习率，以获得原始数据的最优特征表示。相较于原始的CNN收敛更快，准确率更高。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref9">9</xref>] 提出了基于卷积神经网络(CNN)和长短时记忆网络(LSTM)的检测模型，首先利用CNN对输入的高维数据进行特征提取，然后将其输出作为LSTM的输入，最后利用全连接层得到分类结果。</p><p>在大量的网络数据中，攻击数据只占很小的一部分。这就导致我们所能够获取到的数据集往往是非常不平衡的。传统机器学习方法直接应用于不平衡数据上往往只能提高整体的检测精度，而对于少数类的分类效果则不尽如人意。如何解决入侵检测中不平衡数据的问题，许多专家学者进行了大量研究。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref10">10</xref>] 中作者引入了一个聚类一致性系数从而更好地找到了少数类的样本边界，进一步优化了SMOTE (Synthetic Minority Oversampling Technique)算法的样本生成过程。其数据处理方法简单易于实现，分类器也较为通用，获得了较好的生成效果。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref11">11</xref>] 中，作者在原始的SMOTE基础上利用K-means算法对其改进，选取簇心的k个近邻进行插值操作，有效地避免了模糊样本边界的问题。在保证多数类样本信息前提下，提升了少数类分类精度，增强了入侵检测系统检测能力。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref12">12</xref>] 中使用变分自编码器(Variational Auto Encoder, VAE)来作为入侵检测的半监督学习，但其缺点在于不能自由生成指定标签的数据。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref13">13</xref>] 在物联网领域的入侵检测中使用了条件变分自编码器对各类样本进行生成，最后通过比较生成样本和测试样本的距离来预测标签。文献 [<xref ref-type="bibr" rid="hanspub.42969-ref14">14</xref>] 中提出使用GAN (Generative Adversarial Networks)来生成少数类样本，GAN在图片生成领域取得了巨大成功，应用于网络数据也显示出了优秀的性能。</p><p>针对以上情况，本文提出了一个基于改进条件变分自编码器的入侵检测方法。我们使用改进的条件变分自编码器(Intrusion Detection Conditional Variational Auto Encoder, IDCVAE)的编码器部分来学习原始复杂数据的分布，然后将具有高斯噪声的隐变量和需要生成类标签作为解码器的输入，生成少数类的攻击样本，解决了原始数据集的不平衡现象。之后将新的数据集作为深度信念网络(Deep Belief Nets，DBN)的输入，逐层对DBN进行训练，利用微调对参数进行全局调优，最终得到分类结果。该方法在保证了总体准确率较高的情况下，有效提高了少数类的检测准确率并降低了误报率，增强了入侵检测系统的检测性能。</p></sec><sec id="s6"><title>2. 相关理论介绍</title><sec id="s6_1"><title>2.1. 变分自编码器</title><p>变分自编码器(Variational Auto Encoder, VAE)作为生成模型的重要一员，由Diederik P. Kingma和Max Welling [<xref ref-type="bibr" rid="hanspub.42969-ref15">15</xref>] 于2013年提出。其结构如图1所示。它主要由一个编码器和一个解码器组成。编码器实现了从X到一组低维向量的映射，这些向量完全定义了关联的中间概率分布 Q ( Z | X ) 的集合。之后再对这些中间分布进行采样，生成的样本构成一组隐变量作为解码器的输入，解码器则是和编码器进行相反的操作，将隐变量映射为一组新的参数，形成新的概率分布 p ( X ^ / Z ) ，从中我们可以再次进行采样作为解码器的输出 X ^ 。</p><p>图1. VAE结构图</p><p>VAE的核心在于使用似然概率 P ( X ) 在原始数据中进行采样，X是一组随机变量。最后的目标在于尽可能的重建原始的输入数据。所以就必须最大化 P ( X ) 的对数似然概率，公式如下：</p><p>log P ( X ) = E [ log P ( X | Z ) ] − D K L [ Q ( Z | X ) | P ( Z ) ] + D K L [ Q ( Z | X ) | | P ( Z | X ) ] ≥ E [ log P ( X | Z ) ] − D K L [ Q ( Z | X ) | | P ( Z ) ] (1)</p><p>P ( X ) 的对数下界即变分下界目标如下所示：</p><p>L ( θ , ϕ ; X ) = E [ log P ( X | Z ) ] − D K L [ Q ( Z | X ) | | P ( Z ) ] (2)</p><p>L ( θ , ϕ ; X ) 就是变分下界同时也是VAE的目标函数。公式的第二项就是利用KL (Kullback-Leibler)散度来最小化编码器的分布 Q ( Z | X ) 和隐变量Z的先验分布 P ( Z ) 之间的分布距离，也就是说将学习到的 Q ( Z | X ) 尽可能接近于先验分布 P ( Z ) 。因此，VAE的训练目标就是最大化数据生成概率 log P ( X | Z ) 的同时最小化编码器的分布 Q ( Z | X ) 和先验概率 P ( Z ) 之间的分布距离。</p></sec><sec id="s6_2"><title>2.2. 入侵检测条件变分自编码器</title><p>基于VAE模型，条件变分自编码器(Conditional Variational Auto Encoder, CVAE)和它有着类似的思想。但不同于VAE只将随机变量X作为输入，同时也将标签Y也同时作为编码器和解码器的输入条件。故称之为条件变分自编码器。正如图2所示，编码器 Q ( Z | X , Y ) 和解码器 P ( Z | X , Y ) 输入条件有两个分别为X和Y。</p><p>图2. CVAE结构图</p><p>CVAE变分下界目标如下</p><p>log P ( X | Y ) − D K L [ Q ( Z | X , Y ) | | P ( Z | X , Y ) ] = E [ log P ( X | Z , Y ) ] − D K L [ Q ( Z | X ) | | P ( Z | Y ) ] (3)</p><p>标准CVAE的编码器和解码器的条件概率分布都和标签Y相关，而在入侵检测任务中编码器部分无需要将特征与标签建立联系，故我们改进CVAE称之为入侵检测条件变分自编码器(Intrusion Detection Conditional Variational Auto Encoder, IDCVAE)。我们只在解码器阶段添加标签Y的信息，这样仅仅解码器的条件概率与Y相关，编码器部分则没有变化，更有利于编码阶段的特征提取。其结构如图3所示：</p><p>图3. IDCVAE结构图</p><p>IDCVAE中编码器网络由 Q ( Z | X ) 和解码器网络 P ( X | Z , Y ) 组成，解码过程中隐变量Z和类标签Y会被合并在一起作为解码器的输入，所以指定标签的新少数类样本会被生成出来。IDCVAE的变分下界如下：</p><p>log P ( X | Y ) − D K L [ Q ( Z | X ) | | P ( Z | X , Y ) ] = E [ log P ( X | Z , Y ) ] − D K L [ Q ( Z | X ) | | P ( Z | Y ) ] (4)</p><p>其目标函数为：</p><p>L ( θ , ϕ ; X , Y ) = E [ log P ( X | Z , Y ) ] − D K L [ Q ( Z | X ) | | P ( Z | Y ) ] (5)</p><p>公式主要包含两个部分：一个对数重建似然 E [ log P ( X | Z , Y ) ] 和一个KL散度 D K L [ Q ( Z | X ) | | P ( Z | Y ) ] 。第一项利用条件概率分布 P ( X | Z , Y ) 重建原始输入X，第二项利用KL散度来度量编码器分布 Q ( Z | X ) 和先验概率分布 P ( Z | Y ) 的距离。在模型中，我们使用NSL-KDD的类标签作为条件变量Y，因此根据需要生成指定标签的攻击类样本。</p></sec><sec id="s6_3"><title>2.3. 深度信念网络</title><p>传统神经网络往往不能有太多隐层，因为隐层的堆叠会导致模型参数数量迅速增长，同时也会导致训练时间过长。2006年，Hinton提出了深度信念网络DBN，也被称为深度置信网络，一举解决了深层次神经网络的训练问题。其结构主要由多层的无监督的受限玻尔兹曼机(Restricted Boltzmann Machine)和一层有监督的反向传播(Back Propagation)网络组成。RBM结构如图4所示，它是一个由可见层(Visible Layer)和隐层(Hidden Layer)组成的双层网络。可见层一般用作数据的输入，隐层作为特征提取层。层与层的节点全连接，层内节点无连接。其结构也可以看作是一个有向无环图。RBM是一个基于能量模型的结构，其能量函数如公式6所示：</p><p>E ( v , h | θ ) = − ∑ i = 1 m a i v i − ∑ j = 1 n b j h j − ∑ i = 1 m ∑ j = 1 n v i h j w i j (6)</p><p>上式中， a i 和 b j 分别表示可见层节点 v i 和隐层节点 h j 的偏置值， w i j 表示可见层和隐层的关联权重。关联权重在最小化RBM的能量函数过程中，进行更新和优化，最后达到最优。RBM的目标就是使 E ( v , h | θ ) 最小，此时网络最稳定，网络最优。</p><p>图4. RBM结构图</p><p>DBN由多个RBM堆叠而成，也就说想要获得全局的最优参数是非常困难的。因此，DBN采用了逐层训练的方法。每次只训练相邻的两层，依次训练，直到所有RBM训练完成。再通过BP神经网络逐层进行反向传播，最终获得全局的最优参数。也就是说包含了一个正向训练和微调(fine-tuning)的过程。这个方法也是由Hinton提出，也称为对比散度(Contrastive Divergence, CD)训练方法。具体的过程如图5所示：</p><p>图5. DBN结构图</p></sec></sec><sec id="s7"><title>3. 本文入侵检测算法</title><p>本文所提出的IDCVAE-DBN的结构图如图6所示。整个实验过程主要包含了三个阶段：1) 训练IDCVAE。我们使用训练集中的少数类入侵样本作为编码器的输入，再解码器阶段将样本的类标签作为输入。训练的最终目的是保证重建后的样本与真实训练集中的样本差距尽可能的小。2) 生成新的攻击样本。我们将需要生成的样本类标签作为已经训练好的解码器的输入生成新的样本。将生成的所有样本与原始数据集合并，形成新的平衡数据集。3) 未知攻击检测。将新的数据集作为DBN的输入进行训练以及微调。训练好的DBN分类器用来对测试集中的攻击进行分类。算法具体步骤如下：</p><p>图6. IDCVAE-DBN模型图</p><p>a) 数据预处理。首先利用one-hot编码对非数值数据进行数值化，然后对数据进行标准化。数据预处理能够解决原始数据表达形式不一致，满足计算机处理要求。标准化的特征也有利于算法的学习。</p><p>b) 模型权重初始化为截断的正太分布中输出的随机值。偏移量均被初始化为0。IDCVAE输入数据维度为122，隐变量Z的维度为20，输出数据维度为122。</p><p>c) 训练集X作为编码器的输入，对编码器进行训练。对训练得到的均值和方差进行采样，得到隐变量。不断迭代获取最优的模型参数。</p><p>d) 将训练得到的最优的隐变量Z以及需要生成的样本标签 Y &#175; 作为解码器的输入，得到新的样本，并将其并入原始数据集，得到新的平衡数据集 X &#175; 。</p><p>e) 新的训练集 X &#175; 作为DBN的输入，通过CD算法对DBN中包含的多层RBM进行逐层预训练，获得初步参数。之后再利用反向传播算法对参数进行微调，最终获得最优的DBN模型参数。</p><p>用已经训练好的DBN对测试集中的攻击进行分类，获得最终的分类结果。</p><sec id="s7_1"><title>3.1. IDCVAE模型细节</title><p>本文使用了NSL-KDD数据集作为训练集。训练集中包含了38个数值特征和3个符号特征，总计41维特征。其中，数值特征可直接提取。符号特征需要用one-hot编码成数值特征。因为模型的输入必须为向量组，所以所有的符号特征需要经过one-hot编码，最后得到每个输入向量的维度为122。之后对所有数据进行最值归一化，保证每个特征在同一个维度下。IDCVAE的损失主要由一个重建损失和KL损失组成。KL损失用来衡量隐变量的分布和单位高斯分布的差异。重建损失使用平均平方误差来度量数据的重构误差。</p><p>对于编码器网络 Q ( Z | X ) 的分布我们使用的是多元高斯分布，而对于解码器 P ( X | Z , Y ) ，我们使用多元伯努利分布进行拟合。隐变量Z的先验概率分布为标准正态分布 N ( 0 , I ) 。其中多元高斯分布的均值为 μ ( X ) ，方差为 Σ ( X ) → σ i 2 ( X ) ，隐变量Z是对多元高斯分布进行采样而得。但由于从 N ( μ , σ 2 ) 中直接采样是不可导的，所以利用了一个重参数的技巧。先在 N ( 0 , I ) 中采样一个 E ，然后另 Z = μ + ε &#215; σ ，这样整个过程就变的可导了，从而使得整个模型可训练了。</p></sec><sec id="s7_2"><title>3.2. DBN模型细节</title><p>DBN的输入为经过阶段二形成的平衡数据集。输出向量的维度为5。DBN由两个RBM以及一个BP层组成。隐层的激活函数为Sigmoid，输出层的激活函数为Softmax，DBN和RBM的学习率均为1 &#215; 10<sup>−4</sup>。利用CD算法对每个RBM分别进行无监督的训练。预训练过程中RBM的权值和偏置值都是通过随机初始化获得。优化算法使用的是Adam。预训练完成后，利用BP层进行全局的参数调优。</p></sec></sec><sec id="s8"><title>4. 实验及结果分析</title><sec id="s8_1"><title>4.1. 实验环境及数据集介绍</title><p>实验使用的是Windows10操作系统、CPU 2.9 GHz、内存16.0 GB的PC机。编程语言使用Python，版本为3.7.4。基于tensorflow、sklearn等开源库实现。数据集选用NSL-KDD数据集。此数据集在KDD-CUP1999数据集的基础上去除了大量冗余和重复的数据，并且包含了一些KDD-CUP1999中所没有的新的攻击类型。NSL-KDD数据集训练集和测试集样本数量适中，因此可以避免由于样本数过大、采样方法各不相同所造成的各类检测方法无法进行比较的问题。NSL-KDD每条样本包含了41个特征属性标签，分别由38个数值型特征和3个非数值型特征组成。</p><p>数据集中主要包含5种类别的数据包括正常数据和另外四种攻击数据。四种攻击分别为：端口监视或扫描(Probe)、拒绝服务攻击(denial of service, DoS)、未授权的本地超级用户特权访问(user to root, U2R)、来自远程主的未授权访问(remote to local, R2L)。四类攻击类型又可详细划分为39类具体攻击。数据集详细情况如表1所示。</p><p>我们使用KDDTrain+_20Percent.txt (包含了全部训练数据的20%)作为训练集，KDDTest+.txt作为测试集。训练集数据集本身极度不平衡，部分攻击类的样本远远少于正常数据。其中正常数据13,449条，Probe类2486条，DoS类9044条，U2R类24条，R2L类189条。本文攻击样本生成过程中，总计生成了42,053条数据。其中正常样本0条，Probe类10,963条，DoS类4405条，U2R类13,425，R2L类13,260条。使得所有类别样本数目相同。数据集详细情况如表1所示：</p><table-wrap-group id="1"><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Sample category statistic</title></caption><table-wrap id="1_1"><table><tbody><thead><tr><th align="center" valign="middle" >类别</th><th align="center" valign="middle" >攻击子类型</th><th align="center" valign="middle" >KDDTrain+_20Percent</th><th align="center" valign="middle" >KDDTest+</th></tr></thead><tr><td align="center" valign="middle" >Normal</td><td align="center" valign="middle" >normal</td><td align="center" valign="middle" >13,449</td><td align="center" valign="middle" >9711</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >Probe</td><td align="center" valign="middle" >ipsweep</td><td align="center" valign="middle" >710</td><td align="center" valign="middle" >141</td></tr><tr><td align="center" valign="middle" >nmap</td><td align="center" valign="middle" >301</td><td align="center" valign="middle" >73</td></tr><tr><td align="center" valign="middle" >portsweep</td><td align="center" valign="middle" >587</td><td align="center" valign="middle" >157</td></tr><tr><td align="center" valign="middle" >saint</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >319</td></tr><tr><td align="center" valign="middle" >satan</td><td align="center" valign="middle" >691</td><td align="center" valign="middle" >735</td></tr><tr><td align="center" valign="middle"  rowspan="10"  >Dos</td><td align="center" valign="middle" >apache2</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >737</td></tr><tr><td align="center" valign="middle" >back</td><td align="center" valign="middle" >196</td><td align="center" valign="middle" >359</td></tr><tr><td align="center" valign="middle" >land</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >7</td></tr><tr><td align="center" valign="middle" >mailbomb</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >293</td></tr><tr><td align="center" valign="middle" >neptune</td><td align="center" valign="middle" >8282</td><td align="center" valign="middle" >4657</td></tr><tr><td align="center" valign="middle" >pod</td><td align="center" valign="middle" >38</td><td align="center" valign="middle" >41</td></tr><tr><td align="center" valign="middle" >processtable</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >685</td></tr><tr><td align="center" valign="middle" >smurf</td><td align="center" valign="middle" >529</td><td align="center" valign="middle" >665</td></tr><tr><td align="center" valign="middle" >teardrop</td><td align="center" valign="middle" >188</td><td align="center" valign="middle" >12</td></tr><tr><td align="center" valign="middle" >udpstorm</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle"  rowspan="8"  >U2R</td><td align="center" valign="middle" >buffer_overflow</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >20</td></tr><tr><td align="center" valign="middle" >httptunnel</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >133</td></tr><tr><td align="center" valign="middle" >loadmodule</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >perl</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >ps</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >15</td></tr><tr><td align="center" valign="middle" >rootkit</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >13</td></tr><tr><td align="center" valign="middle" >sqlatack</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >xterm</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >13</td></tr></tbody></table></table-wrap><table-wrap id="1_2"><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="15"  >R2L</th><th align="center" valign="middle" >ftp_write</th><th align="center" valign="middle" >1</th><th align="center" valign="middle" >3</th></tr></thead><tr><td align="center" valign="middle" >guess_passwd</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >1231</td></tr><tr><td align="center" valign="middle" >imap</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >1</td></tr><tr><td align="center" valign="middle" >multihop</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >18</td></tr><tr><td align="center" valign="middle" >named</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >17</td></tr><tr><td align="center" valign="middle" >phf</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >sendmail</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >14</td></tr><tr><td align="center" valign="middle" >snmpgetattack</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >178</td></tr><tr><td align="center" valign="middle" >snmpguess</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >331</td></tr><tr><td align="center" valign="middle" >spy</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >warezclient</td><td align="center" valign="middle" >181</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >warezmaster</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >944</td></tr><tr><td align="center" valign="middle" >worm</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >xlock</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >9</td></tr><tr><td align="center" valign="middle" >xsnoop</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >4</td></tr><tr><td align="center" valign="middle"  colspan="2"  >数据集样本总数</td><td align="center" valign="middle" >25,192</td><td align="center" valign="middle" >22,544</td></tr></tbody></table></table-wrap></table-wrap-group><p>表1. 样本类别统计</p></sec><sec id="s8_2"><title>4.2. 评价标准</title><p>我们使用混淆矩阵常见的5种常见的度量指标，分别为：准确率(accuracy)、精准率(precision)、召回率(recall)、FPR (false positive rate)以及F1-score。二分类混淆矩阵如表2所示，将样本分为true positive (TP)，true negative (TN)，false positive (FP)，and false negative (FN)。TP表示正类样本被正确分类、TN表示负类样本被正确分类、FP表示正类样本被错误的分为负类、FN表示负类样本被错误的分为正类。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Confusion matri</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >预测正类</th><th align="center" valign="middle" >Recall</th></tr></thead><tr><td align="center" valign="middle" >实际正类</td><td align="center" valign="middle" >TP</td><td align="center" valign="middle" >FN</td></tr><tr><td align="center" valign="middle" >实际负类</td><td align="center" valign="middle" >FP</td><td align="center" valign="middle" >TN</td></tr></tbody></table></table-wrap><p>表2. 混淆矩阵</p><p>在这些度量之中，召回率是覆盖面的度量，度量有多个正例被分为正例。FPR表示预测为正例但真实情况为反例的，占所有真实情况中反例的比率。F1-score是精确率和召回率的调和平均数。精准率与召回率是衡量分类性能最基本的两个评价标准，F1-score则兼顾了两者。对于非平衡数据集来说F1-score用来评估模型效果好坏是更加准确的。这些指标定义如下：</p><p>Accuracy = TP + TN TP + TN + FP + FN (7)</p><p>Precision = TP TP + FP (8)</p><p>Recall = TP TP + FN (9)</p><p>FPR = FP FP + TN (10)</p><p>F1-score = 2 TP 2 TP + FP + FN (11)</p></sec><sec id="s8_3"><title>4.3. 实验结果与分析</title><p>本文实验主要分为三个部分。第一部分比较了进行过采样和不进行过采样的性能，第二部分比较不同过采样方法的性能，第三部分进行本文入侵检测方法与其他相关方法的对比实验。</p><p>由表3可知，本文所使用的方法相较于传统的机器学习方法，在各项指标上均获得了更好的结果。在同样使用DBN分类的情况下，在经过IDCVAE进行过采样后，准确率和提升了接近10%，同时保证了FPR的下降。表4中，SVM和GBDT虽然能在Normal等大类上取得较好的分类效果，然而其在R2L这种少数类上标签上的表现却差强人意，尤其是在U2R上两个方法的准确率都为0。直接采用DBN进行分类后，对少数类检测准确率提升也非常有限。仅仅只有不到3%。而应用了IDCVAE进行数据增强后，少数类的检测准确率相较于DBN得到了不小的提升。其中R2L提升了24.17%，U2R提升了12.4%。由此可见使用IDCVAE进行过采样后，对总体以及少数类检测率的提升是非常有效的。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Classification results of oversampling methods and normal methods (%</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >分类方法</th><th align="center" valign="middle" >Accuracy</th><th align="center" valign="middle" >Recall</th><th align="center" valign="middle" >Precision</th><th align="center" valign="middle" >F1-Score</th><th align="center" valign="middle" >FPR</th></tr></thead><tr><td align="center" valign="middle" >SVM</td><td align="center" valign="middle" >70.33</td><td align="center" valign="middle" >54.75</td><td align="center" valign="middle" >88.52</td><td align="center" valign="middle" >67.66</td><td align="center" valign="middle" >7.46</td></tr><tr><td align="center" valign="middle" >GBDT</td><td align="center" valign="middle" >69.01</td><td align="center" valign="middle" >46.32</td><td align="center" valign="middle" >91.38</td><td align="center" valign="middle" >61.48</td><td align="center" valign="middle" >6.22</td></tr><tr><td align="center" valign="middle" >DBN</td><td align="center" valign="middle" >73.82</td><td align="center" valign="middle" >59.19</td><td align="center" valign="middle" >95.89</td><td align="center" valign="middle" >73.20</td><td align="center" valign="middle" >3.14</td></tr><tr><td align="center" valign="middle" >IDCVAE-DBN</td><td align="center" valign="middle" >82.36</td><td align="center" valign="middle" >75.34</td><td align="center" valign="middle" >97.21</td><td align="center" valign="middle" >84.89</td><td align="center" valign="middle" >2.81</td></tr></tbody></table></table-wrap><p>表3. 采用过采样和不采用过采样方法分类效果(%)</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Subclass detection rate of oversampling methods and normal methods (%</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >分类方法</th><th align="center" valign="middle" >Normal</th><th align="center" valign="middle" >Probe</th><th align="center" valign="middle" >DoS</th><th align="center" valign="middle" >R2L</th><th align="center" valign="middle" >U2R</th></tr></thead><tr><td align="center" valign="middle" >SVM</td><td align="center" valign="middle" >92.34</td><td align="center" valign="middle" >75.45</td><td align="center" valign="middle" >43.77</td><td align="center" valign="middle" >6.87</td><td align="center" valign="middle" >0.00</td></tr><tr><td align="center" valign="middle" >GBDT</td><td align="center" valign="middle" >89.32</td><td align="center" valign="middle" >72.10</td><td align="center" valign="middle" >47.36</td><td align="center" valign="middle" >8.25</td><td align="center" valign="middle" >0.00</td></tr><tr><td align="center" valign="middle" >DBN</td><td align="center" valign="middle" >90.81</td><td align="center" valign="middle" >72.42</td><td align="center" valign="middle" >56.78</td><td align="center" valign="middle" >11.46</td><td align="center" valign="middle" >2.10</td></tr><tr><td align="center" valign="middle" >IDCVAE-DBN</td><td align="center" valign="middle" >96.82</td><td align="center" valign="middle" >86.36</td><td align="center" valign="middle" >72.53</td><td align="center" valign="middle" >35.63</td><td align="center" valign="middle" >14.50</td></tr></tbody></table></table-wrap><p>表4. 采用过采样和不采用过采样方法子类检测率对比(%)</p><p>如表5和表6所示，在同样使用DBN作为分类器时，通过三种过采样方法使得识别的整体准确率都得到了一定程度的提升。充分证明了过采样方法对少数类检测率提升的有效性。其中IDCVAE相较于其他两种机器学习过采样方法对于各项指标的提升是最为显著的。其中相比于SMOTE，R2L的检测准确率提高了26.3%。相比于ADASYN，U2R的检测准确率提高了6.43%。</p><p>我们也与其他表现较好的方法进行了比较。结果如表7所示。实验结果表明在准确率、召回率以及FPR上IDCVAE-DBN均优于其他方法。由此可见，IDCVAE-DBN在不平衡数据的入侵检测问题中，整体效果符合预期，有着更好的检测性能。</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> Classification results of different oversampling methods (%</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >分类方法</th><th align="center" valign="middle" >Accuracy</th><th align="center" valign="middle" >Recall</th><th align="center" valign="middle" >Precision</th><th align="center" valign="middle" >F1-Score</th><th align="center" valign="middle" >FPR</th></tr></thead><tr><td align="center" valign="middle" >SMOTE-DBN</td><td align="center" valign="middle" >80.15</td><td align="center" valign="middle" >65.13</td><td align="center" valign="middle" >94.50</td><td align="center" valign="middle" >77.11</td><td align="center" valign="middle" >3.55</td></tr><tr><td align="center" valign="middle" >ADASYN-DBN</td><td align="center" valign="middle" >80.33</td><td align="center" valign="middle" >64.27</td><td align="center" valign="middle" >95.12</td><td align="center" valign="middle" >76.71</td><td align="center" valign="middle" >3.79</td></tr><tr><td align="center" valign="middle" >IDCVAE-DBN</td><td align="center" valign="middle" >82.36</td><td align="center" valign="middle" >75.34</td><td align="center" valign="middle" >97.21</td><td align="center" valign="middle" >84.89</td><td align="center" valign="middle" >2.81</td></tr></tbody></table></table-wrap><p>表5. 不同过采样方法分类效果(%)</p><table-wrap id="table6" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> Results compared with other methods (%</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >分类方法</th><th align="center" valign="middle" >Normal</th><th align="center" valign="middle" >Probe</th><th align="center" valign="middle" >DoS</th><th align="center" valign="middle" >R2L</th><th align="center" valign="middle" >U2R</th></tr></thead><tr><td align="center" valign="middle" >SMOTE-DBN</td><td align="center" valign="middle" >92.63</td><td align="center" valign="middle" >66.99</td><td align="center" valign="middle" >58.15</td><td align="center" valign="middle" >9.33</td><td align="center" valign="middle" >8.00</td></tr><tr><td align="center" valign="middle" >ADASYN-DBN</td><td align="center" valign="middle" >91.42</td><td align="center" valign="middle" >59.21</td><td align="center" valign="middle" >56.23</td><td align="center" valign="middle" >8.77</td><td align="center" valign="middle" >8.07</td></tr><tr><td align="center" valign="middle" >IDCVAE-DBN</td><td align="center" valign="middle" >96.82</td><td align="center" valign="middle" >86.36</td><td align="center" valign="middle" >72.53</td><td align="center" valign="middle" >35.63</td><td align="center" valign="middle" >14.50</td></tr></tbody></table></table-wrap><p>表6. 其他方法对比结果(%)</p><table-wrap id="table7" ><label><xref ref-type="table" rid="table7">Table 7</xref></label><caption><title> Results compared with other methods (%</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >分类方法</th><th align="center" valign="middle" >Accuracy</th><th align="center" valign="middle" >Recall</th><th align="center" valign="middle" >FPR</th></tr></thead><tr><td align="center" valign="middle" >1改进SMOTE + DBN + GBDT [<xref ref-type="bibr" rid="hanspub.42969-ref16">16</xref>]</td><td align="center" valign="middle" >73.29</td><td align="center" valign="middle" >53.65</td><td align="center" valign="middle" >10.23</td></tr><tr><td align="center" valign="middle" >OCL [<xref ref-type="bibr" rid="hanspub.42969-ref17">17</xref>]</td><td align="center" valign="middle" >481.25</td><td align="center" valign="middle" >/</td><td align="center" valign="middle" >/</td></tr><tr><td align="center" valign="middle" >SCDNN [<xref ref-type="bibr" rid="hanspub.42969-ref18">18</xref>]</td><td align="center" valign="middle" >72.64</td><td align="center" valign="middle" >57.48</td><td align="center" valign="middle" >/</td></tr><tr><td align="center" valign="middle" >IDCVAE-DBN</td><td align="center" valign="middle" >82.36</td><td align="center" valign="middle" >75.34</td><td align="center" valign="middle" >2.81</td></tr></tbody></table></table-wrap><p>表7. 其他方法对比结果(%)</p></sec></sec><sec id="s9"><title>5. 结束语</title><p>本文提出了一种基于改进条件变分自编码器的入侵检测方法，为入侵检测中少数类样本的检测问题提出了一个新思路。改进的条件变分自编码器可以学习样本的内在稀疏表示，其解码器可以有效地生成少数类样本，改善了数据集不平衡的情况下分类器的分类准确性。深度信念网络也有效地提取了数据的特征。实验结果表明，本文所提出的方法，对于不平衡数据集上的入侵检测问题有着良好的处理能力。在保证多数类样本准确率不下降的同时，大大提高了少数类的检测准确率。下一步，我们打算研究如何进一步提高样本的子类检测率以及大型数据集下的模型适应能力。</p></sec><sec id="s10"><title>基金项目</title><p>上海市工业互联网资助项目(2018-GYHLW-02043)；国家自然科学基金资助项目(61771346, 61772372)，上海市信息化发展专项资金(新一代信息基础设施建设)项目(201901010)。</p></sec><sec id="s11"><title>文章引用</title><p>朱 琼,袁永晖,田春岐. 基于改进条件变分自编码器的入侵检测研究Research on Intrusion Detection Based on Improved Conditional Variational Auto Encoder[J]. 计算机科学与应用, 2021, 11(06): 1637-1648. https://doi.org/10.12677/CSA.2021.116169</p></sec><sec id="s12"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.42969-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">李威, 杨忠明. 入侵检测系统的研究综述[J]. 吉林大学学报(信息科学版), 2016, 34(5): 657-662.</mixed-citation></ref><ref id="hanspub.42969-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">张勇东, 陈思洋, 彭雨荷, 等. 基于深度学习的网络入侵检测研究综述[J]. 广州大学学报(自然科学版), 2019, 18(3): 17-26.</mixed-citation></ref><ref id="hanspub.42969-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">于立婷, 谭小波, 解羽. 基于改进人工蜂群优化K-means的入侵检测模型[J]. 沈阳理工大学学报, 2019, 38(6): 8-14+27</mixed-citation></ref><ref id="hanspub.42969-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">柯钢. 改进粒子群算法优化支持向量机的入侵检测方法[J]. 合肥工业大学学报(自然科学版), 2019, 42(10): 1341-1345.</mixed-citation></ref><ref id="hanspub.42969-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">王洋, 吴建英, 黄金垒, 等. 基于贝叶斯攻击图的网络入侵意图识别方法[J]. 计算机工程与应用, 2019, 55(22): 73-79.</mixed-citation></ref><ref id="hanspub.42969-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Cabrera, J.B.D., Gutiérrez, C. and Mehra, R.K. (2008) Ensemble Methods for Anomaly Detection and Distributed Intrusion Detection in Mobile Ad-Hoc Networks. Information Fusion, 9, 96-119.  
&lt;br&gt;https://doi.org/10.1016/j.inffus.2007.03.001</mixed-citation></ref><ref id="hanspub.42969-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Jin, K., Nara, S., Jo, S.Y., et al. (2017) Method of Intrusion De-tection Using Deep Neural Network. 2017 IEEE International Conference on Big Data and Smart Computing (BigComp), Jeju Island, 13-16 February 2017, 313-316.  
&lt;br&gt;https://doi.org/10.1109/BIGCOMP.2017.7881684</mixed-citation></ref><ref id="hanspub.42969-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">刘月峰, 王成, 张亚斌, 等. 用于网络入侵检测的多尺度卷积CNN模型[J]. 计算机工程与应用, 2019, 55(3): 90-95+153.</mixed-citation></ref><ref id="hanspub.42969-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">刘月峰, 蔡爽, 杨涵晰, 等. 融合CNN与BiLSTM的网络入侵检测方法[J]. 计算机工程, 2019, 45(12): 127-133.</mixed-citation></ref><ref id="hanspub.42969-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Lou, X. (2013) Clustering Boundary Over-Sampling Classification Method for Imbalanced Data Sets. Journal of ZheJiang University (Engineering Science), 47, 944-950.</mixed-citation></ref><ref id="hanspub.42969-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">沈学利, 覃淑娟. 基于SMOTE和深度信念网络的异常检测[J]. 计算机应用, 2018, 38(7): 1941-1945.</mixed-citation></ref><ref id="hanspub.42969-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">曹卫东, 许志香, 王静. 基于深度生成模型的半监督入侵检测算法[J]. 计算机科学, 2019, 46(3): 197-201.</mixed-citation></ref><ref id="hanspub.42969-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Lopez-Martin, M., Carro, B., Sanchez-Esguevillas, A., et al. (2017) Conditional Variational Autoencoder for Prediction and Feature Recovery Applied to Intrusion Detection in IoT. Sensors, 17, 1967. &lt;br&gt;https://doi.org/10.3390/s17091967</mixed-citation></ref><ref id="hanspub.42969-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Lee, J. and Park, K. (2021) GAN-Based Imbalanced Data Intrusion Detec-tion System. Personal and Ubiquitous Computing, 25, 121-128. &lt;br&gt;https://doi.org/10.1007/s00779-019-01332-y</mixed-citation></ref><ref id="hanspub.42969-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Kingma, D.P. and Welling, M. (2014) Auto-Encoding Variation-al Bayes. http://arxiv.org/abs/1312.6114</mixed-citation></ref><ref id="hanspub.42969-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">陈虹, 肖越, 肖成龙, 等. 融合最大相异系数密度的SMOTE算法的入侵检测方法[J]. 信息网络安全, 2019(3): 61-71.</mixed-citation></ref><ref id="hanspub.42969-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Su, T. Sun, H. and Wang, S. (2019) Intrusion Detection Using Convolutional Recurrent Neural Network. In: Proceedings of the 2019 8th International Conference on Computing and Pattern Recognition, ACM, Beijing, 413-419.  
&lt;br&gt;https://doi.org/10.1145/3373509.3373539</mixed-citation></ref><ref id="hanspub.42969-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Ma, T., Wang, F., Cheng, J., et al. (2016) A Hybrid Spectral Clus-tering and Deep Neural Network Ensemble Algorithm for Intrusion Detection in Sensor Networks. Sensors, 16, 1701. &lt;br&gt;https://doi.org/10.3390/s16101701</mixed-citation></ref></ref-list></back></article>