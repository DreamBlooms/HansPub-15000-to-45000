<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2020.105100</article-id><article-id pub-id-type="publisher-id">CSA-35643</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20200500000_71419958.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于替换错误的相似片段查找
  Similar Fragment Queries Based on Substitution Errors
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>帆</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>谢</surname><given-names>宇奇</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>饶</surname><given-names>晨</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>明春</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>湖南农业大学信息与智能科学技术学院，湖南 长沙</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>29</day><month>04</month><year>2020</year></pub-date><volume>10</volume><issue>05</issue><fpage>971</fpage><lpage>977</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   破译未知语言的关键是寻找相似的字母片段序列。本文针对相似片段的查找，编写了一种新的算法。首先建立索引结构，多次间隔划分得到片段。然后基于海明距离建立相似公式和相似矩阵用于表示两个片段之间的相似度。结合实际，在大量文本记录时发生替换错误的基础下建立相似阈值公式，并通过该公式判断是否为要求查找的相似片段。最后获得了多段文本的相似片段以及其对应的位置。此外使用平均准确率评价算法，经分析和实验表明，该算法有较高的准确率和查找效率。 The key to deciphering an unknown language is to look for similar sequences of letter fragments. In this paper, a new algorithm for finding similar fragments is developed. First, the index structure is built and the fragments are divided at intervals. Then the similarity formula and the similarity matrix are established based on the hamming distance to represent the similarity between the two fragments. In combination with practice, the similarity threshold formula is established on the basis of substitution errors in a large number of text records, and the formula is used to judge whether it is the similar fragment to be searched. Finally, the similar fragments of multiple text and their corresponding positions are obtained. In addition, the average accuracy evaluation algorithm is used, and the analysis and experiments show that the algorithm has good accuracy and search efficiency. 
  
 
</p></abstract><kwd-group><kwd>相似片段，海明距离，阈值，查找定位, Similar Pieces</kwd><kwd> Hamming Distance</kwd><kwd> Threshold Value</kwd><kwd> Locating</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于替换错误的相似片段查找<sup> </sup></title><p>张帆，谢宇奇，饶晨，王明春</p><p>湖南农业大学信息与智能科学技术学院，湖南 长沙</p><p>收稿日期：2020年5月1日；录用日期：2020年5月13日；发布日期：2020年5月20日</p><disp-formula id="hanspub.35643-formula35"><graphic xlink:href="//html.hanspub.org/file/17-1541741x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>破译未知语言的关键是寻找相似的字母片段序列。本文针对相似片段的查找，编写了一种新的算法。首先建立索引结构，多次间隔划分得到片段。然后基于海明距离建立相似公式和相似矩阵用于表示两个片段之间的相似度。结合实际，在大量文本记录时发生替换错误的基础下建立相似阈值公式，并通过该公式判断是否为要求查找的相似片段。最后获得了多段文本的相似片段以及其对应的位置。此外使用平均准确率评价算法，经分析和实验表明，该算法有较高的准确率和查找效率。</p><p>关键词 :相似片段，海明距离，阈值，查找定位</p><disp-formula id="hanspub.35643-formula36"><graphic xlink:href="//html.hanspub.org/file/17-1541741x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/17-1541741x7_hanspub.png" /> <img src="//html.hanspub.org/file/17-1541741x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>破译某种未知语言的关键是寻找一段相似的字母序列片段，因为这些片段很可能具备某种固定含义，类似词汇或词根。对照查找相似片段序列的算法，通常采用的方法是先引入特定的索引结构，如后缀树、后继数组等 [<xref ref-type="bibr" rid="hanspub.35643-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.35643-ref2">2</xref>]。基于这些索引结构的算法不仅计算量大，而且要求索引结构模式的首字母必须相同，效率有待提高且局限性较大。因此本文提出一种新的索引结构，优先考虑计算的复杂度，计算海明距离并根据阈值划分，在此基础上编写一种新的算法。该算法适用于查找首字母不同的未知语言字母序列的相似片段，经分析和实验表明，该算法可以得到较好的查找结果且有较优的查找效率。</p></sec><sec id="s4"><title>2. 数据来源和模型假设</title><p>下载英文版《双城记》，将里面的字母装换成大写，删去标点符号以及字母U到Z，造出研究未知语言的基础文本数据。为了简化，作以下假设：1) 未知语言由A到T这20个大写字母组成；2) 文本在获取过程中，有一些位置发生了替换错误，即某个字母被篡改成了其他字母；3) 文本在获取过程中只将替换错误纳入考虑范围，不考虑丢失了某个字母或增加了原本不存在的字母；4) 文本中各种字母出现的可能性符合一般规律。</p></sec><sec id="s5"><title>3. 相似片段的获得以及位置的记录</title><sec id="s5_1"><title>3.1. 建立索引结构</title><p>对于某段长度为m的文本，用 Z i = z 1 , z 2 , ⋯ , z d   ( 1 ≤ i ≤ n ) 的字符串表示其中的相似片段， Z i 称为一个模式。根据模式长度d进行d次划分，每次划分从文本的第i个位置间隔d取字符，组成的字符串即为 Z i 。按照这样的规则划分得到片段，构造出元胞划分矩阵和划分行向量。其中元胞划分矩阵T的维度为 d &#215; ( m − i + 1 ) / d ，T的每一个元素为一个长度是d的模式片段；划分行向量H的维度为 1 &#215; n ，T的非空元素按行依次存放到H中。</p><p>本文获得了30段长度在5000~8000个字母范围的文本，片段的模式长度为15。元胞划分矩阵如表1所示。</p></sec><sec id="s5_2"><title>3.2. 基于海明距离建立相似矩阵</title><p>建立相似公式和相似矩阵：</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> The cellular partition matrix of a tex</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >第1列</th><th align="center" valign="middle" >第2列</th><th align="center" valign="middle" >第3列</th><th align="center" valign="middle" >……</th><th align="center" valign="middle" >第495列</th><th align="center" valign="middle" >第496列</th></tr></thead><tr><td align="center" valign="middle" >第1行</td><td align="center" valign="middle" >BOOKTHEFIRS TREC</td><td align="center" valign="middle" >ALLEDTOLIFE CHAP</td><td align="center" valign="middle" >TERITHEPERI ODEI</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >ALITTLEAHEA DINT</td><td align="center" valign="middle" >OTHEMISTAND DARK</td></tr><tr><td align="center" valign="middle" >第2行</td><td align="center" valign="middle" >OOKTHEFIRST RECA</td><td align="center" valign="middle" >LLEDTOLIFEC HAPT</td><td align="center" valign="middle" >ERITHEPERIO DEIT</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >LITTLEAHEAD INTO</td><td align="center" valign="middle" >THEMISTANDD ARKN</td></tr><tr><td align="center" valign="middle" >第3行</td><td align="center" valign="middle" >OKTHEFIRSTR ECAL</td><td align="center" valign="middle" >LEDTOLIFECH APTE</td><td align="center" valign="middle" >RITHEPERIOD EITA</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >ITTLEAHEADI NTOT</td><td align="center" valign="middle" >HEMISTANDDA RKNE</td></tr><tr><td align="center" valign="middle" >第4行</td><td align="center" valign="middle" >KTHEFIRSTRE CALL</td><td align="center" valign="middle" >EDTOLIFECHA PTER</td><td align="center" valign="middle" >ITHEPERIODE ITAS</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >TTLEAHEADIN TOTH</td><td align="center" valign="middle" >EMISTANDDAR KNES</td></tr><tr><td align="center" valign="middle" >第5行</td><td align="center" valign="middle" >THEFIRSTREC ALLE</td><td align="center" valign="middle" >DTOLIFECHAP TERI</td><td align="center" valign="middle" >THEPERIODEI TAST</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >TLEAHEADINT OTHE</td><td align="center" valign="middle" >MISTANDDARK NESS</td></tr><tr><td align="center" valign="middle" >第6行</td><td align="center" valign="middle" >HEFIRSTRECA LLED</td><td align="center" valign="middle" >TOLIFECHAPT ERIT</td><td align="center" valign="middle" >HEPERIODEIT ASTH</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >LEAHEADINTO THEM</td><td align="center" valign="middle" >[<xref ref-type="bibr" rid="hanspub.35643-ref"></xref>]</td></tr><tr><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td></tr><tr><td align="center" valign="middle" >第15行</td><td align="center" valign="middle" >CALLEDTOLIF ECHA</td><td align="center" valign="middle" >PTERITHEPER IODE</td><td align="center" valign="middle" >ITASTHEBEST OFTI</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >TOTHEMISTAN DDAR</td><td align="center" valign="middle" >[<xref ref-type="bibr" rid="hanspub.35643-ref"></xref>]</td></tr></tbody></table></table-wrap><p>表1. 一段文本的元胞划分矩阵</p><p>海明距离是两个等长字母片段之间对应位置的不同字符个数。对于长度d的两个片段x和y，它们的海明距离为l，那么相似公式 [<xref ref-type="bibr" rid="hanspub.35643-ref3">3</xref>] 为</p><p>γ x y = d − l d (1)</p><p>相似公式可以求出任意两个片段的相似度，将结果用相似矩阵表示。任意一个片段与它本身的相似度为1，在这里的目的是找到达到相似阈值的片段，则相似矩阵R是主对角线为0的对称矩阵。相似矩阵构造过程示意图如图1所示。</p><p>R = ( 0 ⋯ γ 1 n ⋮ ⋱ ⋮ γ 1 n ⋯ 0 ) (2)</p><p>图1. 相似矩阵构造过程示意图</p><p>本文获得了30段文本的相似矩阵，如表2所示。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> A matrix of similarity for a piece of tex</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >第1 列</th><th align="center" valign="middle" >第2列</th><th align="center" valign="middle" >……</th><th align="center" valign="middle" >第n − 1列</th><th align="center" valign="middle" >第n列</th></tr></thead><tr><td align="center" valign="middle" >第1行</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.8667</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >第2行</td><td align="center" valign="middle" >0.8667</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td></tr><tr><td align="center" valign="middle" >第n − 1行</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.8000</td></tr><tr><td align="center" valign="middle" >第n行</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >0.8000</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap><p>表2. 一段文本的相似矩阵</p></sec><sec id="s5_3"><title>3.3. 基于替换错误建立相似阈值公式</title><p>对于任意一个片段，最多出现的替换错误的字母个数为e，那么相似阈值公式为</p><p>γ 阈 = d − e d (3)</p><p>基于相似阈值对相似矩阵进行逻辑判断</p><p>{ γ x y ≥ γ 阈 , 赋 值 为 1 γ x y &lt; γ 阈 , 赋 值 为 0 (4)</p><p>从而得到对应的0-1矩阵，按列相加该矩阵中的元素得到一个行向量，该行向量的第x个元素表示在最多只会出现e个字母的替换错误的情况下，与片段x相似的片段个数。由此可以得到一段文本中的相似片段以及在划分行向量对应的位置。算法设计流程图如图2所示。</p><p>本文获得了最多出现4个字母的替换错误的30段文本的相似片段及其对应位置，如表3所示。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Similar segments and their location</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  colspan="2"  >第1段文本</th><th align="center" valign="middle" >……</th><th align="center" valign="middle"  colspan="2"  >第14段文本</th></tr></thead><tr><td align="center" valign="middle" >相似片段</td><td align="center" valign="middle" >对应H的位置</td><td align="center" valign="middle"  rowspan="6"  >……</td><td align="center" valign="middle" >相似片段</td><td align="center" valign="middle" >对应H的位置</td></tr><tr><td align="center" valign="middle" >OFTHEPASSEN GERS</td><td align="center" valign="middle" >4230</td><td align="center" valign="middle" >ETHEPASSENG ERBO</td><td align="center" valign="middle" >527</td></tr><tr><td align="center" valign="middle" >EDTHEPASSEN GERS</td><td align="center" valign="middle" >445</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td></tr><tr><td align="center" valign="middle" >LETHEPASSEN GERS</td><td align="center" valign="middle" >5254</td><td align="center" valign="middle" >DTHEPASSENG ERAS</td><td align="center" valign="middle" >4933</td></tr><tr><td align="center" valign="middle" >OFITSPASSEN GERS</td><td align="center" valign="middle" >6351</td><td align="center" valign="middle" >TTHEPASSENG ERSI</td><td align="center" valign="middle" >6638</td></tr><tr><td align="center" valign="middle"  colspan="2"  >相似片段总个数：4</td><td align="center" valign="middle"  colspan="2"  >相似片段总个数：9</td></tr><tr><td align="center" valign="middle"  colspan="2"  >第15段文本</td><td align="center" valign="middle" >……</td><td align="center" valign="middle"  colspan="2"  >第30段文本</td></tr><tr><td align="center" valign="middle" >相似片段</td><td align="center" valign="middle" >对应H的位置</td><td align="center" valign="middle"  rowspan="6"  >……</td><td align="center" valign="middle" >相似片段</td><td align="center" valign="middle" >对应H的位置</td></tr><tr><td align="center" valign="middle" >ETHEPASSENG ERBO</td><td align="center" valign="middle" >5625</td><td align="center" valign="middle" >THEPASSENGE RASM</td><td align="center" valign="middle" >161</td></tr><tr><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td><td align="center" valign="middle" >……</td></tr><tr><td align="center" valign="middle" >STHEPASSENG EROP</td><td align="center" valign="middle" >5313</td><td align="center" valign="middle" >SOFTHEPASSE NGER</td><td align="center" valign="middle" >4415</td></tr><tr><td align="center" valign="middle" >FTHEPASSENG ERSB</td><td align="center" valign="middle" >6164</td><td align="center" valign="middle" >AIDTHEPASSE NGER</td><td align="center" valign="middle" >5684</td></tr><tr><td align="center" valign="middle"  colspan="2"  >相似片段总个数：21</td><td align="center" valign="middle"  colspan="2"  >相似片段总个数：15</td></tr></tbody></table></table-wrap><p>表3. 相似片段以及对应位置</p><p>图2. 算法设计流程图</p></sec></sec><sec id="s6"><title>4. 用平均准确率评价算法</title><p>利用MATLAB软件随机生成相同模式长度的片段，作为原始片段。对原始片段随机位置进行字母替换，得到的新片段插入一段空文本中，并记录插入的片段与原始片段相似的片段个数。</p><p>重复上述操作直到文本长度达到预先给定的范围，用这样的方法生成多段文本并将它们作为测试文本。</p><p>选定一个原始片段和一个测试文本，使用本文算法查找测试文本中与原始片段相似的片段个数，与之前记录的数目对比，计算出此次对比的相似片段查找准确率。准确率的计算公式为</p><disp-formula id="hanspub.35643-formula37"><label>(5)</label><graphic position="anchor" xlink:href="//html.scirp.org/file/17-1541741x23_hanspub.png"  xlink:type="simple"/></disp-formula><p>重新选择原始片段和测试文本，计算准确率，直到所有文本中的纪录数目对应的准确率全部计算出来。平均准确率的计算公式为</p><p>ρ a v g = ∑ ρ P (6)</p><p>根据上文，在这里同样取P为30，如表4所示获得了30段文本的准确率。则求得算法的相似查找片段平均准确率为0.9757。因此该算法具有较高的准确率，是查找相似片段的有效算法 [<xref ref-type="bibr" rid="hanspub.35643-ref4">4</xref>]。其中算法分析流程图如图3所示。</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Accuracy of algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >文本</th><th align="center" valign="middle" >准确率</th><th align="center" valign="middle" >文本</th><th align="center" valign="middle" >准确率</th><th align="center" valign="middle" >文本</th><th align="center" valign="middle" >准确率</th><th align="center" valign="middle" >文本</th><th align="center" valign="middle" >准确率</th><th align="center" valign="middle" >文本</th><th align="center" valign="middle" >准确率</th></tr></thead><tr><td align="center" valign="middle" >第1段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第7段</td><td align="center" valign="middle" >0.9375</td><td align="center" valign="middle" >第13段</td><td align="center" valign="middle" >0.9787</td><td align="center" valign="middle" >第19段</td><td align="center" valign="middle" >0.9535</td><td align="center" valign="middle" >第25段</td><td align="center" valign="middle" >1.0000</td></tr><tr><td align="center" valign="middle" >第2段</td><td align="center" valign="middle" >0.9250</td><td align="center" valign="middle" >第8段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第14段</td><td align="center" valign="middle" >0.9804</td><td align="center" valign="middle" >第20段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第26段</td><td align="center" valign="middle" >1.0000</td></tr><tr><td align="center" valign="middle" >第3段</td><td align="center" valign="middle" >0.9783</td><td align="center" valign="middle" >第9段</td><td align="center" valign="middle" >0.9474</td><td align="center" valign="middle" >第15段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第21段</td><td align="center" valign="middle" >0.9800</td><td align="center" valign="middle" >第27段</td><td align="center" valign="middle" >0.9787</td></tr><tr><td align="center" valign="middle" >第4段</td><td align="center" valign="middle" >0.9524</td><td align="center" valign="middle" >第10段</td><td align="center" valign="middle" >0.9565</td><td align="center" valign="middle" >第16段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第22段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第28段</td><td align="center" valign="middle" >0.9796</td></tr><tr><td align="center" valign="middle" >第5段</td><td align="center" valign="middle" >1.0000</td><td align="center" valign="middle" >第11段</td><td align="center" valign="middle" >0.9783</td><td align="center" valign="middle" >第17段</td><td align="center" valign="middle" >0.9706</td><td align="center" valign="middle" >第23段</td><td align="center" valign="middle" >0.9630</td><td align="center" valign="middle" >第29段</td><td align="center" valign="middle" >0.9811</td></tr><tr><td align="center" valign="middle" >第6段</td><td align="center" valign="middle" >0.9444</td><td align="center" valign="middle" >第12段</td><td align="center" valign="middle" >0.9839</td><td align="center" valign="middle" >第18段</td><td align="center" valign="middle" >0.9697</td><td align="center" valign="middle" >第24段</td><td align="center" valign="middle" >0.9615</td><td align="center" valign="middle" >第30段</td><td align="center" valign="middle" >0.9710</td></tr></tbody></table></table-wrap><p>表4. 算法的准确率</p><p>图3. 算法分析流程图</p></sec><sec id="s7"><title>5. 结语</title><p>本文编写了一种针对相似片段查找的算法，该算法以海明矩阵为基础，构建了相似度表达公式，迭代运算直到满足相似度阈值的片段，同时考虑了语言文本记录时的替换错误，为破译未知语言提供了很好的出发点。</p></sec><sec id="s8"><title>文章引用</title><p>张 帆,谢宇奇,饶 晨,王明春. 基于替换错误的相似片段查找Similar Fragment Queries Based on Substitution Errors[J]. 计算机科学与应用, 2020, 10(05): 971-977. https://doi.org/10.12677/CSA.2020.105100</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.35643-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">郭顺, 管河山, 姜青山. 一种新的DNA序列重复片段的查找算法[C]//中国计算机学会. 第二十五届中国数据库学术会议(NDBC2008)论文集, 2008: 414-418.</mixed-citation></ref><ref id="hanspub.35643-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">王镝, 赵毅, 陈白尘, 等. DNA序列中基于后继数组索引的SATR查找算法[J]. 东北大学学报(自然科学版), 2007, 28(2): 184-188.</mixed-citation></ref><ref id="hanspub.35643-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">赵毅. 基于海明距离的DNA序列中相似性重复片段查找技术研究[D]: [硕士学位论文]. 沈阳: 东北大学, 2007.</mixed-citation></ref><ref id="hanspub.35643-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">朱扬勇, 熊赟. DNA序列数据挖掘技术[J]. 软件学报, 2007, 18(11): 2766-2781.</mixed-citation></ref></ref-list></back></article>