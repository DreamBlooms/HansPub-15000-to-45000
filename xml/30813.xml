<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2019.96120</article-id><article-id pub-id-type="publisher-id">CSA-30813</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20190600000_90081996.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于代理的跨站脚本攻击防御研究
  Research on Cross-Site Scripting Attack Defense Based on Proxy
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>严</surname><given-names>芬</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>郭</surname><given-names>彩霞</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>乔</surname><given-names>涛</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>null</addr-line></aff><aff id="aff2"><addr-line>扬州大学信息工程学院，江苏 扬州</addr-line></aff><pub-date pub-type="epub"><day>18</day><month>06</month><year>2019</year></pub-date><volume>09</volume><issue>06</issue><fpage>1061</fpage><lpage>1071</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   在网络安全领域中，跨站脚本攻击已经是最严重的安全问题之一。本文在深入研究跨站脚本攻击方式的基础上，提出了一种基于代理的跨站脚本防御框架。该框架部署在客户端和服务器端之间，利用算法对通信数据进行深度分析和过滤，从而对跨站脚本进行有效的防御。实验证明设计的框架不仅能对跨站脚本攻击进行有效的防御，而且可以对合法标签进行放行，为用户提供良好的访问体验。 In the field of network security, cross site scripting is one of the most destructive security problems. This paper puts forward a kind of XSS defense framework based on agent after an indepth study of XSS attack mode. The framework is deployed between the client and the server, and the framework analyzes and filters the data by intercepting the communication data between the client and server using the algorithm. The evaluation shows that it can not only effectively defense against XSS attacks, but also provide a good experience for the user through the release of legitimate tags. 
  
 
</p></abstract><kwd-group><kwd>跨站脚本攻击，防御，Web安全, XSS</kwd><kwd> Defense</kwd><kwd> Web Security</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于代理的跨站脚本攻击防御研究<sup> </sup></title><p>严芬，郭彩霞，乔涛</p><p>扬州大学信息工程学院，江苏 扬州</p><p><img src="//html.hanspub.org/file/4-1541399x1_hanspub.png" /></p><p>收稿日期：2019年5月31日；录用日期：2019年6月11日；发布日期：2019年6月18日</p><disp-formula id="hanspub.30813-formula47"><graphic xlink:href="//html.hanspub.org/file/4-1541399x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>在网络安全领域中，跨站脚本攻击已经是最严重的安全问题之一。本文在深入研究跨站脚本攻击方式的基础上，提出了一种基于代理的跨站脚本防御框架。该框架部署在客户端和服务器端之间，利用算法对通信数据进行深度分析和过滤，从而对跨站脚本进行有效的防御。实验证明设计的框架不仅能对跨站脚本攻击进行有效的防御，而且可以对合法标签进行放行，为用户提供良好的访问体验。</p><p>关键词 :跨站脚本攻击，防御，Web安全</p><disp-formula id="hanspub.30813-formula48"><graphic xlink:href="//html.hanspub.org/file/4-1541399x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-1541399x7_hanspub.png" /> <img src="//html.hanspub.org/file/4-1541399x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>跨站脚本攻击(Cross Site Scripting, XSS)是目前网络攻击中最流行的方法之一，它通过Web应用中的漏洞将恶意脚本注入到网页中 [<xref ref-type="bibr" rid="hanspub.30813-ref1">1</xref>] 。针对跨站脚本攻击防御，国内外许多专家和学者都对其作了大量研究工作。</p><p>A. Guha等人 [<xref ref-type="bibr" rid="hanspub.30813-ref2">2</xref>] 提出了一种静态方法，对JavaScript脚本的XMLHttpRequest请求建立请求图，在服务器端监视用户发送的XMLHttpRequest请求，若不符合请求图则视为攻击。该方法可以防止普通跨站脚本攻击以及跨站请求伪造攻击(Cross-Site Request Forgery, CDRF)，但是局限于分析XMLHttpRequest请求，不能防御那些不向Web程序所在服务器发送的XMLHttpRequest请求的攻击，而且此方法需要修改服务器端Web程序源代码。</p><p>Noxes [<xref ref-type="bibr" rid="hanspub.30813-ref3">3</xref>] 通过制定一系列的规则，对用户的数据在客户端进行拦截或放行，从而对跨站脚本进行有效防御，但是随着近几年跨站脚本攻击技术的不断更新，基于编码的跨站脚本攻击已经能突破Noxes的拦截规则。</p><p>2011年中国科学计算机网络入侵防范中心王夏莉提出基于行为的跨站脚本攻击检测，通过分析JavaScript命令代码的特征行为，对于危险的HTTP请求数据包放入隔离区，将其中可疑的请求操作转发给用户，由用户自身进行判断。一般用户无法判断是否存在危险，不适合大面推广 [<xref ref-type="bibr" rid="hanspub.30813-ref4">4</xref>] 。</p><p>Likarish [<xref ref-type="bibr" rid="hanspub.30813-ref5">5</xref>] 使用网络爬虫工具去收集网络上的良性脚本和恶意脚本数据，提出了基于函数和代码的特征的机器学习算法。该算法通过深度的学习之后，可以对数据进行检测区分。但是，检测的准确度依靠机器学习的数据样本，对数据辨别的准确率还有待提高。</p><p>目前，对跨站脚本防御做的比较成功的是编码防御。其中，对编码技术总结的比较全面的是OWASP对跨站脚本攻击作出的一系列防御规则 [<xref ref-type="bibr" rid="hanspub.30813-ref6">6</xref>] 。这种防御规则确保数据在前台展示的时候都经过了编码，有效预防了危险数据在HTML文件中被引用 [<xref ref-type="bibr" rid="hanspub.30813-ref7">7</xref>] 。但是，这种规则在带来安全的同时，也限制了Web应用的部分功能，使得部分合法的标签缺少使用权限，从而降低客户端用户的体验。本着放开合法标签的目的，我们提出了一种基于代理的跨站防御方法。该方法通过对数据的深入拆分解析，准确识别出标签是否合法、数据中是否存在脚本以及数据安全。研究结果表明，该方法对于当前流行的跨站脚本攻击有良好的防御效果。</p></sec><sec id="s4"><title>2. 基于代理的跨站脚本防御框架模型</title><p>我们构造的基于代理的跨站脚本防御框架模型如图1所示。防御模块由分析引擎和处理引擎两大部分组成。分析引擎的功能是对数据进行重编码、去除干扰和整理标签处理，为下一步的处理引擎提供预处理之后的数据以及数据基本特征。处理引擎的功能是对分析引擎传入的数据进行非法标签、非法事件和非法引用的处理，确认无风险后进行放行，并将此次处理记录日志。该框架模型能够对合法标签进行放行，为客户端提供多功能的访问体验通过正确识别HTML标签，对跨站脚本攻击进行有效的防御。</p><p>图1. 基于代理的跨站脚本防御框架模型</p></sec><sec id="s5"><title>3. 模型实现</title><sec id="s5_1"><title>3.1. 相关定义</title><p>定义3.1 潜在风险数据：所有用户输入的数据只要满足以下特征中的任意一条，就被认为是潜在风险数据：1) 数据中存在html标签；2) 数据中存在一种特殊字符，如&lt;、&gt;、%、&amp;、/、”、’、#等。</p><p>潜在风险数据需要送分析引擎以及处理引擎作进一步的处理。</p><p>定义3.2 干扰字符：在用户输入的数据中，连续存在的空白符或被浏览器解释引擎自动忽略的字符被定义为干扰字符，比如注释符。</p><p>定义3.3 标签特征(Tag Object)：对于数据之中存在的一个或多个完整标签，每个标签都有其固定的特征存在，包括标签名和标签属性。</p><p>定义3.4 非法标签：非法标签包括用户自定义的标签、存在脚本的标签、内容结构不完整的标签和标签内容与标签名不符合的标签。 </p></sec><sec id="s5_2"><title>3.2. 分析引擎</title><p> 分析引擎是数据传输至防御框架中经过的第一个模块。所有的数据经过分析引擎重编码、去除干扰字符和整理标签处理之后，被分为安全数据和潜在威胁数据 分析引擎是数据传输至防御框架中经过的第一个模块。所有的数据经过分析引擎重编码、去除干扰字符和整理标签处理之后，被分为安全数据和潜在威胁数据(即存在html标签和特殊字符的数据)。对于安全数据直接放行，而潜在威胁数据将被传输至处理引擎做进一步处理。</p><p>1) 重编码子模块</p><p>重编码子模块主要依靠前缀特征如%、%u、\u、&amp;等来判断字符串的编码类型，然后再对其进行统一的解码处理。</p><p>2) 去除干扰字符子模块</p><p>去除干扰字符子模块主要依靠字符特征来判断解码后的数据中是否存在干扰字符，然后对干扰字符进行删除处理。</p><p>重编码子模块和去除干扰字符子模块的实现算法如算法1所示。</p><p>算法1：重编码和去除干扰字符算法</p><p>Input: S</p><p>Output: PretreatmentS</p><p>1: CodingPattern←%,% u,\u,&amp;</p><p>2: ##重编码</p><p>3: if S satisfy CodingPattern, then</p><p>4: if S is URLEncoding, then</p><p>5: S←URLDecode(S,’gb2312’),end if</p><p>6: if S is UnicodeEncoding, then</p><p>7: S←UnicodeDecode(S,’gb2312’),end if</p><p>8: if S is HexEncoding, then</p><p>9: S←HexDecode(S,’gb2312’),end if</p><p>10: if S is HTMLEncoding, then</p><p>11: S←HTMLDecode(S,’gb2312’),end if</p><p>12: ...continue decoding util there is no encoding</p><p>13: end if</p><p>14: ##去除干扰字符 </p><p>15: NotePattern←/*…*/,</p><p>16: if S satisfy NotePattern, then</p><p>17: S←S.delete(Note)</p><p>18: if S contains Continuous blank character, then</p><p>19: S←S.replace(Continuous blank character,[Space])</p><p>20: PretreatmentS←S</p><p>21: return PretreatmentS</p><p>3) 整理标签子模块</p><p>整理标签子模块是分析引擎中最重要的工作，其主要工作包括：标签重排序、删除未知标签、标签属性解析。</p><p>标签重排序部分，根据标签的完整性将标签提取出来。标签分为完整标签和半完整标签，对于一个完整的标签，它的标志性结尾是“/”。检测完整的标签，记为list{tag<sub>1</sub>, tag<sub>2</sub>, …, tag<sub>n</sub>}；接着检测每个完整标签中是否存在完整的或半完整的标签，另外解析；直至标签中不夹杂标签，将这些后加入的标签加入list集中。</p><p>删除未知标签部分，准确定位标签的标签名，如果该标签不是标签库中的正常标签，则该标签直接定义为非法标签，进行丢弃处理。</p><p>标签属性解析部分，list中的每个tag都有其属性，记为tag = TagName + (Tag ArrributrName<sub>1</sub>: TagAttributeValue<sub>1</sub>) +….+(TagArrributrName<sub>n</sub>:TagAttributeValue<sub>n</sub>)。 </p><p>整理标签子模块的实现算法如算法2所示。</p><p>算法2：整理标签算法</p><p>Input: PretreatmentS</p><p>Output: FixedS,list{Tag}</p><p>1: ##标签排序</p><p>2: CompleteTagPattern←&lt;…&gt; , &lt;…/&gt;</p><p>3: CommonTagPattern←&lt;…&gt;</p><p>4: while PretreatmentS satisfy CompleteTagPattern, then</p><p>5: search the nearest CompleteTag,</p><p>6: list←CompleteTag,</p><p>7: find the next CompleteTag, until false, end while</p><p>8: for each CompleteTag in list</p><p>9: while CompleteTag satisfy CompleteTagPattern or CommonTagPattern,then</p><p>10: serch each nearest Tag</p><p>11: list←tag,</p><p>12: find the next Tag, until false, end while</p><p>13: end for</p><p>14: FixedS←newRules(list){taga+tagb+…+tagm}(下标均小于list.length)</p><p>15: ##删除未知标签</p><p>16: for each tagiin list</p><p>17: find TagName of Tagi by Defination 3-3</p><p>18: TagName←Tagi</p><p>19: if TagName is not the correct HTMLTagName,then</p><p>20: delete the tag in the list,</p><p>21: delete the tag in the FixedS, end if</p><p>22: end for</p><p>23: ##标签属性解析</p><p>24: for each tagiin list</p><p>25: divide each TagAttribute of Tagi by Defination 3-3</p><p>26: for each TagAttributei in tagi.TagAttribute</p><p>27: find TagAttributeName of TagAttributei by Defination 3-3</p><p>28: find TagAttributeValue of TagAttributei by Defination 3-3</p><p>29: list{TagAttribute}←TagAttributeName: TagAttributeValue</p><p>30: end for</p><p>31: tagi←TagName+list{ TagAttribute }</p><p>32: end for</p><p>33: return FixedS,list{Tag}</p><p>34: find TagAttributeValue of TagAttributei by Defination 3-3</p><p>35: list{TagAttribute}←TagAttributeName: TagAttributeValue</p><p>36: end for</p><p>37: tagi←TagName+list{ TagAttribute }</p><p>38: end for</p><p>39: return FixedS,list{Tag}</p></sec><sec id="s5_3"><title>3.3. 处理引擎</title><p>处理引擎通过标签特征识别数据是否存在威胁，包括三个子模块，每个子模块都采用了不同规则集分别对非法标签、非法事件和非法引用进行处理。单纯使用黑名单或者白名单算法，检测效果会不佳，因此，在以下三个子模块中，结合了黑名单和白名单共同对进行数据处理。</p><p>1) 处理非法标签子模块</p><p>数据在经过算法2处理之后传入处理引擎，同时数据的标签特性也传入了处理引擎。</p><p>处理非法标签子模块主要采用黑名单算对标签名进行处理。设黑名单中的有限元素集合为List{BlackTag} = {BT<sub>1</sub>,BT<sub>2</sub>,…,BT<sub>n</sub>}，此时传入处理引擎的数据为整理标签算法处理后得到的FixedS和List{Tag}。根据List{Tag}得到数据的有限标签名集合List{TagName} = {TN<sub>1</sub>,TN<sub>2</sub>,…,TN<sub>m</sub>}。对于list{TagName}中的每一个元素TN<sub>i</sub>，如果TN<sub>i</sub>∈List{BlackTag}，那么删除元素TN<sub>i</sub> 对应的Tag，同时对FixedS中对应的标签做删除处理。</p><p>表1列举了部分自定义的黑名单标签来说明黑名单中的规则。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Custom blacklist labels (partial</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >HTML黑名单标签</th><th align="center" valign="middle" >描述</th></tr></thead><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" >该标签定义超链接，由于外部链接也可以作为脚本，因此属于极危险标签，应禁止</td></tr><tr><td align="center" valign="middle" >你好</td><td align="center" valign="middle" >script</td><td align="center" valign="middle" >{null}</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" ><img src="”javascript:alert(‘XSS’)”" />hi!</td><td align="center" valign="middle" >img</td><td align="center" valign="middle" >{ “src”:”javascript:alert(‘XSS’)}</td></tr><tr><td align="center" valign="middle"  rowspan="2"  >3</td><td align="center" valign="middle"  rowspan="2"  ><img src="”javascript:alert(‘XSS’)”" /> <img src="”a.gif”/" /></td><td align="center" valign="middle" >img</td><td align="center" valign="middle" >{ “src”:”javascript:alert(‘XSS’)}</td></tr><tr><td align="center" valign="middle" >img</td><td align="center" valign="middle" >{“src”:”a.gif”}</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >Hello! onlOAd=”alert(‘xss’)”&gt;</td><td align="center" valign="middle" >bgsound</td><td align="center" valign="middle" >{ “src”:”javascript:alert(‘XSS’)”,” onload”:”alert(‘xss’)”}</td></tr><tr><td align="center" valign="middle"  rowspan="2"  >5</td><td align="center" valign="middle"  rowspan="2"  ><img src="’a.pig’onerror=’alert(xss)’”" /></td><td align="center" valign="middle" >style</td><td align="center" valign="middle" >{null}</td></tr><tr><td align="center" valign="middle" >img</td><td align="center" valign="middle" >{“src”:”a.pig”,”onerror”:”alert(‘xss’)”}</td></tr></tbody></table></table-wrap><p>表1. 自定义的黑名单标签(部分)</p><p>如表4所示，原始数据经过分析引擎处理之后传入处理引擎的数据主要包含两部分：一种是经过重编码、去除干扰字符并且重新排序的数据，另一部分是数据的特性，包括标签名和标签属性。从实验结果可以看出，分析引擎对于数据的标签分析是准确的，这对于处理引擎是否能准确处理具有决定性的作用。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> Data processed by the processing engin</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >序号</th><th align="center" valign="middle" >经过处理引擎处理之后的数据</th><th align="center" valign="middle" >处理原因</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >你好</td><td align="center" valign="middle" >Script标签为黑名单标签</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >hi</td><td align="center" valign="middle" >Img标签中src值非法</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" ><img src="”a.gif”/" /></td><td align="center" valign="middle" >Img标签中src值非法</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >Hello!</td><td align="center" valign="middle" >Bgsound标签中src值非法，不允许存在事件</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" ><img src="”a.pig”/" /></td><td align="center" valign="middle" >Style标签为黑名单标签，img标签中不允许存在事件</td></tr></tbody></table></table-wrap><p>表5. 经过处理引擎处理后的数据</p><p>如表5所示，我们通过判断标签名，放开了部分合法标签，合法的标签在检查其标签属性是否合法之后，留下了安全的标签。</p><p>实验共选取200条攻击数据、200条普通数据，以及200条攻击数据与普通数据混合的数据，总共600条数据进行测试。测试结果如表6所示。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> The detection and defense ability test of this algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >输入类型</th><th align="center" valign="middle" >数量</th><th align="center" valign="middle" >处理数量</th><th align="center" valign="middle" >符合预期结果数量</th><th align="center" valign="middle" >检测率</th><th align="center" valign="middle" >是否存在跨站脚本</th></tr></thead><tr><td align="center" valign="middle" >跨站脚本</td><td align="center" valign="middle" >200</td><td align="center" valign="middle" >200</td><td align="center" valign="middle" >198</td><td align="center" valign="middle" >99%</td><td align="center" valign="middle" >否</td></tr><tr><td align="center" valign="middle" >不含特殊字符的普通数据</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >100%</td><td align="center" valign="middle" >否</td></tr><tr><td align="center" valign="middle" >含特殊字符的普通数据</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100</td><td align="center" valign="middle" >100%</td><td align="center" valign="middle" >否</td></tr><tr><td align="center" valign="middle" >含标签的普通数据</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >100%</td><td align="center" valign="middle" >否</td></tr><tr><td align="center" valign="middle" >混合标签</td><td align="center" valign="middle" >200</td><td align="center" valign="middle" >200</td><td align="center" valign="middle" >197</td><td align="center" valign="middle" >98.5%</td><td align="center" valign="middle" >否</td></tr></tbody></table></table-wrap><p>表6. 本文算法检测防御能力测试</p><p>表6可以看出，虽然少量数据与预期结果存在误差，但是所有的数据在经过处理之后均已不存在跨站脚本，说明本文方法可以成功对跨站脚本进行防御。而产生这种误差的主要原因是在重新对标签进行排序分析的时候产生的。由于存在采用关键字混淆编码技术的跨站脚本数据，在还原数据的过程中，可能会出现少量数据中位置顺序错误的问题。而这部分处理对于跨站脚本攻击的检测是必不可少的。可以认为，本文提出的防御框架可以达到比较理想的检测和防御效果。</p></sec><sec id="s5_4"><title>4.2. 本文防御算法的有效性和防御效果验证</title><p>如图2所示，原有的报到系统允许评论中引用第三方网站的图片。但是，为了防止跨站脚本攻击，使用了OWASP提供的防御规则 [<xref ref-type="bibr" rid="hanspub.30813-ref8">8</xref>] ，客户端用户访问报到系统时时出现了一段编码后的标签代码，大大违背了网站应用的本意。而本文方法考虑了在尽可能地挖掘数据潜在危险数据的基础上，尽可能地放开合法标签，按照算法1和算法2提供的规则进行处理，确保数据的最大完整性和降低数据危险的前提下，将数据返回给客户端。</p><p>图2. 使用 OWASP 编码框架的报到系统</p><p>图2所使用到的防御框架是OWASP提供的编码框架，实验测试表明，该防御框架对防御跨站脚本攻击有良好的效果，但是，该框架却限制了Web应用系统的部分功能。如图3中打标记处所示，网站的本意是允许用户在备注自由添加安全的标签，但由于编码的规则，标签全部以编码字符的形式存在，给系统的正常使用带来一定的影响。而图3所示，该系统使用了本文防御算法后，标签功能被保留了，并且，存在脚本的标签也被成功处理。</p><p>图3. 使用本文防御算法的报到系统</p></sec></sec><sec id="s6"><title>5. 结束语</title><p>在保证数据完整性与安全性的前提下，本文提出了一种基于代理的跨站脚本漏洞的防御方法，并进行了实验分析和验证。研究表明，本文算法不仅能有效防御跨站脚本攻击，而且还可以放开传统的Web应用对于标签的使用限制，丰富了客户端用户的体验，同时，一定程度上减少了误报率，能够很好的对跨站脚本进行防御。</p></sec><sec id="s7"><title>基金项目</title><p>“江苏省博士后科研资助计划”项目“信息安全公共服务平台及网络攻击检测技术的研究与应用”(NO: 1501106C)。</p></sec><sec id="s8"><title>文章引用</title><p>严 芬,郭彩霞,乔 涛. 基于代理的跨站脚本攻击防御研究Research on Cross-Site Scripting Attack Defense Based on Proxy[J]. 计算机科学与应用, 2019, 09(06): 1061-1071. https://doi.org/10.12677/CSA.2019.96120</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.30813-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">李威, 李晓红. Web应用存储型XSS漏洞检测方法及实现[J]. 计算机应用与软件, 2016, 33(1): 24-27.</mixed-citation></ref><ref id="hanspub.30813-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Guha, A., Krish-namurthi, S. and Jim, T. (2009) Using Static Analysis for Ajax Intrusion Detection. Proceedings of the 18th International Conference on World Wide Web, Madrid, 20-24 April 2009, 561-570.  
&lt;br&gt;https://doi.org/10.1145/1526709.1526785</mixed-citation></ref><ref id="hanspub.30813-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">王夏莉, 张玉清. 一种基于行为的XSS客户端防范方法[J]. 中国科学院大学学报, 2011, 28(5): 668-675.</mixed-citation></ref><ref id="hanspub.30813-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Likarish, P., Jung, E. and Jo, I. (2009) Obfuscated Malicious Javascript Detection Using Classifica-tion Techniques. International Conference on Malicious and Unwanted Software, Montreal, 13-14 October 2009, 47-54.  
&lt;br&gt;https://doi.org/10.1109/malware.2009.5403020</mixed-citation></ref><ref id="hanspub.30813-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">鲍泽民, 王根英, 李娟. 跨站脚本攻击客户端防御技术研究[J]. 铁路计算机应用, 2015(7): 17-20.</mixed-citation></ref><ref id="hanspub.30813-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Arzt, S., Kussmaul, T. and Bodden, E. (2016) Towards Cross-Platform Cross-Language Analysis with Soot. The 5th ACM SIGPLAN International Workshop, Santa Barbara, 14 June 2016, 1-6. &lt;br&gt;https://doi.org/10.1145/2931021.2931022</mixed-citation></ref><ref id="hanspub.30813-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">刘达. 通过HTML编码防御XSS跨站脚本攻击的研究[J]. 信息安全与技术, 2016, 7(6): 23-24.</mixed-citation></ref><ref id="hanspub.30813-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">OWASP (2017) XSS (Cross Site Scripting) Prevention Cheat Sheet.   
http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</mixed-citation></ref></ref-list></back></article>