<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">ORF</journal-id><journal-title-group><journal-title>Operations Research and Fuzziology</journal-title></journal-title-group><issn pub-type="epub">2163-1476</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/ORF.2019.92017</article-id><article-id pub-id-type="publisher-id">ORF-30427</article-id><article-categories><subj-group subj-group-type="heading"><subject>ORF20190200000_39571263.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于矩阵改进的关联规则算法研究
  Research on Improved Association Rules Algorithm Base on Matrix
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>朱</surname><given-names>嘉宏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>谷</surname><given-names>岩</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>胡</surname><given-names>勇军</given-names></name><xref ref-type="aff" rid="aff4"><sup>4</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff4"><addr-line>广州大学工商管理学院，广东 广州</addr-line></aff><aff id="aff2"><addr-line>广州大学数学与信息科学学院，广东 广州 </addr-line></aff><aff id="aff3"><addr-line>广州大学网络中心，广东 广州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>30</day><month>04</month><year>2019</year></pub-date><volume>09</volume><issue>02</issue><fpage>147</fpage><lpage>155</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  Apriori算法是非常经典的关联规则算法。传统的Apriori算法在处理大量数据时运算能力的问题上存在着许多不足，由于其算法本身的特点，循环操作的次数较多，需要不断地对项集进行比对，影响算法的效率。本文基于矩阵改进和优化算法，利用矩阵运算原理，简化运算过程，减少算法的循环次数，提高运行效率，同时减少内存占用。通过本文改进的算法比原来的算法处理数据更为高效。
   Apriori algorithm is a classical quantitative association rule algorithm. Traditional Apriori algo-rithms have many shortcomings in the computational power of large amounts of data and need to scan the database many times. An improved Apriori algorithm based on compressed matrix re-duced a large number of candidate items and the memory space of data. Experimental results showed that the improved algorithm can mine frequent items effectively and be less spaced than the classical Apriori algorithm.
  
 
</p></abstract><kwd-group><kwd>Apriori算法，矩阵，频繁项集，关联规则, Apriori Algorithm</kwd><kwd> Matrix</kwd><kwd> Frequent Itemsets</kwd><kwd> Association Rules</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于矩阵改进的关联规则算法研究<sup> </sup></title><p>朱嘉宏<sup>1</sup>，谷岩<sup>2*</sup>，胡勇军<sup>3</sup></p><p><sup>1</sup>广州大学数学与信息科学学院，广东 广州</p><p><sup>2</sup>广州大学网络中心，广东 广州</p><p><sup>3</sup>广州大学工商管理学院，广东 广州</p><p><img src="//html.hanspub.org/file/4-1700152x1_hanspub.png" /></p><p>收稿日期：2019年5月6日；录用日期：2019年5月20日；发布日期：2019年5月27日</p><disp-formula id="hanspub.30427-formula96"><graphic xlink:href="//html.hanspub.org/file/4-1700152x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>Apriori算法是非常经典的关联规则算法。传统的Apriori算法在处理大量数据时运算能力的问题上存在着许多不足，由于其算法本身的特点，循环操作的次数较多，需要不断地对项集进行比对，影响算法的效率。本文基于矩阵改进和优化算法，利用矩阵运算原理，简化运算过程，减少算法的循环次数，提高运行效率，同时减少内存占用。通过本文改进的算法比原来的算法处理数据更为高效。</p><p>关键词 :Apriori算法，矩阵，频繁项集，关联规则</p><disp-formula id="hanspub.30427-formula97"><graphic xlink:href="//html.hanspub.org/file/4-1700152x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-1700152x8_hanspub.png" /> <img src="//html.hanspub.org/file/4-1700152x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>关联规则是当今非常热门的十大重大的数据挖掘方法之一，成功应用在各种领域方面。随着信息科技时代的发展，产生了众多的海量数据。从海量的数据当中挖掘出隐藏的、有利用价值的信息具有重要的意义，但是如何快速且高效的处理大数据，对现行挖掘算法有着较高的要求。</p><p>传统的Apriori算法存在着许多先天不足导致算法存在结构缺陷，每次搜索项集时都要在数据库中查找，所以算法在产生频繁项集时都要对数据库进行访问，造成非常大的内存消耗和I/O过载。如果能减少数据库扫描的次数，则可以大大的提高Apriori的运行效率。</p><p>很多研究者都对Apriori算法进行了改进，选择利用皮尔森相关系数的度量挖掘出项集之间的规则 [<xref ref-type="bibr" rid="hanspub.30427-ref1">1</xref>] ，直接提出了减少扫描次数的改进 [<xref ref-type="bibr" rid="hanspub.30427-ref2">2</xref>] ，提出了利用划分的思想进行分片来改进算法在运算 [<xref ref-type="bibr" rid="hanspub.30427-ref3">3</xref>]。付沙，周航军 [<xref ref-type="bibr" rid="hanspub.30427-ref4">4</xref>] 则是利用辅助矩阵和项集的求交集的策略，减少候选集的产生和对数据库的访问次数。通过利用概率设置属性权值，对概率极低的候选集及时剔除 [<xref ref-type="bibr" rid="hanspub.30427-ref5">5</xref>]。根据用户的兴趣点，通过项集间的相关联程度压缩数据库的方法，减少数据的计算量，降低内存资源的消耗 [<xref ref-type="bibr" rid="hanspub.30427-ref6">6</xref>]。主要是对剪枝步骤进行相关的优化，有效删除了不必要的候选集 [<xref ref-type="bibr" rid="hanspub.30427-ref7">7</xref>]。</p></sec><sec id="s4"><title>2. 关联规则的基本概念</title><p>关联规则表示的数据形如 X → Y 的推导式，就是在X出现的情况下，Y发生的概率， X ∩ Y 等于空集，即是两个独立的事件。支持度(support)和置信度(confidence)表示两个事务之间的相关联性，其中的性质是概率来表示用支持度和置信度。公式如下：</p><p>support ( X → Y ) = P ( X Y ) = | X Y | | D |</p><p>规则的置信度公式为：</p><p>confidence ( X → Y ) = P ( Y | X ) = | X Y | | X |</p><p>上述的两个公式中 | D | 为要进行挖掘的事务数据库的总个数， | X Y | 是一起出现的事务， | X | 表示数据库当中有X个数。例如，鞋子<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1700152x17_hanspub.png" xlink:type="simple"/></inline-formula>袜子，若 support = 20 % ， confidence = 65 % ，表示在所有的商品交易数据集中，其中有20%的消费者选择了购买鞋子和袜子，在购买鞋子的所有消费者当中有65%也购买了袜子。认为购买鞋子和购买袜子之间存在着数据关联，即买了鞋子的人会有很大的几率去购买袜子。</p><p>关联规则主要分为两个步骤：</p><p>一、先从要进行挖掘的所有事务数据库中搜索出大于设定的支持度的高频率项目集，即频繁项集。</p><p>二、由第一步产生的频繁项集产生关联规则。要产生关联规则，则每个项集都是频繁项集的基础上，项集产生频繁项集必须要符合设定的支持度和置信度。</p></sec><sec id="s5"><title>3. Apriori的基本步骤</title><p>Apriori算法的主要步骤：</p><p>1) 先对事务数据库进行全部扫描。进行每个项集的比对，若满足关联规则的条件，则从事务数据库中生成频繁1-项集 L 1 。</p><p>2) 频繁项集的连接。由于算法是通过迭代递推的方式进行项集与项集之间的连接。当 k ≥ 1 时，频繁项集 L k 通过自身的连接来产生 k + 1 候选集 C k + 1 。</p><p>3) 候选集进行剪枝，删除不适合条件的项集。在频繁项集产生的候选集 C k + 1 中，筛选满足条件的项集即项集出现的频度必须大于设定的最小支持度，删除不满足条件的项目集。</p><p>4) 生关联规则。由于规则算法原理是遍历整个数据库循环迭代计算频繁项集的基础上，所以产生的规则都是满足最小支持度的，然后得出项集的强关联规则。</p></sec><sec id="s6"><title>4. 基于矩阵改进的Apriori算法</title><p>本文利用矩阵运算的原理来对算法进行改进，一是通过减少对数据库的扫描，二是快速计算候选项集的支持度。</p><sec id="s6_1"><title>4.1. 关概念与性质</title><p>定义1：项集布尔矩阵，对要进行数据挖掘的事务数据库，首先扫描数据库得到数据源，将数据库中事务数据表转换为项集布尔矩阵D。矩阵的行向量与列向量分别对应的是事务集和项目集，若第i个事务中出现有第j个项目，则矩阵的第i行、第j列的值为1，否则为0。构建的项集布尔矩阵如下：</p><p>D = [ d 11 d 12 ⋯ d 1 n d 21 d 22 ⋯ d 2 n ⋮ ⋮ ⋯ ⋮ d m 1 d ( m 2 ) ⋯ d m n ]</p><p>其中， d i j = { 1 , d i j ∈ T i 0 , d i j ∉ T i , ，式中 i = 1 , 2 , ⋯ , m ， j = 1 , 2 , ⋯ , n 。</p><p>在项集布尔矩阵当中，项集的支持度为矩阵当中每一列1的个数。 I = ( I 1 , I 2 , ⋯ I n ) 是数据库中项目的集合，则第 I i 项目的支持度为：</p><p>support _ count ( I j ) = ∑ i − 1 m d i j</p><p>第一个项集 I 1 的支持度为：</p><p>support _ count ( I 1 ) = d 11 + d 21 + ⋯ + d m 1</p><p>定义2：项集布尔矩阵的向量 D i j 表示2-项集 I i j ：</p><p>D i j = D i ∧ D j = [ d 1 i ∧ d 1 j d 2 i ∧ d 2 j ⋮ d m i ∧ d n j ]</p><p>上述的项集矩阵公式中，操作符号“ ∧ ”是矩阵列向量进行“与”运算。则 I i j 的支持度的计算公式为：</p><p>support _ count ( I i I j ) = ∑ k − 1 n d k i ∧ d k j</p><p>如： support _ count ( I 1 I 2 ) = d 11 ∧ d 12 + d 21 ∧ d 22 + ⋯ + d m 1 ∧ d m 2</p><p>定义3：k-项集 { I 1 , I 2 , ⋯ I k } 的向量定义为 D 12 ⋯ k = D 12 ⋯ ( k − 2 ) ∧ D 12 ⋯ ( k − 1 )</p><p>则k-项集的支持度计数为：</p><p>support _ count ( I 1 I 2 ⋯ I j ) = ∑ k − 1 n ( ( d p 1 ∧ d p 2 ∧ ⋯ ∧ d ( p k − 1 ) ) ∧ d p k )</p><p>性质1：如果事务的长度为k则产生的频繁项集项的个数小于或等于k。</p><p>性质2：频繁k-项集若可以继续产生频繁 ( k + 1 ) 项集，频繁 k − 项集中的个数大于k。</p></sec><sec id="s6_2"><title>4.2. 改进算法的主要步骤</title><p>1) 对事务数据库进行全部扫描。同时设定项集的支持度和置信度，若满足上述的条件，矩阵的行向量对应事务集，列为项集。为了方便矩阵计算，在项集布尔矩阵计算时增加 s u m _ r 行用来计算每一列的和即求矩阵每一列对应项集的支持度。</p><p>2) 项集的布尔矩阵计算每列1的个数。增加矩阵的一行 s u m _ r 用来统计每列1的数值，若该数值小于支持度，则把该值对应的列向量删除。其余的都是频繁1-项集对应的列向量，得频繁1-项集矩阵 D ( 1 ) ，求得 L 1 频繁项集。</p><p>3) 求 k ( k ≥ 2 ) 维频繁项集的，对频繁 D ( k − 1 ) 矩阵的对列向量“与”运算，在对运算之后的列向量求和，不符合条件的删除，剩下的列向量对应的是频繁项集，得频繁 k − 项集矩阵 D ( k ) 。</p><p>4) 复执行上述的2和3步骤，经操作后把不满足的列向量不断删除，矩阵不断地被压缩。根据性质2，若频繁项集计算到 ( k − 1 ) 项集的个数，即矩阵的列的个数小于k时，停止算法运算。</p></sec><sec id="s6_3"><title>4.3. 应用实例</title><p>具体通过以下的事务数据库，如下表1所示，其中有7个事务， D = { T 1 , T 2 , T 3 , T 4 , T 5 , T 6 } ， I = { I 1 , I 2 , I 3 , I 4 , I 5 , I 6 } ，规定项集的最小支持度计数为2。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Transaction dat</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >事务</th><th align="center" valign="middle" >项目</th></tr></thead><tr><td align="center" valign="middle" >T 1</td><td align="center" valign="middle" >I 1 , I 3 , I 4 , I 6</td></tr><tr><td align="center" valign="middle" >T 2</td><td align="center" valign="middle" >I 2 , I 3 , I 4 , I 6</td></tr><tr><td align="center" valign="middle" >T 3</td><td align="center" valign="middle" >I 4 , I 5 , I 6</td></tr><tr><td align="center" valign="middle" >T 4</td><td align="center" valign="middle" >I 1 , I 2 , I 5</td></tr><tr><td align="center" valign="middle" >T 5</td><td align="center" valign="middle" >I 1 , I 2 , I 3</td></tr><tr><td align="center" valign="middle" >T 6</td><td align="center" valign="middle" >I 3 , I 5 , I 7</td></tr></tbody></table></table-wrap><p>表1. 事务数据表</p><p>I：对事务表映射成布尔矩阵，事务包含该项目的值为1，否则为0。转换后的数据库如下表：</p><p>根据定义1由表2对事务数据表生成项集布尔矩阵，对矩阵的列向量进行求和</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Transaction dat</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >TID</th><th align="center" valign="middle" >I<sub>1</sub></th><th align="center" valign="middle" >I<sub>2</sub></th><th align="center" valign="middle" >I<sub>3</sub></th><th align="center" valign="middle" >I<sub>4</sub></th><th align="center" valign="middle" >I<sub>5</sub></th><th align="center" valign="middle" >I<sub>6</sub></th><th align="center" valign="middle" >I<sub>7</sub></th></tr></thead><tr><td align="center" valign="middle" >T<sub>1</sub></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>2</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>3</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>4</sub></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>5</sub></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>6</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td></tr></tbody></table></table-wrap><p>表2. 事务数据表</p><p>                      I 1     I 2     I 3     I 4   I 5     I 6   I 7 D = ( D 1 , D 2 , ⋯ , D 7 ) = [ 1 0 1 1 0 1 0 0 1 1 1 0 1 0 0 0 0 1 1 1 0 1 1 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 1 ]                       [ 3     3     4     3     3     3       1 ]</p><p>生成L<sub>1</sub>频繁项集，由定义2，计算每个项集的支持度，则I<sub>1</sub>的支持度为：</p><p>support _ count ( I 1 ) = ∑ i − 1 6 d i 1 = 3</p><p>则每个1-项集的支持度如下表3：</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Itemsets Ii suppor</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >I<sub>j</sub></th><th align="center" valign="middle" >count ( I j )</th></tr></thead><tr><td align="center" valign="middle" >I<sub>1</sub></td><td align="center" valign="middle" >3</td></tr><tr><td align="center" valign="middle" >I<sub>2</sub></td><td align="center" valign="middle" >3</td></tr><tr><td align="center" valign="middle" >I<sub>3</sub></td><td align="center" valign="middle" >3</td></tr><tr><td align="center" valign="middle" >I<sub>4</sub></td><td align="center" valign="middle" >4</td></tr><tr><td align="center" valign="middle" >I<sub>5</sub></td><td align="center" valign="middle" >3</td></tr><tr><td align="center" valign="middle" >I<sub>6</sub></td><td align="center" valign="middle" >3</td></tr><tr><td align="center" valign="middle" >I<sub>7</sub></td><td align="center" valign="middle" >1</td></tr></tbody></table></table-wrap><p>表3. 项集I<sub>i</sub>的支持度</p><p>由关联规则的条件可知，I<sub>7</sub>为非频繁项集，则得到频繁1-项集 L 1 = { I 1 , I 2 , I 3 , I 4 , I 5 , I 6 } ，项集I<sub>7</sub>对应的列D<sub>7</sub>进行删除，因为I<sub>7</sub>的支持度小于 min _ sup ，删除不满足的候选集列向量。经过删除后的矩阵为频繁1-矩阵D(1)：</p><p>      I 1     I 2     I 3     I 4   I 5     I 6 D ( 1 ) = [ 1 0 1 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 1 0 ]</p><p>II：生成频繁2-项集。由定义2，在求频繁2-项集时，利用经过逻辑“与”运算得2-项D(1)集矩阵，再对每一列进行计数，若列向量求和小于支持度的删除不满足的列向量得到频繁2-项集矩阵，则I<sub>12</sub>的支持度计数为：</p><p>D 12 = D 1 ∧ D 2 = [ d 11 ∧ d 12 d 21 ∧ d 22 ⋮ d 61 ∧ d 62 ] = ( 0 0 0 1 1 0 ) T</p><p>则I<sub>12</sub>的支持度计数为： support _ count ( I 12 ) = 2</p><p>删除不满足的列向量后的频繁2-项集矩阵如下：</p><p>        I 12   I 13   I 23   I 34     I 36     I 46 D ( 2 ) = [ 0 1 0 1 1 1 0 0 1 1 1 1 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 ]</p><p>则频繁2-项集的支持度数如下表4：</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Itemsets Iij suppor</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >I<sub>ij</sub></th><th align="center" valign="middle" >count ( I j )</th></tr></thead><tr><td align="center" valign="middle" >I<sub>12</sub></td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >I<sub>13</sub></td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >I<sub>23</sub></td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >I<sub>34</sub></td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >I<sub>36</sub></td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >I<sub>46</sub></td><td align="center" valign="middle" >3</td></tr></tbody></table></table-wrap><p>表4. 项集I<sub>ij</sub>的支持度</p><p>则频繁2-项集为 L 2 = { I 12 , I 13 , I 23 , I 34 , I 36 , I 46 } 。</p><p>III：生成频繁3-项集。同理进行对上述相同的运算，根据性质1，频繁k-项集的事务个数的长度小于或等于k，若在生成频繁k项集，项集连接产生的事务个数大于k，则删除该项集的连接。若产生的项集为重复的项集，保留一个项集的列向量，其余删除，得频繁3-项集矩阵。</p><p>          I 346 D ( 3 ) = [ 1 1 0 0 0 0 ]</p><p>count ( I 346 ) = 2</p><p>L<sub>3</sub>的项集的列向量只有1列，即个数只有1个，根据步骤(4)，小于4，则不用继续求L<sub>4</sub>。L<sub>3</sub>频繁项集I<sub>346</sub>为最大的频繁项集。</p><p>上述的改进算法是运用矩阵的向量运算来优化频繁项集的产生，先对数据库扫描转化为数据表储存，将数据表映射为0~1的项集布尔矩阵。项集的支持度通过矩阵的列进行“与”运算求得，矩阵的列向量求和数值的计算就可以求出频繁项集，减少了算法在运行过程中项集的连接和剪枝。改进的算法只对数据库的访问一次，储存项集布尔矩阵，利用转化后的矩阵运算，优化各项集的大小，提高算法的执行效率。本文利用的只是对矩阵的列向量来进行项集的支持度计算，对于矩阵的行向量不参与计算，这样每个k-项集的支持度都能够计算。而很多研究者通过进行矩阵的行和列同时计算，这种方法只能找到最大的频繁项集，但不能准确求出每一个频繁项集的支持度。</p></sec><sec id="s6_4"><title>4.4. 算法实验与分析</title><p>为验证算法的效率，比较传统的Apriori算法与改进算法的在不同的交易事务数下的执行效率。</p><p>实验1：比较基于矩阵压缩的算法和Apriori算法在不同的数据量的运行时间。</p><p>由图1的实验结果表明，随着项集的数据量不断增大时，两个算法运行的时间都是不断增长。可以明显得出各算法在处理相同数据时，耗时是有所差别。当数据量较少时，基于矩阵改进的算法的效果与传统的算法不是特别明显。但是计算大数据量时，特别是在处理数据量超过400个时，两者明显出现差别。传统的算法耗时急剧增长，改进算法虽然也随着数据量增大所用时间也增大，但是改进算法所耗时长非常的平缓。说明改进的算法效率比Apriori算法要更适合处理数据大的问题。</p><p>图1. 不同数据量下算法运行时间</p><p>实验2：如图2所示比较基于矩阵压缩的算法和Apriori算法在不同的支持度下运行时间。</p><p>图2. 不同支持度下算法运行时间</p><p>从图2的图像上表明，一开始，图像急剧下降非常明显。这实验现象说明了当支持度越小时，需要计算的项集就越多。支持度越大时，删除不满足条件的项集就越多，加快算法的运行效率，减少数据的冗余计算。由于支持度越小，满足条件的项集就越多，产生的候选集是成几何增长的，运行时间较长，所以图的两条曲线都是下降的。在同样的支持度下，改进后的算法运行的时间比原来的算法大大的缩短。</p><p>从图1和图2的结论表明，不论是处理数据量的大小，还是不同的支持度下，基于矩阵改进的算法在处理大量的数据时表现更为优越和高效率。</p></sec></sec><sec id="s7"><title>5. 结束语</title><p>本文改进的算法在扫描数据库和产生大量候选集的问题上，解决了算法运行时对数据库频繁的访问，并且有效的对非频繁项集及时删除。基于矩阵的算法运算有很大的提升，运用矩阵的数值操作计算，直接判断矩阵列向量的和是否满足产生频繁项集的最小支持度，直接排除不满足的候选集，避免没有满足条件的项集参与了计算的过程，减少了数据的重复计算。经过性能分析，利用矩阵的运算性质进行直接的数值计算，减少对数据库的访问，及时产生候选集，减少无用的非频繁项集，简化运算的程序，对于处理数据更快更高效，满足对大数据进行挖掘的需求。实验结果显示了基于矩阵压缩的改进算法更具有效率。</p></sec><sec id="s8"><title>致谢</title><p>本文得到国家社科基金(18BG236)项目，广州市科技计划重大专项(201604010072)项目和2016年广东省特色重点学科“公共管理”建设项目的资助。在此表示感谢！</p></sec><sec id="s9"><title>文章引用</title><p>朱嘉宏,谷岩,胡勇军. 基于矩阵改进的关联规则算法研究Research on Improved Association Rules Algorithm Base on Matrix[J]. 运筹与模糊学, 2019, 09(02): 147-155. https://doi.org/10.12677/ORF.2019.92017</p></sec><sec id="s10"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.30427-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">简玉姣. 基于矩阵的相关规则挖掘算法研究[D]: [硕士学位论文]. 兰州: 兰州大学, 2013.</mixed-citation></ref><ref id="hanspub.30427-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Zhang, Y. and Chen, J. (2010) AVI: Based on the Vertical and Intersection Operation of the Improved Apriori Algorithm. Proceedings of the 2nd International Conference on Future Computer and Communication, Wuhan, 21-24 May 2010, V2-718-V2-721. &lt;br&gt;https://doi.org/10.1109/ICFCC.2010.5497596</mixed-citation></ref><ref id="hanspub.30427-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Wang, G.-F., Yu, X. Peng, D.-B., Cui, Y.-H. and Li, Q.-M. (2010) Research of Data Mining Based on Apriori Algorithm in Cutting Database. Proceedings of the 2010 International Conference on Mechanic Automation and Control Engineering, Wuhan, 26-28 Jun 2010, 3765-3768.</mixed-citation></ref><ref id="hanspub.30427-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">付沙, 周航军. 关联规则挖掘Apriori算法的研究与改进[J]. 微电子学与计算机, 2013, 30(9): 110-114.</mixed-citation></ref><ref id="hanspub.30427-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">赵志刚, 万军, 王芳. 一种基于向量的概率加权关联规则挖掘算法[J]. 计算机工程与科学, 2014, 36(2): 354-358.</mixed-citation></ref><ref id="hanspub.30427-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Vaithiyanathan, V., Rajeswari, K., Phalnikar, R. and Tonge, S. (2012) Improved Apriori Algorithm Based on Selection Criterion. Proceedings of the 2012 IEEE International Conference on Computational Intelligence &amp; Computing Research, Coimbatore, 18-20 December 2012, 1-4. &lt;br&gt;https://doi.org/10.1109/ICCIC.2012.6510229</mixed-citation></ref><ref id="hanspub.30427-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Chen, Z., Cai, S.-B., Song, Q.-L. and Zhu, C.-L. (2011) An Improved Apriori Algorithm Based on Pruning Optimization and Transaction Reduction. Proceedings of the 2nd In-ternational Conference on Artificial Intelligence, Management Science and Electronic Commerce, Zhengzhou, 8-10 August 2011, 1908-1911.</mixed-citation></ref></ref-list></back></article>