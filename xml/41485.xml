<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2021.102013</article-id><article-id pub-id-type="publisher-id">SEA-41485</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20210200000_43434447.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  MKR模型在电影推荐系统中的应用研究
  Research on the Application of MKR Model in Movie Recommendation System
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>操</surname><given-names>淑敏</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>秦</surname><given-names>学</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>鲜</surname><given-names>翠琼</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>贵州大学，贵州 贵阳</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>07</day><month>04</month><year>2021</year></pub-date><volume>10</volume><issue>02</issue><fpage>104</fpage><lpage>112</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  针对电影推荐系统中推荐结果的准确性和可解释性不高的问题，研究了基于多任务特征学习的知识图谱增强推荐(multi-task learning for knowledge graph enhanced recommendation, MKR)。通过构建知识图谱，将其作为辅助信息构建了MKR模型，并将其应用到电影推荐系统中。采用预测用户满意度评分的方法根据评分结果来判定用户对电影的喜好程度，并将合适的电影类型推荐给用户。最后将MKR模型与几种常见的推荐模型进行比较，使用不同的评价指标进行预测，并在top-K场景中比较了不同K值下各个模型的推荐性能。实验结果表明，MKR模型在电影推荐系统中有良好的表现，在准确率和推荐结果上均优于其他模型，显著提升了推荐的性能。&lt;br/&gt;Aiming at the low accuracy and interpretability of recommendation results in movie recommen-dation system, a multi task learning for knowledge graph enhanced recommendation (MKR) based on multi task feature learning is studied. By constructing a knowledge graph, and using it as auxil-iary information to construct a MKR model, and applied to the movie recommendation system. Using the method of predicting user satisfaction score, according to the score results to determine the user’s preference for movies, and recommend the appropriate movie types to users. Finally, MKR model is compared with several common recommendation models, and different evaluation indexes are used for prediction. The recommendation performance of each model under different K values is compared in the Top-k scenario. The experimental results show that MKR model has a good performance in the movie recommendation system, and is superior to other models in accu-racy and recommendation results, which significantly improves the performance of the recom-mendation.
 
</p></abstract><kwd-group><kwd>深度学习，推荐系统，多任务特征学习，知识图谱, Deep Learning</kwd><kwd> Recommendation System</kwd><kwd> Multi-Task Feature Learning</kwd><kwd> Knowledge Graph</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>针对电影推荐系统中推荐结果的准确性和可解释性不高的问题，研究了基于多任务特征学习的知识图谱增强推荐(multi-task learning for knowledge graph enhanced recommendation, MKR)。通过构建知识图谱，将其作为辅助信息构建了MKR模型，并将其应用到电影推荐系统中。采用预测用户满意度评分的方法根据评分结果来判定用户对电影的喜好程度，并将合适的电影类型推荐给用户。最后将MKR模型与几种常见的推荐模型进行比较，使用不同的评价指标进行预测，并在top-K场景中比较了不同K值下各个模型的推荐性能。实验结果表明，MKR模型在电影推荐系统中有良好的表现，在准确率和推荐结果上均优于其他模型，显著提升了推荐的性能。</p></sec><sec id="s2"><title>关键词</title><p>深度学习，推荐系统，多任务特征学习，知识图谱</p></sec><sec id="s3"><title>Research on the Application of MKR Model in Movie Recommendation System</title><p>Shumin Cao, Xue Qin, Cuiqiong Xian</p><p>Guizhou University, Guiyang Guizhou</p><p><img src="//html.hanspub.org/file/6-2690505x4_hanspub.png" /></p><p>Received: Feb. 26<sup>th</sup>, 2021; accepted: Apr. 1<sup>st</sup>, 2021; published: Apr. 9<sup>th</sup>, 2021</p><p><img src="//html.hanspub.org/file/6-2690505x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>Aiming at the low accuracy and interpretability of recommendation results in movie recommendation system, a multi task learning for knowledge graph enhanced recommendation (MKR) based on multi task feature learning is studied. By constructing a knowledge graph, and using it as auxiliary information to construct a MKR model, and applied to the movie recommendation system. Using the method of predicting user satisfaction score, according to the score results to determine the user’s preference for movies, and recommend the appropriate movie types to users. Finally, MKR model is compared with several common recommendation models, and different evaluation indexes are used for prediction. The recommendation performance of each model under different K values is compared in the Top-k scenario. The experimental results show that MKR model has a good performance in the movie recommendation system, and is superior to other models in accuracy and recommendation results, which significantly improves the performance of the recommendation.</p><p>Keywords:Deep Learning, Recommendation System, Multi-Task Feature Learning, Knowledge Graph</p><disp-formula id="hanspub.41485-formula28"><graphic xlink:href="//html.hanspub.org/file/6-2690505x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2021 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/6-2690505x7_hanspub.png" /> <img src="//html.hanspub.org/file/6-2690505x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>近年来，推荐系统受到国内外研究者的广泛研究，推荐系统能有效解决信息过载和泛滥问题，用户能在海量的产品和服务中做出正确的选择。目前，主流的推荐系统可分为三种 [<xref ref-type="bibr" rid="hanspub.41485-ref1">1</xref>]：一是基于协同过滤(collaborative filtering)的推荐算法，协同过滤考虑了用户的历史交互，并根据用户潜在的共同偏好进行推荐 [<xref ref-type="bibr" rid="hanspub.41485-ref2">2</xref>]；二是基于内容的推荐算法，利用项目的内容特征进行推荐；三是混合推荐算法。基于协同过滤的推荐系统能很好的捕获用户偏好，而且易于实现，但基于协同过滤的推荐算法通常会遇到用户–物品交互稀少和冷启动问题，为解决这些局限性，研究者提出混合推荐系统，将边信息整合到协同过滤中，如项目属性 [<xref ref-type="bibr" rid="hanspub.41485-ref3">3</xref>]、项目评论 [<xref ref-type="bibr" rid="hanspub.41485-ref4">4</xref>]、用户社交网络 [<xref ref-type="bibr" rid="hanspub.41485-ref5">5</xref>] 等。研究者注意到知识图谱通常包含更丰富的事实和实体之间的联系，项目端的知识图谱拓宽了项目的信息，有利于发现项目之间的潜在关联，提高推荐的精度，增加推荐的多样性。知识图谱还可以将用户的历史记录和推荐记录联系起来，从而为推荐系统带来可解释性。</p><p>基于知识图谱辅助的推荐算法的一个主要方法是知识图谱特征学习(knowledge graph embedding, KGE) [<xref ref-type="bibr" rid="hanspub.41485-ref6">6</xref>]。知识图谱由三元组构成，由于其网络结构特殊性，使用特征学习可以得到实体和关系的低维向量表示，从而与推荐系统进行交互。MKR框架的目的就是利用知识图谱任务和推荐任务之间的交互性，用知识图谱来辅助推荐任务 [<xref ref-type="bibr" rid="hanspub.41485-ref7">7</xref>]。通过框架中的交叉压缩单元模块，对项目和实体中有交叉的特征进行建模，优化两个任务之间的交替学习任务，使MKR框架充分挖掘了用户和项目之间的特征交互，从而使得MKR推荐系统的整体性能更优，在图书推荐、新闻推荐等推荐场景中都有良好的表现。本文对基于知识图谱特征学习构建电影推荐系统进行研究探讨，构建了基于多任务学习的知识图谱辅助深度推荐框架(MKR)，进行整体框架的训练，提升了电影推荐系统的性能。</p></sec><sec id="s6"><title>2. 电影知识图谱的构建</title><p>本文利用知识图谱生成推荐结果、构建电影推荐系统(数据源：豆瓣电影)。首先要构建电影知识图谱，共要经历四个过程，包括电影知识抽取，电影知识表示，以及知识融合和知识推理。构建图谱的数据利用Python网络爬虫，使用requests、bs4等工具进行爬取。数据爬取流程如图1所示，根据对豆瓣电影网页结构的分析，针对其动态网页结构，设计URL循环函数，利用上述爬虫工具爬取数据，并最后得到初始数据，并将爬取到的数据存储到数据库中。</p><p>图1. 电影数据爬取流程</p><p>本文共抓取了豆瓣电影中的20个类型共93956条影片数据，每个影片包含电影名称、演员、导演、评分、类型等详细信息。对数据进行预处理后，从数据中抽取所需信息，将数据导出为CSV格式，并批量创建节点和节点之间的关系。本文共创建了4个节点，分别为电影、演员、导演、电影类型，一个节点就相当于一个实体。节点间共生成四种关系，如图2所示。</p><p>图2. 节点、关系数据结构</p><p>对数据进行初步处理后，将其导入图数据库neo4j中。在neo4j的浏览器窗口执行load CSV命令，将节点、关系批量导入图数据库中。部分结果如图3所示。</p></sec><sec id="s7"><title>3. 基于知识图谱特征学习的电影推荐模型</title><sec id="s7_1"><title>3.1. 知识图谱特征学习</title><p>将知识图谱特征学习辅助推荐系统学习有三种方式：依次学习、联合学习、交替学习。依次学习法学习知识图谱中的实体向量和关系向量。联合学习结合推荐算法和知识图谱特征学习，优化了端到端的训练。交替学习利用知识图谱特征学习任务来辅助推荐任务，因为推荐系统中的项目可能与知识图谱中的实体相关联，因此项目及其对应的实体可能具有相似的邻近结构，在底层和非任务特异性潜在特征空间上可能具有相似的特征 [<xref ref-type="bibr" rid="hanspub.41485-ref8">8</xref>]。知识图谱特征学习是为了在保留原有的结构信息的同时，让每个实体和向量都得到低维的特征表示，其中基于翻译的方法广为应用，主要代表有TransE、TransH、TransR模型。</p><p>图3. 电影知识图谱部分展示</p><p>在本文的电影推荐系统构建中，记M个用户 U = { u 1 , u 2 , ⋯ , u M } 和N个项目集合 V = { v 1 , v 2 , ⋯ , u N } ，记U和N的交互矩阵为 Y ∈ R M &#215; N ，用户的隐式反馈数据构成交互矩阵，y=1为有交互记录，例如观看，评论行为，否则y=0。记知识图谱 G ( ε , R ) 由三元组 g ( h , r , t ) 构成，其中h表示头节点、r表示h和t的关系、t表示尾节点，其中 ε 和R表示知识图谱的实体和关系的集合。例如图3所展示，三元组(周润发，主演，卧虎藏龙)的映射即为知识图谱中所示的周润发是电影《卧虎藏龙》的主演。得到集合Y和图谱G后，可以计算出其预测函数为 y ^ u v = F ( u , v | Θ , Y , G ) ，得到用户u与未交集的物品v的交互概率。</p></sec><sec id="s7_2"><title>3.2. MKR电影推荐模型</title><p>通过研究基于多任务学习的知识图谱辅助推荐系统框架(MKR推荐系统框架)，本文使用交替学习法来交替学习知识图谱特征学习任务和推荐系统任务。利用推荐模型中的交叉压缩单元模块，学习并实现两个任务中的实体之间的高阶交互，并抽取两个任务的低层特征进行融合训练，从而达到更优的结果。</p><p>图4指出了MKR模型的3个部分：推荐系统部分、知识图谱嵌入部分、交叉压缩单元部分。左边推荐部分将用户和电影作为输入，提供用户对电影的显式评分，使用多层感知机(Multi-Layer Perception，MLP)和交叉压缩单元从用户和物品中学习特征，模型预测结果为用户对该电影的交互预估值，数值为0~1。右边知识图谱特征学习模块将实体和关系嵌入到低维的连续向量空间里，与此同时保证实体和关系的结构稳定。此模块将2.1中三元组 ( h , r , t ) 的头节点h和关系r作为输入，使用多层感知机学习头节点和关系的特征，预测尾节点(目标实体)特征，将其作为输出。</p><p>图5指出了模型中的交叉压缩单元模块，其主要利用知识图谱中的实体和推荐系统中的物品的同一性，使物品和实体的表示可以相互补充，不仅提高了泛化能力，并且避免了噪声拟合。</p><p>交叉操作是对物品v和与其相关的实体e的任一可能的特征交互进行建模，根据特征构建交互矩阵：</p><p>C l = v l e l T = [ v l ( 1 ) e l ( 1 ) ⋯ v l 1 e l d ⋯ v l ( d ) e l ( d ) ⋯ v l ( d ) e l ( d ) ] (1)</p><p>式(1)中 C l ∈ R d &#215; d 表示交叉压缩单元的第l层交叉特征矩阵，d表示交互矩阵的特征维度。 v l 和 e l 分别为第l层物品和实体的特征。压缩操作中的权值向量重新使交叉特征矩阵由 R d &#215; d 的空间指向特征空间 R d ，将特征交叉矩阵投影到下一层的潜在表示空间，输出下一层的项目和实体的特征向量：</p><p>图4. MKR模型框架</p><p>图5. 交叉压缩单元</p><p>v l + 1 = C l w l V V + C l T w l E V + b l V = v l e l T w l V V + e l v l T w l E V + b l V e l + 1 = C l w l V E + C l T w l E E + b l E = v l e l T w l V E + e l v l T w l E E + b l E (2)</p><p>式(2)中w和b分别是训练权重和偏置参数。在本数据集中，根据用户和电影的交互历史数据，按评分对特征向量进行加权处理。评分的范围为1~5分，将评分为4分以下的赋予负值，然后经过加权得到特征向量的权重。交叉压缩单元只存在于模型的低层，通过在低层将推荐模型和知识图谱特征学习模型连接起来，实现两个任务之间知识的传递，从而有效的改善了信息的稀疏性。</p></sec><sec id="s7_3"><title>3.3. MKR模型训练</title><p>MKR模型的训练采用多任务框架交替学习的方法进行特征建模和预测。其完整的损失函数由三部分组成：推荐系统部分、知识图谱特征学习部分、正则化项。</p><p>L = L R S + L K G + L R E G = ∑ u ∈ U , v ∈ V J ( y ^ u v , y u v ) − λ 1 ( ∑ ( h , r , t ) ∈ G s c o r e ( h , r , t ) − ∑ ( h ′ , r , t ′ ) ∉ G s c o r e ( h , r , t ) ) + λ 2 ‖ W ‖ 2 2 (3)</p><p>式(3)中u和v分别遍历用户集和项目集，J为交叉熵函数，此函数收敛。知识图谱部分为三元组的得分函数，选取的计算方式是向量内积，此函数收敛。正则化项是为了防止过拟合，其中 λ 1 和 λ 2 为超参数， λ 1 可视为两项任务的两个学习率之比，数值为负，从而确保知识图谱模块的特征学习性能。W为式(2)描述的训练权重。</p><p>MKR算法训练如算法1所示。获取电影数据集和用户评分数据集作为输入，根据用户物品交互记录，按评分对物品向量进行加权，得到对应的用户特征向量，采用多任务学习框架，交替训练推荐模块和知识图谱嵌入模块。通过交叉压缩单元模块实现推荐系统中物品和知识图谱中实体之间的信息共享，输出为物品潜在特征表示。通过计算内积的方法融合电影特征向量和用户特征向量，得到向量相似度，并以此为依据对用户行为进行预测，向用户推荐偏好电影，实现推荐。</p></sec></sec><sec id="s8"><title>4. 实验结果与分析</title><sec id="s8_1"><title>4.1. 数据集处理</title><p>本文所选数据集包含93956条影片数据，199814个用户，2706200次用户与电影的交互记录评分。将知识图谱和电影数据集作为输入时，需保持数据格式的统一，要对传入的数据进行预处理。对数据的预处理环节中，对电影ID、关系、评分等数据进行提取和转化，处理缺失值，使数据格式电影符合知识图谱中的数据结构标准。图6展示了数据集的整体处理流程。</p><p>首先将评分数据集划分为训练集和测试集两类，其中训练集占80%，测试集占20%，再针对训练集构建电影评分矩阵，根据评分公式计算评分S。用户对电影的满意程度随评分(1~5分)的增长而提高。若评分S大于等于4，此时的数据对应正样本，则推荐；若S小于4此时的数据对应负样本，则不推荐。利用测试集分别测试几种推荐模型，对比算法性能并选择性能最佳的算法。</p></sec><sec id="s8_2"><title>4.2. 评价指标</title><p>本文使用准确率(Accuracy, ACC)和ROC曲线线下面积(Area Under Curve, AUC)作为评价推荐的性能指标。在推荐准确度上，将评分推荐分为推荐和不推荐，即评分1到3分为不推荐，4到5分为推荐。</p><p>图6. 数据集处理流程</p><p>ACC指标在预测用户是否喜欢时，通过预测正确的分类比例，从而描述推荐模型的推荐性能，基于表1的混淆矩阵，计算公式如下：</p><p>A C C = T P + T N T P + F N + F P + T N (4)</p><p>AUC用于二分类模型的评估，作为ROC曲线下边的面积，用来评估分类器的分类质量。根据评分数据处理后得到的正样本和负样本，计算正样本的置信度大于负样本置信度的概率，比较置信度以得到最终的AUC值。由于阈值变化影响分类结果，使用AUC则可以考虑到阈值变动，所以评估的效果更好。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Confusion matri</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >系统</th><th align="center" valign="middle" >用户喜欢</th><th align="center" valign="middle" >用户不喜欢</th></tr></thead><tr><td align="center" valign="middle" >推荐</td><td align="center" valign="middle" >TP</td><td align="center" valign="middle" >FP</td></tr><tr><td align="center" valign="middle" >不推荐</td><td align="center" valign="middle" >FN</td><td align="center" valign="middle" >TN</td></tr></tbody></table></table-wrap><p>表1. 混淆矩阵</p></sec><sec id="s8_3"><title>4.3. 结果分析</title><p>将训练好的用户特征矩阵和电影推荐矩阵计算所有电影的评分，进行电影推荐，图7展示了本数据集在MKR模型下返回的部分推荐结果。</p><p>图7. 电影推荐结果</p><p>另外，为了验证MKR模型的高效性，将此模型与LibFM [<xref ref-type="bibr" rid="hanspub.41485-ref9">9</xref>]、PER [<xref ref-type="bibr" rid="hanspub.41485-ref10">10</xref>]、DKN [<xref ref-type="bibr" rid="hanspub.41485-ref11">11</xref>]、CKE [<xref ref-type="bibr" rid="hanspub.41485-ref12">12</xref>] 和Wide &amp; Deep [<xref ref-type="bibr" rid="hanspub.41485-ref13">13</xref>] 推荐算法进行对比，用该数据集分别测试各模型，计算ACC和AUC值，并取10次实验所得数据的平均值作为最终结果，如表2所示。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Comparison of the recommendation effect of each recommendation algorithm on the movie datase</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >模型</th><th align="center" valign="middle" >ACC</th><th align="center" valign="middle" >AUC</th></tr></thead><tr><td align="center" valign="middle" >LibFM</td><td align="center" valign="middle" >0.825</td><td align="center" valign="middle" >0.903</td></tr><tr><td align="center" valign="middle" >PER</td><td align="center" valign="middle" >0.677</td><td align="center" valign="middle" >0.736</td></tr><tr><td align="center" valign="middle" >CKE</td><td align="center" valign="middle" >0.731</td><td align="center" valign="middle" >0.803</td></tr><tr><td align="center" valign="middle" >DKN</td><td align="center" valign="middle" >0.632</td><td align="center" valign="middle" >0.716</td></tr><tr><td align="center" valign="middle" >Wide&amp;Deep</td><td align="center" valign="middle" >0.813</td><td align="center" valign="middle" >0.860</td></tr><tr><td align="center" valign="middle" >MKR</td><td align="center" valign="middle" >0.825</td><td align="center" valign="middle" >0.903</td></tr></tbody></table></table-wrap><p>表2. 各推荐算法在电影数据集上推荐效果对比</p><p>从表2结果可知，相比其他几种模型，MKR模型在本数据集中取得了最佳的表现，ACC和AUC的计算结果都超越了对比算法，由此可知MKR模型使推荐效果有了显著提升。</p><p>图8. top-K电影推荐比较实验结果</p><p>为进一步验证模型的性能，本文进行了top-K场景实验，使用训练好的模型在测试集中为用户推荐电影，设置推荐电影数目为K值，使用F1@K值作为top-K推荐中的性能指标。分别在不同K值场景下计算F1@K值，并取10次计算结果的平均值作为最终结果，如图8所示。</p><p>从图8中总体来看，随着K值的增加，各模型的F1@K值呈先增大后减小的趋势，当K = 20时，MKR、LibFM、DKN模型的F1@K值达到峰值；并且MKR模型在不同K值的场景下比其他几种模型的表现结果都更好一些，证明该模型中的交叉压缩单元能有效学习用户和实体之间的知识交互，从而有效提升了推荐的整体性能。</p></sec></sec><sec id="s9"><title>5. 结语</title><p>本文通过构建电影知识图谱，将其作为辅助信息，构建了MKR推荐模型，并将其应用到电影推荐系统。采用预测用户满意度评分的方法优化了推荐性能，通过评分结果来判定用户对电影的喜好程度，并将合适的电影类型推荐给用户。通过大量实验对比了MKR模型与几种常见推荐模型，采用AUC和ACC两种评价指标来预测分值，并且在top-K场景中比较了不同K值下各个模型的推荐性能。从实验结果来看，MKR模型的准确率和推荐效果明显优于其他几种模型，并且有效提升了推荐的性能。后续将考虑使用注意力机制融合知识图谱，重新设计交叉压缩单元，挖掘更多的电影信息；另外本文是在单机上进行的测试，如果数据量过大势必会影响推荐性能，因此下一步考虑采用多GPU并行的方式来实现该模型的并行计算，从而进一步提高推荐性能。</p></sec><sec id="s10"><title>文章引用</title><p>操淑敏,秦 学,鲜翠琼. MKR模型在电影推荐系统中的应用研究Research on the Application of MKR Model in Movie Recommendation System[J]. 软件工程与应用, 2021, 10(02): 104-112. https://doi.org/10.12677/SEA.2021.102013</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.41485-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Adomavicius, G. and Tuzhilin, A. (2005) Toward the Next Generation of Recommender Systems: A Survey of the State-of-the-Art and Possible Extensions. IEEE Transactions on Knowledge and Data Engineering, 17, 734-749.  
&lt;br&gt;https://doi.org/10.1109/TKDE.2005.99</mixed-citation></ref><ref id="hanspub.41485-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Gao, Y., Li, Y.F., Lin, Y., Gao, H. and Khan, L. (2020) Deep Learn-ing on Knowledge Graph for Recommender System: A Survey. Information Retrieval, arXiv:2004.00387.</mixed-citation></ref><ref id="hanspub.41485-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Zhao, H., Yao, Q.M., Li, J.D., Song, Y.Q. and Lee, D.L. (2017) Meta-Graph Based Recommendation Fusion over Heterogeneous Information Networks. Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 635-644. &lt;br&gt;https://doi.org/10.1145/3097983.3098063</mixed-citation></ref><ref id="hanspub.41485-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">宋瑞平. 混合推荐算法的研究[D]: [硕士学位论文]. 兰州: 兰州大学, 2014.</mixed-citation></ref><ref id="hanspub.41485-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Koren, Y., Bell, R. and Volinsky, C. (2009) Matrix Factorization Techniques for Recommender Systems. Computer, 42, 30-37. &lt;br&gt;https://doi.org/10.1109/MC.2009.263</mixed-citation></ref><ref id="hanspub.41485-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Guo, Q., Zhuang, F., Qin, C., et al. (2020) A Survey on Knowledge Graph-Based Recommender Systems. Scientia Sinica Informationis, 50, 937. &lt;br&gt;https://doi.org/10.1360/SSI-2019-0274</mixed-citation></ref><ref id="hanspub.41485-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Wang, H., Zhang, F., Zhao, M., et al. (2019) Multi-Task Feature Learning for Knowledge Graph Enhanced Recommendation. The World Wide Web Conference, 2000-2010. &lt;br&gt;https://doi.org/10.1145/3308558.3313411</mixed-citation></ref><ref id="hanspub.41485-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">涂存超, 杨成, 刘知远, 等. 网络表示学习综述[J]. 中国科学: 信息科学, 2017, 47(8): 980-996.</mixed-citation></ref><ref id="hanspub.41485-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Rendle, S. (2012) Factorization Machines with libFM. ACM Transactions on In-telligent Systems and Technology (TIST), 3. &lt;br&gt;https://doi.org/10.1145/2168752.2168771</mixed-citation></ref><ref id="hanspub.41485-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Xiao, Y., Xiang, R., Sun, Y., et al. (2014) Personalized Entity Recommendation: a Heterogeneous Information Network Approach. Pro-ceedings of the 7th ACM International Conference on Web Search and Data Mining.</mixed-citation></ref><ref id="hanspub.41485-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Wang, H., Zhang, F., Xie, X., et al. (2018) DKN: Deep Knowledge-Aware Network for News Recommendation. Proceedings of the 2018 World Wide Web Conference on World Wide Web. International World Wide Web Conferences Steering Committee, 1835-1844. &lt;br&gt;https://doi.org/10.1145/3178876.3186175</mixed-citation></ref><ref id="hanspub.41485-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Zhang, F.Z., Yuan, N.J., Lian, D.F., Xie, X. and Ma, W.Y. (2016) Collaborative Knowledge Base Embedding for Recommender Systems. Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 353-362. &lt;br&gt;https://doi.org/10.1145/2939672.2939673</mixed-citation></ref><ref id="hanspub.41485-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Cheng, H.T., Koc, L., Harmsen, J., et al. (2016) Wide &amp; Deep Learning for Recommender Systems. Wide &amp; Deep Learning for Recommender Systems.</mixed-citation></ref></ref-list></back></article>