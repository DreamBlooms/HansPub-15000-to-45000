<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2017.710115</article-id><article-id pub-id-type="publisher-id">CSA-22461</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20171000000_71325316.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于归纳的值约简算法的研究与实现
  The Study and Implementation of Induction Value Reduction
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>城霞</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>梅舒</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff3"><addr-line>北京信息科技大学计算机学院，北京</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><aff id="aff2"><addr-line>北京信息科技大学网络文化与数字传播北京市重点实验室，北京;北京信息科技大学计算机学院，北京</addr-line></aff><pub-date pub-type="epub"><day>13</day><month>10</month><year>2017</year></pub-date><volume>07</volume><issue>10</issue><fpage>1015</fpage><lpage>1025</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   在粗糙集理论的基础上，本文研究了归纳值约简过程。归纳值约简算法采用求解知识表达系统决策表的最小决策算法来求其约简，它可以通过分别求解各个决策规则类的最小决策算法来实现。对于每个决策规则类中的规则，首先计算其核值属性，然后判断核值属性是否能够决定该规则，如果能够决定，则输出规则并删除其等价规则；否则，逐渐加入非核值属性，直到能够决定该规则，然后输出规则并删除其等价规则。最终实现了其测试系统。 Based on the research of rough set theory, this paper studies the process of induction value reduction. The induction value reduction algorithm uses the minimum decision algorithm to solve the decision table of the knowledge representation system to obtain the reduction. It can be realized by solving the minimum decision algorithm of each decision rule class. For each rule in each decision rule class, the algorithm computes its core attributes and then determines whether the core attributes can determine the rule. If can, then it will output the rule and remove its equivalent rules. Otherwise, it will gradually add the non-core attributes until they are able to determine the rule, then output the rule and remove its equivalent rules. At last the test system is implemented.
    
  
 
</p></abstract><kwd-group><kwd>归纳值约简，最小决策算法，粗糙集, Induction Value Reduction</kwd><kwd> Minimum Decision Algorithm</kwd><kwd> Rough Set</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于归纳的值约简算法的研究与实现<sup> </sup></title><p>刘城霞<sup>1,2</sup>，张梅舒<sup>2</sup></p><p><sup>1</sup>北京信息科技大学网络文化与数字传播北京市重点实验室，北京</p><p><sup>2</sup>北京信息科技大学计算机学院，北京</p><p>收稿日期：2017年10月8日；录用日期：2017年10月22日；发布日期：2017年10月26日</p><disp-formula id="hanspub.22461-formula14"><graphic xlink:href="//html.hanspub.org/file/12-1540861x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>在粗糙集理论的基础上，本文研究了归纳值约简过程。归纳值约简算法采用求解知识表达系统决策表的最小决策算法来求其约简，它可以通过分别求解各个决策规则类的最小决策算法来实现。对于每个决策规则类中的规则，首先计算其核值属性，然后判断核值属性是否能够决定该规则，如果能够决定，则输出规则并删除其等价规则；否则，逐渐加入非核值属性，直到能够决定该规则，然后输出规则并删除其等价规则。最终实现了其测试系统。</p><p>关键词 :归纳值约简，最小决策算法，粗糙集</p><disp-formula id="hanspub.22461-formula15"><graphic xlink:href="//html.hanspub.org/file/12-1540861x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/12-1540861x7_hanspub.png" /> <img src="//html.hanspub.org/file/12-1540861x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>属性约简和值约简是粗糙集理论研究中的两个重要内容，属性约简是在保持与原有的数据库决策能力相同的情况下，选择问题最小属性子集，剔除数据中的没有利用价值成分的过程。在现实世界的问题中，由于噪音、误导和不相关属性的存在，使得属性约仅是在一定程度上去除了决策表中的冗余属性，但并没有完全去掉决策表中的不必要的信息。为此，还需要对决策表进行更深层次的处理，即对决策表进行值约简。值约简是去掉多余的属性值，用最少的条件属性值来区分每一个决策类，在不改变决策能力的基础上得到更加简化的规则集。值约简的研究方法有很多，比如一般的值约简算法、启发式值约简算法、基于决策矩阵的值约简算法、归纳值约简算法和Skowron算法等。本文主要研究基于归纳的值约简算法，并对算法的执行效果进行了实验验证，以及与启发式值约简算法进行了比较。</p></sec><sec id="s4"><title>2. 粗糙集基本概念</title><p>粗糙集理论是一种对不确定性数据进行分析的理论，它的主要思想就是在保持信息系统分类能力不变的条件下，通过知识约简剔除数据中冗余的信息，从而得到问题的正确决策或数据分类。</p><sec id="s4_1"><title>2.1. 信息表和决策表</title><p>S = ( U , V , A , f ) 为一个信息表 [<xref ref-type="bibr" rid="hanspub.22461-ref1">1</xref>] ，其中U为论域，是一非空有限对象集，即 U = { x 1 , x 2 , ⋯ , x n } ； A = { a 1 , a 2 , ⋯ , a n } 是非空有限的属性集合；Va是属性a的值域，即 V = ∪ V a ， f : U &#215; A → a ∈ U V 成为信息函数，使得对每一 a ∈ A ， x ∈ U ，有 f ( x , a ) ∈ V a 。在粗糙集理论中，信息表可简化 S = ( U , A ) 或 。</p><p>在信息表S中，如果属性集A由条件属性集C和决策属性集D组成，并且满足 C ∪ D = A ， C ∩ D = ∅ ，则称S为决策表，记为 S = ( U , C ∪ D ) 。在决策表S中，若存在两行信息，其全部条件属性值相同，而决策属性值不相同，则称S为不相容决策表，否则为相容决策表。这里仅考虑相容决策表。</p></sec><sec id="s4_2"><title>2.2. 知识和不可分辨关系</title><p>定义1：(知识和知识库)给定论域U和其对应的一个等价关系R，在等价关系R下对论域U的划分，称为知识，记为U/R。U上的一簇划分称为关于U的一个知识库。</p><p>设R是U上的一个等价关系，U/R表示R的所有等价类(或者U上的分类)构成的集合，[x]<sub>R</sub>表示包含元素 x ∈ U 的R等价类。一个知识库就是一个关系系统 K = ( U , R ) ，其中R是论域U上的一簇等价关系。若 P ⊆ R ，且 P ≠ ∅ ，则∩P(P中所有等价关系的交集)也是一个等价关系，称为P上的不可分辨关系，记为ind(P)，且有 [ x ] i n d ( P ) = ∩ [ x ] R ( R ∈ P ) 。不可分辨关系ind(P)是U上的等价关系，它是粗糙集理论中最基本的概念，若 〈 x , y 〉 ∈ i n d ( P ) ，则称对象x与y是P不可分辨的，即x，y存在于不可分辨关系ind(P)的同一个等价类中，依据等价关系簇P形成的分类知识，x与y无法分辨。</p></sec><sec id="s4_3"><title>2.3. 约简和核</title><p>知识约简是粗糙集理论中的核心内容之一。所谓知识约简，就是在保证知识库分类能力不变的条件下，删除不相关或不重要的知识，它涉及的两个基础概念就是约简和核。</p><p>令A为一属性集， a ∈ A ，如果 i n d ( A ) = i n d ( A − { a } ) ，则称a为A中不必要的；否则a为A中必要的。</p><p>如果 a ∈ A 都为A中必要的，则称A是独立的；否则称A是依赖的。</p><p>定理1：如果A是独立的， P ⊆ A ，则P也是独立的。</p><p>设 Q ⊆ P ，如果Q是独立的，且 i n d ( Q ) = i n d ( P ) ，则称Q为P的一个约简。显然，P可以由多个约简。P中所有的必要属性组成的集合称为P的核，记作core(P)。</p><p>定理2： 。其中，red(P)表示P的所有约简的集合。</p><p>由上述定理可以看出，核这个概念的用处包含两个方面：一方面，核能够作为计算所有约简的基础，这是因为所有约简都包含它的核；另一方面，核可解释为在属性约简中不能去除的知识特征部分的集合。</p><p>定义2：相容决策信息系统 I S = ( U , C ∪ D , V , f ) ，对决策规则d<sub>x</sub>有 [ x ] C ⊆ [ x ] D 。如果对于 ，有</p><p>[ x ] C − { a } ⊄ [ x ] D ，则属性a为决策规则d<sub>x</sub>的核值属性，a为d<sub>x</sub>中不可省略的；如果 [ x ] C − { a } ⊆ [ x ] D ，则属性a为决策规则d<sub>x</sub>的非核值属性，a为d<sub>x</sub>中可以省略的。</p><p>如图1所示，对于第一条决策规则 a 1 b 0 d 1 → e 1 ， [ 1 ] e 1 = { 1 , 2 } ，去掉属性a，得 [ 1 ] b 0 d 1 = { 1 } ⊆ { 1 , 2 } ，所以属性a为该规则的非核值属性；去掉属性b，得 [ 1 ] a 1 d 1 = { 1 , 4 } ⊄ { 1 , 2 } ，所以属性b为该规则的核值属性。即对于这条决策规则，属性a可以省略，属性b不可以省略。</p><p>图1. 一个关于决策规则核值属性的例子</p></sec><sec id="s4_4"><title>2.4. 值约简相关概念</title><p>对于一个决策表而言，它的约简主要有两方面：属性约简和值约简。属性约简是删除决策表中的不必要的条件属性，而值约简的目的在于删除论域中各条记录的多余属性值，也就是删除与决策规则不相关的条件属性的值，进一步简化决策表。</p><p>定义3：令 U / D = { y 1 , y 2 , ⋯ , y n } 表示论域U上有决策属性划分的决策类集，对每一个决策等价类，定义决策规则类DRC为</p><p>D R C ( y ) = { d x : d e s ( [ x ] C ) ⇒ d e s ( [ x ] D ) | x ∈ U 且 [ x ] C ⊆ y } ， ∀ y ∈ U / D</p><p>其中des(Xi)表示对等价类Xi的描述，即等价类Xi对于各条件属性值的特定取值。</p><p>用core(y)， ∀ y ∈ U / D 表示决策类y的核值属性集，core(d<sub>x</sub>)表示决策规则d<sub>x</sub>的核值属性集，则有 c o r e ( y ) ⊆ C ，<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/12-1540861x50_hanspub.png" xlink:type="simple"/></inline-formula>，且 c o r e ( y ) = ∪ d x ∈ D R C ( y ) c o r e ( d x ) 。</p><p>集合的幂集就是集合所有子集组成的集合。</p><p>定义4：令T(OA)为集合OA的幂子集，T<sub>1</sub>(OA)为集合OA的一阶幂集，给T<sub>1</sub>(OA)中元素赋以权值，有 ∀ A ′ ∈ T 1 ( O A ) ， w ( A ′ ) = w ( a ′ i ) ， a ′ i ∈ A 。按 w ( A ′ ) 大小对T<sub>1</sub>(OA)中的元素进行排序，得到一阶有序幂子集OT<sub>1</sub>(OA)。</p><p>同理，T<sub>i</sub>(OA)为集合OA的i阶幂集( 1 ≤ i ≤ m )，给T<sub>i</sub>(OA)中元素赋以权值，有 ∀ A ′ ∈ T i ( O A ) ， w ( A ′ ) = ∑ w ( a ′ j )   ( j = 1 , 2 , ⋯ , i ) ， a ′ j ∈ A ′ 。按 w ( A ′ ) 大小对T<sub>i</sub>(OA)中的元素进行排序，得到一阶有序幂子集OT<sub>i</sub>(OA)。</p></sec></sec><sec id="s5"><title>3. 归纳值约简算法的实现</title><p>值约简算法很多学者都在研究，比如文献 [<xref ref-type="bibr" rid="hanspub.22461-ref2">2</xref>] - [<xref ref-type="bibr" rid="hanspub.22461-ref10">10</xref>] ，这里主要实现归纳值约简算法。归纳值约简算法采用求解知识表达系统决策表的最小决策算法来求其约简，它可以通过分别求解各个决策规则类的最小决策算法来实现。对于每个决策规则类中的规则，首先计算其核值属性，然后判断核值属性是否能够决定该规则，如果能够决定，则输出规则并删除其等价规则；否则逐渐加入非核值属性，直到能够决定该规则，然后输出规则并删除其等价规则。具体实现方法如下：</p><p>步骤1：任意<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/12-1540861x61_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>步骤2：如果 [ X ] c o r e ( d X ) ⊆ y ，则输出决策规则</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/12-1540861x63_hanspub.png" xlink:type="simple"/></inline-formula>， D R C ( y ) = D R C ( y ) / [ X ] c o r e ( d X ) ，转步骤9；</p><p>其中， D R C ( y ) = D R C ( y ) / [ X ] c o r e ( d X ) ，表示从 D R C ( y ) 中删除规则d<sub>x'</sub>： ，这里 [ X ′ ] ∈ [ X ] c o r e ( d X ) 。</p><p>步骤3：令 A 1 = c o r e ( y ) − c o r e ( d X ) ， A 2 = C − c o r e ( y ) ，在测度函数 w ( a ) = | P O S C − { a } ( D ) | / | U | 下对A1，A2中的元素排序，得有序集OA1，OA2，则有序集 O A = O A 1 ∪ O A 2 ，且 | O A | = m ，OA的m个有序幂子集分别为 T 1 ( O A ) , ⋯ , T m ( O A ) ，相应的元素个数为 n 1 , n 2 , ⋯ , n m ；</p><p>步骤4： j = 1 ；</p><p>步骤5： i = 1 ；</p><p>步骤6：令 B = c o r e [ d X ] ∪ T j i ( O A ) ，如果 [ x ] B ⊆ y ，输出 d X : d e s [ X ] B ⇒ d e s ( [ X ] D )</p><p>D R C ( y ) = D R C ( y ) / [ X ] B ，转步骤9；</p><p>步骤7： i = i + 1 ，如果 i ≤ n j ，转(6)；</p><p>步骤8： j = j + 1 ，如果 j ≤ m ，转(5)；</p><p>步骤9：如果 D R C ( y ) ≠ 0 ，转(1)；</p><p>步骤10：结束。</p><p>通过以上步骤，可以求得各个决策规则类的最小决策算法，进而得到整个决策表的最小决策算法，达到对决策表进一步约简的目的。</p><p>系统流程图如图2所示。</p><p>图2. 归纳值约简算法</p><p>归纳值约简算法的核心内容是最小决策算法。求解知识表达系统的最小决策算法，可以通过分别求解各个决策规则类的最小决策算法来实现。对于每个决策规则类中的规则，首先计算其核值属性，然后判断核值属性是否能够决定该规则，如果能够决定，则输出规则并删除其等价规则；否则，逐渐加入非核值属性，直到能够决定该规则，然后输出规则并删除其等价规则。流程图如图3所示。</p><p>图3. 最小决策算法流程图</p><p>由于本算法只考虑相容决策表，即不存在两条规则，条件属性值都相等而决策属性值不同，所以决策规则类DRC(y)可由U/D得到。</p></sec><sec id="s6"><title>4. 结果分析</title><sec id="s6_1"><title>4.1. 简单例子</title><p>测试一个较为简单的例子，数据如图2所示。算出规则等价类DRC(y)。</p><p>U / D = U / { e } = { { 1 , 2 } , { 3 , 4 } , { 5 , 6 , 7 } }</p><p>所以7条规则划分为3个规则等价类，分别为：</p><p>D R C ( y 2 ) : a 0 b 0 d 0 → e 0   a 1 b 1 d 1 → e 0</p><p>D R C ( y 3 ) : a 1 b 1 d 2 → e 2   a 2 b 1 d 2 → e 2   a 2 b 2 d 2 → e 2 <sub> </sub></p><p>1) 对于第一个规则等价类</p><p>选取第一条规则 a 1 b 0 d 1 → e 1 ，经计算其核值属性为b，由于 [ 1 ] b 0 = { 1 , 2 , 3 } ⊄ y 1 = { 1 , 2 } ，即其核值属性不能决定该规则，需要进行进一步约简。</p><p>由于 a 1 b 0 d 0 → e 1 的核值属性为a，所以等价类y1的核值属性 c o r e ( y 1 ) = { a , b } ，则</p><p>A 1 = { a } ， A 2 = { d } ， U / { b , d } = { { 1 } , { 2 , 3 } , { 4 } , { 5 , 6 } , { 7 } } ， P O S C − { a } ( D ) = { 1 , 4 , 5 , 6 , 7 } ，</p><p>w ( a ) = 5 / 7 ， U / { a , b } = { { 1 , 2 } , { 3 } , { 4 , 5 } , { 6 } , { 7 } } ， P O S C − { d } ( D ) = { 1 , 2 , 3 , 6 , 7 } ， w ( d ) = 5 / 7</p><p>则 O A = { a , d } 。</p><p>令 B = { a , b } ， [ 1 ] { a 1 , b 0 } = { 1 , 2 } ⊆ y 1 = { 1 , 2 } ，则输出规则： a 1 b 0 → e 1 ，将该规则从规则等价类中删除。又 { 2 } ⊆ [ 1 ] { a 1 , b 0 } ，将第2条规则从规则等价类中删除，该规则等价类约简完毕。</p><p>约简结果为： a 1 b 0 → e 1 <sub> </sub></p><p>2) 对于第二个规则等价类</p><p>选取第一条规则 a 0 b 0 d 0 → e 0 ，经计算其核值属性为a，由于 [ 3 ] a 0 = { 3 } ⊆ y 2 = { 3 , 4 } ，即核值属性可以决定该规则，则输出规则： a 0 → e 0 ，将该规则从规则等价类中删除。</p><p>选取第二条规则 a 1 b 1 d 1 → e 0 ，经计算其核值属性为b和d，由于 [ 4 ] { b 1 , d 1 } = { 4 } ⊆ y 2 = { 3 , 4 } ，即核值属性可以决定该规则，则输出规则： b 1 d 1 → e 0 ，将该规则从规则等价类中删除。</p><p>该规则等价类约简完毕，约简结果为： a 0 → e 0 ，</p><p>3) 对于第三个规则等价类</p><p>选取第一条规则 a 1 b 1 d 2 → e 2 ，经计算其核值属性为d，由于 [ 5 ] d 0 = { 5 , 6 , 7 } ⊆ y 3 = { 5 , 6 , 7 } ，即核值属性可以决定该规则，则输出规则 d 2 → e 2 ，将该规则从规则等价类中删除。又</p><p>{ 6 , 7 } ⊆ [ 5 ] d 0 ，将第5，6条规则从规则等价类中删除。</p><p>该规则等价类约简完毕，约简结果为： d 2 → e 2</p><p>然后计算每条规则覆盖的记录数：规则 a 1 b 0 → e 1 ，覆盖记录1、2，覆盖记录数为2；规则 a 0 → e 0 ，覆盖记录3，覆盖记录数为1；规则 a 1 b 1 d 1 → e 0 ，覆盖记录4，覆盖记录数为1；规则 d 2 → e 2 ，覆盖记录4、5和6，覆盖记录数为3。</p><p>约简结果如表1所示。</p><p>程序运行结果如图4所示，和预期结果一致。</p><p>图4. 约简结果图</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Reduction resul</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >U</th><th align="center" valign="middle" >a</th><th align="center" valign="middle" >b</th><th align="center" valign="middle" >d</th><th align="center" valign="middle" >e</th></tr></thead><tr><td align="center" valign="middle" >1, 2</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >&#215;</td><td align="center" valign="middle" >1</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >&#215;</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >5, 6, 7</td><td align="center" valign="middle" >&#215;</td><td align="center" valign="middle" >&#215;</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td></tr></tbody></table></table-wrap><p>表1. 约简结果</p><p>其中：&#215;表示可为任意值，不影响结果</p></sec><sec id="s6_2"><title>4.2. 性能分析</title><p>表2记录了测试的情况，包括约简前的条件属性数和记录数，以及约简后的规则数和约简时间。</p><p>由测试记录可知，约简时间与条件属性数和记录数都有关系。约简时间随着记录数的增加而增加，为了清楚地展现其增加趋势，绘制了随着记录数的增加，约简时间的变化的折线图图5。</p><p>由图5可知，随着记录数的增加，约简时间大致呈平方增加。分析其约简过程，发现删除重复记录的函数时间复杂度为O(n<sup>2</sup>)，程序主算法最小约简算法的时间复杂度也是O(n<sup>2</sup>)，所以，该程序的时间复杂度为O(n<sup>2</sup>) (其中n指约简前的记录条数)。</p></sec><sec id="s6_3"><title>4.3. 对比分析</title><p>现在用相同的数据测试归纳值约简和启发式值约简，对比约简结果，验证结果是否正确。</p><p>分别使用两种算法对几个不同的数据集进行约简，结果对比如表3所示。</p><p>图5. 约简时间趋势图</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Analysis of test tim</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >测试编号</th><th align="center" valign="middle"  colspan="2"  >约简前</th><th align="center" valign="middle"  colspan="2"  >约简后</th></tr></thead><tr><td align="center" valign="middle" >条件属性数</td><td align="center" valign="middle" >记录数</td><td align="center" valign="middle" >规则条数</td><td align="center" valign="middle" >约简时间</td></tr><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >1728</td><td align="center" valign="middle" >246</td><td align="center" valign="middle" >1.236 s</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >3456</td><td align="center" valign="middle" >261</td><td align="center" valign="middle" >2.4 s</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >5184</td><td align="center" valign="middle" >423</td><td align="center" valign="middle" >6.788 s</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6912</td><td align="center" valign="middle" >585</td><td align="center" valign="middle" >15.727 s</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >8640</td><td align="center" valign="middle" >747</td><td align="center" valign="middle" >29.574 s</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >10368</td><td align="center" valign="middle" >909</td><td align="center" valign="middle" >49.358 s</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >625</td><td align="center" valign="middle" >81</td><td align="center" valign="middle" >0.125 s</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >699</td><td align="center" valign="middle" >287</td><td align="center" valign="middle" >10.461 s</td></tr></tbody></table></table-wrap><p>表2. 测试时间分析</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> The comparison of two reduction algorithms result</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >条件属性数</th><th align="center" valign="middle"  rowspan="2"  >记录数</th><th align="center" valign="middle"  colspan="2"  >规则条数</th></tr></thead><tr><td align="center" valign="middle" >归纳值约简</td><td align="center" valign="middle" >启发式值约简</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >75</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >8</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >625</td><td align="center" valign="middle" >81</td><td align="center" valign="middle" >81</td></tr><tr><td align="center" valign="middle" >9</td><td align="center" valign="middle" >699</td><td align="center" valign="middle" >287</td><td align="center" valign="middle" >435</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >1728</td><td align="center" valign="middle" >246</td><td align="center" valign="middle" >246</td></tr></tbody></table></table-wrap><p>表3. 两种算法约简结果对比</p><p>由上面的结果可知：归纳值约简和启发式值约简只是约简方法不同，但是约简结果是大致一致的。为了对比两种算法的时间效率，分别用两种算法计算同样的数据，记录数和约简时间如表4所示(其中这些数据的条件属性数为6)。</p><p>为了更直观地反映其随着记录数增加，约简时间的变化趋势，绘制了图6所示折线图。</p><p>由图6可知：记录较少时两种算法所用时间差不多；随着记录数量的增加，归纳值约简的约简时间优于启发式值约简。</p><p>图6. 两种约简算法的时间趋势对比图</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> The comparison of two reduction algorithms tim</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >测试记录条数</th><th align="center" valign="middle" >启发式值约简算法</th><th align="center" valign="middle" >归纳值约简算法</th></tr></thead><tr><td align="center" valign="middle" >1728</td><td align="center" valign="middle" >0.422 s</td><td align="center" valign="middle" >1.236 s</td></tr><tr><td align="center" valign="middle" >3456</td><td align="center" valign="middle" >8.192 s</td><td align="center" valign="middle" >2.4 s</td></tr><tr><td align="center" valign="middle" >5184</td><td align="center" valign="middle" >20.505 s</td><td align="center" valign="middle" >6.788 s</td></tr><tr><td align="center" valign="middle" >6912</td><td align="center" valign="middle" >58.533 s</td><td align="center" valign="middle" >15.727 s</td></tr><tr><td align="center" valign="middle" >8640</td><td align="center" valign="middle" >126.063 s</td><td align="center" valign="middle" >29.574 s</td></tr><tr><td align="center" valign="middle" >10,368</td><td align="center" valign="middle" >231.503 s</td><td align="center" valign="middle" >49.358 s</td></tr></tbody></table></table-wrap><p>表4. 两种算法约简时间对比</p></sec></sec><sec id="s7"><title>5. 总结与展望</title><p>本文研究并实现了基础的基于归纳的值约简算法，它可以有效的去掉多余的属性值，在不改变决策能力的基础上得到更加简化的规则集，如此可以提高挖掘的效率，并帮助企业及用户更有效的挖掘需要的数据。</p></sec><sec id="s8"><title>基金项目</title><p>本项目得到网络文化与数字传播北京市重点实验室开放课题资助；2017实培计划(毕设)项目资助。</p></sec><sec id="s9"><title>文章引用</title><p>刘城霞,张梅舒. 基于归纳的值约简算法的研究与实现The Study and Implementation of Induction Value Reduction[J]. 计算机科学与应用, 2017, 07(10): 1015-1025. http://dx.doi.org/10.12677/CSA.2017.710115</p></sec><sec id="s10"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.22461-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">张文修, 吴伟志, 梁吉业, 李德玉. 粗糙集理论与方法[M]. 北京: 北京科学出版社, 2001.</mixed-citation></ref><ref id="hanspub.22461-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">罗秋瑾, 陈世联. 基于值约简和决策树的最简规则提取算法[J]. 计算机应用, 2005, 25(8): 141-143.</mixed-citation></ref><ref id="hanspub.22461-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">林嘉宜, 彭宏, 郑启伦. 一种新的基于粗糙集的值约简算法[J]. 计算机工程, 2003, 29(4): 71-129.</mixed-citation></ref><ref id="hanspub.22461-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">杨振峰, 郭景峰, 常峰. 一种基于粗集的值约简方法[J]. 计算机工程, 2003, 29(9): 96-97.</mixed-citation></ref><ref id="hanspub.22461-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">刘艳丽, 王海涌, 郑丽英. 基于粗集理论的决策规则约简算法的研究与应用[J]. 兰州交通大学学报(自然科学版), 2004, 23(6): 78-111.</mixed-citation></ref><ref id="hanspub.22461-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">叶明凤. 基于核值的决策规则算法的研究[J]. 煤炭技术, 2014, 33(3): 257-259.</mixed-citation></ref><ref id="hanspub.22461-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">林嘉宜, 彭宏, 郑启伦. 一种新的基于粗糙集的值约简算法[J]. 计算机工程, 2003(4): 70-7l.</mixed-citation></ref><ref id="hanspub.22461-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">王珍, 余昭平. 一种基于粗糙集的最小约简算法[J]. 微计算机信息, 2006(22): 218-220.</mixed-citation></ref><ref id="hanspub.22461-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">王清毅, 范焱, 蔡庆生. 知识的约简研究[J]. 小型微型计算机系统, 2000, 21(6): 623-627.</mixed-citation></ref><ref id="hanspub.22461-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">顾军华, 周艳聪, 宋洁, 晏俊秋. 一种新的求解属性值约简算法[J]. 南开大学学报(自然科学版), 36(4): 38-42.</mixed-citation></ref></ref-list></back></article>