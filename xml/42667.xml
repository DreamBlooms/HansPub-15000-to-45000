<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2021.115155</article-id><article-id pub-id-type="publisher-id">CSA-42667</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20210500000_27602467.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  一种基于动态水位值的Flink调度优化算法
  A Flink Scheduling Optimization Algorithm Based on Dynamic Water Level
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>冯</surname><given-names>鹏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>黄</surname><given-names>山</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>段</surname><given-names>晓东</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>大连大学信息工程学院，辽宁 大连;大数据应用技术国家民委重点实验室，辽宁 大连</addr-line></aff><aff id="aff3"><addr-line>大数据应用技术国家民委重点实验室，辽宁 大连;大连民族大学计算机科学与工程学院，辽宁 大连;大连市民族文化数字技术重点实验室，辽宁 大连</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>05</month><year>2021</year></pub-date><volume>11</volume><issue>05</issue><fpage>1512</fpage><lpage>1521</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   新一代大数据间引擎Flink在面临远程传输问题时，主要通过Netty完成数据传输，并依靠Netty水位值机制来保证其反压机制的运行。Netty水位值机制是一种相对静态的机制，这使得Flink在面临突变性特别大的数据流时会反复进行反压，进而影响整个Flink集群的计算效率。针对此问题，本文提出一种基于动态水位值的Flink调度优化算法Flink-N，经实验验证，与Flink默认的反压机制相比，Flink-N在吐吞量、CPU利用率及时延均有很大提升，时延整体优化达18%，最高优化23%。 When the new generation of big data engine Flink is faced with the problem of remote transmission, it mainly completes the data transmission through Netty, and relies on the Netty water level mechanism to ensure the operation of its back pressure mechanism. Netty water level mechanism is a relatively static mechanism, which makes Flink repeatedly back pressure in the face of catastrophic data flow, thus affecting the computing efficiency of the whole Flink cluster. To solve this problem, this paper proposes a Flink scheduling optimization algorithm Flink-N based on dynamic water level. Experimental results show that, compared with Flink’s default back pressure mechanism, Flink-N greatly improves the throughput, CPU utilization and time delay. The overall delay optimization is 18%, and the maximum optimization is 23%. 
  
 
</p></abstract><kwd-group><kwd>Flink，大数据，反压，Netty, Flink</kwd><kwd> Big Data</kwd><kwd> Backpressure</kwd><kwd> Netty</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>新一代大数据间引擎Flink在面临远程传输问题时，主要通过Netty完成数据传输，并依靠Netty水位值机制来保证其反压机制的运行。Netty水位值机制是一种相对静态的机制，这使得Flink在面临突变性特别大的数据流时会反复进行反压，进而影响整个Flink集群的计算效率。针对此问题，本文提出一种基于动态水位值的Flink调度优化算法Flink-N，经实验验证，与Flink默认的反压机制相比，Flink-N在吐吞量、CPU利用率及时延均有很大提升，时延整体优化达18%，最高优化23%。</p></sec><sec id="s2"><title>关键词</title><p>Flink，大数据，反压，Netty</p></sec><sec id="s3"><title>A Flink Scheduling Optimization Algorithm Based on Dynamic Water Level</title><p>Peng Feng<sup>1,2</sup>, Shan Huang<sup>2,3,4</sup>, Xiaodong Duan<sup>2,3,4</sup></p><p><sup>1</sup>College of Information, Dalian University, Dalian Liaoning</p><p><sup>2</sup>State Ethnic Affairs Commission Key Laboratory of Big Data Applied Technology, Dalian Liaoning</p><p><sup>3</sup>College of Computer Science and Technology, Dalian Minzu University, Dalian Liaoning</p><p><sup>4</sup>Dalian Key Laboratory of Digital Technology for National Culture, Dalian Liaoning</p><p><img src="//html.hanspub.org/file/32-1542157x4_hanspub.png" /></p><p>Received: Apr. 25<sup>th</sup>, 2021; accepted: May 20<sup>th</sup>, 2021; published: May 27<sup>th</sup>, 2021</p><p><img src="//html.hanspub.org/file/32-1542157x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>When the new generation of big data engine Flink is faced with the problem of remote transmission, it mainly completes the data transmission through Netty, and relies on the Netty water level mechanism to ensure the operation of its back pressure mechanism. Netty water level mechanism is a relatively static mechanism, which makes Flink repeatedly back pressure in the face of catastrophic data flow, thus affecting the computing efficiency of the whole Flink cluster. To solve this problem, this paper proposes a Flink scheduling optimization algorithm Flink-N based on dynamic water level. Experimental results show that, compared with Flink’s default back pressure mechanism, Flink-N greatly improves the throughput, CPU utilization and time delay. The overall delay optimization is 18%, and the maximum optimization is 23%.</p><p>Keywords:Flink, Big Data, Backpressure, Netty</p><disp-formula id="hanspub.42667-formula67"><graphic xlink:href="//html.hanspub.org/file/32-1542157x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2021 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/32-1542157x7_hanspub.png" /> <img src="//html.hanspub.org/file/32-1542157x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>随着信息时代的不断发展及线上线下交互需求的增加，实时计算能力强的流处理系统越来越被产业办重视。Flink因其具有强大的实时计算能力被广泛应用于实时计算 [<xref ref-type="bibr" rid="hanspub.42667-ref1">1</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref2">2</xref>]、高频交易和社交网络等方面。如美团 [<xref ref-type="bibr" rid="hanspub.42667-ref3">3</xref>]、阿里云实时计算 [<xref ref-type="bibr" rid="hanspub.42667-ref4">4</xref>] 及在线监测 [<xref ref-type="bibr" rid="hanspub.42667-ref5">5</xref>] 等场景。</p><p>反压(backpressure)能力的好坏是判断实时处理系统数据处理能力强弱的重要依据。当系统瞬时负载高峰使得其接受数据的速度远远高于其处理数据的能力时，就会出现反压情况，如垃圾回收不及时或者停顿可能使得流入系统的数据快速堆积、大促或秒杀活动时出现的流量陡增等都会造成反压。如不对反压及时处理，将会使系统资源耗尽甚至导致系统崩溃。</p><p>Flink通过自身数据流来响应反压问题，下游的消费者处理数据减慢会降低上游发送者的发送速率。</p></sec><sec id="s6"><title>2. 相关研究现状</title><p>现有大数据实时处理系统处理反压问题方面，Storm [<xref ref-type="bibr" rid="hanspub.42667-ref6">6</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref7">7</xref>] 是通过监控Bolt中的接收队列负载情况，如果超过高水位值就会将反压信息写到Zookeeper，Zookeeper上的watch会通知该拓扑的所有Worker都进入反压状态，最后Spout停止发送tuple。J Storm [<xref ref-type="bibr" rid="hanspub.42667-ref8">8</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref9">9</xref>] 采用逐级降速的方式来处理反压，使用Topology Master替代Zookeeper来协调拓扑进入反压状态，效果较Storm更为稳定。Spark Streaming [<xref ref-type="bibr" rid="hanspub.42667-ref10">10</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref11">11</xref>] 根据批处理时间(Batch Processing Time)和批次间隔(Batch Interval，即Batch Duration)的信息来动态调整系统的摄入速率，从而完成其反压工作。</p><p>在Flink优化方面，关沫使用Flink执行一种传统堆序优化后的算法Heap Optimize，增加了Flink的吞吐量 [<xref ref-type="bibr" rid="hanspub.42667-ref12">12</xref>]。针对Flink默认的先来先服务的任务调度策略，王丽娟等人 [<xref ref-type="bibr" rid="hanspub.42667-ref13">13</xref>] 通过资源感知，将待执行任务分配到最佳节点进行计算，优化了Flink的负载均衡。何贞贞等人 [<xref ref-type="bibr" rid="hanspub.42667-ref14">14</xref>] 则根据任务间数据流的大小确定拓扑边的权重，以生成关键路径，大幅缩减了Flink节点间的通信开销。文献 [<xref ref-type="bibr" rid="hanspub.42667-ref15">15</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref16">16</xref>] [<xref ref-type="bibr" rid="hanspub.42667-ref17">17</xref>] 把Flink从原来的CPU迁移扩展到异构的CPU-GPU集群，在并行计算、内存管理及通信策略方面极大地提高了Flink的计算能力。</p><p>目前诸多的研究当中没有Flink反压方面的问题，当Flink面临远端传输问题时，其所依托的Netty所采用的是一种静态的水位机制，这使得Flink在面临颠簸状态数据的远程传输问题时，容易出现反复反压的情况，极大地影响了Flink传输数据的效率，故而本文将针对此问题展开研究。</p></sec><sec id="s7"><title>3. Flink反压原理解析</title><sec id="s7_1"><title>3.1. Flink反压原理</title><p>Flink的反压原理如图1所示，假如Flink的一个Job分为Task A、B、C，其中Task A是Source Task、Task B处理数据、Task C为Sink Task。假如Task C由于各种原因吞吐量降低，会将负载信息反馈给Task B，Task B会降低向Task C发送数据的速率，此时若Task B还保持从Task A读取数据，数据会把Task B的Send Buffer和Receive Buffer撑爆，导致OOM或者丢失数据。所以，当Task B的Send Buffer和Receive Buffer被用完后，Task B会用同样的原理将负载信息反馈给Task A，Task A收到Task B的负载信息后，会降低给Task B发送数据的速率，以此类推。</p><p>图1. Flink反压原理图</p></sec><sec id="s7_2"><title>3.2. Flink网络传输的数据流向</title><p>Flink反压存在Task内与跨Task两种情况，本文已在图1中标注，本文主要是针对Flink跨Task传输进行反压优化，故下文主要对Flink跨Task传输进行介绍：图2展示了Flink网络传输时的数据流向，可以看到Task Manager A给TaskManager B发送数据，Task Manager A做为Producer，Task Manager B做为Consumer。Producer端的Operator实例会产生数据，最后通过网络发送给Consumer端的Operator实例。Producer端Operator实例生产的数据首先缓存到Task Manager内部的Net Work Buffer。Net Work依赖Netty来做通信，Producer端的Netty内部有Channel Outbound Buffer，Consumer端的Netty内部有Channel Inbound Buffer。Netty最终还是要通过Socket发送网络请求，Socket这一层也会有Buffer，Producer端有Send Buffer，Consumer端有Receive Buffer。</p><p>故Flink网络传输时的整个反压过程为：首先Producer Operator从自己的上游或者外部数据源读取到数据后，对一条条的数据进行处理，处理完的数据首先输出到Producer Operator对应的Net Work Buffer中。Buffer写满或者超时后，就会触发将Net Work Buffer中的数据拷贝到Producer端Netty的Channel Outbound Buffer，之后又把数据拷贝到Socket的Send Buffer中，这里有一个从用户态拷贝到内核态的过程，最后通过Socket发送网络请求，把Send Buffer中的数据发送到Consumer端的Receive Buffer。数据到达Consumer端后，再依次从Socket的Receive Buffer拷贝到Netty的Channel Inbound Buffer，再拷贝到Consumer Operator的Net Work Buffer，最后Consumer Operator就可以读到数据进行处理了，这就是两个Task Manager之间的数据传输过程。</p></sec></sec><sec id="s8"><title>4. Flink反压机制的缺点</title><p>如图2所示，Flink通过Netty完成其数据的网络传输任务，Netty在向底层的Channel写数据的时候会用到Channel Outbound Buffer，Channel Outbound Buffer本身是无界的，如果水位控制不当的话就会造成占用大量的内存，因此Netty为其配置了一个高水位线和低水位线。为避免上游数据量太大，当上游数据的大小超过高水位线的时候对应channel的isWritable就会变成false，当上游数据的大小低于低水位线的时候，isWritable就会变成true，低水位线主要是其自动恢复运行的一种保障，为便于理解下文所提的水位线均指高水位线。Flink以此来保证不在网络中写入太多数据，进而保证Flink的反压能力。</p><p>图2. Flink网络传输数据流向图</p><p>分析源码可知，Netty水位机制是一种静态的机制，Netty默认其水位线的高度为定值，这使得Flink系统在面临瞬时流量不稳定的场景(即系统的数据流量值在特别高与特别低的值之间不断跳动时)时，会出现下述两种问题：</p><p>1) 水位值较下游可用缓存区数偏低：如图3 (左图)所示，图中以“圆圈”表示数据，以“方框”表示缓存区的大小，下同。假设当上游A点来临的数据量是9 (Flink中以buffer为数据单位，每个buffer大小为32 k，为便于表述，下文块描述)，而此时下游B点的可用缓存区是10，H代表代表数据通道(其作用类似于水坝，水位值的大小决定了其单位时间通过的数据量大小)，此处设水位值高度为4，则Flink传输本批次的数据需要3个单位时间(上游共9块数据，每个单位时间只能通过4块的数据，需要3个单位的时间来处理这批数据)。而若此时的水位值为9或者10的话，则只需要一个单位时间，Flink便可以处理本批次的数据。</p><p>2) 水位值较下游可用缓存区数偏高：如图3 (右图)，假设当上游A点来临的数据量是4，而此时下游B点的可用缓存区为2，水位值高度为4。由于数据量不于水位值高度，Flink会误以为可以在一单位时间内接受这批数据，如图中可以看出，只有2块的缓存区，直接接收了4块的数据量，会直接导致内存溢出(OOM)甚至引起系统阻塞。综上，由于不合理的静态水位线的设置，使得Flink传输数据时间延长，或者出现非正常的阻塞，进而影响整个Flink的数据传输情况。</p><p>图3. 不同Netty水位值数据传输示意图</p><p>综上，由于不合理的静态水位线的设置，使得Flink传输数据时间延长，或者出现非正常的阻塞，进而影响整个Flink的数据传输情况。</p></sec><sec id="s9"><title>5. 反压优化算法</title><p>本节将针对Flink反压传输所存在的缺点，提出一种基于动态水位值的Flink调度优化算法，并给出示例进行说明：</p><sec id="s9_1"><title>5.1. 基于动态水位值的Flink调度优化算法</title><p>虽然可以在数据处理前对Netty所默认的两个buffer高度进行参数调整，但这种默认的定值始终是一种静态的机制。这种相对静态的机制使得Flink在面临远程传输问题时，容易出现上文所述的两种问题。本节将针对Flink反压传输所存在的缺点，提出一种基于动态水位值Flink调度优化算法，并给出例子进行说明。Flink-N算法的核心思想是：把Flink中Netty下游可用buffer数B<sub>t</sub>实时写入Redis中，根据Redis中前后时刻buffer数(即B<sub>t</sub>值)的大小变化，对水位值Wt进行动态调整，算法流程如图4所示，其具体步骤如下：</p><p>第一步，设置访问函数，并创建接口，使得Flink启动的同时运行访问函数。其中，访问函数的作用是，每间隔一段时间访问Netty下游缓存区可用buffer (图中B点位置)的数量，并将其记录到Redis中；</p><p>第二步，获得下游可用buffer数B<sub>t</sub>；</p><p>第三步，取0.8倍的B<sub>0</sub>值的整数部分(向下取整)作为Netty的高水位值，即令W<sub>0H</sub> = ⌊0.8|B<sub>0</sub>|⌋；</p><p>第四步，将B<sub>t</sub>值反馈到Redis中并记录；</p><p>第五步，根据B<sub>t</sub>值调整水位值W<sub>t</sub>，具体方法为：若B<sub>t</sub>大于B<sub>t</sub>与B<sub>t−1</sub>的平均值，则W<sub>t</sub>取B<sub>t</sub>大于B<sub>t</sub>与B<sub>t−1</sub>的平均值；反之，当B<sub>t</sub> ≤ B<sub>t−1</sub>时，则令W<sub>t</sub> = B<sub>t</sub>。</p><p>第六步，重复第二步、第四步与第五步。</p><p>本文选择Redis是因为Flink处理时延是ms级别的，而Redis数据读取速度可达110,000次/s，写数据的速度可达81,000次/s，选择Redis相较于其他数据库而言，不会对Flink的时效性产生负增益。</p><p>图4. Flink-N算法流程图</p></sec><sec id="s9_2"><title>5.2. 示例说明</title><p>现对所提出的算法给出实例加以说明：设某连续时间段t<sub>1</sub>、t<sub>2</sub>、t<sub>3</sub>、t<sub>4</sub>、t<sub>5</sub>内Netty上游来临的数据量分别8、4、8、4、8，且下游对应时间段内的缓存区数分别为10、4、10、4、10，在表1中以G表示对应时刻系统接收的数据量，以R表示系统实际的数据传输量。则两种不同的机制对应的数据传输结果如下(假设此处静态水位值为6，且每次阻塞系统需要两个时刻的时间才能恢复正常运行。)：</p><p>如表1所示，对于Flink默认的反压算法，系统t<sub>1</sub>时刻要传输8单位的数据量，默认的水位值一直是6，故而Flink在t<sub>1</sub>时刻只能传输6块的数据。在t<sub>2</sub>时刻系统接收外部来的4块数据，同时要传输t<sub>1</sub>时刻剩余的2块数据，因此实际传输数据为6块，此时水位值为6，但下游缓存区只有4，故而会出现第4节中的第二种情况而导致系统阻塞。因为发生了阻塞，系统在t<sub>3</sub>、t<sub>4</sub>会自行调整恢复到可运行状态，无法进行数据的传输。t<sub>5</sub>、t<sub>6</sub>、t<sub>7</sub>、t<sub>8</sub>时刻的状态与t<sub>1</sub>、t<sub>2</sub>、t<sub>3</sub>、t<sub>4</sub>时刻的状态相似。t<sub>10</sub>时，系统已无外部的数据要接收，但仍有t<sub>9</sub>时刻的2块数据需要传输，此时水位值为6，下游缓存区数为4，可直接传输，从而完成所有数据的传输。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Comparison of data transmission examples under two algorithm</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >时刻</th><th align="center" valign="middle"  rowspan="2"  >数据量</th><th align="center" valign="middle"  rowspan="2"  >缓存区数</th><th align="center" valign="middle"  colspan="2"  >Flink</th><th align="center" valign="middle"  colspan="2"  >Flink-N</th><th align="center" valign="middle"  rowspan="2"  >传输情况</th></tr></thead><tr><td align="center" valign="middle" >实际传输</td><td align="center" valign="middle" >W<sub>1</sub></td><td align="center" valign="middle" >实际传输</td><td align="center" valign="middle" >W<sub>2</sub></td></tr><tr><td align="center" valign="middle" >t<sub>1</sub></td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >Flink在t<sub>1</sub>时剩2块数据； Flink-N全部传输</td></tr><tr><td align="center" valign="middle" >t<sub>2</sub></td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >Flink发生第1次阻塞； Flink-N全部传输</td></tr><tr><td align="center" valign="middle" >t<sub>3</sub></td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >Flink处于第1次阻塞中； Flink-N剩余1块</td></tr><tr><td align="center" valign="middle" >t<sub>4</sub></td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >12</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >Flink发生第2次阻塞； Flink-N剩余1块</td></tr><tr><td align="center" valign="middle" >t<sub>5</sub></td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >14</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >Flink处于第2次阻塞中； Flink-N剩余2块</td></tr><tr><td align="center" valign="middle" >t<sub>6</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >14</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >Flink发生第3次阻塞； Flink-N完成任务</td></tr><tr><td align="center" valign="middle" >t<sub>7</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >Flink处于第3次阻塞中； Flink-N完成任务</td></tr><tr><td align="center" valign="middle" >t<sub>8</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >Flink发生第4次阻塞； Flink-N完成任务</td></tr><tr><td align="center" valign="middle" >t<sub>9</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >Flink处于第4次阻塞中； Flink-N完成任务</td></tr><tr><td align="center" valign="middle" >t<sub>10</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >--</td><td align="center" valign="middle" >Flink完成任务； Flink-N完成任务</td></tr></tbody></table></table-wrap><p>表1. 两种算法下数据传输示例对照</p><p>对于Flink-N算法，因为t<sub>1</sub>时刻下游缓存区数为10，所以我们为水位值赋初始值8，此时要传输的数据为8，故传输后无数据剩余。t<sub>2</sub>时刻时，下游缓存区数为4，因为10与4的平均值7大于4，所以水位值设为4，上游数据为4，且下游缓存区为4，刚好可以把t<sub>2</sub>时刻的数据传输完毕。t<sub>3</sub>时刻时，下游缓存区为10，因为10与4的平均值7小于10，所以水位值设为7，此时上游来临的数据为8，下游缓存区数为10，故t<sub>3</sub>时刻传输后，系统会剩余1单位数据在t<sub>4</sub>时刻传输。t<sub>4</sub>时刻时，下游缓存区数为4，因为10与4的平均值大于4，所以t<sub>4</sub>时刻的水位值设为4，此时外部数据为4，加之t<sub>3</sub>时刻的数据剩余，整个t<sub>4</sub>时刻系统实际要传输的数据为5，此时下游缓存区为4，因此t<sub>4</sub>时刻后，系统会剩余1块数据在t5时刻传输。t<sub>5</sub>时刻下游缓存区数为10，因为10与4的平均值7小于10，故水位值设为7，此时外部数据为8，加上t<sub>4</sub>时刻剩余的1块数据，t<sub>5</sub>时刻实际要传输的数据为9，则t<sub>5</sub>时刻后系统剩余2块的数据在t<sub>6</sub>时刻传输。在t<sub>6</sub>时刻时，系统下游缓存区为4，因为10与4的平均值7大于4，故水位值设为4，此时系统外部无待接收数据，加上t<sub>5</sub>时刻剩余的2块数据，则系统t<sub>6</sub>实际要传输的数据为2，可以全部完成传输。</p><p>综上，对于本例所给出的数据颠簸的案例，Flink完成整个传输需要10个时刻，Flink-N只需6个时刻即可完成数据传输。显然，理论上Flink-N较Flink默认的反压算法具有更好的时效性。</p></sec></sec><sec id="s10"><title>6. 实验分析</title><sec id="s10_1"><title>6.1. 实验环境</title><p>实验在三台配置均为Inter(R)Core(TM) i7-8700、2.66 GHz CPU、32GDDR4内存、2T硬盘的机器所组成的集群上进行，采用一主两从结构，其他配置如表2所示：</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Experimental configuratio</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >配置</th><th align="center" valign="middle" >参数</th></tr></thead><tr><td align="center" valign="middle" >操作系统</td><td align="center" valign="middle" >CentOs7.1611</td></tr><tr><td align="center" valign="middle" >JDK</td><td align="center" valign="middle" >1.8.0_191</td></tr><tr><td align="center" valign="middle" >开发环境</td><td align="center" valign="middle" >IntelliJIDEA 2018</td></tr><tr><td align="center" valign="middle" >Flink版本</td><td align="center" valign="middle" >1.4.2</td></tr><tr><td align="center" valign="middle" >Redis版本</td><td align="center" valign="middle" >5.0.10</td></tr></tbody></table></table-wrap><p>表2. 实验配置</p></sec><sec id="s10_2"><title>6.2. 实验及分析</title><p>实验选择典型大数据处理应用单词统计Word Count进行对比实验，将Flink默认反压机制与优化后的算法机制Flink-N进行对比。</p><p>实验分别从kafka集群中订阅同一个Topic，而kafka不断读取合成的人工数据集并向该Topic注入数据。Flink处理的数据便会随着时间的变化越来越多。为了消除不确定因素对实验结果的影响，本文将实验分别运行10组，取统计的平均值进行分析，分别观察两组实验各个时间点的吞吐量、CPU利用率及传输时延。</p><p>1) 吞吐量效果评测</p><p>如图5显示的是Flink默认反压机制与Flink-N在吞吐量方面的差别，相比于默认反压机制，Flink-N的反压机制在整体吞吐量上提高了20%左右。</p><p>图5. 吞吐量测试对比</p><p>2) CPU利用率效果评测</p><p>如图6显示的是Flink默认反压机制与Flink-N在CPU利用率方面的差别，相比于默认的Flink反压机制，Flink-N的反压机制在系统刚开始运行时便可以迅速提高系统的利用率。Redis的加入，使得Flink-N一开始便拥有更高的CPU利用率，相较于Flink本身的反压机制，其最高优化率达到36%，平均优化率为21%。</p><p>图6. CPU利用率对比</p><p>3) 传输时延效果评测</p><p>如图7所示为Flink与Flink-N的传输时延效果对比，随着时间增加，系统的吞吐量不断增大，伴随着系统吞吐量的增加，系统的传输时延不断增大。虽然在系统运行初始阶段，由于数据传输量小，但系统整体组件较多，Flink-N也会出现时延较大的情况，但从整体角度来看，Flink-N在时延方面的优化还是很成功的，其整体优化率达18%，最大优化率达23%。</p><p>图7. 时延测试对比</p></sec></sec><sec id="s11"><title>7. 结论与展望</title><p>本文基于Netty水位机制，对Flink反压机制进行了动态水位调优，使Flink在面临远程传输问题时，具有更好的反压能力。经实验评测可知：优化后的Flink-N算法在吞吐量、CPU利用率及时延方面均优于Flink默认的反压机制。但本文研究工作也有不足，可以从以下两方面改进：1) 对Flink本地传输进行反压优化问题；2) 本文在Flink-N算法中接入了Redis，是一种曲线式解决问题的方法。</p></sec><sec id="s12"><title>基金项目</title><p>科技部重点研发项目“云计算和大数据”重点专项项目(2018YFB1004402)。</p></sec><sec id="s13"><title>文章引用</title><p>冯 鹏,黄 山,段晓东. 一种基于动态水位值的Flink调度优化算法A Flink Scheduling Optimization Algorithm Based on Dynamic Water Level[J]. 计算机科学与应用, 2021, 11(05): 1512-1521. https://doi.org/10.12677/CSA.2021.115155</p></sec><sec id="s14"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.42667-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">袁海飞. 基于分布式实时计算架构的生产设备数据分析平台[J]. 电子技术与软件工程, 2020, 174(4): 217-219.</mixed-citation></ref><ref id="hanspub.42667-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">樊春美, 朱建生, 单杏花, 等. 基于Flink实时计算的自动化流控制算法[J]. 计算机技术与发展, 2020, 30(8): 66-72.</mixed-citation></ref><ref id="hanspub.42667-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">&lt;br&gt;https://tech.meituan.com/2018/10/18/meishi-data-flink.html</mixed-citation></ref><ref id="hanspub.42667-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">&lt;br&gt;https://help.aliyun.com/document_detail/110778.html?spm=a2c4g.11174283.2.6.114773d5r0epNT</mixed-citation></ref><ref id="hanspub.42667-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">姜红玉, 汪朋, 封雷. 基于流式计算的实时用户画像系统研究[J]. 计算机技术与发展, 2020, 30(7): 186-193.</mixed-citation></ref><ref id="hanspub.42667-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Aniello, L., Baldoni, R. and Querzoni, L. (2013) Adaptive Online Scheduling in Storm. Proceedings of the 7th ACM International Conference on Distributed Event-Based Systems, June 2013, 207-218.  
&lt;br&gt;https://doi.org/10.1145/2488222.2488267</mixed-citation></ref><ref id="hanspub.42667-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Yang, M. and Ma, R.T.B. (2015) Smooth Task Migration in Apache Storm. Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data, May 2015, 2067-2068. &lt;br&gt;https://doi.org/10.1145/2723372.2764941</mixed-citation></ref><ref id="hanspub.42667-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">林琳. 阿里巴巴的大数据之路JStorm与Blink的发展史[J]. 计算机与网络, 2019, 45(2): 41-42.</mixed-citation></ref><ref id="hanspub.42667-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">&lt;br&gt;https://developer.aliyun.com/article/709397?spm=a2c6h.14164896.0.0.b095505ax2TAav</mixed-citation></ref><ref id="hanspub.42667-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">宋灵城. Flink和Spark Streaming流式计算模型比较分析[J]. 通信技术, 2020, 53(1): 59-62.</mixed-citation></ref><ref id="hanspub.42667-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Mhand, M.A., Boulmakoul, A. and Badir, H. (2019) Scalable and Distributed Architecture Based on Apache Spark Streaming and PROM6 for Pro-cessing RoRo Terminals Logs. Proceedings of the New Challenges in Data Sciences: Acts of the Second Conference of the Moroccan Classification Society, March 2019, Article No. 19.  
&lt;br&gt;https://doi.org/10.1145/3314074.3314093</mixed-citation></ref><ref id="hanspub.42667-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">关沫, 魏碧晴. 基于Flink框架的TopN堆排序优化算法[J]. 信息技术与网络安全, 2020(2): 23-26.</mixed-citation></ref><ref id="hanspub.42667-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">汪丽娟, 钱育蓉, 张猛, 等. 基于Flink平台的资源感知任务调度策略[J]. 东北师大学报:自然科学版, 2020, 52(2): 66-72.</mixed-citation></ref><ref id="hanspub.42667-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">何贞贞, 于炯, 李梓杨, 等. 基于Flink的任务调度策略[J]. 计算机工程与设计, 2020, 41(5): 1280-1287.</mixed-citation></ref><ref id="hanspub.42667-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Chen, C., Li, K., Ouyang, A., et al. (2016) GFlink: An In-Memory Computing Architecture on Heterogeneous CPU-GPU Clusters for Big Data. 45th International Conference on Parallel Processing (ICPP), Philadelphia, 16-19 August 2016, 542-551. &lt;br&gt;https://doi.org/10.1109/ICPP.2016.69</mixed-citation></ref><ref id="hanspub.42667-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Chen, C., Li, K., Ouyang, A. and Li, K. (2018) FlinkCL: An OpenCL-Based In-Memory Computing Architecture on Hetero-geneous CPU-GPU Clusters for Big Data. IEEE Transactions on Computers, 67, 1765-1779.  
&lt;br&gt;https://doi.org/10.1109/TC.2018.2839719</mixed-citation></ref><ref id="hanspub.42667-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Chen, C., Li, K., Ouyang, A., et al. (2017) GPU-Accelerated Paral-lel Hierarchical Extreme Learning Machine on Flink for Big Data. IEEE Transactions on Systems, Man, and Cybernetics: Systems, 47, 2740-2753.  
&lt;br&gt;https://doi.org/10.1109/TSMC.2017.2690673</mixed-citation></ref></ref-list></back></article>