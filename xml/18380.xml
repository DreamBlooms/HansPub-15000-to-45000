<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2016.68063</article-id><article-id pub-id-type="publisher-id">CSA-18380</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20160800000_62904691.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  云环境下基于SOM神经网络的入侵检测方法研究
  Research on Intrusion Detection Method Based on SOM Neural Network in Cloud Environment
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>赵</surname><given-names>津</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>朱</surname><given-names>有产</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff3"><addr-line>华北电力大学信息与网络管理中心，河北 保定</addr-line></aff><aff id="aff1"><addr-line>华北电力大学控制与计算机工程学院，河北 保定</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>du.lululu@163.com(赵津)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>17</day><month>08</month><year>2016</year></pub-date><volume>06</volume><issue>08</issue><fpage>505</fpage><lpage>513</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  云安全已成为云计算发展过程中面临的重要挑战，基于云计算的入侵检测系统将成为云安全体系的重要组成部分。根据云计算特点和安全需求，设计了一种适合云环境的入侵检测系统模型，在入侵检测算法中引入SOM自组织特征映射神经网络算法，对SOM网络连接权值随机初始化可能导致的训练失败问题，采用基于模拟退火的微粒群算法对其进行优化，通过仿真实验验证优化算法可有效提高入侵检测性能。
   Cloud security has become an important challenge in the development of cloud computing. The intrusion detection system based on cloud computing will be an important part of the cloud security system. According to the characteristics and security requirements of cloud computing, an intrusion detection system model is designed for the cloud environment, and the SOM self-organiz- ing feature map neural network algorithm is introduced into the intrusion detection algorithm. The random initialization of SOM network connection weights may lead to the failure of the training, so the particle swarm optimization algorithm based on simulated annealing is used to optimize the SOM neural network algorithm. The simulation experiment results show that the optimization algorithm can effectively improve the performance of intrusion detection.
 
</p></abstract><kwd-group><kwd>入侵检测，SOM神经网络，微粒群算法，模拟退火算法, Intrusion Detection</kwd><kwd> SOM Neural Network</kwd><kwd> Particle Swarm Optimization Algorithm</kwd><kwd> Simulated Annealing Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>云环境下基于SOM神经网络的 入侵检测方法研究 <sup> </sup></title><p>赵 津<sup>1</sup>，朱有产<sup>2</sup></p><p><sup>1</sup>华北电力大学控制与计算机工程学院，河北 保定</p><p><sup>2</sup>华北电力大学信息与网络管理中心，河北 保定</p><disp-formula id="hanspub.18380-formula629"><graphic xlink:href="http://html.hanspub.org/file/8-1540621x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2016年7月30日；录用日期：2016年8月15日；发布日期：2016年8月23日</p><disp-formula id="hanspub.18380-formula630"><graphic xlink:href="http://html.hanspub.org/file/8-1540621x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>云安全已成为云计算发展过程中面临的重要挑战，基于云计算的入侵检测系统将成为云安全体系的重要组成部分。根据云计算特点和安全需求，设计了一种适合云环境的入侵检测系统模型，在入侵检测算法中引入SOM自组织特征映射神经网络算法，对SOM网络连接权值随机初始化可能导致的训练失败问题，采用基于模拟退火的微粒群算法对其进行优化，通过仿真实验验证优化算法可有效提高入侵检测性能。</p><p>关键词 :入侵检测，SOM神经网络，微粒群算法，模拟退火算法</p><disp-formula id="hanspub.18380-formula631"><graphic xlink:href="http://html.hanspub.org/file/8-1540621x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>随着云计算服务在社会各领域的广泛应用，云环境下计算机系统和网络资源的安全性已成为云计算发展过程中面临的重要挑战。为了应对云环境的安全危机，基于云计算的入侵检测系统将成为云安全体系重要的组成部分 [<xref ref-type="bibr" rid="hanspub.18380-ref1">1</xref>] 。入侵检测系统(Intrusion Detection System)通过分析流经网络的数据包、用户的行为、系统的安全记录、相关数据以及计算机系统某些关键点的信息，来判断是否发生了入侵行为。</p><p>传统的入侵检测系统在处理海量检测数据问题上难以满足实时性和有效性的要求，云计算强大的计算能力可以解决此瓶颈问题 [<xref ref-type="bibr" rid="hanspub.18380-ref2">2</xref>] 。同时，神经网络具有的优势使其非常适合云环境下的入侵检测，目前专家学者的研究大多关注BP神经网络，对SOM网络的研究相对较少。根据云计算的特点和安全需求，设计出一种适合云环境的入侵检测系统模型。在核心检测分析模块的入侵检测算法部分，引入SOM自组织特征映射神经网络算法。在此基础上，针对SOM神经网络连接权值随机初始化可能导致的训练失败问题，使用微粒群算法和模拟退火算法相结合对其进行优化，提高入侵检测效率。</p></sec><sec id="s4"><title>2. 云环境下的入侵检测系统模型</title><p>考虑到云环境的计算特点和安全需求 [<xref ref-type="bibr" rid="hanspub.18380-ref3">3</xref>] ，设计的入侵检测系统模型如图1所示。每台云服务器安装入侵检测子系统，负责各自的入侵检测，每组云服务器集群设置一台入侵检测管理服务器，以自动检测和人工管理结合的方式对入侵检测系统进行管理，减少误报和漏报的概率。</p><p>在云服务器的入侵检测系统中，数据采集模块负责数据包的监听和捕获，数据预处理模块对捕获到的数据包进行协议解析、特征提取、数字标准化和归一化处理，并传送给检测分析模块。检测分析模块采取一定的入侵检测算法，根据入侵规则库对数据包进行分析，判断是否发生了入侵行为，若存在异常行为，则发送至响应模块并发出报警信息。</p><p>入侵检测管理服务器通过通信模块与云服务器通讯协作。容侵模块 [<xref ref-type="bibr" rid="hanspub.18380-ref4">4</xref>] 对云服务器中的检测分析模块状态进行监控，当发现某个分析模块性能严重下降时，通知资源调度模块为该任务分配新的分析模块。资源调度模块收到检测请求后根据一定的调度算法分配新的检测分析模块。系统管理模块为管理员提供</p><p>图1. 入侵检测系统模型</p><p>了管理所有云服务器的系统平台，管理员可以查看云服务器中相关的系统日志，并根据系统运行状况对相关参数进行配置，以降低误报率和漏报率。</p></sec><sec id="s5"><title>3. 基于SOM的入侵检测原理</title><sec id="s5_1"><title>3.1. SOM概述</title><p>自组织特征映射神经网络(Self Organizing Map, SOM)是一种无导师学习的神经网络，通过自动寻找样本中内在规律和本质属性，自组织、自适应地改变网络参数与结构，并对具有共同特征的事物进行正确聚类 [<xref ref-type="bibr" rid="hanspub.18380-ref5">5</xref>] 。</p><p>典型的SOM网络拓扑结构如图2所示，由输入层和输出层(竞争层)组成，输入层神经元与输出层神经元之间为全相连的权值向量，输出层之间实行侧向连接。输入层神经元个数由输入模式的特征数决定，通过权向量将外界信息汇集到输出层各神经元。</p><p>在SOM网络的训练阶段，输出层的神经元通过竞争学习的方式来获取对输入模式的响应，与输入模式最为相似的神经元为获胜神经元，获胜神经元及其优胜邻域内的所有神经元的权值向量均向输入模式方向作不同程度的调整。</p><p>经过训练后，输出层各神经元对特定模式类敏感，通过权值向量将相似的输入样本聚类，映射到某个神经元周围的样本属于同一类。当输入一个向量时，输出层与该模式类匹配的特定神经元将产生最大响应，从而将该输入向量自动归类。</p><p>图2. SOM神经网络结构</p></sec><sec id="s5_2"><title>3.2. SOM神经网络算法</title><p>对应于上述运行原理，SOM网络采用的学习算法按如下步骤进行。</p><p>假设训练样本维数为n，则输入层神经元个数为n，输出层神经元个数为m，连接权向量为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x11_hanspub.png" xlink:type="simple"/></inline-formula>，每个训练样本输入向量为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x12_hanspub.png" xlink:type="simple"/></inline-formula>，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x13_hanspub.png" xlink:type="simple"/></inline-formula>为每个输出层神经元的连接权向量。</p><p>1) SOM神经网络初始化：对连接权向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x14_hanspub.png" xlink:type="simple"/></inline-formula>赋[0,1]区间内的随机小数，定义优胜邻域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x15_hanspub.png" xlink:type="simple"/></inline-formula>的初始值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x16_hanspub.png" xlink:type="simple"/></inline-formula>和学习率函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x17_hanspub.png" xlink:type="simple"/></inline-formula>的初始值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x18_hanspub.png" xlink:type="simple"/></inline-formula>，定义最大学习次数T。</p><p>2) 接收训练样本：从训练集中随机选取一个输入向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x19_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>3) 寻找获胜神经元：计算各神经元的权值向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x20_hanspub.png" xlink:type="simple"/></inline-formula>和输入向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x21_hanspub.png" xlink:type="simple"/></inline-formula>的欧氏距离<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x22_hanspub.png" xlink:type="simple"/></inline-formula>，找出所有<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x23_hanspub.png" xlink:type="simple"/></inline-formula>中的最小值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x24_hanspub.png" xlink:type="simple"/></inline-formula>，与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x25_hanspub.png" xlink:type="simple"/></inline-formula>对应的神经元<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x26_hanspub.png" xlink:type="simple"/></inline-formula>即为获胜神经元。</p><disp-formula id="hanspub.18380-formula632"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x27_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.18380-formula633"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x28_hanspub.png"  xlink:type="simple"/></disp-formula><p>4) 调整权值：对优胜邻域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x29_hanspub.png" xlink:type="simple"/></inline-formula>内的所有神经元调整权值：</p><disp-formula id="hanspub.18380-formula634"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x30_hanspub.png"  xlink:type="simple"/></disp-formula><p>5) 更新优胜邻域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x31_hanspub.png" xlink:type="simple"/></inline-formula>和学习率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x32_hanspub.png" xlink:type="simple"/></inline-formula>：确定t时刻的权值调整域和学习率，以获胜神经元<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x33_hanspub.png" xlink:type="simple"/></inline-formula>为中心，初始邻域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x34_hanspub.png" xlink:type="simple"/></inline-formula>和学习率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x35_hanspub.png" xlink:type="simple"/></inline-formula>较大，训练过程中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x36_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x37_hanspub.png" xlink:type="simple"/></inline-formula>逐渐收缩。</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x38_hanspub.png" xlink:type="simple"/></inline-formula>，T是最大学习次数(4)</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x39_hanspub.png" xlink:type="simple"/></inline-formula>，INT为取整操作 (5)</p><p>6) 判断训练是否结束：学习次数加1，检查算法是否达到最大学习次数，或者学习率是否衰减至某个预定的正小数，是则训练结束；否则转到步骤2继续训练。</p></sec><sec id="s5_3"><title>3.3. SOM应用于入侵检测</title><p>SOM神经网络中的各个神经元经过训练后，能将模式相近的输入样本聚类在拓扑结构相邻的区域中，从而能够在数据类别未知的情况下对不同数据实行分类。入侵检测主要目标是要通过区分异常数据和正常数据，检测出异常行为。如果采用足够多的正常数据和异常数据对SOM网络进行训练，则训练后的SOM 网络就可以有效识别异常行为。</p></sec></sec><sec id="s6"><title>4. SOM神经网络算法的优化</title><sec id="s6_1"><title>4.1. 基本思想</title><p>常规SOM网络算法中，初始连接权向量是随机生成的，若选取不当，不仅会影响到网络训练的速度，而且还会直接地影响到网络的分类精度，甚至导致训练失败。为解决这一问题，本文提出微粒群算法对SOM算法进行优化，用微粒群算法来选取最优的SOM网络初始连接权值，利用微粒群算法参数少寻优能力强的优点，将算法迭代得到的最优解作为初始连接权向量。</p><p>然而，微粒群算法最大的局限性就是容易陷入局部极值点，导致得不到全局最优解 [<xref ref-type="bibr" rid="hanspub.18380-ref6">6</xref>] 。模拟退火算法是一种有效的全局优化算法，在迭代过程中可以接受较差解，增加了搜索过程的灵活性，扩大了搜索范围，跳出局部极值点得到全局最优解的能力较强。因而将模拟退火思想引入到微粒群算法中，利用基于模拟退火的微粒群算法寻找SOM网络最优初始连接权向量，可以提高算法的收敛速度和分类精度。</p></sec><sec id="s6_2"><title>4.2. 微粒群算法</title><p>微粒群优化算法(Particle Swarm Optimization, PSO)是一种基于群体智能的随机优化技术。PSO算法将待优化问题的每个可能解表述为种群中的一个微粒，每个微粒有自己的位置向量、速度向量和一个由目标函数决定的适应度。所有微粒在搜索空间中以一定的速度飞行，通过追随当前搜索到的最优解来寻找全局最优解。</p><p>假设在D维搜索空间中，有一个规模为m的微粒群，第i个微粒的位置表示为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x40_hanspub.png" xlink:type="simple"/></inline-formula>，其飞行速度为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x41_hanspub.png" xlink:type="simple"/></inline-formula>，它经历过的最好位置即个体极值点为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x42_hanspub.png" xlink:type="simple"/></inline-formula>，对应的适应值即为个体极值Pbest，种群中所有微粒经历过的最好位置即全局极值点为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x43_hanspub.png" xlink:type="simple"/></inline-formula>，对应的适应值即为全局最优解Gbest。在每次迭代中，微粒通过跟踪个体极值和全局最优解来更新自己的速度和位置：</p><disp-formula id="hanspub.18380-formula635"><label>(6)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x44_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.18380-formula636"><label>(7)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x45_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中，t表示当前迭代次数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x46_hanspub.png" xlink:type="simple"/></inline-formula>表示第i个微粒在第d维的速度，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x47_hanspub.png" xlink:type="simple"/></inline-formula>表示第i个微粒在第d维的位置，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x48_hanspub.png" xlink:type="simple"/></inline-formula>表示第i个微粒的个体极值在第d维的分量，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x49_hanspub.png" xlink:type="simple"/></inline-formula>表示全局最优解在第d维的分量；C<sub>1</sub>和C<sub>2</sub>是学习因子，通常取值为2，r<sub>1</sub>和r<sub>2</sub>是[0,1]之间的随机数；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x50_hanspub.png" xlink:type="simple"/></inline-formula>是惯性权重，应随着迭代次数增加而线性减少，采用较多的是Shi建议的线性递减权值策略 [<xref ref-type="bibr" rid="hanspub.18380-ref7">7</xref>] [<xref ref-type="bibr" rid="hanspub.18380-ref8">8</xref>] ，T是最大迭代次数：</p><disp-formula id="hanspub.18380-formula637"><label>(8)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x51_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s6_3"><title>4.3. 基于模拟退火的微粒群算法</title><p>模拟退火算法(Simulated Annealing, SA)来源于物理中固体物质退火过程与组合优化问题之间的相似性，具有渐进收敛性，在理论上已被证明以概率1收敛于全局最优解。SA算法在进行优化时采用Metropolis接受准则。首先设定一个足够高的初始温度，随机选择一个初始状态并得到该状态的目标函数值，对当前状态附加一个小扰动，计算新状态的目标函数值，以概率1接受目标值较优点，以线性递减概率<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x52_hanspub.png" xlink:type="simple"/></inline-formula>接受较差点作为当前点，伴随着温度不断下降迭代寻优，最终得到问题的全局最优解 [<xref ref-type="bibr" rid="hanspub.18380-ref9">9</xref>] 。</p><p>本文将模拟退火算法思想引入微粒群优化算法，在微粒位置速度迭代更新过程中加入模拟退火概率机制，对微粒更新后的适应值按接受准则接受优化解的同时，也以适当的概率接受恶化解，从而使算法从可能的局部极值中跳出，最终收敛至全局最优解。</p><p>基于模拟退火的微粒群算法描述为：</p><p>1) 假设种群中包含m个微粒，随机初始化各个微粒的位置<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x53_hanspub.png" xlink:type="simple"/></inline-formula>与速度<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x54_hanspub.png" xlink:type="simple"/></inline-formula>；初始化学习因子C<sub>1</sub>和C<sub>2</sub>；初始化迭代次数t为0，最大迭代次数为t<sub>max</sub>；设置足够大的退火起始温度T(0)、退火速度<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x55_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>2) 将各个微粒初始位置设为个体极值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x56_hanspub.png" xlink:type="simple"/></inline-formula>，计算每个微粒的适应值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x57_hanspub.png" xlink:type="simple"/></inline-formula>作为个体极值Pbest，选择适应度最优的微粒位置设为全局极值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x58_hanspub.png" xlink:type="simple"/></inline-formula>，对应的适应值设为Gbest。</p><p>3) 根据公式(6)和(7)更新各微粒的位置和速度。</p><p>4) 计算每个微粒位置更新前后所引起的适应值的变化量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x59_hanspub.png" xlink:type="simple"/></inline-formula>，如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x60_hanspub.png" xlink:type="simple"/></inline-formula>则接受新位置和新速度为当前位置和当前速度，否则如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x61_hanspub.png" xlink:type="simple"/></inline-formula>成立，也同样接受。否则仍以更新前的位置和速度作为当前位置和当前速度。</p><p>5) 计算每个微粒的适应值，如果优于个体极值Pbest，则设置当前位置为个体极值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x62_hanspub.png" xlink:type="simple"/></inline-formula>，并用当前位置的适应值替换Pbest。根据每个微粒的Pbest确定全局极值点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x63_hanspub.png" xlink:type="simple"/></inline-formula>和Gbest。</p><p>6) 迭代次数t = t + 1，根据公式(8)更新惯性权重，根据<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x64_hanspub.png" xlink:type="simple"/></inline-formula>更新退火温度。</p><p>7) 如果达到最大迭代次数或最优解达到收敛，则终止迭代，输出全局极值点和全局最优解，否则返回步骤3继续迭代。</p></sec><sec id="s6_4"><title>4.4. 模拟退火微粒群算法优化SOM神经网络</title><p>使用模拟退火微粒群算法优化SOM神经网络，实质就是采用模拟退火微粒群算法训练SOM网络的最优初始连接权值，然后使用SOM网络来对数据进行分类。</p><sec id="s6_4_1"><title>4.4.1. 微粒的搜索维度</title><p>使用基于模拟退火的微粒群算法寻优目的是得到SOM神经网络的最优初始连接权向量，寻优结果得到的全局最优解的位置即为初始连接权值，因而微粒群中每个微粒的维度分量都应该对应SOM神经网络中的一个连接权值。假设SOM网络输入层由n个神经元组成，输出层由m个神经元组成，则连接权值个数为m &#215; n，那么微粒的搜索维度也是m &#215; n，令D = m &#215; n，则每个微粒在搜索空间中的位置及飞行速度都是D维矢量。</p></sec><sec id="s6_4_2"><title>4.4.2. 适应度函数</title><p>在模拟退火微粒群算法优化过程中，需要通过一定的适应度函数来评估微粒的优劣，进而迭代得到最优解。SOM神经网络不同于BP神经网络，它是无监督自组织的神经网络，无法利用输出层的误差作为评估准则。因而利用输入样本向量与微粒作为连接权向量时的相似程度作为评估准则 [<xref ref-type="bibr" rid="hanspub.18380-ref10">10</xref>] ，数学描述如下。</p><p>假设SOM网络输入层神经元个数为n，输出层神经元个数为m，某个样本输入向量为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x65_hanspub.png" xlink:type="simple"/></inline-formula>，样本集中包含N个样本，表示为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x66_hanspub.png" xlink:type="simple"/></inline-formula>；微粒群中每个微粒向量维度为D = m &#215; n，位置表示为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x67_hanspub.png" xlink:type="simple"/></inline-formula>，每个维度分量对应SOM网络中的一个连接权向量。</p><p>当以微粒<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x68_hanspub.png" xlink:type="simple"/></inline-formula>作为连接权向量时，对于输入向量<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x69_hanspub.png" xlink:type="simple"/></inline-formula>，根据公式(1)和(2)找到其对应的输出层获胜神经元<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x70_hanspub.png" xlink:type="simple"/></inline-formula>，定义C为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540621x71_hanspub.png" xlink:type="simple"/></inline-formula>的连接权向量。</p><p>则适应度函数定义为：</p><disp-formula id="hanspub.18380-formula638"><label>(9)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540621x72_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s6_4_3"><title>4.4.3. 模拟退火微粒群优化SOM算法流程</title><p>1) 确定SOM神经网络结构，初始化网络相关参数，包括输入层和输出层神经元个数、优胜邻域函数及初值、学习率函数及初值。</p><p>2) 提供一组样本输入向量，按照4.3基于模拟退火的微粒群算法步骤执行算法迭代，其中适应度函数如式(9)。</p><p>3) 以得到的全局极值点作为SOM网络的初始连接权值，输入样本，训练SOM网络。</p><p>4) 利用训练收敛后的SOM网络实现数据的聚类。</p></sec></sec></sec><sec id="s7"><title>5. 仿真实验与结果分析</title><p>为验证模拟退火微粒群优化SOM算法应用于入侵检测系统的高效性，分别对基本SOM算法、基于微粒群的SOM算法以及模拟退火微粒群SOM算法进行仿真对比实验。</p><sec id="s7_1"><title>5.1. 数据准备</title><p>实验采用MIT林肯实验室的KDD CUP99标准入侵检测数据集 [<xref ref-type="bibr" rid="hanspub.18380-ref11">11</xref>] ，包含约500万条的训练数据和约200万条的测试数据。除正常数据类型Normal外，主要分为DOS (拒绝服务)、Probe (探测攻击)、R2L (远程攻击)、U2R (本地非法提升权限)四大类攻击。</p><p>由于KDD CUP99数据集样本数量巨大，本次实验从中选择部分数据作为样本，具体样本分布见表1。</p><p>数据集中每个样本都有41个特征属性和1个类标记，41维的特征值中有数值型、离散型、字符型，为了便于SOM神经网络处理数据，需要对样本数据进行预处理，进行数值化、归一化操作。</p></sec><sec id="s7_2"><title>5.2. 环境准备</title><p>实验主机配置为Intel(R) Core(TM) i5-5200U CPU@2.20GHz，4GB RAM。操作系统为Windows XP，编程工具为MATLAB 7.0以及SOM神经网络工具箱 [<xref ref-type="bibr" rid="hanspub.18380-ref12">12</xref>] 。</p><p>SOM神经网络参数设置：样本作为输入向量有41个特征值，因而输入层神经元有41个；输出层采用5 &#215; 5二维平面阵；学习率初值设定为0.9。模拟退火微粒群参数设置：微粒种群规模m = 50，学习因子C<sub>1</sub> = C<sub>2</sub> = 2，最大迭代次数t<sub>max</sub> = 1000；退火起始温度T(0) = 10000，退火速度α = 0.85。</p></sec><sec id="s7_3"><title>5.3. 结果分析</title><p>评价入侵检测算法时常采用三个性能指标：检测率、误报率、漏报率 [<xref ref-type="bibr" rid="hanspub.18380-ref13">13</xref>] 。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Sample set distributio</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >数据类别</th><th align="center" valign="middle" >训练样本集</th><th align="center" valign="middle" >测试样本集</th></tr></thead><tr><td align="center" valign="middle" >Normal</td><td align="center" valign="middle" >1500</td><td align="center" valign="middle" >900</td></tr><tr><td align="center" valign="middle" >DOS</td><td align="center" valign="middle" >600</td><td align="center" valign="middle" >350</td></tr><tr><td align="center" valign="middle" >Probe</td><td align="center" valign="middle" >250</td><td align="center" valign="middle" >150</td></tr><tr><td align="center" valign="middle" >R2L</td><td align="center" valign="middle" >150</td><td align="center" valign="middle" >50</td></tr><tr><td align="center" valign="middle" >U2R</td><td align="center" valign="middle" >50</td><td align="center" valign="middle" >30</td></tr></tbody></table></table-wrap><p>表1. 样本集分布情况</p><p>检测率 = 检测出的攻击样本数/攻击样本总数 &#215; 100%</p><p>误报率 = 被误报为攻击的正常样本数/正常样本总数 &#215; 100%</p><p>漏报率 = 未检测出的攻击样本数/攻击样本总数 &#215; 100%</p><p>针对基本SOM算法、基于微粒群的SOM算法以及模拟退火微粒群SOM算法三种算法进行入侵检测实验，分别统计其入侵检测率、误报率和漏报率，得到实验结果如下。</p><p>表2对比出三种算法的入侵检测率，检测率越高，说明入侵检测效果越好。使用基本SOM神经网络算法进行入侵检测时，检测率相对较低，经过微粒群算法优化后，检测率有所提高，再结合模拟退火算法的优势后，检测率显著提高，证明入侵检测效率提高。</p><p>表3和表4对比三种算法的误报率和漏报率，与检测率相反，二者的值越低，入侵检测效果越好。经过模拟退火和微粒群算法优化后，误报率和漏报率明显降低，同样证明入侵检测效率提高。</p><p>实验结果表明，相对于传统的SOM神经网络算法和基于微粒群的SOM算法，本文提出的模拟退火微粒群SOM算法具有较高的检测率，较低的误报率及漏报率，并且对常见的攻击类型都能够有效检测。这说明，模拟退火微粒群SOM算法针对传统SOM算法及微粒群算法存在的问题，起到优化作用，入侵检测性能更高。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Comparison of intrusion detection algorithm detection rat</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >攻击类型</th><th align="center" valign="middle"  colspan="3"  >检测率 (%)</th></tr></thead><tr><td align="center" valign="middle" >模拟退火微粒群SOM算法</td><td align="center" valign="middle" >微粒群SOM算法</td><td align="center" valign="middle" >SOM算法</td></tr><tr><td align="center" valign="middle" >DOS</td><td align="center" valign="middle" >98.27</td><td align="center" valign="middle" >89.34</td><td align="center" valign="middle" >81.56</td></tr><tr><td align="center" valign="middle" >Probe</td><td align="center" valign="middle" >97.95</td><td align="center" valign="middle" >90.41</td><td align="center" valign="middle" >79.83</td></tr><tr><td align="center" valign="middle" >R2L</td><td align="center" valign="middle" >99.15</td><td align="center" valign="middle" >92.88</td><td align="center" valign="middle" >86.54</td></tr><tr><td align="center" valign="middle" >U2R</td><td align="center" valign="middle" >98.74</td><td align="center" valign="middle" >92.61</td><td align="center" valign="middle" >83.71</td></tr></tbody></table></table-wrap><p>表2. 入侵检测算法检测率对比</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Comparison of intrusion detection algorithm false positive rat</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >攻击类型</th><th align="center" valign="middle"  colspan="4"  >误报率 (%)</th></tr></thead><tr><td align="center" valign="middle" >模拟退火微粒群SOM算法</td><td align="center" valign="middle"  colspan="2"  >微粒群SOM算法</td><td align="center" valign="middle" >SOM算法</td></tr><tr><td align="center" valign="middle" >DOS</td><td align="center" valign="middle"  colspan="2"  >1.29</td><td align="center" valign="middle" >1.56</td><td align="center" valign="middle" >2.13</td></tr><tr><td align="center" valign="middle" >Probe</td><td align="center" valign="middle"  colspan="2"  >0.97</td><td align="center" valign="middle" >1.78</td><td align="center" valign="middle" >2.65</td></tr><tr><td align="center" valign="middle" >R2L</td><td align="center" valign="middle"  colspan="2"  >1.35</td><td align="center" valign="middle" >2.49</td><td align="center" valign="middle" >3.77</td></tr><tr><td align="center" valign="middle" >U2R</td><td align="center" valign="middle"  colspan="2"  >1.41</td><td align="center" valign="middle" >2.01</td><td align="center" valign="middle" >2.87</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表3. 入侵检测算法误报率对比</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> Comparison of intrusion detection algorithm false negative rat</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >攻击类型</th><th align="center" valign="middle"  colspan="5"  >漏报率 (%)</th></tr></thead><tr><td align="center" valign="middle"  colspan="2"  >模拟退火微粒群SOM算法</td><td align="center" valign="middle"  colspan="2"  >微粒群SOM算法</td><td align="center" valign="middle" >SOM算法</td></tr><tr><td align="center" valign="middle"  colspan="2"  >DOS</td><td align="center" valign="middle"  colspan="2"  >1.73</td><td align="center" valign="middle" >10.66</td><td align="center" valign="middle" >18.44</td></tr><tr><td align="center" valign="middle"  colspan="2"  >Probe</td><td align="center" valign="middle"  colspan="2"  >2.05</td><td align="center" valign="middle" >9.59</td><td align="center" valign="middle" >20.17</td></tr><tr><td align="center" valign="middle"  colspan="2"  >R2L</td><td align="center" valign="middle"  colspan="2"  >0.85</td><td align="center" valign="middle" >7.12</td><td align="center" valign="middle" >13.46</td></tr><tr><td align="center" valign="middle"  colspan="2"  >U2R</td><td align="center" valign="middle"  colspan="2"  >1.26</td><td align="center" valign="middle" >7.39</td><td align="center" valign="middle" >16.29</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表4. 入侵检测算法漏报率对比</p></sec></sec><sec id="s8"><title>6. 小结</title><p>针对云安全问题，设计入侵检测系统模型，并介绍了关键模块的功能。在检测分析模块中，利用SOM神经网络算法无监督自组织的特性实现入侵检测功能。针对SOM算法的不足，提出基于模拟退火微粒群算法优化的SOM算法，并通过仿真实验验证了优化算法的高效性，提高入侵检测性能。</p></sec><sec id="s9"><title>文章引用</title><p>赵津,朱有产. 云环境下基于SOM神经网络的入侵检测方法研究Research on Intrusion Detection Method Based on SOM Neural Network in Cloud Environment[J]. 计算机科学与应用, 2016, 06(08): 505-513. http://dx.doi.org/10.12677/CSA.2016.68063</p></sec><sec id="s10"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.18380-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">冯登国, 张敏, 张妍, 徐震. 云计算安全研究[J]. 软件学报, 2011, 22(1): 71-83.</mixed-citation></ref><ref id="hanspub.18380-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">刘伉伉. 云计算环境下入侵检测技术的研究[D]: [硕士学位论文]. 济南: 山东师范大学, 2015.</mixed-citation></ref><ref id="hanspub.18380-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">刘鹏. 云计算[M]. 第二版. 北京: 电子工业出版社, 2011.</mixed-citation></ref><ref id="hanspub.18380-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Mazzariello, C., Bifulco, R. and Canonico, R. (2010) Integrating a Network IDS into an Open Source Cloud Computing Environment. 2010 Sixth International Conference on Information Assurance and Security (IAS), Atlanta, 23-25 August 2010, 265-270.</mixed-citation></ref><ref id="hanspub.18380-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">谭秀辉. 自组织神经网络在信息处理中的应用研究[D]: [博士学位论文]. 太原: 中北大学, 2015.</mixed-citation></ref><ref id="hanspub.18380-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">王芳. 粒子群模拟退火融合算法及其在物流配送问题中的应用[D]: [硕士学位论文]. 上海: 华东理工大学, 2010.</mixed-citation></ref><ref id="hanspub.18380-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Shi, Y. and Eberhart, R.C. (1998) A Modified Particle Swarm Optimizer. The 1998 IEEE International Conference on Evolutionary Computation Proceedings, Anchorage, 4-9 May 1998, 69-73. &lt;br&gt;http://dx.doi.org/10.1109/icec.1998.699146</mixed-citation></ref><ref id="hanspub.18380-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Shi, Y. and Eberhart, R.C. (1999) Empirical Study of Particle Swarm Optimization. Proceedings of the 1999 Congress on Evolutionary Computation, Washington DC, 6-9 July 1999, 1945-1950.  
&lt;br&gt;http://dx.doi.org/10.1109/CEC.1999.785511</mixed-citation></ref><ref id="hanspub.18380-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">吴剑, 冯国瑞. 基于模拟退火和半监督聚类的入侵检测方法[J]. 计算机与现代化, 2014(11): 27-30.</mixed-citation></ref><ref id="hanspub.18380-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">涂晓芝, 颜学峰, 钱锋. PSO-SOM分类判别研究及其应用[J]. 高技术通讯, 2006, 16(10): 1014-1018.</mixed-citation></ref><ref id="hanspub.18380-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">KDD Cup 1999 Data Set (1999). http://archive.ics.uci.edu/ml/databases/kddcup99/kddcup99.html</mixed-citation></ref><ref id="hanspub.18380-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">飞思科技产品研发中心. MATLAB6.5辅助神经网络分析与设计[M]. 北京: 电子工业出版社, 2003.</mixed-citation></ref><ref id="hanspub.18380-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">侯梅菊. 计算智能技术在入侵检测系统中的应用研究[D]: [硕士学位论文]. 重庆: 重庆大学, 2012.</mixed-citation></ref></ref-list></back></article>