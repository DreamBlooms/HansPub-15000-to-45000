<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SA</journal-id><journal-title-group><journal-title>Statistics and Application</journal-title></journal-title-group><issn pub-type="epub">2325-2251</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SA.2020.93037</article-id><article-id pub-id-type="publisher-id">SA-35895</article-id><article-categories><subj-group subj-group-type="heading"><subject>SA20200300000_83416444.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于Stacking集成学习算法的疾病风险预测——以妊娠糖尿病为例
  Disease Risk Prediction Based on Stacking Integrated Learning Algorithm—Using Data of Gestational Diabetes
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>周</surname><given-names>颂奇</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>白</surname><given-names>颖</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>东北大学秦皇岛分校数学与统计学院，河北 秦皇岛</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>08</day><month>05</month><year>2020</year></pub-date><volume>09</volume><issue>03</issue><fpage>345</fpage><lpage>356</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  
    本文共采用了四种缺失值处理方案进行缺失值处理，并根据六种机器学习算法分析比较出了这四种缺失值处理方案的优劣程度。对于每一种机器学习算法，本文都给出了为防止算法模型过拟合所应采取的措施，并通过比较各算法预测结果的F1值，筛选出合适的算法模型作为Stacking集成学习算法的初级学习器，然后选取逻辑回归算法为该集成学习算法的次级学习器。最终，通过调节逻辑回归算法的参数得到精度高、泛化能力强的基于妊娠期糖尿病患病风险预测问题的Stacking集成学习算法模型。
    In this paper, four missing value processing schemes are used for missing value processing, and the pros and cons of these four missing value processing schemes are compared and analyzed based on six machine learning algorithms. For each machine learning algorithm, this article gives the measures that should be taken to prevent the algorithm model from overfitting. By comparing the F1 values of the prediction results of each algorithm, the appropriate algorithm model is selected as the primary of the Stacking integrated learning algorithm. The learner then selects the logistic regression algorithm as the secondary learner of the ensemble learning algorithm. Finally, by adjusting the parameters of the logistic regression algorithm, a Stacking ensemble learning al-gorithm model based on the risk prediction problem of gestational diabetes is obtained with high accuracy and generalization ability. 
  
 
</p></abstract><kwd-group><kwd>KNN，MLPC，GBDT，随机森林，SVM，朴素贝叶斯，Stacking, KNN</kwd><kwd> MLPC</kwd><kwd> GBDT</kwd><kwd> Random Forest</kwd><kwd> SVM</kwd><kwd> Naive Bayes</kwd><kwd> Stacking</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于Stacking集成学习算法的疾病风险预测<sup> </sup></title><p>——以妊娠糖尿病为例</p><p>周颂奇<sup>*</sup>，白颖</p><p>东北大学秦皇岛分校数学与统计学院，河北 秦皇岛</p><disp-formula id="hanspub.35895-formula23"><graphic xlink:href="//html.hanspub.org/file/4-2580612x5_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2020年5月11日；录用日期：2020年5月25日；发布日期：2020年6月2日</p><disp-formula id="hanspub.35895-formula24"><graphic xlink:href="//html.hanspub.org/file/4-2580612x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文共采用了四种缺失值处理方案进行缺失值处理，并根据六种机器学习算法分析比较出了这四种缺失值处理方案的优劣程度。对于每一种机器学习算法，本文都给出了为防止算法模型过拟合所应采取的措施，并通过比较各算法预测结果的F1值，筛选出合适的算法模型作为Stacking集成学习算法的初级学习器，然后选取逻辑回归算法为该集成学习算法的次级学习器。最终，通过调节逻辑回归算法的参数得到精度高、泛化能力强的基于妊娠期糖尿病患病风险预测问题的Stacking集成学习算法模型。</p><p>关键词 :KNN，MLPC，GBDT，随机森林，SVM，朴素贝叶斯，Stacking</p><disp-formula id="hanspub.35895-formula25"><graphic xlink:href="//html.hanspub.org/file/4-2580612x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-2580612x8_hanspub.png" /> <img src="//html.hanspub.org/file/4-2580612x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>2017年国家二孩政策全面放开后，随着高龄、前次妊娠糖尿病史的妇女怀孕，妊娠糖尿病的发病率进一步增加，至此，妊娠糖尿病已经成为孕期最常见的并发症之一，形势极其严峻。所以，通过妊娠糖尿病的早筛查、早发现、早干预，减缓、阻止妊娠糖尿病的发生和发展具有重要的意义。本文利用天池精准医疗大赛复赛提供的数据集，对数据集中体检者的各项体检项目指标进行分析，并运用若干种机器学习算法进行结果的分析与比较，最终得到预测精准度颇高的Stacking集成学习算法模型。</p></sec><sec id="s4"><title>2. 数据处理</title><sec id="s4_1"><title>2.1. 数据归一化</title><p>由于不同评价指标具有不同的量纲，这样会影响到数据分析的结果，为了消除指标之间量纲的影响，需要进行数据归一化处理，使各指标处于同一数量级，方便进行对比评价。本文采用离差标准化，即根据</p><p>x * = x − min max − min (1)</p><p>对原始数据进行归一化处理 [<xref ref-type="bibr" rid="hanspub.35895-ref1">1</xref>]。</p></sec><sec id="s4_2"><title>2.2. 冗余数据清洗</title><p>去掉id、孕前身高和体重特征。</p></sec><sec id="s4_3"><title>2.3. 缺失值处理</title><p>由于样本数量较小，且缺失值占比较大。各特征中缺失值所占比例(见图1)。若删除全部缺失值则会导致样本数量过小而无法进行数据分析与建模。故此次需要对缺失值进行填补。为比较不同处理方法对预测结果的影响，将分别采取以下方案进行预测精度的对比。</p><p>图1. 标准试验系统结果曲线</p><p>方案一：随机森林填补缺失值 [<xref ref-type="bibr" rid="hanspub.35895-ref2">2</xref>]</p><p>由于样本缺失较多，完整特征比较少，少数完整特征难以估计整体数据分布。因此，采用遍历所有特征的方式，从缺失值最少的特征开始填补(需填补缺失值较少的特征所需要的准确信息也较少)。填补一个特征时，其它特征用中位数暂时代替，每完成一次预测，就将预测值放回到原本的特征矩阵中。</p><p>方案二：KNN填补缺失值</p><p>将样本数据做归一化处理之后，进行k近邻填补，用相邻样本的中位数填补缺失值。</p><p>方案三：不做处理(将缺失值替换为−1)</p><p>方案四：分特征处理缺失值</p><p>缺失值比例大于10%的特征不做处理(将缺失值替换为−1)；缺失值比例小于10%特征用中位数填充。</p></sec><sec id="s4_4"><title>2.4. 异常值剔除</title><p>根据拉以达准则，剔除所有特征中标准差在 ( − 3 δ , 3 δ ) 之外的所有样本数据 [<xref ref-type="bibr" rid="hanspub.35895-ref3">3</xref>]。</p></sec><sec id="s4_5"><title>2.5. 相关性检验</title><p>相关系数 r 的绝对值大小表示两个指标之间的相关强度，为了定量分析两个指标之间的关系，可以通过计算相关系数来进行分析。相关系数 r 的计算公式如下：其中 x , y 为任意两个指标。</p><p>r = ∑ i = 1 850 ( x i − x &#175; ) ( y i − y &#175; ) ∑ i = 1 850 ( x i − x &#175; ) 2 ∑ i = 1 850 ( y i − y &#175; ) 2 (2)</p><p>相关系数 r 的绝对值大小表示两个指标之间的相关强度，具体关系如下表1：</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Correlation intensity tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >0.7 &lt; | r | &lt; 1</th><th align="center" valign="middle" >0.4 &lt; | r | &lt; 0.7</th><th align="center" valign="middle" >0.2 &lt; | r | &lt; 0.4</th><th align="center" valign="middle" >| r | &lt; 0.2</th></tr></thead><tr><td align="center" valign="middle" >高度相关</td><td align="center" valign="middle" >中等相关</td><td align="center" valign="middle" >低度相关</td><td align="center" valign="middle" >极低相关</td></tr></tbody></table></table-wrap><p>表1. 相关强度表</p><p>根据上述相关系数公式，得到相关性最高的10个指标间的相关性强度(见图2)。从图2中可以看出，除对角线是自相关外，大部分指标之间都极低相关，个别低度相关。</p><p>图2. 部分指标间相关系数图</p></sec></sec><sec id="s5"><title>3. 特征选择</title><sec id="s5_1"><title>3.1. 去掉方差较小的特征</title><p>方差阈值是特征选择的一个简单方法，即去掉那些方差没有达到阈值的特征 [<xref ref-type="bibr" rid="hanspub.35895-ref4">4</xref>]。<sup> </sup></p></sec><sec id="s5_2"><title>3.2. 单变量特征选择</title><p>单变量特征提取的原理是分别计算每个特征的某个统计指标，根据该指标来选取特征。本文选择根据卡方统计量排名前K个的特征。通过卡方检验得到的特征之间是最可能独立的随机变量，因此这些特征的区分度很高。</p></sec></sec><sec id="s6"><title>4. 建模调参</title><sec id="s6_1"><title>4.1. KNN算法</title><p>KNN算法的核心思想为若一个样本在特征空间中的K个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别，并具有这个类别上样本的特性。在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类。</p><sec id="s6_1_1"><title>4.1.1. KNN算法流程 [<xref ref-type="bibr" rid="hanspub.35895-ref5">5</xref>]</title><p>① 计算测试数据与各个训练数据之间的距离；</p><p>② 按照距离的递增关系进行排序；</p><p>③ 选取距离最小的K个点；</p><p>④ 确定前K个点所在类别的出现频率；</p><p>⑤ 返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p></sec><sec id="s6_1_2"><title>4.1.2. KNN具体参数设定</title><p>① K值的选择</p><p>K值的选择会对算法的结果产生重大影响。K值较小意味着只有与输入实例较近的训练实例才会对预测结果起作用，但容易发生过拟合；如果K值较大，优点是可以减少学习的估计误差，但缺点是学习的近似误差增大，这时与输入实例较远的训练实例也会对预测起作用，使预测发生错误。本文采用网络搜索和4折交叉验证的方式，按从小到大的方式选择出较合适的K值。</p><p>② 距离度量的方式</p><p>有很多距离度量的方式，本问采用最常归的欧式距离，即对于两个n维向量 x 和 y ，两者的欧式距离定义为：</p><p>D ( x , y ) = ( x 1 − y 1 ) 2 + ( x 2 − y 2 ) 2 + ⋯ + ( x n − y n ) 2 (3)</p><p>③ 分类决策规则</p><p>该算法中的分类决策规则往往是多数表决，即由输入实例的K个最临近的训练实例中的多数类别决定输入实例的类别。</p></sec><sec id="s6_1_3"><title>4.1.3. 防止过拟合措施</title><p>由于K值较小容易发生过拟合，因此，我们尽量控制K值的大小，使K值尽量偏大一些。通过网络搜索与4折交叉验证，我们最终选择K为9。</p></sec><sec id="s6_1_4"><title>4.1.4. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表2：</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.641</td><td align="center" valign="middle" >0.663</td><td align="center" valign="middle" >0.675</td><td align="center" valign="middle" >0.686</td></tr></tbody></table></table-wrap><p>表2. F1数值表</p></sec></sec><sec id="s6_2"><title>4.2. 多层感知器分类器 [<xref ref-type="bibr" rid="hanspub.35895-ref6">6</xref>]</title><p>多层感知器分类器(MLPC)是基于前馈人工神经网络(ANN)的分类器，由多个节点层组成。每个层完全连接到网络中的下一层。输入层中的节点表示输入数据。所有其他节点，通过输入与节点的权重w和偏置b的线性组合，并应用激活函数，将输入映射到输出。对于具有K + 1层的MLPC，这可以用矩阵形式写成如下：</p><p>y ( x ) = f k ( ⋯ f 2 ( w 2 T f 1 ( w 1 T x + b 1 ) + b 2 ) ⋯ + b k ) (4)</p><sec id="s6_2_1"><title>4.2.1. MLPC算法流程</title><p>① 网络初始化：根据系统的输入确定网络的输入层节点的个数，隐含层节点的个数，输出层节点的个数，输入层、隐含层和输出层神经元之间的连接权值 w i j ， w j k 。初始化隐含层阈值、输出层阈值，给定学习速率和激励函数；</p><p>② 隐含层输出计算：根据权值和阈值，计算隐含层输出H；</p><p>③ 输出层输出计算：根据隐含层输出H，连接权值和阈值，计算MLPC神经网络预测输出O；</p><p>④ 误差计算：根据网络预测输出和期望输出，计算网络预测误差；</p><p>⑤ 权值更新：根据网络预测误差更新连接权重；</p><p>⑥ 阈值更新：根据误差更新节点阈值；</p><p>⑦ 判断算法迭代是否结束，若没有结束则返回步骤②。</p></sec><sec id="s6_2_2"><title>4.2.2. 防止过拟合措施</title><p>控制神经网络的复杂度的方法有很多种，如：隐层的个数、每个隐层中的单元个数与正则化(alpha)。神经网络的调参首先应创建一个大到足以过拟合的网络，确保这个网络可以对任务进行学习，然后通过缩小网络或者增大alpha来增强正则化，从而提高泛化性能。</p></sec><sec id="s6_2_3"><title>4.2.3. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表3 (此时F1为多次输出取平均值)：</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.760</td><td align="center" valign="middle" >0.781</td><td align="center" valign="middle" >0.797</td><td align="center" valign="middle" >0.803</td></tr></tbody></table></table-wrap><p>表3. F1数值表</p></sec></sec><sec id="s6_3"><title>4.3. 随机森林</title><p>随机森林指的是利用多棵树对样本进行训练并预测的一种分类器，是一种重要的基于Bagging的集成学习方法 [<xref ref-type="bibr" rid="hanspub.35895-ref7">7</xref>]。</p><sec id="s6_3_1"><title>4.3.1. RF算法流程</title><p>① 给定训练集S，测试集T，特征维数F。确定参数：使用到的CART的数量t，每棵树的深度d，每个节点使用到的特征数量f，终止条件：节点上最少样本数s，节点上最少的信息增益m。</p><p>对于第 1 − t 棵树， i = 1 − t ：</p><p>② 从S中有放回的抽取大小和S一样的训练集S (i)，作为根节点的样本，从根节点开始训练。</p><p>③ 如果当前节点上达到终止条件，则设置当前节点为叶子节点，由于是分类问题，该叶子节点的预测输出为当前节点样本集合中数量最多的那一类c (j)，概率p为c (j)占当前样本集的比例。然后继续训练其他节点。如果当前节点没有达到终止条件，则从F维特征中无放回的随机选取f维特征。利用这f维特征，寻找分类效果最好的一维特征k及其阈值th，当前节点上样本第k维特征小于th的样本被划分到左节点，其余的被划分到右节点。继续训练其他节点。</p><p>④ 重复②③直到所有节点都训练过了或者被标记为叶子节点。</p><p>⑤ 重复②③④直到所有CART都被训练过。</p></sec><sec id="s6_3_2"><title>4.3.2. 防止过拟合措施</title><p>由于随机性的引入，使得随机森林不容易过拟合，同时，也使得随机森林有很好的抗噪声能力。max_features决定每棵树的随机性大小，调为较小值时可以再降低过拟合风险。除此之外，还可调整max_depth参数进行预剪枝 [<xref ref-type="bibr" rid="hanspub.35895-ref7">7</xref>]。</p></sec><sec id="s6_3_3"><title>4.3.3. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表4 (此时F1为多次输出取平均值)：</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.748</td><td align="center" valign="middle" >0.772</td><td align="center" valign="middle" >0.799</td><td align="center" valign="middle" >0.810</td></tr></tbody></table></table-wrap><p>表4. F1数值表</p></sec></sec><sec id="s6_4"><title>4.4. 梯度提升树</title><p>梯度提升采用连续的方式构造树，每棵树都试图纠正前一棵树的错误。背后的主要思想是合并许多简单的模型。</p><sec id="s6_4_1"><title>4.4.1. GBDT算法流程</title><p>① 在训练数据集所在的输入空间中，递归的将每个区域划分为两个子区域并决定每个子区域上的输出值，构建二叉决策树，选择最优切分变量与切分点 s ，求解 j</p><p>min j , s [ min c 1 ∑ x i ∈ R 1 ( j , s ) ( y i − c 1 ) 2 + min c 2 ∑ x i ∈ R 2 ( j , s ) ( y i − c 2 ) 2 ]</p><p>遍历变量 j ，对固定的切分变量 j 扫描切分点 s ，选择使得上式达到最小值的对 ( j , s ) 。</p><p>② 用选定的对 ( j , s ) 划分区域并决定相应的输出值：</p><p>R 1 ( j , s ) = x | x ( j ) ≤ s , R 2 ( j , s ) = x | x ( j ) &gt; s</p><p>c ^ m = 1 N ∑ x 1 ∈ R m ( j , s ) y i , x ∈ R m , m = 1 , 2 (5)</p><p>③ 继续对两个子区域调用步骤①和②，直至满足停止条件。</p><p>④ 将输入空间划分为 M 个区域 R 1 , R 2 , ⋯ , R M , 生成决策树。</p></sec><sec id="s6_4_2"><title>4.4.2. 防止过拟合措施</title><p>由于增大learning_rate或n_estimators都会增加模型的复杂度，所以，降低树的最大深度和学习率都能降低过拟合。</p></sec><sec id="s6_4_3"><title>4.4.3. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表5：</p><table-wrap id="table5" ><label><xref ref-type="table" rid="table5">Table 5</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.787</td><td align="center" valign="middle" >0.809</td><td align="center" valign="middle" >0.817</td><td align="center" valign="middle" >0.805</td></tr></tbody></table></table-wrap><p>表5. F1数值表</p></sec></sec><sec id="s6_5"><title>4.5. 支持向量机</title><p>支持向量机它在解决小样本、非线性及高维模式识别中表现出许多特有的优势，支持向量机方法是根据有限的样本信息在模型的复杂性(即对特定训练样本的学习精度)和学习能力(即无错误地识别任意样本的能力)之间寻求最佳折中，以期获得最好的推广能力。</p><sec id="s6_5_1"><title>4.5.1. SVM算法原理</title><p>SVM方法是通过一个非线性映射p，把样本空间映射到一个高维乃至无穷维的特征空间中(Hilbert空间)，使得在原来的样本空间中非线性可分的问题转化为在特征空间中的线性可分的问题。简单地说，就是升维和线性化。升维，就是把样本向高维空间做映射，一般情况下这会增加计算的复杂性，甚至会引起“维数灾难”，因而人们很少问津。但是作为分类等问题来说，很可能在低维样本空间无法线性处理的样本集，在高维特征空间中却可以通过一个线性超平面实现线性划分。一般的升维都会带来计算的复杂化，SVM方法巧妙地解决了这个难题：应用核函数的展开定理，就不需要知道非线性映射的显式表达式。由于是在高维特征空间中建立线性学习机，所以与线性模型相比，不但几乎不增加计算的复杂性，而且在某种程度上避免了“维数灾难” [<xref ref-type="bibr" rid="hanspub.35895-ref5">5</xref>]。</p></sec><sec id="s6_5_2"><title>4.5.2. 防止过拟合措施</title><p>解决过拟合的办法是为SVM引入了松弛变量 ξ ，将SVM公式的约束条件改为：</p><p>y i ( w T x i + b ) ≥ 1 − ξ i , i = 1 , ⋯ , n (6)</p><p>同时，降低惩罚因子C的参数值能有效避免过拟合。</p></sec><sec id="s6_5_3"><title>4.5.3. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表6 (此时F1为多次输出取平均值)：</p><table-wrap id="table6" ><label><xref ref-type="table" rid="table6">Table 6</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.776</td><td align="center" valign="middle" >0.805</td><td align="center" valign="middle" >0.805</td><td align="center" valign="middle" >0.808</td></tr></tbody></table></table-wrap><p>表6. F1数值表</p></sec></sec><sec id="s6_6"><title>4.6. 朴素贝叶斯</title><sec id="s6_6_1"><title>4.6.1. 朴素贝叶斯算法原理 [<xref ref-type="bibr" rid="hanspub.35895-ref6">6</xref>]</title><p>朴素贝叶斯法是基于贝叶斯定理与特征条件独立假设的分类方法，基于一个简单的假定，即给定目标值时属性之间相互条件独立。对于给定的训练数据集，首先基于特征条件独立假设学习输入/输出的联合概率分布；然后基于此模型，对给定的输入 x ，利用贝叶斯定理求出后验概率最大的输出 y 。通过求解后验概率，并依据后验概率的值来进行分类。</p></sec><sec id="s6_6_2"><title>4.6.2. 欠拟合原因分析</title><p>由于需要知道先验概率，且先验概率很多时候取决于假设，假设的模型可以有很多种，因此在某些时候会由于假设的先验模型的原因导致预测效果不佳。并且，我们是通过先验和数据来决定后验的概率从而决定分类，所以分类决策存在一定的错误率。除此之外，朴素贝叶斯对输入数据的表达形式很敏感，因此，本文方案中将用−1替换缺失值的策略改为用100替换。</p></sec><sec id="s6_6_3"><title>4.6.3. 结果分析</title><p>针对缺失值的不同处理方案，分别得到结果见表7 (此时F1为多次输出取平均值)：</p><table-wrap id="table7" ><label><xref ref-type="table" rid="table7">Table 7</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.432</td><td align="center" valign="middle" >0.411</td><td align="center" valign="middle" >0.659</td><td align="center" valign="middle" >0.511</td></tr></tbody></table></table-wrap><p>表7. F1数值表</p></sec></sec><sec id="s6_7"><title>4.7. 缺失值处理方案分析与算法选择</title><sec id="s6_7_1"><title>4.7.1. 缺失值处理方案分析</title><p>针对不同机器学习算法，已求出每种缺失值处理方案相对应的F1值。从图3中可以定性地观察出每种处理方案的好坏。</p><p>图3. 四种处理方案下算法F1值折现图</p><p>为定量分析出不同处理方案的优劣性，并且，考虑到朴素贝叶斯算法的拟合效果极差，下面我们将分别求出不同算法的F1均值与去掉贝叶斯算法后的F1均值。见表8。</p><p>从表中数据，我们可以得出结论：方案四处理缺失值效果最好，其次是方案三，方案一处理缺失值的效果最差。即：分特征处理 &gt; 不做处理 &gt; KNN填充 &gt; 随机森林填充。</p><table-wrap id="table8" ><label><xref ref-type="table" rid="table8">Table 8</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >方案类别</th><th align="center" valign="middle" >方案一</th><th align="center" valign="middle" >方案二</th><th align="center" valign="middle" >方案三</th><th align="center" valign="middle" >方案四</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.690</td><td align="center" valign="middle" >0.707</td><td align="center" valign="middle" >0.759</td><td align="center" valign="middle" >0.738</td></tr><tr><td align="center" valign="middle" >去掉Beyes后F1均值</td><td align="center" valign="middle" >0.742</td><td align="center" valign="middle" >0.766</td><td align="center" valign="middle" >0.779</td><td align="center" valign="middle" >0.784</td></tr></tbody></table></table-wrap><p>表8. F1数值表</p></sec><sec id="s6_7_2"><title>4.7.2. 算法选择</title><p>利用方案四中处理缺失值的方法进行缺失值处理，然后，绘制出每种机器学习算法的ROC曲线与AUC示意图(图4) [<xref ref-type="bibr" rid="hanspub.35895-ref8">8</xref>]。朴素贝叶斯算法拟合效果极差，在这里我们直接去除该算法，用余下的五种算法继续做优化。</p></sec></sec><sec id="s6_8"><title>4.8. Stacking集成算法</title><p>当训练数据很多时，一种更强大的策略是使用“学习法”，即通过另一个学习器来进行结合。Stacking是学习法的典型代表。这里我们把个体学习器称为初级学习器，用于结合的学习器称为次级学习器。</p><p>图4. ROC-AUC曲线图</p><sec id="s6_8_1"><title>4.8.1. Stacking算法原理 [<xref ref-type="bibr" rid="hanspub.35895-ref9">9</xref>]</title><p>① 对于Model1，将训练集D分为k份，对于每一份，用剩余数据集训练模型，然后预测出这一份的结果。</p><p>② 重复上面步骤，直到每一份都预测出来。得到次级模型的训练集。</p><p>③ 得到k份测试集，平均后得到次级模型的测试集。</p><p>④ 对于Model2、Model3…重复以上情况，得到M维数据。</p><p>⑤ 选定次级模型，进行训练预测。本文最后一层用的是逻辑回归模型。</p></sec><sec id="s6_8_2"><title>4.8.2. 算法集成</title><p>将上述筛选出的五种机器学习算法作为初级学习器，选择逻辑回归算法作为次级处理器进行stacking集成学习(见图5)。</p><p>这里，为避免过拟合，提高模型的泛化能力，我们给LR的参数C一个较小数值，调整完逻辑回归模型参数后就最终得到了基于妊娠期糖尿病患病风险预测问题的Stacking集成学习算法。多次预测求得F1平均值为0.833，预测精度为0.858，AUC值为0.93。该模型对应的ROC曲线如图6。各种算法对应的F1值见表9。</p><table-wrap id="table9" ><label><xref ref-type="table" rid="table9">Table 9</xref></label><caption><title> F1 value tabl</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >算法</th><th align="center" valign="middle" >KNN</th><th align="center" valign="middle" >MLPC</th><th align="center" valign="middle" >RF</th><th align="center" valign="middle" >GBDT</th><th align="center" valign="middle" >SVM</th><th align="center" valign="middle" >Stacking</th></tr></thead><tr><td align="center" valign="middle" >F1</td><td align="center" valign="middle" >0.686</td><td align="center" valign="middle" >0.803</td><td align="center" valign="middle" >0.816</td><td align="center" valign="middle" >0.805</td><td align="center" valign="middle" >0.808</td><td align="center" valign="middle" >0.833</td></tr></tbody></table></table-wrap><p>表9. F1数值表</p><p>图5. Stacking集成学习示意图</p><p>图6. Stacking的ROC-AUC曲线图</p></sec></sec></sec><sec id="s7"><title>5. 结论</title><p>1) 通过对比分析四种不同的缺失值处理方案，得到了适合于解决该问题数据缺失值的处理方案，即用分特征的方案处理，将缺失值比例大于10%的特征缺失值替换为−1，缺失值比例小于10%特征用中位数填充，得到的处理效果最好。</p><p>2) 本文以倾向于提高模型的泛化能力为目标，对于每一种机器学习算法，均根据算法本身的特点分别采用了适合于各自算法的避免过拟合的方法。并且通过对图像和数据的分析筛选出了能较好预测出该问题结果的算法模型，为Stacking集成学习算法做准备。</p><p>3) 以KNN、MLPC、GBDT、随机森林、SVM等算法作为初级学习器，以逻辑回归算法作为次级处理器的Stacking集成学习算法模型通过适当调整逻辑回归模型的参数，最终使得基于妊娠期糖尿病预测问题的Stacking集成学习算法模型在保证模型具有较强泛化能力的条件下进一步提升了糖尿病患病预测结果的可靠性。</p></sec><sec id="s8"><title>文章引用</title><p>周颂奇,白 颖. 基于Stacking集成学习算法的疾病风险预测——以妊娠糖尿病为例Disease Risk Prediction Based on Stacking Integrated Learning Algorithm—Using Data of Gestational Diabetes[J]. 统计学与应用, 2020, 09(03): 345-356. https://doi.org/10.12677/SA.2020.93037</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.35895-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">学习建模-个人信用风险评估模型实例[EB/OL].  
&lt;br&gt;https://www.zhihu.com/tardis/sogou/art/37355703, 2018-06-20.</mixed-citation></ref><ref id="hanspub.35895-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">张良均, 王璐, 谭立云, 等. Python数据分析与挖掘实战[M]. 北京: 机械工业出版社, 2016: 23.</mixed-citation></ref><ref id="hanspub.35895-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">动脉网蛋壳研究院. 大数据 + 医疗: 科学时代的思维与决策开本[M]. 北京: 机械工业出版社, 2019: 21.</mixed-citation></ref><ref id="hanspub.35895-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">酒卷隆治, 里洋平. 数据分析实战[M]. 北京: 民邮电出版社, 2017.</mixed-citation></ref><ref id="hanspub.35895-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">周志华. 机器学习[M]. 北京: 清华大学出版社, 2016: 73.</mixed-citation></ref><ref id="hanspub.35895-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">李航. 统计学习方法[M]. 北京: 清华大学出版社, 2012: 35.</mixed-citation></ref><ref id="hanspub.35895-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Harrington, P. 机器学习实战[M]. 北京: 人民邮电出版社, 2013: 15.</mixed-citation></ref><ref id="hanspub.35895-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">萨扬•穆霍帕迪亚. Python高级数据分析[M]. 北京: 机械工业出版社, 2019: 23.</mixed-citation></ref><ref id="hanspub.35895-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">stacking算法原理及代码[EB/OL].  
&lt;br&gt;https://www.cnblogs.com/dudumiaomiao/p/9692935.html, 2018-09-23.</mixed-citation></ref></ref-list></back></article>