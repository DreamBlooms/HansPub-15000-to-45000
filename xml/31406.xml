<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2019.97155</article-id><article-id pub-id-type="publisher-id">CSA-31406</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20190700000_62191315.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  基于蜻蜓算法的改进研究
  Study on Improvement of Dragonfly Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>胡</surname><given-names>小平</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>周</surname><given-names>非无</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>湖南科技大学先进矿山装备教育部工程研究中心，湖南 湘潭</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>11</day><month>07</month><year>2019</year></pub-date><volume>09</volume><issue>07</issue><fpage>1377</fpage><lpage>1386</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   针对标准蜻蜓算法中存在的收敛速度慢，易于局部解的缺点，提出一种改进的蜻蜓算法(IDA)。该算法提出两种非线性函数，分别动态调节列队权重和聚集权重的收敛因子，提高算法平衡全局搜索和局部开发的能力；灰狼机制有较强的局部开发能力和收敛速度，融合灰狼机制以提高蜻蜓算法的收敛精度和速度；算法迭代后期种群多样性下降，引入末位淘汰策略来提高种群的多样性，使算法跳出局部解。通过6个复杂的测试函数对改进算法进行仿真，并和其他三个算法进行对比。结果表明，IDA算法的收敛精度、收敛速度和稳定性都优于其他三个算法。 An improved dragonfly algorithm (IDA) was proposed to overcome the disadvantages of the standard dragonfly algorithm, such as slow convergence rate and easy to be trapped in local solutions. In order to improve the ability of balancing exploration and exploitation, IDA algorithm proposes two kinds of nonlinear function that can dynamically adjust the convergence factors of the alignment weight and cohesion weight. Grey Wolf mechanism has good performance in exploitation and rate of convergence. In order to improve the convergence accuracy and speed of the dragonfly algorithm, the grey Wolf mechanism was incorporated into the dragonfly algorithm. In the late iteration of the algorithm, the diversity of the population decreases, which makes the algorithm easy to fall into the local solution. The lowliest place elimination series is introduced to improve the diversity of the population and make the algorithm jump out of the local solution. The improved algorithm is simulated with six complex functions and compared with the other three algorithms. The results show that the convergence accuracy, convergence speed and stability of IDA algorithm are better than the other three algorithms. 
  
 
</p></abstract><kwd-group><kwd>蜻蜓算法，非线性函数，灰狼机制，末位淘汰, Dragonfly Algorithm</kwd><kwd> Nonlinear Function</kwd><kwd> Grey Wolf Mechanism</kwd><kwd> Lowliest Place Elimination Series</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>基于蜻蜓算法的改进研究<sup> </sup></title><p>胡小平，周非无<sup>*</sup></p><p>湖南科技大学先进矿山装备教育部工程研究中心，湖南 湘潭</p><p><img src="//html.hanspub.org/file/19-1541460x1_hanspub.png" /></p><p>收稿日期：2019年7月4日；录用日期：2019年7月18日；发布日期：2019年7月25日</p><disp-formula id="hanspub.31406-formula27"><graphic xlink:href="//html.hanspub.org/file/19-1541460x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>针对标准蜻蜓算法中存在的收敛速度慢，易于局部解的缺点，提出一种改进的蜻蜓算法(IDA)。该算法提出两种非线性函数，分别动态调节列队权重和聚集权重的收敛因子，提高算法平衡全局搜索和局部开发的能力；灰狼机制有较强的局部开发能力和收敛速度，融合灰狼机制以提高蜻蜓算法的收敛精度和速度；算法迭代后期种群多样性下降，引入末位淘汰策略来提高种群的多样性，使算法跳出局部解。通过6个复杂的测试函数对改进算法进行仿真，并和其他三个算法进行对比。结果表明，IDA算法的收敛精度、收敛速度和稳定性都优于其他三个算法。</p><p>关键词 :蜻蜓算法，非线性函数，灰狼机制，末位淘汰</p><disp-formula id="hanspub.31406-formula28"><graphic xlink:href="//html.hanspub.org/file/19-1541460x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2019 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/19-1541460x8_hanspub.png" /> <img src="//html.hanspub.org/file/19-1541460x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>蜻蜓算法(Dragonfly Algorithm)是由Seyedali Mirjalili在2015年提出的一种新兴群智能算法 [<xref ref-type="bibr" rid="hanspub.31406-ref1">1</xref>] 。在自然界中，蜻蜓有种独特而罕见的群集行为，蜻蜓聚集只有两个目的：捕猎和迁徙。作者以此为出发点提出两个新的概念：静态和动态。静态(狩猎)，群指蜻蜓群体分成多个小群体分布在不同区域进行来回飞行，类似于全局搜索；动态(迁徙)，是指蜻蜓形成亚群，并向一个方向长距离迁徙，有利于局部开发。DA算法自提出，因良好的性能引来众多学者的广泛关注。Lang Xu等 [<xref ref-type="bibr" rid="hanspub.31406-ref2">2</xref>] 提出用差分进化改进蜻蜓算法并且应用于多级彩色图像分割；Mohamed Abdel-Basset等 [<xref ref-type="bibr" rid="hanspub.31406-ref3">3</xref>] 把二进制版的蜻蜓算法(BDA)来解决0~1背包问题， Suresh V等 [<xref ref-type="bibr" rid="hanspub.31406-ref4">4</xref>] 利用DA算法求解太阳能静态经济调度问题的方法。Babayigit等 [<xref ref-type="bibr" rid="hanspub.31406-ref5">5</xref>] 提出用DA算法实现低旁瓣的CCAAs设计方法。Jafari，Mohammad等 [<xref ref-type="bibr" rid="hanspub.31406-ref6">6</xref>] 利用DA算法对具有准三角剖分的正交各向异性无限板进行优化。Mohammed Amroune等 [<xref ref-type="bibr" rid="hanspub.31406-ref7">7</xref>] 用蜻蜓算法对电力系统电压稳定进行评估。Gururaghav Raman等 [<xref ref-type="bibr" rid="hanspub.31406-ref8">8</xref>] 将蜻蜓算法(DA)应用于光伏系统全局最大功率点(GMPP)跟踪。</p><p>虽然该算法有一定的优势，但存在易陷入局部解和收敛速度慢的缺点，针对这些缺点，Sree R. K. S.等 [<xref ref-type="bibr" rid="hanspub.31406-ref9">9</xref>] 提出融合粒子群优化算法中的记忆功能，加强蜻蜓个体间的信息交流，以提高算法的收敛精度；Hossam M. Zawbaa等人 [<xref ref-type="bibr" rid="hanspub.31406-ref10">10</xref>] 提出基于极值学习机(ELM)的混合蜻蜓算法；Sayed Gehad Ismail [<xref ref-type="bibr" rid="hanspub.31406-ref11">11</xref>] 等人提出将混沌映射嵌入到搜索迭代蜻蜓算法中；吴伟民等 [<xref ref-type="bibr" rid="hanspub.31406-ref12">12</xref>] 提出加强个体信息交流的算法，增强个体之间的信息交流。</p><p>为改善蜻蜓算法容易陷入局部解，收敛速度慢的缺点，本文提两种非线性函数分别动态调节列队和聚集权重的收敛因子，以提高算法的稳定性。将灰狼机制和末位淘汰策略融入到算法当中，改善易于局部解和收敛速度慢的缺点。提出一种有着较强的全局搜索能力和局部开发能力，且能较好的调节全局搜索和局部开发的改进蜻蜓算法(IDA)。</p></sec><sec id="s4"><title>2. 蜻蜓基本算法</title><p>Reynoldz [<xref ref-type="bibr" rid="hanspub.31406-ref13">13</xref>] 在文章中指出三个关于蜂群体行为准则：分离度、对齐度与聚合度。分离度是指相邻个体间保持适当距离，以免碰撞；对齐度是指速度和方向与相邻个体对齐；聚合度是指个体飞向相邻区域中心。蜻蜓主要目标都是生存，作者Seyedali Mirjalili提出五个因素影响蜻蜓算法的位置更新：分离，列队，聚集，捕食，逃离。数学模型如下：</p><p>1) 分离，由公式得：</p><p>S i = − ∑ j = 1 N X − X j (1)</p><p>X为蜻蜓当前所在位置，Xj表示与X蜻蜓相邻的第j个蜻蜓的位置，N表示与X蜻蜓相邻的个体总数。</p><p>2) 列队，由公式得：</p><p>A i = ∑ j = 1 N V j N (2)</p><p>Vj指第j个相邻个体的速度</p><p>3) 聚集，由公式得：</p><p>C i = ∑ j = 1 N X j N − X (3)</p><p>X是当前个体位置。</p><p>4) 捕食，指蜻蜓向猎物靠拢，由公式得：</p><p>F i = X + − X (4)</p><p>X<sup>+</sup>指食物的位置。</p><p>5) 逃离，指蜻蜓逃离天敌，由公式得：</p><p>E i = X − + X (5)</p><p>X<sup>−</sup>指天敌的位置，食物源位置是算法当前最优位置，天敌位置是当前最差的位置。通过以上五种纠正方式的组合形成了蜻蜓的行为，作者通过模仿PSO算法提出步长向量、位置向量来描述蜻蜓的位置。</p><p>6) 步长向量更新由公式得：</p><p>Δ X t + 1 = ( s S i + a A i + c C i + f F i + e E i ) + ω Δ X t (6)</p><p>S<sub>i</sub>，A<sub>i</sub>，C<sub>i</sub>，F<sub>i</sub>，E<sub>i</sub>指上文的5中纠正方式， ω 为惯性权重，而s，a，c，f，e分别指的是分离权重，列队权重，聚集权重，捕食权重，天敌权重，t表示当前迭代次数。</p><p>7) 位置向量更新由公式得：</p><p>当N &gt; 0时 X t + 1 = X t + Δ X t + 1 (7)</p><p>当N = 0时，利用随机游走(Levy flight)在搜索空间中飞行。</p><p>X t + 1 = X t + L e ′ v y ( d ) &#215; X t (8)</p></sec><sec id="s5"><title>3. 灰狼算法</title><p>灰狼优化算法(GWO) [<xref ref-type="bibr" rid="hanspub.31406-ref14">14</xref>] 是一种群智能算法，通过模拟灰狼群的社会等级制度和捕食方式达到优化的目的。灰狼群体社会的统治阶层比较严格，可以分为四个等级： α 、 β 、 δ 、 ω 。灰狼小组的领导者被称为 α ，为最优解；灰狼等级体系中的第二级是 β ，为次有解； ω 可以满足整个群体，为普通狼，保持群体的主导架构，为第四层。第三层是 δ ，第三优解。以 α 、 β 、<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/19-1541460x29_hanspub.png" xlink:type="simple"/></inline-formula>为引导，对目标物进行搜寻。设</p><p>灰狼种群个数为M，则第i只灰狼在d维度的位置记为 X i = ( X i 1 , X i 2 , X i 3 , ⋯ , X i d ) 。</p><p>在狩猎时，灰狼的位置更新公式如下：</p><p>X i ( t + 1 ) = X p ( t ) − A ⋅ | C ⋅ X p ( t ) − X i ( t ) | (9)</p><p>A = 2 a ⋅ r 1 − a (10)</p><p>C = 2 r 2 (11)</p><p>a = 2 − t / t max (12)</p><p>式中，t为当前迭代次数，A和C为协同系数向量，X<sub>p</sub>为猎物的位置，X为灰狼个体的位置。a为A系数的收敛因子， r 1 ， r 2 表示[0, 1]间的随机数，t<sub>max</sub>为最大迭代次数</p><p>由于猎物的具体位置未知，可根据灰狼算法中的等级制度，以 α 、 β 、 δ 进行引导使狼群接近猎物，灰狼群体可依据 α 、 β 、 δ 进行位置更新，公式如下：</p><p>X 1 = X α − A ⋅ | C ⋅ X α − X | (13)</p><p>X 2 = X β − A ⋅ | C ⋅ X β − X | (14)</p><p>X 3 = X δ − A ⋅ | C ⋅ X δ − X | (15)</p><p>X ( t + 1 ) = X 1 + X 2 + X 3 3 (16)</p><p>根据(16)对灰狼个体进行更新。</p></sec><sec id="s6"><title>4. 蜻蜓算法的改进</title><sec id="s6_1"><title>4.1. 非线性调节收敛因子</title><p>在前文提到作者把蜻蜓群体运动分为两种状态：静态和动态。静态类似于全局搜索，动态类似于局部探索。为了保证DA算法的收敛性，蜻蜓算法通过调节惯性权重和其他五种权重，使得算法从全局搜索过渡到局部开发。并且，在静态群体中蜻蜓以捕食小型飞行猎物，有较高的聚集权重和较低的列队权重。而在动态群体中，有较低的聚集权重和较高的列队权重 [<xref ref-type="bibr" rid="hanspub.31406-ref1">1</xref>] 。标准算法中聚集、列队权重更新方式的数学表达式如下：</p><p>a = c = 2 ⋅ r 3 ⋅ m y _ q (17)</p><p>m y _ q = 0.1 − ( f max − f min ) ⋅ t T max / 2 (18)</p><p>my_q为列队权重和聚集权重的收敛因子，呈线性变化，当my_q &lt; 0时，my_q = 0， r 3 为为[0, 1]之间的随机数。为了提高算法平衡全局搜索和局部开发的能力，当处于静态群体时赋予高列队权重和较低的聚集权重；在动态群体时应赋予低列队权重和较高的聚集权重。因此提出两种非线性函数动态控制列队和聚集权重的收敛因子，数学表达式如下：</p><p>m y _ q a = ( f max − f min ) ⋅ b ⋅ ( cos ( t ⋅ π T max ) − q ⋅ ( t T max ) 2 + 1 ) (19)</p><p>m y _ q c = 2 π ⋅ ( f max − f min ) ⋅ ( arccos ( 2 ⋅ t T max − 1 ) − π 2 ) (20)</p><p>T<sub>max</sub>为最大迭代次数，常数b，q为非线性调节系数，t为当前迭代，f<sub>max</sub>，f<sub>min</sub>分别为a，c取值的上限和下限。当my_qa &lt; 0，my_qc &lt; 0时，则my_qa = 0，my_qc = 0。</p><p>用my_qa调节列队权重的收敛因子和用my_qc调节聚集权重的收敛因子。通过两种不同的非线性函数分别调节列队权重和聚集权重的收敛因子，使得算法平衡全局搜索和局部开发的能力得到提高。</p></sec><sec id="s6_2"><title>4.2. 融合灰狼机制</title><p>灰狼算法中的灰狼机制具有结构简单、需要调节的参数少、容易实现的特点，使灰狼机制在局部开发和收敛速度有着良好的性能 [<xref ref-type="bibr" rid="hanspub.31406-ref15">15</xref>] [<xref ref-type="bibr" rid="hanspub.31406-ref16">16</xref>] [<xref ref-type="bibr" rid="hanspub.31406-ref17">17</xref>] 。为提高DA算法的收敛精度和收敛速度，将灰狼机制和蜻蜓算法相结合，即公式(16)。对位置向量更新公式(7)提出改进，公式如下：</p><p>X t + 1 = X 1 + X 2 + X 3 3 + Δ X t + 1 (21)</p><p>在改进的位置向量更新公式中，包含了个体当前的位置和群体历史最优位置，也包括了蜻蜓算法的步长向量，使得改进后的算法不但融合灰狼机制较强的局部开发能力又能保留了标准DA算法较强的全局搜索能力，并且提高算法的收敛速度。</p></sec><sec id="s6_3"><title>4.3. 末位淘汰策略</title><p>在自然界中适者生存不适者淘汰，鲍义东 [<xref ref-type="bibr" rid="hanspub.31406-ref18">18</xref>] 等提出，为了增强狼群的竞争力，引入新的狼，淘汰生存能力较弱的一些狼，以此提高狼群的生存能力。由此受到启发，提出末位淘汰策略来提高算法的多样性。</p><p>随着迭代的进行，蜻蜓之间的差异性较小，容易使算法陷入局部解。为了提高算法的多样性，避免陷入局部解，本文引入末位淘汰策略。末位淘汰策略是以蜻蜓个体的适应度值为衡量标准，以适应度值按升序排列，淘汰排在末位的k个蜻蜓个体，同时随机产生k个新的蜻蜓个体，以保持蜻蜓群体数量的稳定。淘汰蜻蜓的个数影响种群的多样性，k值较大时，种群的多样性较大，有利于全局搜索，但不利于算法收敛。k值较小，有利于局部开发。通过对k值大小的控制来保证算法的收敛性。k的值变化如下公式。</p><p>k = k max − ( k max − k min ) * ( t T max ) (22)</p><p>k值为整数，k<sub>max</sub>为淘汰的最大值，k<sub>min</sub>为淘汰的最小值。</p></sec><sec id="s6_4"><title>4.4. 算法实现</title><p>IMDA具体步骤如下：</p><p>步骤1：初始化参数，包括种群大小N、维度d、最大迭代次数Max，五种行为权重和惯性权重，邻域半径；</p><p>步骤2：随机初始化位置向量X和步长向量 Δ X ；</p><p>步骤3：t &gt; 1，更新s, a, c, f, e权重和惯性权重，其中列队权重的收敛因子和聚集权重收敛因子分别由4.1章提出的公式(19) (20)进行更新；</p><p>步骤4：计算个体适应度值，更新食物和天敌的位置；</p><p>步骤5：利用公式(1)~(5)更新S, A, C, F, E；</p><p>步骤6：若存在至少一个相邻个体，则通过(6)公式更新步长向量，用4.2章提出的融合灰狼机制策略更新位置向量，即公式(21)。若不存在相邻个体，则以公式(8)更新位置向量；</p><p>步骤7：计算种群个体的适应度值，适应度值以升序排列；</p><p>步骤8：用4.3章提出的末位淘汰策略对种群进行淘汰和随机生成。淘汰排在后k位的蜻蜓个体，同时随机生成k个蜻蜓个体；</p><p>步骤9：t = t + 1，如果t &lt; Max，返回步骤3。</p></sec></sec><sec id="s7"><title>5. 实验结果及分析</title><p>为了进一步验证IDA的优化效果，选取两组具有不同特征的基准测试函数，从不同角度对IDA算法的性能进行基准测试，测试函数分为两组:单模态函数(f1~f4)、多模态函数(f5~f6)。将IDA与标准蜻蜓算法进行对比测试。基准测试函数的具体情况如下表1。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Benchmark function tes</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >函数</th><th align="center" valign="middle" >维数</th><th align="center" valign="middle" >取值范围</th><th align="center" valign="middle" >理论值</th></tr></thead><tr><td align="center" valign="middle" >TF 1 ( x ) = ∑ i = 1 n x i 2</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >TF 2 ( x ) = ∑ i = 1 n | x i | + ∏ i = 1 n | x i |</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−10,10]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >TF 3 ( x ) = ∑ i = 1 n ( ∑ j − 1 i x j ) 2</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >TF 4 ( x ) = max i { | x i | , 1 ≤ i ≤ n }</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−100,100]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >TF5 ( x ) = − 20 exp ( − 0.2 1 n ∑ i = 1 n x i 2 ) − exp ( 1 n ∑ i = 1 n cos ( 2 π x i ) ) + 20 + e</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−32,32]</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >TF6 ( x ) = 0.1 { sin 2 ( 3 π x 1 ) + ∑ i = 1 n ( x i − 1 ) 2 [ 1 + sin 2 ( 3 π x 1 + 1 ) ]                             + ( x n − 1 ) 2 [ 1 + sin 2 ( 2 π x n ) ] + ∑ i = 1 n u ( x i , 10 , 100 , 4 ) }</td><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[−50,50]</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap><p>表1. 基准函数测试</p><p>为保证实验的公平性，统一实验环境，实验环境为Windows 7操作系统。所用MATLAB为2016a版本。为了更加合理比较算法的性能，此处选用标准DA算法外还选取了一个改进的蜻蜓算法，差分进化的蜻蜓算法(DEDA) [<xref ref-type="bibr" rid="hanspub.31406-ref19">19</xref>] ，遗传算法(GA)，GDA是指4.2章提出的融合灰狼机制的蜻蜓算法。分别对6个基准测试函数进行求解。并从最优解、平均解、标准差三个方面对各算法进行评价。共同参数设置：种群规模N = 40，Max = 500。IDA中的f<sub>max</sub> = 0.1，f<sub>min</sub> = 0，k<sub>max</sub> = 0.7 * N，k<sub>min</sub> = 0.25 * N差分进化的蜻蜓算法F = 0.5，CR = 0.1。经典遗传算法p<sub>c</sub> = 0.8，p<sub>m</sub> = 0.05。由于算法具有随机性，本实验对每个测试函数均运行20次。各算法对6个基准测试函数的计算结果统计如表2所示。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Test data of each algorith</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >函数</th><th align="center" valign="middle" >算法</th><th align="center" valign="middle" >最优解</th><th align="center" valign="middle" >平均解</th><th align="center" valign="middle" >标准差</th></tr></thead><tr><td align="center" valign="middle"  rowspan="5"  >TF1</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >0.149</td><td align="center" valign="middle" >1.092</td><td align="center" valign="middle" >0.918</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >1.790e−08</td><td align="center" valign="middle" >0.012</td><td align="center" valign="middle" >0.032</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >6.212e−24</td><td align="center" valign="middle" >8.236e−10</td><td align="center" valign="middle" >1.901e−09</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >4.023e−44</td><td align="center" valign="middle" >9.213e−39</td><td align="center" valign="middle" >3.805e−38</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >3.429e−122</td><td align="center" valign="middle" >2.923e−110</td><td align="center" valign="middle" >1.526e−109</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >TF2</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >0.987</td><td align="center" valign="middle" >3.343</td><td align="center" valign="middle" >4.728</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >0.022</td><td align="center" valign="middle" >1.818</td><td align="center" valign="middle" >1.497</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >1.051e−08</td><td align="center" valign="middle" >4.232e−4</td><td align="center" valign="middle" >1.335e−3</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >9.701e−23</td><td align="center" valign="middle" >2.758e−21</td><td align="center" valign="middle" >5.106e−21</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >5.764e−64</td><td align="center" valign="middle" >7.902e−61</td><td align="center" valign="middle" >1.659e−60</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >TF3</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >1.180e+03</td><td align="center" valign="middle" >2.806e+03</td><td align="center" valign="middle" >1.280e+03</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >0.796</td><td align="center" valign="middle" >2.137e+02</td><td align="center" valign="middle" >4.291e+02</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >1.080e−12</td><td align="center" valign="middle" >4.962e−07</td><td align="center" valign="middle" >1.401e−06</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >7.067e−37</td><td align="center" valign="middle" >4.962e−32</td><td align="center" valign="middle" >1.057e−31</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >1.240e−62</td><td align="center" valign="middle" >7.228e−54</td><td align="center" valign="middle" >2.729e−53</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >TF4</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >2.317</td><td align="center" valign="middle" >9.613</td><td align="center" valign="middle" >5.918</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >0.327</td><td align="center" valign="middle" >1.895</td><td align="center" valign="middle" >1.012</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >1.037e−05</td><td align="center" valign="middle" >0.025</td><td align="center" valign="middle" >0.055</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >1.380e−17</td><td align="center" valign="middle" >1.374e−15</td><td align="center" valign="middle" >2.342e−15</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >2.463e−25</td><td align="center" valign="middle" >6.908e−19</td><td align="center" valign="middle" >3.072e−18</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >TF5</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >1.065</td><td align="center" valign="middle" >7.351</td><td align="center" valign="middle" >6.981</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >0.127</td><td align="center" valign="middle" >2.197</td><td align="center" valign="middle" >0.950</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >1.546e−10</td><td align="center" valign="middle" >0.057</td><td align="center" valign="middle" >0.258</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >4.441e−13</td><td align="center" valign="middle" >9.948e−10</td><td align="center" valign="middle" >3.548e−9</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >4.440e−15</td><td align="center" valign="middle" >7.105e−15</td><td align="center" valign="middle" >1.509e−14</td></tr><tr><td align="center" valign="middle"  rowspan="5"  >TF6</td><td align="center" valign="middle" >GA</td><td align="center" valign="middle" >2.349</td><td align="center" valign="middle" >11.584</td><td align="center" valign="middle" >9.797</td></tr><tr><td align="center" valign="middle" >DA</td><td align="center" valign="middle" >0.012</td><td align="center" valign="middle" >1.167</td><td align="center" valign="middle" >1.408</td></tr><tr><td align="center" valign="middle" >DEDA</td><td align="center" valign="middle" >1.091e−6</td><td align="center" valign="middle" >0.370</td><td align="center" valign="middle" >1.362</td></tr><tr><td align="center" valign="middle" >GDA</td><td align="center" valign="middle" >1.680e−06</td><td align="center" valign="middle" >4.954e−03</td><td align="center" valign="middle" >2.213e−02</td></tr><tr><td align="center" valign="middle" >IDA</td><td align="center" valign="middle" >2.351e−08</td><td align="center" valign="middle" >4.071e−07</td><td align="center" valign="middle" >1.879e−07</td></tr></tbody></table></table-wrap><p>表2. 各算法的测试数据</p><p>1) 最优解和平均解反应算法的收敛精度，由表2的测试数据可得，GDA算法在求解 TF1~TF4单峰基准测试函数时，寻优能力优于标准蜻蜓算法、GA算法和DEDA算法,对于复杂的多峰的基准测试函数优化效果虽不及单峰基准测试函数，但寻优能力依旧优于标准蜻蜓算法、GA算法和DEDA算法,说明引入灰狼机制有利于提高算法的收敛精度。IDA算法是在GDA算法基础上引入末位淘汰策略，由表2的测试数据可知，无论是单峰基准测试函数还是多峰基准测试函数，IDA的寻优能力优于GDA，说明末位淘汰策略的引入有利于提高算法的多样性，使得算法跳出出局部解。这说明算法经过三方面的改进，使得算法收敛精度和解的整体质量有很大提高，而DA、GA和DEDA都存在过早收敛。</p><p>图1. 不同测试函数下的平均收敛曲线图。(a) TF1测试函数的平均收敛曲线图；(b) TF2测试函数的平均收敛曲线图；(c) TF3测试函数的平均收敛曲线图；(d) TF4测试函数的平均收敛曲线图；(e) TF5测试函数的平均收敛曲线图；(f) TF6测试函数的平均收敛曲线图</p><p>2) 标准差反应算法的稳定性，对于基准测试函数TF1~TF4来说，IDA比标准函数优化精度分别高出110，61，54，19个数量级。对于多峰函数TF5和TF6的优化效果也分别提高了15和7个数量级，优于其他三个算法，说明改进后的算法在整体上稳定性强，抗“早熟”能力优于其他三个算法。</p><p>3) 从图1(a)~(f)可以看出无论是多峰基准测试函数还是单峰基准测试函数，IDA算法的收敛速度比其他三个算法都要快，这说明融合灰狼算法有利于提高算法的收敛速度。</p><p>总体来说，无论是对于多峰函数还是单峰函数，相同条件下IDA所得解的质量皆优于其他三个算法。很大程度上改善了标准算法中收敛精度不高、收敛速度慢和易“早熟”的缺点。</p></sec><sec id="s8"><title>6. 结论</title><p>针对标准DA算法中的易于陷入局部解、收敛精度低和收敛速度较慢的缺点，本文提出三点改进：基于非线性函数调节列队和聚集权重的收敛因子，提高算法对全局搜索和局部开发的调节能力；融合灰狼机制改进的位置向量，提高算法的收敛精度的同时又能提高算法的收敛速度；末位淘汰策略，淘汰适应度值排在末位的k个蜻蜓个体，同时引入k个新的个体，以此提高了算法的多样性。通过6个基准测试函数仿真结果可知，IDA算法在整体上，函数优化问题的结果优于DA标准算法和其他两个算法。下一步研究目标是应用到机器人路径规划上。</p></sec><sec id="s9"><title>基金项目</title><p>国家自然科学基金No. 61572185。</p></sec><sec id="s10"><title>文章引用</title><p>胡小平,周非无. 基于蜻蜓算法的改进研究 Study on Improvement of Dragonfly Algorithm[J]. 计算机科学与应用, 2019, 09(07): 1377-1386. https://doi.org/10.12677/CSA.2019.97155</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.31406-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Mirjalili, S. (2016) Dragonfly Algorithm: A New Meta-Heuristic Optimization Technique for Solving Single-Objective, Discrete, and Multi-Objective Problems. Neural Computing and Applications, 27, 1053-1073.  
&lt;br&gt;https://doi.org/10.1007/s00521-015-1920-1</mixed-citation></ref><ref id="hanspub.31406-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Xu, L., Jia, H., Lang, C., et al. (2019) A Novel Method for Multilevel Color Image Segmentation Based on Dragonfly Algorithm and Differential Evolution. IEEE Access. &lt;br&gt;https://doi.org/10.1109/ACCESS.2019.2896673</mixed-citation></ref><ref id="hanspub.31406-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Abdel-Basset, M., Luo, Q., Miao, F., et al. (2017) Solving 0-1 Knapsack Problems by Binary Dragonfly Algorithm. In: International Conference on Intelligent Computing, Springer, Cham, 491-502.  
&lt;br&gt;https://doi.org/10.1007/978-3-319-63315-2_43</mixed-citation></ref><ref id="hanspub.31406-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Suresh, V. and Sreejith, S. (2017) Generation Dispatch of Combined Solar Thermal Systems Using Dragonfly Algorithm. Computing, 99, 59-80. &lt;br&gt;https://doi.org/10.1007/s00607-016-0514-9</mixed-citation></ref><ref id="hanspub.31406-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Babayigit, B. (2017) Synthesis of Concentric Circular Antenna Arrays Using Dragonfly Algorithm. International Journal of Electronics, 105, 784-793. &lt;br&gt;https://doi.org/10.1080/00207217.2017.1407964</mixed-citation></ref><ref id="hanspub.31406-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Jafari, M. and Bayati Chaleshtari, M.H. (2017) Using Dragonfly Algorithm for Optimization of Orthotropic Infinite Plates with a Quasi-Triangular Cut-Out. European Journal of Mechanics A/Solids, 66, 1-14.  
&lt;br&gt;https://doi.org/10.1016/j.euromechsol.2017.06.003</mixed-citation></ref><ref id="hanspub.31406-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Amroune, M., Bouktir, T. and Musirin, I. (2018) Power System Voltage Stability Assessment Using a Hybrid Approach Combining Dragonfly Optimization Algorithm and Support Vector Regression. Ara-bian Journal for Science &amp; Engineering, 43, 3023-3036. &lt;br&gt;https://doi.org/10.1007/s13369-017-3046-5</mixed-citation></ref><ref id="hanspub.31406-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Raman, G., Manickam, C., et al. (2016) Dragonfly Algorithm Based Global Maximum Power Point Tracker for Photovoltaic Systems. Advances in Swarm Intelligence, Springer International Publishing, Berlin.  
&lt;br&gt;https://doi.org/10.1007/978-3-319-41000-5_21</mixed-citation></ref><ref id="hanspub.31406-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Sree, R.K.S. and Murugan, S. (2017) Memory Based Hybrid Dragonfly for Numerical Optimization Problems. Expert Systems with Application, 83, 63-78. &lt;br&gt;https://doi.org/10.1016/j.eswa.2017.04.033</mixed-citation></ref><ref id="hanspub.31406-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Zawbaa, H.M., Emary, E., Salam, M.A., et al. (2016) A Hybrid Dragonfly Al-gorithm with Extreme Learning Machine for Prediction. International Symposium on Innovations in Intelligent Systems and Applica-tions, Sinaia, 2-5 August 2016.</mixed-citation></ref><ref id="hanspub.31406-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Ismail, S.G., Alaa, T. and Ella, H.A. (2018) Chaotic Dragonfly Algorithm: An Improved Me-taheuristic Algorithm for Feature Selection. Applied Intelligence, 49, 188-205.</mixed-citation></ref><ref id="hanspub.31406-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">吴伟民, 吴汪洋, 林志毅, 李泽熊, 方典禹. 基于增强个体信息交流的蜻蜓算法[J]. 计算机工程与应用, 2017, 53(4): 10-14.</mixed-citation></ref><ref id="hanspub.31406-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Reynolds, C.W. (1987) Flocks, Herds, and Schools: A Distributed Behavioral Model. ACM, New York.  
&lt;br&gt;https://doi.org/10.1145/37401.37406</mixed-citation></ref><ref id="hanspub.31406-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Mirjalili, S., Mirjalili, S.M. and Lewis, A. (2014) Grey Wolf Optimizer. Advances in Engineering Software, 69, 46-61.  
&lt;br&gt;https://doi.org/10.1016/j.advengsoft.2013.12.007</mixed-citation></ref><ref id="hanspub.31406-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Malik, M.R.S., Mohideen, E.R. and Ali, L. (2016) Weighted Distance Grey Wolf Optimizer for Global Optimization Problems. IEEE International Conference on Computational Intelligence &amp; Computing Research, Madurai, 10-12 December 2015. &lt;br&gt;https://doi.org/10.1109/ICCIC.2015.7435714</mixed-citation></ref><ref id="hanspub.31406-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Long, W., Liang, X., Cai, S., et al. (2016) A Modified Augmented Lagrangian with Improved Grey Wolf Optimization to Constrained Optimization Problems. Neural Computing and Applications, 28, 1-18.  
&lt;br&gt;https://doi.org/10.1007/s00521-016-2357-x</mixed-citation></ref><ref id="hanspub.31406-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Zhang, S., Luo, Q. and Zhou, Y. (2017) Hybrid Grey Wolf Optimizer Using Elite Opposition-Based Learning Strategy and Simplex Method. International Journal of Computational Intelligence and Applications, 16, Article ID: 1750012.  
&lt;br&gt;https://doi.org/10.1142/S1469026817500122</mixed-citation></ref><ref id="hanspub.31406-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">鲍义东, 夏栋梁, 赵伟艇. 基于凸策略优胜劣汰蚁群算法的机器人路径规划[J]. 计算机系统应用, 2015, 24(8): 122-127.</mixed-citation></ref><ref id="hanspub.31406-ref19"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">赵齐辉, 杜兆宏, 刘升, 陈思静. 差分进化的蜻蜓算法[J]. 微电子学与计算机, 2018, 35(7): 101-105.</mixed-citation></ref></ref-list></back></article>