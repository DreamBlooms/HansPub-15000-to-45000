<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2017.76067</article-id><article-id pub-id-type="publisher-id">CSA-21093</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20170600000_45631072.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  改进灰狼优化算法的研究与分析
  Analysis and Research of Improved Grey Wolf Optimization Algorithm
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>白</surname><given-names>媛</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>京荣</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>展</surname><given-names>之婵</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>兰州交通大学数理学院，甘肃 兰州</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>772736235@qq.com(白媛)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>14</day><month>06</month><year>2017</year></pub-date><volume>07</volume><issue>06</issue><fpage>562</fpage><lpage>571</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   灰狼优化算法是一种模拟灰狼捕食行为的群智能优化算法。基于灰狼捕食行为的包围、追捕、攻击三个阶段提出了一种小生境灰狼优化算法(Niche Grey Wolf Optimization, GWO)。该算法利用基本GWO计算各灰狼的适应度值，以小生境半径作为限制，比较灰狼个体的适应度值，通过对适应度值较差的灰狼个体施以罚函数，来提高全局搜索能力。分析了NGWO算法的时间复杂度，利用NGWO对5个基准函数进行了测试，并与基本灰狼算法和粒子群算法的结果进行了比较，表明NGWO算法无论是在收敛速度还是求解精度上均有明显改善。 Grey wolf optimization algorithm is a new swarm intelligence algorithm with simulation of grey wolf predation behavior. Based on the encircling, hunting and attacking of grey wolves prey be-havior in nature, a niche grey wolf optimization (NGWO) algorithm is proposed. In this algorithm, calculating the fitness of individual using basic GWO, to poor fitness with penalty function through compares fitness of individual with niche radius as limit, thus improve the global search ability. From the above, according to algorithmic flows analyze the time complexity of NGWO. Moreover, tested the NGWO by 5 benchmark functions and compared with two intelligent algorithms, grey wolf optimization and particle swarm optimization. Simulation results indicate that the algorithm has significant improvement in aspects of convergence speed and accuracy.
    
  
 
</p></abstract><kwd-group><kwd>灰狼优化算法，小生境，罚函数，函数优化, Grey Wolf Optimization Algorithm</kwd><kwd> Niche</kwd><kwd> Penalty Function</kwd><kwd> Functions Optimization</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>改进灰狼优化算法的研究与分析<sup> </sup></title><p>白媛，陈京荣，展之婵</p><p>兰州交通大学数理学院，甘肃 兰州</p><p>收稿日期：2017年6月4日；录用日期：2017年6月20日；发布日期：2017年6月23日</p><disp-formula id="hanspub.21093-formula70"><graphic xlink:href="http://html.hanspub.org/file/8-1540774x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>灰狼优化算法是一种模拟灰狼捕食行为的群智能优化算法。基于灰狼捕食行为的包围、追捕、攻击三个阶段提出了一种小生境灰狼优化算法(Niche Grey Wolf Optimization, GWO)。该算法利用基本GWO计算各灰狼的适应度值，以小生境半径作为限制，比较灰狼个体的适应度值，通过对适应度值较差的灰狼个体施以罚函数，来提高全局搜索能力。分析了NGWO算法的时间复杂度，利用NGWO对5个基准函数进行了测试，并与基本灰狼算法和粒子群算法的结果进行了比较，表明NGWO算法无论是在收敛速度还是求解精度上均有明显改善。</p><p>关键词 :灰狼优化算法，小生境，罚函数，函数优化</p><disp-formula id="hanspub.21093-formula71"><graphic xlink:href="http://html.hanspub.org/file/8-1540774x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2017 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="http://image.hanspub.org:8080\Html/htmlimages\1-2890033x\e70a10f1-7c93-45ea-9603-062237856e4b.png" /><img src="http://image.hanspub.org:8080\Html\htmlimages\1-2890033x\e898c85e-ffc4-45c9-b817-14224a4d6960.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>大自然中物种会因为不同的任务而表现出不同的社会行为，在过去的几十年中，因模仿动物的某种行为方式而产生了多种仿生智能算法。最早的仿生算法是由Holland教授在1975年提出的遗传算法 [<xref ref-type="bibr" rid="hanspub.21093-ref1">1</xref>] (Genetic Algorithms, GA)，其模拟自然界生物自然选择和遗传原理，通过个体间的选择、交叉、变异等操作实现优化问题的求解。1992年Dorigo提出的蚁群算法 [<xref ref-type="bibr" rid="hanspub.21093-ref2">2</xref>] (Ant Colony Optimization, ACO)其灵感源于蚂蚁在寻找食物过程中发现路径的行为。粒子群算法 [<xref ref-type="bibr" rid="hanspub.21093-ref3">3</xref>] [<xref ref-type="bibr" rid="hanspub.21093-ref4">4</xref>] (Particle Swarm Optimization, PSO)是Kennedy于1995年模拟鸟群飞行觅食过程中位置和速度改变提出的一种智能优化算法。2002年李晓磊等人提出了根据鱼群觅食、聚群和追尾行为的人工鱼群算法 [<xref ref-type="bibr" rid="hanspub.21093-ref5">5</xref>] (Artificial Fish-Swarm Algorithm, AFSA)。近几年，随着计算机技术的不断发展一系列的仿生算法被提出，并在组合优化、自动控制、医疗等社会科学方面取得了良好的理论成果。</p><p>灰狼优化算法 [<xref ref-type="bibr" rid="hanspub.21093-ref6">6</xref>] (Grey Wolf Optimizer, GWO)是一种模拟灰狼捕食行为的群体智能算法，该算法最先由澳大利亚学者Mirjalili于2014年提出，根据灰狼的社会等级将包围、追捕、攻击等捕食任务分配给不同等级的灰狼群来完成捕食行为，从而实现全局优化的过程。GWO算法具有操作简单、调节参数少、编程易实现等特点。在函数优化方面，与其他群智能优化算法相比有明显的优越性。但同时也存在着易陷入局部最优、求解精度不高、收敛速度慢等缺点。魏政磊等 [<xref ref-type="bibr" rid="hanspub.21093-ref7">7</xref>] 采用计算分配值的方法提出了一种自适应搜索的灰狼求解算法从而加快算法的收敛速度；罗佳等 [<xref ref-type="bibr" rid="hanspub.21093-ref8">8</xref>] 将混沌序列方法引入初始化种群个体，给出了一种寻优性和鲁棒性更好的改进GWO算法。龙文等 [<xref ref-type="bibr" rid="hanspub.21093-ref9">9</xref>] 引入了佳点集理来初始化狼群，并用非固定多段映射罚函数法处理约束条件，利用改进GWO算法求解约束优化问题，并验证了其有效性。</p><p>灰狼算法在函数优化方面与PSO、ACA、GA相比，有着结构简单、易操作等优点，但在寻优的过程中，由于种群多样性差，从而影响收敛速度且易陷入一种局部最优的状态。根据算法存在的缺点，本文提出了一种小生境灰狼优化算法(Niche Grey Wolf Optimization, NGWO)。该算法利用基本GWO算法计算各灰狼的适应度值，当灰狼间的距离小于小生境半径时，比较灰狼个体的适应度值，通过对适应度值较差的灰狼个体施以罚函数，来提高全局搜索能力。通过对5个基准函数的测试，将结果与基本GWO算法和PSO算法进行比较，表明了该算法的优越性。</p></sec><sec id="s4"><title>2. 灰狼优化(GWO)算法</title><sec id="s4_1"><title>2.1. GWO算法原理</title><p>灰狼属于食物链顶端的食肉动物，常以群居的方式生存，且灰狼的数量一般控制在5~12只。在捕猎过程中灰狼群有着严格的社会等级制度，它们分工明确、协同合作进行捕食。在GWO算法中，领导能力最强的灰狼被记为α，主要负责捕猎(寻优)过程中的决策部分及管理狼群。剩下的灰狼个体按社会等级被依次记为β, δ和ω。</p><p>α狼是整个灰狼群在捕猎过程中的领导者，是最有智慧和能力最强的个体(即其适应度最佳、离最优值最接近的狼)；β狼和δ狼是适应度次佳的两个个体，捕猎中它们会协助α狼对灰狼群的进行管理及捕猎过程中的决策问题，同时也是α狼的候选者；剩余的狼群被定义为ω，其主要职责是平衡灰狼种群的内务关系及协助α, β, δ对猎物进行攻击。在整个捕猎过程中，首先由α狼带领狼群搜索、跟踪、接近猎物，当距离猎物的范围足够小时，β, δ狼在α的指挥下对猎物进行围攻，并召唤周围的ω狼对猎物进行攻击，当猎物移动时，狼群形成包围猎物的圈也随之移动，直至捕获猎物。</p></sec><sec id="s4_2"><title>2.2. GWO算法描述</title><p>GWO算法可以将整个捕猎的过程分为包围、追捕、攻击三个阶段 [<xref ref-type="bibr" rid="hanspub.21093-ref6">6</xref>] ，最终捕获猎物(获得全局最优解)。具体算法描述如下：</p><p>1) 包围</p><p>狼群在确定猎物的位置后，首先要对猎物进行包围，在此过程中猎物与灰狼之间的距离可表示为</p><disp-formula id="hanspub.21093-formula72"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x9_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.21093-formula73"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x10_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中为灰狼和猎物之间的距离，t为迭代次数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x11_hanspub.png" xlink:type="simple"/></inline-formula>为第t次迭代后猎物的位置(即最优解的位置)，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x12_hanspub.png" xlink:type="simple"/></inline-formula>为第t次迭代后灰狼的位置(即潜在解的位置)，A和C为系数因子，其计算公式为：</p><disp-formula id="hanspub.21093-formula74"><label>(3)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x13_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.21093-formula75"><label>(4)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x14_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中a随着迭代次数的增加从2到0呈线性递减，r<sub>1</sub>、r<sub>2</sub>为[0, 1]间的随机数。</p><p>2) 追捕</p><p>对猎物进行包围后，β, δ狼在α狼的带领下对猎物进行追捕，在追捕过程中狼群个体的位置会随猎物的逃跑改变，而后可以根据α, β, δ的更新后的位置来重新确定猎物(最优解)的位置。此阶段狼群位置更新机制如图1所示，更新方程如下：</p><disp-formula id="hanspub.21093-formula76"><label>(5)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x15_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.21093-formula77"><label>(6)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x16_hanspub.png"  xlink:type="simple"/></disp-formula><disp-formula id="hanspub.21093-formula78"><label>(7)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x17_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x18_hanspub.png" xlink:type="simple"/></inline-formula>分别表示α, β, δ狼与ω狼(其他个体)之间的距离。</p><p>3) 攻击</p><p>图1. GWO算法中灰狼位置更新图</p><p>攻击是捕猎过程的最后阶段，狼群对猎物进行攻击并捕获猎物，即得到最优解。该过程的实现主要通过式(3)中a值的递减来实现，当a的值从2线性递减0时，其对应的A的值也在区间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x20_hanspub.png" xlink:type="simple"/></inline-formula>变化。另外，当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x21_hanspub.png" xlink:type="simple"/></inline-formula>时，即A的取值范围在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x22_hanspub.png" xlink:type="simple"/></inline-formula>时，则表明狼群的下一个位置会更加接近猎物的位置；当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x23_hanspub.png" xlink:type="simple"/></inline-formula>时，狼群就会朝着远离猎物的方向分散开去，导致GWO算法失去最优解位置，从而陷入一个局部最优的过程。</p><p>灰狼优化算法</p><p>Step 1初始化<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x24_hanspub.png" xlink:type="simple"/></inline-formula>等参数以及灰狼群体<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x25_hanspub.png" xlink:type="simple"/></inline-formula>，每个灰狼的位置<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x26_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>Step 2计算每个灰狼个体的适应度值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x27_hanspub.png" xlink:type="simple"/></inline-formula>，将适应度值排列前三的灰狼个体的位置分别记为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x28_hanspub.png" xlink:type="simple"/></inline-formula>，并将适应度值最好的<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x29_hanspub.png" xlink:type="simple"/></inline-formula>记为最优解；</p><p>Step 3按照(5)式计算剩余个体ω与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x30_hanspub.png" xlink:type="simple"/></inline-formula>的距离，并根据(6~7)式更新灰狼α, β, δ和猎物的位置；</p><p>Step 4按照 (3~4)式更新参数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x31_hanspub.png" xlink:type="simple"/></inline-formula>的值；</p><p>Step 5若算法到达到最大迭代次数t，那么算法结束并输出最优解<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x32_hanspub.png" xlink:type="simple"/></inline-formula>；否则，返回Step 2。</p></sec></sec><sec id="s5"><title>3. 小生境灰狼优化(NGWO)算法</title><p>小生境是一种“物以类聚，人以群分”的自然现象，即物种总偏好于和那些与自己有共同习性的生物生活在一起，并与同类进行交配而生育后代。这样的交配方式对于物种的进化有着积极的作用。小生境原理是在每一代进化前，根据个体间的距离将种群划分成多个小生境种群，让不同小群体进行交配产生新的后代。在群智能优化算法中同样可釆用小生境原理，物种的生活习性相似度一般用适应度值或距离进行分辨。将小生境原理引入到灰狼优化算法中，采用个体间的距离对灰狼群生活习性的相似度进行分辨，通过对适应度值较差的灰狼个体施以罚函数，来实现寻优过程。</p><sec id="s5_1"><title>3.1. NGWO算法</title><p>个体间的欧式距离能反映出个体间的疏散程度，对于D维空间灰狼i的位置为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x33_hanspub.png" xlink:type="simple"/></inline-formula>，灰狼j的位置为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x34_hanspub.png" xlink:type="simple"/></inline-formula>，那么灰狼i与灰狼j之间的欧式距离为 [<xref ref-type="bibr" rid="hanspub.21093-ref10">10</xref>] [<xref ref-type="bibr" rid="hanspub.21093-ref11">11</xref>]</p><disp-formula id="hanspub.21093-formula79"><label>(8)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/8-1540774x35_hanspub.png"  xlink:type="simple"/></disp-formula><p>给出指定参数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x36_hanspub.png" xlink:type="simple"/></inline-formula>(<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x37_hanspub.png" xlink:type="simple"/></inline-formula>为小生境半径)，如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x38_hanspub.png" xlink:type="simple"/></inline-formula>，则该个体加入到小生境群体<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x39_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>小生境灰狼优化算法</p><p>Step 1初始化<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x40_hanspub.png" xlink:type="simple"/></inline-formula>等参数以及灰狼群体<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x41_hanspub.png" xlink:type="simple"/></inline-formula>，每个灰狼的位置<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x42_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>Step 2计算每个灰狼个体的适应度值f<sub>i</sub>，将适应度值排列前三的灰狼个体的位置分别记为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x43_hanspub.png" xlink:type="simple"/></inline-formula>，并将适应度值最好的<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x44_hanspub.png" xlink:type="simple"/></inline-formula>记为最优解；</p><p>Step 3按照(5)式计算剩余个体ω与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x45_hanspub.png" xlink:type="simple"/></inline-formula>的距离，并根据(6~7)式更新灰狼α, β, δ和猎物的位置；</p><p>Step 4小生境原理：根据式(8)计算灰狼个体间的距离<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x46_hanspub.png" xlink:type="simple"/></inline-formula>，当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x47_hanspub.png" xlink:type="simple"/></inline-formula>时，比较灰狼i与灰狼j的适应度值<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x48_hanspub.png" xlink:type="simple"/></inline-formula>的大小，并对其中适应度值较小的灰狼施以罚函数。即若<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x49_hanspub.png" xlink:type="simple"/></inline-formula>，则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x50_hanspub.png" xlink:type="simple"/></inline-formula>(<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x51_hanspub.png" xlink:type="simple"/></inline-formula>函数的惩罚力度由所求函数解值的大小决定)；</p><p>Step 5按照(3~4)式更新参数a, A, C的值；</p><p>Step 6若算法到达到最大迭代次数t，那么算法结束并输出最优解<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x52_hanspub.png" xlink:type="simple"/></inline-formula>；否则，返回Step 2。</p></sec><sec id="s5_2"><title>3.2. NGWO算法分析</title><p>根据算法的执行步骤，下面讨论NGWO算法时间复杂性，这里只计算每一步的运算次数。在Step 1中，对D维搜索空间下的N个灰狼进行初始化赋值需要ND次运算；在Step 2中，计算N个灰狼个体的适应度值f<sub>i</sub>需要N次运算，而适应度函数的复杂度一般是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x53_hanspub.png" xlink:type="simple"/></inline-formula>，选出适应度值前三的个体至多需要<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x54_hanspub.png" xlink:type="simple"/></inline-formula>次运算，记录最优解<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x55_hanspub.png" xlink:type="simple"/></inline-formula>其运算次数加1；在Step 3中，按照(1.5)式计算剩余个体<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x56_hanspub.png" xlink:type="simple"/></inline-formula>与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x57_hanspub.png" xlink:type="simple"/></inline-formula>的距离需要<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x58_hanspub.png" xlink:type="simple"/></inline-formula>次运算，而距离函数的复杂度是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x59_hanspub.png" xlink:type="simple"/></inline-formula>。根据(6~7)式更新α, β, δ灰狼和猎物的位置需<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x60_hanspub.png" xlink:type="simple"/></inline-formula>次运算；在Step 4的小生境原理中，计算灰狼i与灰狼j间的距离需要D次运算，比较它们适应度值大小运算次数加1，对适应度值较小的灰狼施以罚函数运算次数加1。而对于整个灰狼群而言，计</p><p>算灰狼个体间的距离至多需要<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x61_hanspub.png" xlink:type="simple"/></inline-formula>次运算；在Step5和Step6中更新<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x62_hanspub.png" xlink:type="simple"/></inline-formula>等参数的值及判断算法</p><p>是否满足终止条件，其复杂度均为常数时间。由于算法最多执行t次(t是用户设定的最大迭代次数或者是为了达到某计算精度所需的迭代次数)。因此，通过近似和简化运算，NGWO算法的时间复杂度约为</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x63_hanspub.png" xlink:type="simple"/></inline-formula>。</p></sec></sec><sec id="s6"><title>4. 仿真与分析</title><sec id="s6_1"><title>4.1. 基准函数</title><p>为了验证NGWO算法的寻优能力，本文利用5个基准函数测试了算法执行效果，并与标准GWO算法和PSO算法进行了比较，说明了NGWO算法的有效性。5个基准函数的表达式及变量范围如表1所示，其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x64_hanspub.png" xlink:type="simple"/></inline-formula>为单峰函数，只有一个全局最优解；<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x65_hanspub.png" xlink:type="simple"/></inline-formula>为多峰函数，即函数有很多极值点(对于函数而言有局部最优解)。另外，5个基准函数的理论最优解均为0。</p></sec><sec id="s6_2"><title>4.2. 实验结果与分析</title><p>利用NGWO算法对上述5个基准测试函数进行数值实验，其参数设置如下：种群规模N = 30，最大迭代次数t = 500，每个函数的维数D = 30，小生境半径<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x66_hanspub.png" xlink:type="simple"/></inline-formula>。(根据测试的多峰函数各峰值的差所决定)在PSO算法中，种群规模N = 30，最大迭代次数t = 500，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x67_hanspub.png" xlink:type="simple"/></inline-formula>，惯性权重<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x68_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x69_hanspub.png" xlink:type="simple"/></inline-formula>。每个基准函数在上述参数的设置下运行30次，记录其最优值、平均值、标准差，并与GWO、PSO的运行结果进行比较。</p><p>对于只有一个全局最优的单峰函数而言，测试结果可表明算法的寻优能力，而对于有多个极值点的多峰函数而言，测试结果可表明算法跳出局部最优值的能力。从表2可以看出，对于Sphere函数、Schwefel函数、Rastrigin函数、Griewank函数NGWO算法均能较好的找到全局最优解，且均得到了较优的平均值、标准差(标准差能反应解的离散程度，即算法求解的稳定性)，尤其是对Griewank函数算法能找到理论最优值0，而对Sphere函数其寻优精度达到了10<sup>−30</sup>；由于Step函数属于阶跃函数它由很多平滑的高地和陡脊组成，且不连续，所以在寻求最优值上有一定的难度，对于此函数PSO算法却能获得较好的全局最优解。图2~6给出了5个基准函数在三种算法下的进化收敛曲线，可以清楚的看出除Step函数外其余4个函数均能较快的收敛到全局最优解。对于改进的灰狼优化算法我们从计算结果及实验曲线图均能看出算法在处理函数优化问题时表现出优越的稳定性及鲁棒性，具有更好的优化性能。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Benchmark function</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >函数</th><th align="center" valign="middle" >表达式</th><th align="center" valign="middle" >维数</th><th align="center" valign="middle" >取值范围</th></tr></thead><tr><td align="center" valign="middle" >Sphere</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x70_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−100, 100]</td></tr><tr><td align="center" valign="middle" >Schwefel</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x71_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−100, 100]</td></tr><tr><td align="center" valign="middle" >Step</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x72_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−50, 50]</td></tr><tr><td align="center" valign="middle" >Rastrigin</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x73_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−5.12, 5.12]</td></tr><tr><td align="center" valign="middle" >Griewank</td><td align="center" valign="middle" ><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/8-1540774x74_hanspub.png" xlink:type="simple"/></inline-formula></td><td align="center" valign="middle" >30</td><td align="center" valign="middle" >[−600, 600]</td></tr></tbody></table></table-wrap><p>表1. 基准函数</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Comparison of results between three algorithms and test of 5 function</title></caption><table><tbody><thead><tr><th align="center" valign="middle"  rowspan="2"  >函数</th><th align="center" valign="middle"  colspan="3"  >NGWO</th><th align="center" valign="middle"  colspan="3"  >GWO</th><th align="center" valign="middle"  colspan="3"  >PSO</th></tr></thead><tr><td align="center" valign="middle" >最优值</td><td align="center" valign="middle" >平均值</td><td align="center" valign="middle" >标准差</td><td align="center" valign="middle" >最优值</td><td align="center" valign="middle" >平均值</td><td align="center" valign="middle" >标准差</td><td align="center" valign="middle" >最优值</td><td align="center" valign="middle" >平均值</td><td align="center" valign="middle" >标准差</td></tr><tr><td align="center" valign="middle" >f<sub>1</sub></td><td align="center" valign="middle" >3.45E−30</td><td align="center" valign="middle" >3.06E−29</td><td align="center" valign="middle" >2.44E−29</td><td align="center" valign="middle" >1.78E−28</td><td align="center" valign="middle" >2.93E−27</td><td align="center" valign="middle" >2.50E−27</td><td align="center" valign="middle" >6.93E−06</td><td align="center" valign="middle" >1.22E−04</td><td align="center" valign="middle" >1.29E−04</td></tr><tr><td align="center" valign="middle" >f<sub>2</sub></td><td align="center" valign="middle" >1.04E−08</td><td align="center" valign="middle" >1.88E−07</td><td align="center" valign="middle" >2.15E−07</td><td align="center" valign="middle" >1.01E−06</td><td align="center" valign="middle" >1.97E−05</td><td align="center" valign="middle" >2.63E−05</td><td align="center" valign="middle" >34.9634</td><td align="center" valign="middle" >85.07998</td><td align="center" valign="middle" >20.2616</td></tr><tr><td align="center" valign="middle" >f<sub>3</sub></td><td align="center" valign="middle" >0.000199</td><td align="center" valign="middle" >0.631705</td><td align="center" valign="middle" >0.032487</td><td align="center" valign="middle" >0.25078</td><td align="center" valign="middle" >1.0303</td><td align="center" valign="middle" >0.43907</td><td align="center" valign="middle" >1.08E−05</td><td align="center" valign="middle" >1.76E−04</td><td align="center" valign="middle" >1.99E−04</td></tr><tr><td align="center" valign="middle" >f<sub>4</sub></td><td align="center" valign="middle" >1.24E−16</td><td align="center" valign="middle" >1.52E−14</td><td align="center" valign="middle" >1.87E−14</td><td align="center" valign="middle" >1.00E−13</td><td align="center" valign="middle" >1.04E−12</td><td align="center" valign="middle" >1.61E−12</td><td align="center" valign="middle" >34.6287</td><td align="center" valign="middle" >58.51813</td><td align="center" valign="middle" >13.2955</td></tr><tr><td align="center" valign="middle" >f<sub>5</sub></td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0.00197</td><td align="center" valign="middle" >0.03564</td><td align="center" valign="middle" >0.04357</td><td align="center" valign="middle" >1.72E−06</td><td align="center" valign="middle" >2.02E−05</td><td align="center" valign="middle" >2.62E−05</td></tr></tbody></table></table-wrap><p>表2. 三种算法对5个函数的实验结果比较</p><p>图2. Sphere 函数收敛曲线</p><p>图3. Schwefel函数收敛曲线</p><p>图4. Step函数收敛曲线</p><p>图5. Rastrigin函数收敛曲线</p><p>图6. Griewank函数收敛曲线</p></sec></sec><sec id="s7"><title>5. 结束语</title><p>灰狼优化算法自提出以来备受学者关注。但基本灰狼优化算法存在收敛速度慢、易陷入局部最优等缺点。为了克服上述缺点，本文将小生境技术引入灰狼优化算法中，利用基本GWO计算各灰狼的适应度值，并对灰狼个体的位置进行更新。灰狼群的生活习性相似度采取两者间的距离进行分辨，通过比较灰狼的适应度值并对适应度值较差的灰狼个体施以罚函数，来减少盲目搜索的几率，从而实现寻优的过程。本文根据NGWO算法流程，分析了算法的时间复杂度；通过对5个基准函数的测试，并与GWO、PSO的结果进行了比较，表明改进后的算法对基准函数的求解精度有所提高，且具有较好的全局收敛性。</p></sec><sec id="s8"><title>文章引用</title><p>白 媛,陈京荣,展之婵. 改进灰狼优化算法的研究与分析Analysis and Research of Improved Grey Wolf Optimization Algorithm[J]. 计算机科学与应用, 2017, 07(06): 562-571. http://dx.doi.org/10.12677/CSA.2017.76067</p></sec><sec id="s9"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.21093-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Holland, J.H. (1975) Adaptation in Natural and Artificial Systems. University of Michigan Press, Ann Arbor.</mixed-citation></ref><ref id="hanspub.21093-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Dorigo, M., Birattari, M. and Stutzle, T. (2006) Ant Colony Optimization. Computational Intelligence Magazine, 1, 28-39．</mixed-citation></ref><ref id="hanspub.21093-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Kennedy, J. and Eberhart, R. (1995) Particle Swarm Optimization, in Neural Networks. Proceedings of IEEE international conference on Neural Networks, Piscataway, 15-18 May 1995, 1942-1948.</mixed-citation></ref><ref id="hanspub.21093-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">李雪梅, 张素琴. 基于仿生理论的几种优化算法综述[J]. 计算机应用研究, 2009, 26(6): 2032-2034.</mixed-citation></ref><ref id="hanspub.21093-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">李晓磊, 邵之江, 钱积新. 一种基于动物自治体的寻优模式: 鱼群算法[J]. 系统工程理论与实践, 2002, 22(11): 32-38.</mixed-citation></ref><ref id="hanspub.21093-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Mirjalili, S., Mirjalili, S. and Lewis, A. (2014) Grey Wolf Optimizer. Advances in Engineering Software, 69, 46-61.</mixed-citation></ref><ref id="hanspub.21093-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">罗佳, 唐斌. 新型灰狼优化算法在函数优化中的应用[J]. 兰州理工大学学报, 2016, 6(3): 97-101.</mixed-citation></ref><ref id="hanspub.21093-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">魏政磊, 赵辉, 韩邦杰, 等. 基于自适应GWO的多UCAV协同攻击目标决策[J]. 计算机工程与应用, 2016, 25(18): 97-101.</mixed-citation></ref><ref id="hanspub.21093-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">龙文, 赵东泉, 等. 求解约束优化问题的改进灰狼优化算法[J]. 计算机应用, 2015, 35(9): 2590-2595.</mixed-citation></ref><ref id="hanspub.21093-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">刘自发, 张建华. 基于自适应小生境粒子群优化算法的电力系统无功优化[J]. 电力自动化设备, 2009, 11(29): 27-28.</mixed-citation></ref><ref id="hanspub.21093-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">武兴亮, 丁根宏. 改进小生境遗传算法求解多峰函数优化问题[J]. 信息技术, 2011(8): 73-74.</mixed-citation></ref></ref-list></back></article>