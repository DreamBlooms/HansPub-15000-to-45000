<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.83042</article-id><article-id pub-id-type="publisher-id">CSA-24290</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20180300000_56190503.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  多计算中心作业迁移系统JMS的设计与实现
  Design and Implementation of Job Migration System (JMS) in Multiple Computing Centers
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>冯</surname><given-names>鸣夏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>伍</surname><given-names>卫国</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>西安交通大学电子与信息工程学院，陕西 西安</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>19</day><month>3</month><year>2018</year></pub-date><volume>08</volume><issue>03</issue><fpage>378</fpage><lpage>388</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   各个高性能计算中心之间缺少统一的作业管理策略和作业迁移机制。当遇到计算中心例行维护或者用户采用检查点技术进行异地作业灾备容错时，需要将作业迁移到其他计算中心执行。针对该问题，设计实现了多中心作业迁移调度系统JMS。该系统采用了微服务架构的设计模式，支持多计算中心间的作业迁移，为用户提供了多中心作业管理和终端访问的web portal。实际测试表明，JMS具有操作简单，可扩展性强等特点。 There is a lack of unified job management strategy and job migration mechanism between high performance computing centers. When there is a routine maintenance in a computing center or the user adopts the checkpoint technology to make fault tolerance, jobs need migrating to other computing centers for execution. Aiming at the problem, this paper proposed a JMS system which adopts the design mode of microservice architecture, supports job migration in multiple computing centers and provides the function of multi-center job management and terminal access for users by web portal. Theoretical analysis and test show that JMS is user-friendly and has good scalability. 
  
 
</p></abstract><kwd-group><kwd>高性能计算，作业迁移，容错，微服务架构, High-Performance Computing</kwd><kwd> Job Migration</kwd><kwd> Fault-Tolerant</kwd><kwd> Micro-Services Architecture</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>多计算中心作业迁移系统JMS的设计与实现<sup> </sup></title><p>冯鸣夏，伍卫国</p><p>西安交通大学电子与信息工程学院，陕西 西安</p><p><img src="//html.hanspub.org/file/15-1540949x1_hanspub.png" /></p><p>收稿日期：2018年3月9日；录用日期：2018年3月23日；发布日期：2018年3月30日</p><disp-formula id="hanspub.24290-formula12"><graphic xlink:href="//html.hanspub.org/file/15-1540949x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>各个高性能计算中心之间缺少统一的作业管理策略和作业迁移机制。当遇到计算中心例行维护或者用户采用检查点技术进行异地作业灾备容错时，需要将作业迁移到其他计算中心执行。针对该问题，设计实现了多中心作业迁移调度系统JMS。该系统采用了微服务架构的设计模式，支持多计算中心间的作业迁移，为用户提供了多中心作业管理和终端访问的web portal。实际测试表明，JMS具有操作简单，可扩展性强等特点。</p><p>关键词 :高性能计算，作业迁移，容错，微服务架构</p><disp-formula id="hanspub.24290-formula13"><graphic xlink:href="//html.hanspub.org/file/15-1540949x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/15-1540949x7_hanspub.png" /> <img src="//html.hanspub.org/file/15-1540949x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>高性能计算是战略性、前沿性的高新技术，是世界各国争夺的战略制高点，是国家创新体系的重要组成部分。目前我国已经拥有了由19个高性能计算中心组成的中国国家网格 [<xref ref-type="bibr" rid="hanspub.24290-ref1">1</xref>] ，资源能力世界前列。在国家高性能计算环境中，由于网络带宽、地域和用户选择习惯等因素可能会造成不同计算中心资源忙闲不均。在缺少对多个计算中心统一资源调配统筹策略的情况下，多中心的负载均衡问题就显得尤为突出。在集群计算中，负载均衡对于充分地利用集群计算能力和最大化地提升并行作业执行性能起到至关重要的作用。目前高性能计算中心之间由于缺少协同完成作业的能力，无法实现多中心间的作业迁移容错，对于那些长时计算的应用定时做作业迁移灾备可以有效减少由于某一个计算中心出现故障带来不必要的计算损失从而可以实现高效、可靠的计算环境。</p><p>不同的高性能计算中心采用独立的集群调度系统，用户通过账号和密码远程连接到登录节点提交作业。集群调度系统采用不同的作业调度策略对用户提交的作业进行调度。实际情况中，用户可能拥有多个计算中心的使用权限，但由于计算中心之间没有互联互通的机制，当用户在不同计算中心中有运行作业时，需要在不同的终端来回切换，查看作业非常不方便。对某一计算中心上长时间运行的作业，用户可能需要对作业做检查点并迁移到其他计算中心上做灾备。当计算中心时常会遇到例行维护等工作时，用户可能需要将作业迁移到其他计算中心完成计算。</p><p>本文的剩余部分首先介绍相关工作，包括作业迁移调度的相关工作；第3部分讨论JMS的系统架构；第4部分讨论JMS的设计与实现；第5部分介绍JMS的应用实例；最后是总结和下一步工作展望。</p></sec><sec id="s4"><title>2. 相关工作</title><p>由于作业迁移容错具有重要的研究价值，一部分工作集中在为作业调度系统添加作业容错机制，提供检查点机制。文献 [<xref ref-type="bibr" rid="hanspub.24290-ref2">2</xref>] 采用了BLCR检查点库在SLURM作业调度系统中实现了给予检查点/恢复的作业自动容错机制；文献 [<xref ref-type="bibr" rid="hanspub.24290-ref3">3</xref>] 介绍了在三层架构超级计算环境中通过作业管理系统的checkpoint-recovery机制实现作业容错。由于不同的计算中心可能采用不同的作业调度系统，针对多计算中心的作业迁移容错没有办法依赖现有的作业调度系统完成。另一部分工作集中在基于虚拟化技术进行作业迁移，文献 [<xref ref-type="bibr" rid="hanspub.24290-ref4">4</xref>] 利用Docker私有仓库实现了在Docker Swarm集群中的容器迁移；文献 [<xref ref-type="bibr" rid="hanspub.24290-ref5">5</xref>] 基于docker技术设计并初步实现了GUI应用在线迁移的系统；文献 [<xref ref-type="bibr" rid="hanspub.24290-ref6">6</xref>] 对多种虚拟机迁移模型进行综合分析，研发一个虚拟机在线迁移管理软件。文献 [<xref ref-type="bibr" rid="hanspub.24290-ref7">7</xref>] 提出一个用于多数据中心云计算环境的虚拟机快速动态迁移架构和相应的迁移方法。在高性能计算中心，由于需要充分利用计算资源的硬件能力而很少采用虚拟化技术进行作业计算，因此基于虚拟化技术的作业迁移具有局限性。针对以上问题，本文设计并实现了多计算中心作业迁移调度系统JMS。该系统实现了多计算中心的互联互通，用户可以在JMS系统上操作不同的计算中心，管理不同计算中心上的作业，提高了用户对作业的监控能力。同时用户可以在不同的计算中心迁移作业，提高了计算中心的资源利用率和容灾能力。JMS提供了用户体验良好的web终端界面，简化了用户对高性能计算中心的操作，提高使用效率。</p></sec><sec id="s5"><title>3. JMS的系统架构</title><p>多计算中心作业迁移调度系统JMS由两部分构成：JMS_provider和JMS_agent。JMS_provider单独部署在一个web服务器集群，向用户提供作业迁移调度系统的web portal。JMS_agent部署在各个计算中心外部访问的登录集群，对外提供webservice服务和文件传输服务。JMS的系统网络拓扑结构如图1所示。</p><sec id="s5_1"><title>3.1. JMS_Provider</title><p>JMS_provider为用户提供web访问portal，用户可以通过登录JMS_provider查看不同计算中心上运行的作业状态，通过JMS_provider提供的远程终功能，用户可以方便切换到任意计算中心进行远程操作。用户可以根据计算中心的负载情况，将作业从一个中心迁移到其他中心实现远程灾备。JMS_rovider的体系结构如图2所示。</p><p>JMS_provider包含5个功能模块：Job Manager、Terminal Controller、Transfer Service、Migration Schedule、Web Portal。</p><p>Cluster Manager：Cluster Manager收集用户在不同计算中作业的运行状态，并返回给用户。</p><p>图1. JMS系统网络拓扑结构</p><p>图2. JMS_Provider结体系构</p><p>Terminal Controller：Terminal Controller 集成了多个计算中的远程终端接口，用户可以方便的切换到不同的计算中心执行远程操作。</p><p>Transfer Service：Transfer Service 提供作业脚本提交功能，用户可以上传提交到任意一个计算中心。</p><p>Resources Monitor：监控各个计算中心的负载情况，为用户提交作业和作业迁移做决策支持。</p><p>Portal：JMS_provider对外提供的Web接口。用户可以通过登录Portal接受JMS_provider其他组件提供的服务。</p></sec><sec id="s5_2"><title>3.2. JMS_Agent</title><p>JMS_agent作为后台程序部署在各个计算中心外部访问的登录集群上，JMS_agent收集本计算中心的负载情况为迁移调度提供决策支持，同时JMS_agent对外提供了Restful API服务 [<xref ref-type="bibr" rid="hanspub.24290-ref8">8</xref>] 和文件传输服务。JMS_agent的体系结构如图3所示。</p><p>JMS_agent包含5个功能模块：Restful API Service、Load Monitor、Communication Controller、Job Manager、Migration Service。</p><p>Restful API Service：Restful API Service提供一组web服务的API，包括作业管理的API (作业的查询，提交，检查点，暂停，删除)、计算中心资源查询的API (计算中心的负载信息)、命令控制的API (数据传输，作业迁移)。</p><p>Load Monitor：Load Monitor收集计算中心节点的负载信息，包括各个节点的CPU负载，内存的利用率，温度等指标信息。</p><p>Communication Controller：各个计算中心通过Communication Controller进行命令控制和数据传输。</p><p>Job Manager：Job Manager和计算中心的作业调度系统交互，向作业调度熊提交作业、查询作业运行状态。</p><p>Migration Service：Migration Service根据用户选择的需要迁移的作业和迁移的目标计算中心，实现</p><p>图3. JMS_agent结体系构</p><p>作业的迁移调度。</p></sec><sec id="s5_3"><title>3.3. 通信协议</title><p>JMS_provider和JMS_agent以及JMS_agent之间的通信数据主要分为控制信息和作业数据信息。</p><p>1) 命令控制协议</p><p>JMS_provider的Cluster Manager模块和Resources Monitor模块通过JMS_agent提供的Restful API对计算中心进行访问。JMS_agent将服务作为一种资源对外提供访问接口。</p><p>如查询作业的运行状态：</p><p>http://IP:/JMS_agent/jobstatus/jobID</p><p>如对作业做检查命令操作：</p><p>http://IP:/JMS_agent/checkpointment/jobID</p><p>2) 数据传输协议</p><p>当涉及作业提交或者作业迁移时，JMS_provider的Transfer Service模块和JMS_agent的Communication Controller模块通过SCP协议传输大规模的作业文件。这两个模块通过对scp命令进行脚本包装，对外提供数据传输服务。</p></sec></sec><sec id="s6"><title>4. JMS的设计与实现</title><p>JMS系统主要的设计思想是通过整合多个计算中心的资源，方便用户实现在一个平台完成对多个计算中心作业的管理。在JMS平台上，用户可以同时管理多个计算中心上的作业，实现作业的动态迁移；可以切换不同的计算中心访问接口，远程控制命令行终端；可以选择任意一个计算中心提交作业，异地并发执行作业。JMS采用spring boot和docker搭建微服务架构 [<xref ref-type="bibr" rid="hanspub.24290-ref9">9</xref>] 。每一个功能模块都是JMS的一个组件。</p><sec id="s6_1"><title>4.1. 作业迁移管理模块</title><p>用户在portal选择的需要的迁移作业和目标计算中心。JMS_provider的Cluster_manage模块将迁移的作业ID通过JMS_agent提供的restful API返回到JMS_agent的Migration Service模块。Migraton Service模块选择合适的作业迁移策略 [<xref ref-type="bibr" rid="hanspub.24290-ref10">10</xref>] 完成迁移任务。作业迁移流程在系统中的处理流程如图4。</p><p>图4. 作业迁移流程</p><p>对于某一个预迁移的作业，Migration Service模块首先判断它的运行状态，根据不同的作业的运行状态分别采用不同的迁移策略。1) 如果作业处在调度队列之中，还没有开始运行，则源计算中心JMS_agent的Migration Service模块将作业从源计算中心任务队列中删除，接着通过JMS_agent的Communication Controller模块将作业传输到目标计算中心，再由目标计算中心的JMS_agent的Migration Service模块提交作业到作业调度系统。2) 如果作业已经开始运行，并且作业所对应的应用类型不支持暂停恢复机制，则源计算中心JMS_agent的Migration Service模块将作业终止，接着通过JMS_agent的Communication Controller模块将作业传输到目标计算中心，再由目标计算中心的JMS_agent的Migration Service模块提交作业到作业调度系统。3) 如果作业已经开始运行，并且作业所对应的应用类型支持暂停恢复机制，则源计算中心JMS_agent的Migration Service模块将作业暂停，保存当前任务状态信息，将作业数据和检查点数据封装打包，通过JMS_agent的Communication Controller模块将作业传输到目标计算中心，再由目的计算中心JMS_agent的Migration Service模块对迁移迁移作业进行恢复执行。</p><p>用户登录web portal之后，通过菜单导航到多中心作业管理界面，用户可以查看多个中心上作业的运行情况，并且对作业进行管理，用户可以选择作业进行检查点操作并进行作业迁移，如图5所示。</p><p>当用户需要进行手动作业迁移时，选择合适的迁移作业数据和目标计算中心后提交作业，如图6所示。</p><p>图5. 多中心作业管理界面</p><p>图6. 作业迁移界面</p></sec><sec id="s6_2"><title>4.2. 终端控制管理模块</title><p>用户在portal选择的需要远程控制的目标计算中心。JMS_provider的Terminal Controller模块根据用户选择的目标计算中心的ID，通过JMS_agent提供的restful API认证连接到了JMS_agent的Communication Controller模块。JMS_provider的Terminal Controller模块和JMS_agent的Communication Controller模块建立了可靠、安全的专用通信通道和相应的通信协议。两个模块之间的通信基于TCP/IP协议，为了减少TCP连接带来的开销，在每次会话之后将中断连接。远程控制的通信时序图如图7所示。</p><p>在图7中，JMS_provider的Terminal Controller模块和一个计算中心JMS_agent的Communication Controller模块建立了通信连接时，首先Terminal Controller模块向Communication Controller模块发起连接请求，Communication Controller模块产生应答并建立连接；然后Terminal Controller模块向Communication Controller模块发送命令信息，Communication Controller模块接收命令信息后调用本地的shell命令产生命令执行结果，最后Communication Controller模块向Terminal Controller模块返回命令执行的结果，断开连接。</p><p>TCP是面向字节流的协议，即没有消息边界，应用层协议需要定义格式来决定消息边界，通常的做法有两种：一是使用固定分隔符的方式，消息以固定的字符序列作为结尾，消息内部的不同字段以固定的分隔符分割；二是使用基于消息头消息体的方式，消息头的长度和格式固定，且在消息头中给出消息体的长度。本课题的多中心间的通信协议采用第一种方式，所有协议消息以#&lt;消息类型&gt;开头，以|end作为结尾，其他字段以#分隔。消息类型如表1所示。</p><p>图7. 远程控制的通信时序图</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> The table of message typ</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >消息类型</th><th align="center" valign="middle" >功能</th></tr></thead><tr><td align="center" valign="middle" >#Request|end</td><td align="center" valign="middle" >发起连接</td></tr><tr><td align="center" valign="middle" >#Response|end</td><td align="center" valign="middle" >建立连接</td></tr><tr><td align="center" valign="middle" >#Command#content#|end</td><td align="center" valign="middle" >命令信息</td></tr><tr><td align="center" valign="middle" >#Result#content#|end</td><td align="center" valign="middle" >命令返回结果</td></tr><tr><td align="center" valign="middle" >#Close|end</td><td align="center" valign="middle" >断开连接</td></tr><tr><td align="center" valign="middle" >#Datasent#content#|end</td><td align="center" valign="middle" >数据发送</td></tr></tbody></table></table-wrap><p>表1. 消息类型表格</p><p>通信协议中分为两类消息：</p><p>1) 控制消息：主要包括发起连接请求命令、建立连接命令、任务类型、任务运行状态以及任务进度。</p><p>2) 数据消息：主要包括迁移作业的数据长度、数据内容以及运行脚本。</p><p>通过web portal用户可以跳转到多中心终端控制页面。通过该页面，可以切换到任意一个计算中心进行远程控制，如图8所示。</p></sec><sec id="s6_3"><title>4.3. 作业提交管理模块</title><p>用户向JMS提交任务请求时，首先根据应用类型选择作业基本属性模板，并在web portal的脚本提交界面输入作业的基本属性信息，如图9所示。一个作业基本的属性包括作业名称、队列名称、计算资源、预估运行时间和输入文件。这些信息被转化成JSDL作业描述信息并以JSON格式进行保存。</p><p>{Jobname:jobname, Queuename:queuename, Resource:resource,Walltime:walltime, Inputfile:inputfile}</p><p>除了作业基本属性信息，JMS通过扩展的作业描述语言E-JSDL来表示一个作业的属性信息，针对长时应用，作业描述信息还包括用户设定的作业迁移周期和计算灾备中心。</p><p>JMS_provider的Transfer Service模块通过JMS_agent提供的restful API将作业描述信息返回到JMS_agent的Job Manager模块。Job Manager模块将用户作业提交到计算中心的作业调度系统，根据作也的描述信息，定期将作业结果迁移到灾备中心。</p></sec></sec><sec id="s7"><title>5. 应用实例</title><p>JMS系统已经在国家计算网格(西安中心)和西安交通大学网络计算中心分别进行了部署和测试。JMS_provider部署在Web服务器集群上，JMS_agent分别部署在两个计算中心。LAMMPS由美国Sandia国家实验室开发，主要用于分子动力学相关的一些计算和模拟工作，LAMMPS应用支持检查点机制，可以在指定迭代步数之后进行检查点操作。下文以一个材料化学LAMMPS应用金属铜的剪切变形算力说明如何在JMS系统中进行作业迁移。</p><p>1) 通过JMS_provider提供的脚本提交界面，用户输入金属铜的剪切变形算力的作业属性，并提交。JMS_provider根据作业描述信息，将作业提交到国家计算网格(西安中心)。</p><p>2) 通过多中心作业管理界面，用户点击金属铜的剪切变形算力作业的迁移按钮进入作业迁移界面。用户选择作业的检查点文件restart. 50,000和迁移目标中心—西安交通大学网络计算中心。源中心的JMS_agent将检查点文件和作业迁移到目标中心。</p><p>在目标中心，JMS_agent根据检查点文件信息重新提交作业，恢复金属铜的剪切变形算力作业，金属铜的剪切变形算力从第50,000次迭代恢复计算。金属铜的剪切应力与计算步数的关系如图10所示。</p><p>黑色曲线为国家计算网格(西安中心)上一次性计算完成的剪切应力与计算步数的关系曲线。红色曲线</p><p>图8. 远程控制界面</p><p>图9. 脚本提交界面</p><p>为在西安交通大学网络计算中心上从50,000步恢复执行之后的结果。可以看到，两条曲线的变化趋势完全一致，也在同一应力值处剪切屈服。</p><p>需要指出的是，金属铜的剪切变形算力的作业迁移之后的曲线与原始曲线并非完全重合，这主要是由于分子动力学计算中，原子运动的随机性以及多CPU (Cores)并行计算时分配计算原子的不一致造成。</p></sec><sec id="s8"><title>6. 结论</title><p>在现有计算中心调度系统的基础上，JMS系统为多计算中心的作业迁移调度提供了解决方案。在JMS系统中，用户可以同时管理多个计算中心的作业任务，通过终端控制器操作不同的计算中心。用户提交作业时，可以针对长时计算的应用做定时迁移灾备以减少由于某一个计算中心出现故障带来不必要的计算损失从而提高现有计算中心的可靠性。对于正在运行的作业，用户可以根据需要将作业迁移到其他计</p><p>图10. 金属铜的剪切应力与计算步数的关系曲线</p><p>算中心完成计算从而实现多计算中心协同工作。提高计算中心访问的安全性，提出更加安全的认证方式是下一步的研究方向。</p></sec><sec id="s9"><title>基金项目</title><p>国家重点研发计划(2016YFB0201402)；海外及港澳学者合作研究基金(61628210)；国家自然科学基金资助项目(91630206)。</p></sec><sec id="s10"><title>文章引用</title><p>冯鸣夏,伍卫国. 多计算中心作业迁移系统JMS的设计与实现 Design and Implementation of Job Migration System (JMS) in Multiple Computing Centers[J]. 计算机科学与应用, 2018, 08(03): 378-388. https://doi.org/10.12677/CSA.2018.83042</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.24290-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Xiao, H., Wu, H. and Chi, X. (2008) SCE: Grid Environment for Scientific Computing. 2nd International Conference on Networks for Grid Applications (GridNets 2008), 8-10 October 2008, Beijing, 35-42.</mixed-citation></ref><ref id="hanspub.24290-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">曹宏嘉, 卢宇彤, 谢旻. 资源管理系统中基于作业检查点的自动容错[J]. 计算机工程与科学, 2009, 31(11): 66-68.</mixed-citation></ref><ref id="hanspub.24290-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">戴志辉, 肖海力, 曹荣强, 等. 三层架构超级计算环境容错框架[J]. 计算机应用研究, 2011, 28(7): 2576-2579.</mixed-citation></ref><ref id="hanspub.24290-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">毛祺, 卢胜林. 基于DockerSwarm集群的容器迁移策略的实现[J]. 信息技术, 2016(9): 156-160.</mixed-citation></ref><ref id="hanspub.24290-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">房锦章. 基于Docker技术的GUI应用的在线迁移研究[D]: [硕士或博士学位论文]. 北京: 中国科学院大学, 2016.</mixed-citation></ref><ref id="hanspub.24290-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">张汉林, 王泽鹏, 陈宁江. 基于能耗感知的虚拟机迁移管理软件[J]. 广西科学院学报, 2017, 33(1): 48-52.</mixed-citation></ref><ref id="hanspub.24290-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">刘圣卓, 姜进磊, 杨广文. 基于副本的跨数据中心虚拟机快速迁移算法[J]. 清华大学学报(自然科学版), 2015(5): 579-584.</mixed-citation></ref><ref id="hanspub.24290-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Richardson, L. and Ruby, S. (2007) Restful Web Services. O’reilly Media Inc., Sebastopol, 199-204.</mixed-citation></ref><ref id="hanspub.24290-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Namiot, D. and Sneps-Sneppe, M. (2014) On Micro-Services Architecture. International Journal of Open Information Technologies, 2, 24-27.</mixed-citation></ref><ref id="hanspub.24290-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Rathore, N.K. and Chana, I. (2016) Job Migration Policies for Grid Environment. Wireless Personal Communications, 89, 241-269. &lt;nr&gt;https://doi.org/10.1007/s11277-016-3264-2</mixed-citation></ref></ref-list></back></article>