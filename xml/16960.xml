<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AAM</journal-id><journal-title-group><journal-title>Advances in Applied Mathematics</journal-title></journal-title-group><issn pub-type="epub">2324-7991</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AAM.2016.51002</article-id><article-id pub-id-type="publisher-id">AAM-16960</article-id><article-categories><subj-group subj-group-type="heading"><subject>AAM20160100000_90490051.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  径向基函数插值配置点的自适应选取算法
  An Adaptive Method for Choosing Collocation Points of RBF Interpolation
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>雨</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>广磊</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>姜</surname><given-names>自武</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>龚</surname><given-names>佃选</given-names></name><xref ref-type="aff" rid="aff4"><sup>4</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff4"><addr-line>河北联合大学理学院，河北 唐山</addr-line></aff><aff id="aff2"><addr-line>临沂大学理学院，山东 临沂</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><aff id="aff3"><addr-line>临沂大学信息学院，山东 临沂</addr-line></aff><author-notes><corresp id="cor1">* E-mail:<email>zwjiang@lyu.edu.cn(姜自)</email>;</corresp></author-notes><pub-date pub-type="epub"><day>09</day><month>12</month><year>2015</year></pub-date><volume>05</volume><issue>01</issue><fpage>8</fpage><lpage>14</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  径向基函数是一种处理高维散乱数据插值的有效方法。由于逼近精度和稳定性都严重依赖于配置点的分布，因此在重建过程中如何设计配置点的优化选取算法成为一个迫切需要解决的问题。在本文中，我们将简要介绍已有的选取算法，例如：细化算法、贪婪算法等。文章的最后，我们给出一种新的自适应选取算法，并通过数值算例验证该方法的高效性。
   Radial basis function (RBF) is one of effective meshfree methods for interpolation on high dimen-sional scattered data. Since the approximation quality and stability seriously depend on the dis-tribution of the collocation points, it is urgent to find algorithm of choosing optimal point sets for the reconstruction process. In this paper, we give a short overview of existing algorithms including thinning algorithm, greedy algorithm, and so on. A new adaptive data-dependent method is pro-vided at the end with a numerical example to show its efficiency.
 
</p></abstract><kwd-group><kwd>自适应算法，配置点，径向基函数，贪婪算法, Adaptive Method</kwd><kwd> Collocation Points</kwd><kwd> Radial Basis Function</kwd><kwd> Greedy Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>径向基函数插值配置点的自适应选取算法<sup> </sup></title><p>刘雨<sup>1</sup>，刘广磊<sup>2</sup>，姜自武<sup>1</sup>，龚佃选<sup>3</sup></p><p><sup>1</sup>临沂大学理学院，山东 临沂</p><p><sup>2</sup>临沂大学信息学院，山东 临沂</p><p><sup>3</sup>河北联合大学理学院，河北 唐山</p><disp-formula id="hanspub.16960-formula215"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2016年1月29日；录用日期：2016年2月19日；发布日期：2016年2月22日</p><disp-formula id="hanspub.16960-formula216"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x7_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>径向基函数是一种处理高维散乱数据插值的有效方法。由于逼近精度和稳定性都严重依赖于配置点的分布，因此在重建过程中如何设计配置点的优化选取算法成为一个迫切需要解决的问题。在本文中，我们将简要介绍已有的选取算法，例如：细化算法、贪婪算法等。文章的最后，我们给出一种新的自适应选取算法，并通过数值算例验证该方法的高效性。</p><p>关键词 :自适应算法，配置点，径向基函数，贪婪算法</p><disp-formula id="hanspub.16960-formula217"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s3"><title>1. 引言</title><p>依据大量的散乱数据通过插值方法重建一个光滑曲线或曲面，在反向工程、计算机图形学、计算机视觉等很多领域中有着重要的应用[<xref ref-type="bibr" rid="hanspub.16960-ref1">1</xref>] 。由于原始数据的无规则性，在选取插值方法的时候，尽量使得逼近函数的产生不依赖于数据位置，即选择所谓的无网格方法。径向基函数插值方法作为一种常用的无网格方法，其实质是用一元函数来描述多元函数。由于在通常的方法中所有的原始数据均选取为径向基函数配置中心，这样导致了所求插值函数的不稳定性 [<xref ref-type="bibr" rid="hanspub.16960-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.16960-ref3">3</xref>] 。因此众多的学者关注于如何从大量的原始数据中选择较少的配置点以使得所求的插值函数近似精度高并且稳定性好 [<xref ref-type="bibr" rid="hanspub.16960-ref4">4</xref>] [<xref ref-type="bibr" rid="hanspub.16960-ref5">5</xref>] 。在本文中，我们将给出一种新的一元自适应配置点优化选取方法。本文内容安排如下：在第二部分我们简要介绍径向基函数相关概念性质。第三部分概述诸如：细化算法、贪婪算法等已有的几类选取算法。在第四部分，介绍我们所设计出一种新选取算法，最后通过数值算例演示新算法的有效性。</p></sec><sec id="s4"><title>2. 径向基函数</title><p>考虑一个定义在Ω上的未知函数f(x)，其定义在离散样本集合<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x9_hanspub.png" xlink:type="simple"/></inline-formula>上的函数值集合为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x10_hanspub.png" xlink:type="simple"/></inline-formula>。给定一个一元函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x11_hanspub.png" xlink:type="simple"/></inline-formula>，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x12_hanspub.png" xlink:type="simple"/></inline-formula>，其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x13_hanspub.png" xlink:type="simple"/></inline-formula>为欧几里得范数，则函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x14_hanspub.png" xlink:type="simple"/></inline-formula>可以近似表示成如下线性组合形式</p><disp-formula id="hanspub.16960-formula218"><label>(1)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/2-2620224x15_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x16_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x17_hanspub.png" xlink:type="simple"/></inline-formula>为待定系数，其值由如下的插值条件决定</p><disp-formula id="hanspub.16960-formula219"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x18_hanspub.png"  xlink:type="simple"/></disp-formula><p>称<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x19_hanspub.png" xlink:type="simple"/></inline-formula>为径向基函数插值配置点集，由径向基函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x20_hanspub.png" xlink:type="simple"/></inline-formula>与配置点集<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x21_hanspub.png" xlink:type="simple"/></inline-formula>决定的矩阵记为</p><disp-formula id="hanspub.16960-formula220"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x22_hanspub.png"  xlink:type="simple"/></disp-formula><p>如果<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x23_hanspub.png" xlink:type="simple"/></inline-formula>非奇异，则线性方程组</p><disp-formula id="hanspub.16960-formula221"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x24_hanspub.png"  xlink:type="simple"/></disp-formula><p>的解存在并唯一，其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x25_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>下面为常用的径向基函数：</p><p>多二次函数(MQ)：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x26_hanspub.png" xlink:type="simple"/></inline-formula></p><p>逆多二次函数(IMQ)：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x27_hanspub.png" xlink:type="simple"/></inline-formula></p><p>薄板样条函数(TPS)：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x28_hanspub.png" xlink:type="simple"/></inline-formula></p><p>高斯函数(Gauss)：<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x29_hanspub.png" xlink:type="simple"/></inline-formula></p><p>大多数径向基函数不能保证插值矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x30_hanspub.png" xlink:type="simple"/></inline-formula>的非奇异性，此时应对插值函数进行处理，即为了保证插值问题解的存在唯一性，在式(1)中等号的后边添加多项式项<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x31_hanspub.png" xlink:type="simple"/></inline-formula>：</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x32_hanspub.png" xlink:type="simple"/></inline-formula>，</p><p>且满足条件</p><disp-formula id="hanspub.16960-formula222"><label>(2)</label><graphic position="anchor" xlink:href="http://html.hanspub.org/file/2-2620224x33_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x34_hanspub.png" xlink:type="simple"/></inline-formula>是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x35_hanspub.png" xlink:type="simple"/></inline-formula>的一组基，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x36_hanspub.png" xlink:type="simple"/></inline-formula>为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x37_hanspub.png" xlink:type="simple"/></inline-formula>的维数。令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x38_hanspub.png" xlink:type="simple"/></inline-formula>，结合式(2)，则插值条件可以写成如下形式：</p><disp-formula id="hanspub.16960-formula223"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x39_hanspub.png"  xlink:type="simple"/></disp-formula><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x40_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x41_hanspub.png" xlink:type="simple"/></inline-formula>，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x42_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>任给<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x43_hanspub.png" xlink:type="simple"/></inline-formula>上的一个径向基函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x44_hanspub.png" xlink:type="simple"/></inline-formula>，对于任意选取的配置点集X，若矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x45_hanspub.png" xlink:type="simple"/></inline-formula>均为正定矩阵，此时我们可以定义一个由<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x46_hanspub.png" xlink:type="simple"/></inline-formula>诱导的内积：</p><disp-formula id="hanspub.16960-formula224"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x47_hanspub.png"  xlink:type="simple"/></disp-formula><p>利用此内积可以定义如下的线性空间：</p><disp-formula id="hanspub.16960-formula225"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x48_hanspub.png"  xlink:type="simple"/></disp-formula><p>即<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x49_hanspub.png" xlink:type="simple"/></inline-formula>是有所有有限个<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x50_hanspub.png" xlink:type="simple"/></inline-formula>的线性组合构成的空间。取<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x51_hanspub.png" xlink:type="simple"/></inline-formula>的闭包为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x52_hanspub.png" xlink:type="simple"/></inline-formula>，则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x53_hanspub.png" xlink:type="simple"/></inline-formula>是一个Hilbert空间，其上的内积仍然是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x54_hanspub.png" xlink:type="simple"/></inline-formula>。并且任取空间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x55_hanspub.png" xlink:type="simple"/></inline-formula>中的一个元素<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x56_hanspub.png" xlink:type="simple"/></inline-formula>，都有</p><disp-formula id="hanspub.16960-formula226"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x57_hanspub.png"  xlink:type="simple"/></disp-formula><p>称<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x58_hanspub.png" xlink:type="simple"/></inline-formula>是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x59_hanspub.png" xlink:type="simple"/></inline-formula>的本性空间 [<xref ref-type="bibr" rid="hanspub.16960-ref6">6</xref>] 。为了给出径向基插值的误差估计，定义配置点分布的填充距离如下：</p><disp-formula id="hanspub.16960-formula227"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x60_hanspub.png"  xlink:type="simple"/></disp-formula><p>则对于任意的本性空间中的函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x61_hanspub.png" xlink:type="simple"/></inline-formula>，有如下的误差估计</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x62_hanspub.png" xlink:type="simple"/></inline-formula>， (3)</p><p>其中C为常数，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x63_hanspub.png" xlink:type="simple"/></inline-formula>为函数在本性空间中的范数。一方面，从误差估计式中可以看出要使得近似精度高，应该尽可能多选取配置点。但另一方面，过多的选点将导致矩阵<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x64_hanspub.png" xlink:type="simple"/></inline-formula>的条件数过大，从而导致求解插值函</p><p>数的不稳定性 [<xref ref-type="bibr" rid="hanspub.16960-ref7">7</xref>] 。若定义配置点分布的分散距离为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x65_hanspub.png" xlink:type="simple"/></inline-formula>，则配置点的选取应使得<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x66_hanspub.png" xlink:type="simple"/></inline-formula>尽量小，并且<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x67_hanspub.png" xlink:type="simple"/></inline-formula>尽量大。</p></sec><sec id="s5"><title>3. 配置中心的选取方法</title><p>通过前面的介绍可知，利用径向基函数插值方法对散乱数据进行处理，如果数据点非常多，为了降低插值矩阵条件数，节省运算成本，我们希望能够用尽量少的配置点并获得尽量高的近似精度。这个问题可描述为：给定了大量的原始散乱数据，要从中选取n个配置点进行插值，如何选择才能使<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x68_hanspub.png" xlink:type="simple"/></inline-formula>尽量小，并且<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x69_hanspub.png" xlink:type="simple"/></inline-formula>尽量大。M. S. Floater [<xref ref-type="bibr" rid="hanspub.16960-ref8">8</xref>] ，A. Iske [<xref ref-type="bibr" rid="hanspub.16960-ref9">9</xref>] 和S. D. Marchi [<xref ref-type="bibr" rid="hanspub.16960-ref10">10</xref>] 及其合作者在此方面做了较多工作。到目前为止，这方面的研究成果主要可以分为两类：依赖数据的和不依赖数据的。</p><p>给定插值区域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x70_hanspub.png" xlink:type="simple"/></inline-formula>和大量散乱数据，要在从中选取的一个包含n个配置点的集合X上插值并使得效果</p><p>最优，即应该使得所选结点的分散距离<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x71_hanspub.png" xlink:type="simple"/></inline-formula>尽量大的同时填充距离<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x72_hanspub.png" xlink:type="simple"/></inline-formula>尽量小。令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x73_hanspub.png" xlink:type="simple"/></inline-formula>，Iske指出对<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x74_hanspub.png" xlink:type="simple"/></inline-formula></p><p>维有界区域做正单纯性剖分得到的顶点集满足<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x75_hanspub.png" xlink:type="simple"/></inline-formula>最大，且有</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x76_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>基于同样的思想，当给定了插值节点集<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x77_hanspub.png" xlink:type="simple"/></inline-formula>时，Floater和Iske通过添加点、细化点和交换点等方法构造分层点集序列<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x78_hanspub.png" xlink:type="simple"/></inline-formula>，这里<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x79_hanspub.png" xlink:type="simple"/></inline-formula>，满足相应的<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x80_hanspub.png" xlink:type="simple"/></inline-formula>在某种意义下最大 [<xref ref-type="bibr" rid="hanspub.16960-ref8">8</xref>] 。Iske将同样的想法也应用到了分片算法中。</p><p>径向基函数插值可写成Lagrange形式</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x81_hanspub.png" xlink:type="simple"/></inline-formula>，</p><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x82_hanspub.png" xlink:type="simple"/></inline-formula>，定义能量函数如下</p><disp-formula id="hanspub.16960-formula228"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x83_hanspub.png"  xlink:type="simple"/></disp-formula><p>则<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x84_hanspub.png" xlink:type="simple"/></inline-formula>的大小直接反应了插值的误差，并且当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x85_hanspub.png" xlink:type="simple"/></inline-formula>时，有<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x86_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>借助于能量函数，Marchi给出了下面的贪婪算法 [<xref ref-type="bibr" rid="hanspub.16960-ref10">10</xref>] ：</p><p>1) 初始步骤：有界区域<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x87_hanspub.png" xlink:type="simple"/></inline-formula>，在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x88_hanspub.png" xlink:type="simple"/></inline-formula>的边界上取一点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x89_hanspub.png" xlink:type="simple"/></inline-formula>，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x90_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>2) 迭代步骤：对于<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x91_hanspub.png" xlink:type="simple"/></inline-formula>，在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x92_hanspub.png" xlink:type="simple"/></inline-formula>上选取点<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x93_hanspub.png" xlink:type="simple"/></inline-formula>满足<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x94_hanspub.png" xlink:type="simple"/></inline-formula>到<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x95_hanspub.png" xlink:type="simple"/></inline-formula>的距离最远，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x96_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>设<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x97_hanspub.png" xlink:type="simple"/></inline-formula>是一个有界区域，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x98_hanspub.png" xlink:type="simple"/></inline-formula>，对<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x99_hanspub.png" xlink:type="simple"/></inline-formula>，定义<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x100_hanspub.png" xlink:type="simple"/></inline-formula>满足：</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x101_hanspub.png" xlink:type="simple"/></inline-formula>，</p><p>称这样的点列<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x102_hanspub.png" xlink:type="simple"/></inline-formula>为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x103_hanspub.png" xlink:type="simple"/></inline-formula>上的Leja-Bos点列，显然通过贪婪算法选取的点列是一个Leja-Bos点列。</p><p>另外，在径向基神经网络中常用K-均值聚类算法选取中心，K-均值聚类算法不仅简单而且性能良好，在模式识别中应用十分广泛。这种方法的选点过程与被插值数据无关，也是一种不依赖数据的选点方法 [<xref ref-type="bibr" rid="hanspub.16960-ref11">11</xref>] 。</p></sec><sec id="s6"><title>4. 我们的选取方法</title><p>从前面的分析可以看到，径向基插值精度与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x104_hanspub.png" xlink:type="simple"/></inline-formula>有关，插值矩阵的条件数与<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x105_hanspub.png" xlink:type="simple"/></inline-formula>关系密切，而<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x106_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x107_hanspub.png" xlink:type="simple"/></inline-formula>只与配置点的几何分布有关，而与要插值的函数或者数据没有关系。所以依据<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x108_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x109_hanspub.png" xlink:type="simple"/></inline-formula>所得到的取点方法都是不依赖数据的，都是要使所选的点集在插值区域上的分布尽量均匀。这类算法所得到的配置点集都可以说是一种Leja-Bos点列。观察式(3)右端的误差函数，它不仅与分布密度有关，还与被插值函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x110_hanspub.png" xlink:type="simple"/></inline-formula>有关。被插值函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x111_hanspub.png" xlink:type="simple"/></inline-formula>的性质由给定的散乱数据的性质反映，所以在选择插值中心的时候应该同时考虑散乱数据的值及其变化性质。基于此，我们希望找到一个依赖数据的自适应的选点方法，能够根据具体的数据选择最佳配置点。</p><p>为了能够在选择配置点时同时考虑点集分布和具体数据的变化，我们定义广义的Leja-Bos点列：设<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x112_hanspub.png" xlink:type="simple"/></inline-formula>是给定原数据点集，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x113_hanspub.png" xlink:type="simple"/></inline-formula>是定义在<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x114_hanspub.png" xlink:type="simple"/></inline-formula>上的一个正定函数，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x115_hanspub.png" xlink:type="simple"/></inline-formula>满足</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x116_hanspub.png" xlink:type="simple"/></inline-formula>，</p><p>其中<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x117_hanspub.png" xlink:type="simple"/></inline-formula>表示某种运算，并且当<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x118_hanspub.png" xlink:type="simple"/></inline-formula>时，令<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x119_hanspub.png" xlink:type="simple"/></inline-formula>满足：</p><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x120_hanspub.png" xlink:type="simple"/></inline-formula>，</p><p>其中，<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x121_hanspub.png" xlink:type="simple"/></inline-formula>表示欧几里得范数。称<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x122_hanspub.png" xlink:type="simple"/></inline-formula>是<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x123_hanspub.png" xlink:type="simple"/></inline-formula>上的广义权函数，称如此选取的点列<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x124_hanspub.png" xlink:type="simple"/></inline-formula>为<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x125_hanspub.png" xlink:type="simple"/></inline-formula>上的一个广义Leja-Bos点列。</p><p>权函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x126_hanspub.png" xlink:type="simple"/></inline-formula>需要根据具体的数据点集来确定，不同的权函数对插值误差的影响比较明显，一般我将函数值的变化剧烈程度与广义权函数联系起来。在本文中，我们取广义权函数为最近3个点之间的二阶差商平方平均值</p><disp-formula id="hanspub.16960-formula229"><graphic xlink:href="http://html.hanspub.org/file/2-2620224x127_hanspub.png"  xlink:type="simple"/></disp-formula><p><inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x128_hanspub.png" xlink:type="simple"/></inline-formula>运算取两者的加权平均即<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x129_hanspub.png" xlink:type="simple"/></inline-formula>，然后根据找出广义Leja-Bos点列即为所求的配置点集。</p><p>图1. 曲线f(x)的形状</p><p>图2. 配置点的分布情况</p><p>图3. 均匀分布选取527个配置点的误差图形</p><p>图4. 选取72个广义Leja-Bos配置点的误差图形</p></sec><sec id="s7"><title>5. 数值算例</title><p>本数值算例中，我们选择函数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x134_hanspub.png" xlink:type="simple"/></inline-formula>，给定原始数据为区间<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x135_hanspub.png" xlink:type="simple"/></inline-formula>的527等分点(包括端</p><p>点)及其函数值。径向基函数选择为MQ函数，其中的形状参数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x136_hanspub.png" xlink:type="simple"/></inline-formula>。<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x137_hanspub.png" xlink:type="simple"/></inline-formula>点处的广义权值取该点与其最近3个点的平方平均值，权系数<inline-formula><inline-graphic xlink:href="http://html.hanspub.org/file/2-2620224x138_hanspub.png" xlink:type="simple"/></inline-formula>，配置点根据算法自适应取到72个。原函数图像如图1所示，从函数图像可以看出曲线兼具变化较为剧烈和平缓的部分。利用本文的方法所选取的配置点如图2所示。插值等分点的误差函数如图3所示，利用本文方法所做插值方法的误差图像如图4所示。从误差图像容易看出，得到同样近似精度，本文所采用的方法选取的配置点更少因而效率更高。</p></sec><sec id="s8"><title>6. 结论</title><p>本文主要探讨了如何利用大量的原始数据，自适应选取较少的径向基函数插值配置点。我们利用配置点分布的分散距离并结合数据点处的二阶插商信息自适应选取了一列广义Leja-Bos点列，将此点列作为径向基函数插值配置点，从数值算例可以看出，利用本文给出的算法所得出的插值函数效率更高。</p></sec><sec id="s9"><title>基金项目</title><p>大学生创新创业训练计划项目(编号：201410452002)、国家自然科学基金(项目编号：11301252)。</p></sec><sec id="s10"><title>文章引用</title><p>刘雨,刘广磊,姜自武,龚佃选. 径向基函数插值配置点的自适应选取算法 An Adaptive Method for Choosing Collocation Points of RBF Interpolation[J]. 应用数学进展, 2016, 05(01): 8-14. http://dx.doi.org/10.12677/AAM.2016.51002</p></sec><sec id="s11"><title>参考文献 (References)</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.16960-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">吴宗敏. 散乱数据拟合的模型、方法和理论[M]. 北京: 科学出版社, 2007.</mixed-citation></ref><ref id="hanspub.16960-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Fasshauer, G.E. (2007) Meshfree Approximation Methods with Matlab. World Scientific, Singapore.  
&lt;br&gt;http://dx.doi.org/10.1142/6437</mixed-citation></ref><ref id="hanspub.16960-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Franke, R. (1982) Scattered Data Interpolation, Test of Some Methods. Ma-thematics of Computation, 38, 181-200.</mixed-citation></ref><ref id="hanspub.16960-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Dyn, N., Floater, M.S. and Iske, A. (2002) Adaptive Thinning for Biva-riate Scattered Data. Journal of Computational and Applied Mathematics, 145, 505-517. &lt;br&gt;http://dx.doi.org/10.1016/S0377-0427(02)00352-7</mixed-citation></ref><ref id="hanspub.16960-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Iske, A. (2003) Progressive Scattered Data Filtering. Journal of Computational and Applied Mathematics, 158, 297- 316. &lt;br&gt;http://dx.doi.org/10.1016/S0377-0427(03)00449-7</mixed-citation></ref><ref id="hanspub.16960-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Wendland, H. (2005) Scattered Data Approximation (Cambridge Monographs on Applied and Computational Mathematics; 17). Cambridge University Press, Cam-bridge.</mixed-citation></ref><ref id="hanspub.16960-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Schaback, R. (1995) Error Estimates and Condition Numbers for Radial Basis Function Interpolation. Advances in Computational Mathematics, 3, 251-264. &lt;br&gt;http://dx.doi.org/10.1007/BF02432002</mixed-citation></ref><ref id="hanspub.16960-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Floater, M.S. and Iske, A. (1998) Thinning Algorithms for Scattered Data Interpolation. BIT Numerical Mathematics, 38, 705-720. &lt;br&gt;http://dx.doi.org/10.1007/BF02510410</mixed-citation></ref><ref id="hanspub.16960-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Behrens, J. and Iske, A. (2002) Grid-Free Adaptive Semi-Lagrangian Advection Using Radial Basis Functions. Computers and Mathematics with Applications, 43, 319-327. &lt;br&gt;http://dx.doi.org/10.1016/S0898-1221(01)00289-9</mixed-citation></ref><ref id="hanspub.16960-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Marchi, S.D. (2003) On Optimal Center Locations for Radial Basisfunction Interpolation: Computational Aspects. Rendiconti del Seminario Matematico Università e Poli-tecnico di Torino (Splines Radial Basis Functions and Applications), 61, 343-358.</mixed-citation></ref><ref id="hanspub.16960-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Xu, B.Z., Zhang, B.L. and Wei, G. (1994) Neural Network Theory and Its Application. South China University of Technology Press, Guangzhou.</mixed-citation></ref></ref-list></back></article>