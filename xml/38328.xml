<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2020.95050</article-id><article-id pub-id-type="publisher-id">SEA-38328</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20200500000_75008730.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  一种适应多芯场景的安全芯片业务测试系统设计
  A Multi-Core Adaptable Automatic Workflow Testing System Design for Security Chip
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>周</surname><given-names>静</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>付</surname><given-names>青琴</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>佳</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>白</surname><given-names>雪松</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>梁</surname><given-names>昭庆</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>null</addr-line></aff><aff id="aff1"><addr-line>北京智芯微电子科技有限公司，国家电网公司电力芯片设计分析重点实验室，北京；北京智芯微电子科技有限公司，北京市电力高可靠性集成电路设计工程技术研究中心，北京</addr-line></aff><pub-date pub-type="epub"><day>12</day><month>10</month><year>2020</year></pub-date><volume>09</volume><issue>05</issue><fpage>434</fpage><lpage>440</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  本文分析了多芯模组化智能电表的应用给安全芯片业务场景测试带来的挑战和问题，分析了传统测试方法中存在的缺陷，提出了能适应多芯业务场景的自动化业务测试系统。此方法通过提取用例，对安全芯片的业务进行模块化设计，提取密钥场景和芯片指令等可变量参数，封装SPI，7816，645协议，模拟多芯场景的业务交互流程，实现了业务流程的模块化和自动化，大大的提升了安全芯片业务流程测试的效率。
   This paper analyzes the challenges and problems for workflow testing for introducing the mul-ti-core energy meter, and the faults of traditional workflow testing of security chip, and proposes a multi-core adaptive automatic workflow testing for security chip. This method is based on user case extraction and the workflow modulization of security chip. It extracts the variables like key state and instructions, and encapsulates SPI, 7816, 645 protocol, to simulate the multi-core workflow. It realizes the workflow modulization and automation, and greatly improves the efficiency of the workflow test and regression test.
 
</p></abstract><kwd-group><kwd>安全芯片，业务流程测试，模块化，多芯业务场景, Security Chip</kwd><kwd> Workflow Test</kwd><kwd> Modulization</kwd><kwd> Multi-Core Service Scenarios</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>本文分析了多芯模组化智能电表的应用给安全芯片业务场景测试带来的挑战和问题，分析了传统测试方法中存在的缺陷，提出了能适应多芯业务场景的自动化业务测试系统。此方法通过提取用例，对安全芯片的业务进行模块化设计，提取密钥场景和芯片指令等可变量参数，封装SPI，7816，645协议，模拟多芯场景的业务交互流程，实现了业务流程的模块化和自动化，大大的提升了安全芯片业务流程测试的效率。</p></sec><sec id="s2"><title>关键词</title><p>安全芯片，业务流程测试，模块化，多芯业务场景</p></sec><sec id="s3"><title>A Multi-Core Adaptable Automatic Workflow Testing System Design for Security Chip<sup> </sup></title><p>Jing Zhou<sup>1,2</sup>, Qingqin Fu<sup>1,2</sup>, Jia Liu<sup>1,2</sup>, Xuesong Bai<sup>1,2</sup>, Zhaoqing Liang<sup>1,2</sup></p><p><sup>1</sup>Key Lab of Power Grid Design and Analysis, State Grid Corporation of China, Beijing Intelligent Microelectronics Technology Co., Ltd., Beijing</p><p><sup>2</sup>Beijing Electric Power High Reliability Integrated Circuit Design Engineering Research Center, Beijing Intelligent Microelectronics Technology Co., Ltd., Beijing</p><p><img src="//html.hanspub.org/file/13-2690477x4_hanspub.png" /></p><p>Received: Oct. 7<sup>th</sup>, 2020; accepted: Oct. 21<sup>st</sup>, 2020; published: Oct. 28<sup>th</sup>, 2020</p><p><img src="//html.hanspub.org/file/13-2690477x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>This paper analyzes the challenges and problems for workflow testing for introducing the multi-core energy meter, and the faults of traditional workflow testing of security chip, and proposes a multi-core adaptive automatic workflow testing for security chip. This method is based on user case extraction and the workflow modulization of security chip. It extracts the variables like key state and instructions, and encapsulates SPI, 7816, 645 protocol, to simulate the multi-core workflow. It realizes the workflow modulization and automation, and greatly improves the efficiency of the workflow test and regression test.</p><p>Keywords:Security Chip, Workflow Test, Modulization, Multi-Core Service Scenarios</p><disp-formula id="hanspub.38328-formula30"><graphic xlink:href="//html.hanspub.org/file/13-2690477x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/13-2690477x7_hanspub.png" /> <img src="//html.hanspub.org/file/13-2690477x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><p>2019年8月10日，国网公司、中国电科院的专家发表了题为《新一代智能电能表支撑泛在电力物联网技术研究》的文章，指出国网多芯模组化三相智能电表应用设计技术与现行智能电表技术有很大的不同，颠覆智能电表的传统整机一体化设计技术，将采用多芯模组化应用创新设计，多芯涵盖计量、时钟、电压基准、存储、安全、通信、电源、显示、管理(MCU)等诸多个芯片。</p><p>芯片越多，密钥状态的组合就越多，这对传统的芯片业务测试工作提出了新的要求。如安全芯片业务测试，智能电能表通过嵌入安全芯片用于信息交互的安全认证，存在测试态和正式态两种模式，测试态用于电表挂装前的测试检验，正式态用于电表出厂挂装现场时使用。当主站对电能表进行参数设置、预存电费、信息返写和下发远程控制命令操作时，通过安全芯片进行安全认证、数据加解密处理以确保数据传输的安全性和完整性。这些功能都需要在两种密钥状态下进行完整的业务流程测试 [<xref ref-type="bibr" rid="hanspub.38328-ref1">1</xref>]。</p><p>传统的测试方法将密钥状态写入项目代码中，最多涉及的芯片数量不会超过2个，密钥场景有限。一旦芯片数量增加到多个，密钥场景组合成倍增加，传统的方式几乎无法灵活适应新的多芯模组化测试需求，只能对项目进行重新开发与设计。如何设计一种业务流程的测试方法，既能克服传统业务流程测试的缺陷，也能更有效地进行自动化测试和回归测试，适应多芯应用场景，是亟需解决的问题。</p></sec><sec id="s6"><title>2. 传统安全芯片的业务流程测试方法</title><p>以某地方电力自管户手持机项目为例，对远程主站进行模拟，通过读卡器的方式接入手持机安全芯片，实现业务的远程主站测试；然后再对手持机安全单元和电表芯片进行各种芯片交互流程。如下表所示，测试主体包括模拟主站，手持机安全单元、电表ESAM芯片。手持机安全单元和电表安全芯片分别存在测试和正式两种密钥状态，对应的密钥状态测试场景如下表1所示。</p><p>现在由于电表升级需要挂装新的电表，手持机在维护原有电表支持的情况下，需要新增对新装电表的服务支持。这个升级相当于对未来多芯应用场景的一个模拟，从原本的2个安全芯片交互到现在的3个安全芯片间业务交互。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Key scenario examples of hand-held device project for self management custome</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >密钥测试场景</th><th align="center" valign="middle" >模拟主站</th><th align="center" valign="middle" >手持机安全单元</th><th align="center" valign="middle" >电表安全芯片</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >测试(生产发行)</td><td align="center" valign="middle" >测试</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >测试-&gt;正式</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >测试</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >正式-&gt;测试</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >测试(密码机恢复)</td><td align="center" valign="middle" >测试</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >测试-&gt;正式</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >测试正式</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >正式</td></tr></tbody></table></table-wrap><p>表1. 自管户手持机项目密钥场景示例</p><p>很明显传统方法 [<xref ref-type="bibr" rid="hanspub.38328-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.38328-ref3">3</xref>] [<xref ref-type="bibr" rid="hanspub.38328-ref4">4</xref>] [<xref ref-type="bibr" rid="hanspub.38328-ref5">5</xref>] 存在的测试缺陷如下：</p><p>1、不支持交互业务的测试。特别是对于上表中的测试场景6，密钥正式态时，实际的产品使用中，电表与手持机交互、电表与主站交互、手持机与主站交互，这些业务流程是交叉进行的，在实际测试中应反复对这一场景进行交叉压力测试以保证对测试场景的完整覆盖；</p><p>2、测试方法无法进行有效的继承和复用。在实际的业务流程中，测试方法写入项目代码中。特别是如密钥状态、电表芯片指令等属于可变关键参数，一旦写进代码，实际测试中需要根据测试场景不断地做调整。针对新增需求，1，3，5，6的测试模块不同的只有密钥状态和电表芯片指令，其他测试条件相同，应该采用提取变量的方式对不变的测试场景进行封装和复用；</p><p>3、对增加的需求几乎无法快速响应。由于测试用例写入代码中，增加测试密钥场景或者增加测试用例，就需要相应的增加代码，不利于产品快速迭代和回归测试。如图，增加一个芯片，测试场景会基于不同的业务增加到9~15个，需要花费大量时间重新开发和其他现有芯片的交互代码，遍历各种可能的测试场景，代码开发量大。</p></sec><sec id="s7"><title>3. 安全芯片业务流程自动化测试系统的设计与实现</title><p>为克服传统业务测试的不足、适应新的多芯模组化应用设计，本文以安全芯片的业务测试为例，提出一种芯片业务流程自动化测试方法。通过将测试用例从代码中提取出来，实现了业务流程的模块化后，提取密钥场景和芯片指令等可变量参数，封装SPI，7816，645协议，能灵活的进行业务流程的交互配置，满足了芯片业务流交互测试的需求。</p><p>本文将以该项目为例，对多密钥测试场景的用例和指令流进行了分析和工作量统计，验证了本系统的设计的有效性。系统的模块图如图1所示。</p><p>基于指令流的安全芯片业务流程自动化测试系统连接加密机、安全芯片和安全单元等硬件，对测试场景进行模拟，提取用例语句，封装用例集，形成业务流。同时提供了对7816和SPI协议支持模块，对不同的读卡器提供了支持，提供对芯片和卡片的读写功能；提供了645协议支持模块，为了实现真实的上表测试，对645协议进行了支持，测试人员可以根据实际的测试需要进行选择。</p><p>本文将重点介绍业务流的设计，业务流的设计采用了三层结构的设计 [<xref ref-type="bibr" rid="hanspub.38328-ref6">6</xref>]，如图2所示，提取单流程用例语句，将用例语句进行封装形成功能模块集，再通过组合功能模块集形成业务模块集供测试调用。</p><sec id="s7_1"><title>3.1. 用例语句</title><p>系统将业务流程的指令写入Excel或SQLite数据库中，内容见表2，利用用例单元格内容指定调用的业务功能模块，通过用例语句模拟指令流，并建立代码和用例语句之间的映射关系。通过修改用例语句，达到调用不同代码函数，执行不同指令流，从而实现将测试用例从代码中提取出来的目的。同时对命令进行了函数封装，公用的指令固定地写在函数中，提取需要灵活修改的参数放在用例中供用户修改，这里主要是密钥状态和芯片指令，这样不同的项目可以灵活的继承和复用。</p><p>图1. 基于指令流的安全芯片业务流程自动化测试系统</p><p>图2. 业务流设计图</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> User case content example</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >类名</th><th align="center" valign="middle" >函数名</th><th align="center" valign="middle" >函数功能</th><th align="center" valign="middle" >入参1</th><th align="center" valign="middle" >入参2</th></tr></thead><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >IdAuth</td><td align="center" valign="middle" >身份认证</td><td align="center" valign="middle" >192.168.19.99</td><td align="center" valign="middle" >00</td></tr><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >ESAM_IdAuth</td><td align="center" valign="middle" >读卡器指令发送</td><td align="center" valign="middle" >0000000000000003</td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表2. 用例单元格内容示例</p><p>如表2所示，是一个远程身份认证的用例，在语句中指定了使用的类名和函数名，以及函数输入的参数，可以输入多个参数，示例中第一条语句是远程身份连接密码机发送身份认证命令，作为参数放在后面的是认证需要用到的密码机IP和安全芯片密钥状态。第二条语句向芯片发送指令，不同场景不同芯片指令不同。</p></sec><sec id="s7_2"><title>3.2. 功能模块集</title><p>功能模块集实现了各个业务流程，对用例语句进行了组合和模块化，即把参数更新、远程控制、数据清零等业务功能模块化，对于不同的密钥测试场景，输入不同密钥状态值，从而实现正向或者反向的模块调用。</p><p>如表3列出了“参数更新”子模块。参数更新涉及20多个文件，每个文件的更新方式不同，有的是明文更新，有的是密文更新，需要测试全更新、部分更新或带偏移地址进行更新等不同更新方式。仅一个参数更新的模块就涉及至少5大类更新方式。如表3所示，这5大类更新方法涉及的用例共用了“参数读取”、“读卡器指令发送”和“更新校验”等三个子用例，一个文件的更新想要覆盖完整的测试需要至少20条子用例，那么十几个文件，就是上百条子用例。采用用例提取的方式，将这些变量提出，只需要在用例语句中去修改参数即可以灵活的配置不同的用例覆盖，这就是用例提取带来的便利性，也是测试用例复用的基础。</p><p>同时还支持在测试过程中对输入值进行动态的调整，这个功能支持能在不调整代码的情况下直接进行正向和反向测试，比如表3的示例，将入参1和入参2的值改为错误的值，放在下一行的语句，就可以同时进行正向和反向的测试。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> User case content examples of parameter updat</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >类名</th><th align="center" valign="middle" >函数名</th><th align="center" valign="middle" >函数功能</th><th align="center" valign="middle" >入参1</th><th align="center" valign="middle" >入参2</th></tr></thead><tr><td align="center" valign="middle" >参数更新模块</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >IdAuth</td><td align="center" valign="middle" >身份认证</td><td align="center" valign="middle" >192.168.19.99</td><td align="center" valign="middle" >00</td></tr><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >ESAM_IdAuth</td><td align="center" valign="middle" >读卡器指令发送</td><td align="center" valign="middle" >0000000000000003</td><td align="center" valign="middle" ></td></tr><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >ParameterUpdate1</td><td align="center" valign="middle" >参数更新</td><td align="center" valign="middle" >192.168.19.99</td><td align="center" valign="middle" >00</td></tr><tr><td align="center" valign="middle" >Automation</td><td align="center" valign="middle" >ESAM_ParaUpdate</td><td align="center" valign="middle" >读卡器指令发送</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td></tr></tbody></table></table-wrap><p>表3. 参数更新业务测试模块化示例</p></sec><sec id="s7_3"><title>3.3. 业务模块集</title><p>将测试流程中涉及的功能模块集和业务模块集做了总结，如图3所示。</p><p>以“手持机安全单元与电表交互”这个业务流程为例，该业务流程模拟手持机与主站交互获取任务列表和数据然后再与电表进行交互的业务流程，需要功能模块中的“身份认证”、“会话协商验证”、“获取业务列表”、和“电表远程控制”这些模块。</p><p>从图中可以清楚的看到，在实际的业务流程中，不同的业务模块的调用是交互进行的，采用这样的设计，在模拟业务流时是十分灵活的，可以实现各个层级模块的复用，在自动化测试和后续的回归测试中优势非常突出。</p></sec></sec><sec id="s8"><title>4. 测试结果及分析</title><p>为了更好说明本方法更适用于需求变更，仍然以该项目为例，如表4，对比表1，增加新装电表的支持，相当于新增一个安全芯片，增加了7个密钥测试场景，即表4中5~11。项目测试场景变更如下：</p><p>在现有测试系统的框架下，由于在用例语句中已经将密钥状态和芯片指令流提取出来，只需要对用例语句做改动，就可以直接复用原有代码，形成新挂装电表的用例集；使用这些用例集，按照已挂装电表的设计组装功能模块集；将功能模块集组合成新的密钥测试场景需要的业务模块集。代码的改动少。</p><p>图3. 业务模块集</p><table-wrap id="table4" ><label><xref ref-type="table" rid="table4">Table 4</xref></label><caption><title> User case examples of parameter update in hand-held device project for self management custome</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >密钥测试 场景</th><th align="center" valign="middle" >手持机</th><th align="center" valign="middle" >已挂装电表 安全芯片</th><th align="center" valign="middle" >新装电表 安全芯片</th><th align="center" valign="middle" >主站交互流程用例数/指令数</th><th align="center" valign="middle" >表交互流程 用例数/指令数</th><th align="center" valign="middle" >总用例数 /总指令数</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >测试(生产发行)</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >测试(密码机恢复)</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >正式-&gt;测试-&gt;正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" >2/90</td><td align="center" valign="middle" >2/90</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >测试(生产发行)</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >测试</td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >测试-&gt;正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >1/12</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >测试</td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >正式-&gt;测试</td><td align="center" valign="middle" ></td><td align="center" valign="middle" ></td><td align="center" valign="middle" >1</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >1/12</td></tr><tr><td align="center" valign="middle" >9</td><td align="center" valign="middle" >测试(密码机恢复)</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >测试</td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr><tr><td align="center" valign="middle" >10</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >测试-&gt;正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >2/90</td><td align="center" valign="middle" >2/90</td></tr><tr><td align="center" valign="middle" >11</td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" ></td><td align="center" valign="middle" >正式</td><td align="center" valign="middle" >13/366</td><td align="center" valign="middle" >9/298</td><td align="center" valign="middle" >22/664</td></tr></tbody></table></table-wrap><p>表4. 自管户手持机项目需求变更密钥场景测试用例</p><p>若按照上表的数据进行统计，原两块芯片交互68个用例/2082个指令流，增加一块不同COS的芯片，增加用例数92个/2770个指令流，按照这个比例进行线性拟合，即假设每多增加一个芯片，只和原场景中的一个芯片进行交互，如下图4所示：</p><p>图4. 多芯应用场景测试量估计图</p><p>如图所示，芯片增加会极大的增加测试用例和指令流的个数。如果把用例写入代码中，不仅测试工作量大幅提高，测试开发的工作量也将大幅的增加。而本方法，由于将测试用例、密钥状态和芯片指令可变量提取出来，使用了灵活的可组合的业务模块化方式对测试用例进行组合和复用，基本不涉及代码的开发，能适应快速迭代的产品开发进程，为多芯应用场景提供了快速有效的测试方法。</p></sec><sec id="s9"><title>5. 结论</title><p>本文提出一种安全芯片业务流程自动化测试方法。通过构建基于用例语句的三层模块设计的自动化测试方法，模拟主站、手持机芯片、电表芯片的交互流程，将测试用例、密钥状态和芯片指令从代码中提取出来，实现了业务流程的模块化和自动化，并能灵活地进行业务流程的交互配置。在实际的业务测试应用中，相较于传统方法能更快地进行冒烟测试，积累的测试用例能进行广泛的自动化测试，在后期能更快地进行回归测试，保证了产品质量的同时保证了项目的进度，也为未来的多芯模组化三相智能电表的多芯应用场景测试提供了有益的思路。</p></sec><sec id="s10"><title>文章引用</title><p>周 静,付青琴,刘 佳,白雪松,梁昭庆. 一种适应多芯场景的安全芯片业务测试系统设计A Multi-Core Adaptable Automatic Workflow Testing System Design for Security Chip[J]. 软件工程与应用, 2020, 09(05): 434-440. https://doi.org/10.12677/SEA.2020.95050</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.38328-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">王爱英. 智能卡技术[M]. 北京: 清华大学出版社, 2009.</mixed-citation></ref><ref id="hanspub.38328-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">秦璐怡. 基于智能卡芯片的一种自动化测试方法[D]: [硕士学位论文]. 西安: 西安电子科技大学, 2012.</mixed-citation></ref><ref id="hanspub.38328-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Fu, Q.Q. (2015) A Grey Lock Method to Support Mul-tiple Pre-Freezing Mechanism in IC Card. CRC Press, Balkema, 1395-1400.</mixed-citation></ref><ref id="hanspub.38328-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Liu, J., et al. (2017) Implementation of IC Card Authentication Method Based on Self-Defined Algorithm. 2nd International Conference on Electrical and Electronics: Techniques and Applications, Beijing. 15-16 January 2017, 324-329. &lt;br&gt;https://doi.org/10.12783/dtetr/eeta2017/7750</mixed-citation></ref><ref id="hanspub.38328-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">孔梦荣, 朱国华. 基于智能卡的远程认证体制[J]. 计算机工程与设计, 2008, 29(3): 606-608.</mixed-citation></ref><ref id="hanspub.38328-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Zhou, J. (2019) An Instruction Based Automatic Workflow Testing Method for Security Chip. IEEE 2nd International Conference on Automation, Electronics and Electrical Engineering, Shenyang, 22-24 November 2019, 564.</mixed-citation></ref></ref-list></back></article>