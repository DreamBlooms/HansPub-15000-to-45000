<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">AAM</journal-id><journal-title-group><journal-title>Advances in Applied Mathematics</journal-title></journal-title-group><issn pub-type="epub">2324-7991</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/AAM.2021.105188</article-id><article-id pub-id-type="publisher-id">AAM-42827</article-id><article-categories><subj-group subj-group-type="heading"><subject>AAM20210500000_77894186.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  含区间参数非线性方程的多步区间迭代算法
  Multi-Step Interval Iteration Algorithm for Nonlinear Equations with Interval Parameters
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>杨</surname><given-names>骐骏</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>陈</surname><given-names>晋</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>王</surname><given-names>海军</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>中国矿业大学数学学院，江苏 徐州</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>12</day><month>05</month><year>2021</year></pub-date><volume>10</volume><issue>05</issue><fpage>1776</fpage><lpage>1789</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  本文在Nikas的含区间参数非线性方程的拓展区间牛顿法的基础上，结合多步区间迭代，提出了求解含区间参数非线性方程的一个拓展的多步区间迭代算法，证明新算法至少具有三阶收敛的性质，同时给出了12个数值算例，算例结果验证了新提出的多步区间迭代算法相比Nikas提出的拓展区间牛顿法在计算效率上有所提高，是有效和可靠的。
   Based on Nikas’ extended interval Newton method for nonlinear equations with interval parameters, combined with multi-step interval iteration, this paper proposes an extended multi-step interval iteration algorithm for solving nonlinear equations with interval parameters. It proves that the new algorithm has at least three order convergence, and 12 numerical examples are given at the same time. Numerical results verify that new proposed multi-step interval iteration algorithm is effective and reliable compared with the extended interval Newton method proposed by Nikas.
 
</p></abstract><kwd-group><kwd>含区间参数的非线性方程，拓展区间牛顿法，多步区间迭代, Nonlinear Equation with Interval Parameters</kwd><kwd> Extended Interval Newton Method</kwd><kwd> 
Multi-Step Interval Iteration</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>摘要</title><p>本文在Nikas的含区间参数非线性方程的拓展区间牛顿法的基础上，结合多步区间迭代，提出了求解含区间参数非线性方程的一个拓展的多步区间迭代算法，证明新算法至少具有三阶收敛的性质，同时给出了12个数值算例，算例结果验证了新提出的多步区间迭代算法相比Nikas提出的拓展区间牛顿法在计算效率上有所提高，是有效和可靠的。</p></sec><sec id="s2"><title>关键词</title><p>含区间参数的非线性方程，拓展区间牛顿法，多步区间迭代</p></sec><sec id="s3"><title>Multi-Step Interval Iteration Algorithm for Nonlinear Equations with Interval Parameters<sup> </sup></title><p>Qijun Yang, Jin Chen, Haijun Wang</p><p>School of Mathematics, China University of Mining and Technology, Xuzhou Jiangsu</p><p><img src="//html.hanspub.org/file/39-2621637x4_hanspub.png" /></p><p>Received: Apr. 27<sup>th</sup>, 2021; accepted: May 11<sup>th</sup>, 2021; published: May 31<sup>st</sup>, 2021</p><p><img src="//html.hanspub.org/file/39-2621637x5_hanspub.png" /></p></sec><sec id="s4"><title>ABSTRACT</title><p>Based on Nikas’ extended interval Newton method for nonlinear equations with interval parameters, combined with multi-step interval iteration, this paper proposes an extended multi-step interval iteration algorithm for solving nonlinear equations with interval parameters. It proves that the new algorithm has at least three order convergence, and 12 numerical examples are given at the same time. Numerical results verify that new proposed multi-step interval iteration algorithm is effective and reliable compared with the extended interval Newton method proposed by Nikas.</p><p>Keywords:Nonlinear Equation with Interval Parameters, Extended Interval Newton Method, Multi-Step Interval Iteration</p><disp-formula id="hanspub.42827-formula36"><graphic xlink:href="//html.hanspub.org/file/39-2621637x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2021 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/39-2621637x7_hanspub.png" /> <img src="//html.hanspub.org/file/39-2621637x8_hanspub.png" /></p></sec><sec id="s5"><title>1. 引言</title><sec id="s5_1"><title>1.1. 含区间参数非线性方程</title><p>非线性问题在现实生活中有着极其广泛地应用，国内外许多学者提炼出诸多科学领域(如航天航空 [<xref ref-type="bibr" rid="hanspub.42827-ref1">1</xref>]、气象 [<xref ref-type="bibr" rid="hanspub.42827-ref2">2</xref>]、化学、生物 [<xref ref-type="bibr" rid="hanspub.42827-ref3">3</xref>]、流体力学、建筑 [<xref ref-type="bibr" rid="hanspub.42827-ref4">4</xref>] )的重要非线性方程，这些方程亟待解决。大部分情况下非线性方程很难获得精确解，通常运用数值解法求其数值解，并保证数值解与真解的误差要控制在实际问题可以接受的范围内，区间方法就是其中一种新颖的数值方法。</p><p>Moore首次将牛顿迭代法拓展成区间牛顿迭代形式，得到区间牛顿迭代法 [<xref ref-type="bibr" rid="hanspub.42827-ref5">5</xref>]，虽然此方法适用于大部分方程，但是在导数区间扩张包含零的情况下却无法使用；1979年，Hansen对区间牛顿法进行了改进使其能在所有情况下适用，并能够收敛到方程的零解 [<xref ref-type="bibr" rid="hanspub.42827-ref6">6</xref>]；2007年，Nikas将区间牛顿法推广到含参数的区间方程中，形成了拓展的区间牛顿法，通过逐步隔离零解区间(零解所在的区间)的端点来获得零解区间的近似，最终能准确收敛到零解区间，并用一系列例子进行数值模拟，验证了其方法的正确性 [<xref ref-type="bibr" rid="hanspub.42827-ref6">6</xref>]。</p><p>在实际工程问题中，由于参数的测量不可能完全精确，我们经常会遇到如下形式的方程</p><p>f ( x ; p ) = 0 (1.1)</p><p>其中， p ∈ [ p ] , [ p ] ∈ I R ，IR为由实数表示的所有区间数全体。</p><p>为方便引入如下定义：</p><p>定义1.1设 f : R &#215; I R → I R 是一个连续可微的函数， [ x ] 0 是初始搜索区间， [ p ] 是包含f中所有参数的区间向量。则形如</p><p>f ( x ; [ p ] ) = 0 (1.2)</p><p>的非线性区间方程称为含参数的非线性区间方程。</p><p>(1.2)中所有零解区间包含了所有方程(1.1)中的所有零点，(1.2)的零解区间有三种情况：零区间(没有零点)、退化区间(只有一个零点或多个间断的零点)、非退化区间。显然，对于最后一种情况，零解区间包含的零点无穷多个零点，但因为(1.2)中的参数是连续变化的， f ( x ; [ p ] ) = 0 的零点也应该是连续变化的，且零解区间的个数是有限的。因此我们不是去搜索单独的零点而是去确定所有零点所组成的区间。</p><p>根据上述解释，我们可以得到如下定义：</p><p>定义1.2 ∀ p ∈ [ p ] ∈ I R , f ( x , p ) = 0 都有零点，所有参数遍历参数区间后形成的零点集合构成了 f ( x ; [ p ] ) = 0 的解集，称为零解区间。</p></sec><sec id="s5_2"><title>1.2. 区间分析理论的基本概念</title><p>为了后继表述的方便，我们给出如下区间分析的相关定义和规定，详细的信息可参考 [<xref ref-type="bibr" rid="hanspub.42827-ref5">5</xref>]。</p><p>实数区间是有界闭集，且具有如下形式：</p><p>[ x ] = [ x _ , x &#175; ] = { x ∈ R | x _ ≤ x ≤ x &#175; }</p><p>其中， x _ , x &#175; ∈ R 且 x _ ≤ x &#175; ， x _ 表示区间下界， x &#175; 为区间上界。有界闭区间通常用IR表示。</p><p>下面介绍关于区间的四个简单概念：区间中点 m ( [ x ] ) 、区间半径 r ( [ x ] ) 、区间宽度 w ( [ x ] ) 、区间并 ⊔</p><p>m ( [ x ] ) = x _ + x &#175; 2</p><p>r ( [ x ] ) = x &#175; − x _ 2</p><p>w ( [ x ] ) = x &#175; − x _ = 2 r ( [ x ] )</p><p>[ x ] ⊔ [ y ] = [ min { x _ , y _ } , max { x &#175; , y &#175; } ]</p><p>以及区间的四则运算：</p><p>[ x ] + [ y ] = [ x _ + y _ , x &#175; + y &#175; ]</p><p>[ x ] − [ y ] = [ x _ − y &#175; , x &#175; − y _ ]</p><p>[ x ] ⋅ [ y ] = [ min { x _   y _ , x &#175;   y &#175; , x _   y &#175; , x &#175; y _ } , max { x _   y _ , x &#175;   y &#175; , x _   y &#175; , x &#175; y _ } ]</p><p>[ x ] [ y ] = [ min { x &#175; y &#175; , x _ y &#175; , x &#175; y &#175; , x _ y &#175; } , max { x &#175; y &#175; , x _ y &#175; , x &#175; y &#175; , x _ y &#175; } ] , 0 ∉ [ y ]</p><p>由区间并的概念可将区间四则运算转换为如下形式：</p><p>[ x ] + [ y ] = { x _ + [ y ] } ⊔ { x &#175; + [ y ] }</p><p>[ x ] − [ y ] = { x _ − [ y ] } ⊔ { x &#175; − [ y ] }</p><p>[ x ] ⋅ [ y ] = { x _ ⋅ [ y ] } ⊔ { x &#175; ⋅ [ y ] }</p><p>[ x ] [ y ] = { x _ [ y ] } ⊔ { x &#175; [ y ] } (1.3)</p></sec></sec><sec id="s6"><title>2. 拓展的区间牛顿法(EIN)</title><p>解决参数固定的情况下的非线性区间方程 f ( x ; p ) = 0 ，通常采用普通的区间牛顿法，即</p><p>{ m k = m ( [ x ] k ) N ( [ x ] k ) = m k − F ( m k ) F ′ ( [ x ] k ) [ x ] k + 1 = [ x ] k ∩ N ( [ x ] k ) (2.1)</p><p>但对含参数的非线性区间方程(1.2)，普通的区间牛顿法应用会出现一些缺陷。例如，对于非退化的零解区间，该算法并不能收敛到(1.2)的解区间。Nikas详细论述了其在迭代过程中由于收敛到点造成的不精确问题、不能保证所求零解区间的连续性、以及其他一些病态情况 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>]。</p><p>为此Nikas提出了拓展的区间牛顿法(EIN) [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>]，以下加以介绍：</p><p>对于含参数的非线性区间方程 f ( x , [ p ] ) = 0 ，令 F ( m ( [ x ] ) , [ p ] ) = [ F m _ , F m &#175; ] ， F ′ ( m ( [ x ] ) , [ p ] ) = [ d _ , d &#175; ] ，则(2.1)中 N ( [ x ] k ) 可改写为</p><p>N ( [ x ] k ) = m k − F ( m k , [ p ] ) F ′ ( [ x ] k , [ p ] ) = m k − [ F m _ , F m &#175; ] [ d _ , d &#175; ] = m k − F m _ [ d _ , d &#175; ] ⊔ F m &#175; [ d _ , d &#175; ] = ( m − F m _ [ d _ , d &#175; ] ) ⊔ ( m − F m &#175; [ d _ , d &#175; ] )</p><p>令 N L = m − F m _ [ d _ , d &#175; ] ， N U = m − F m &#175; [ d _ , d &#175; ] ，则普通区间牛顿迭代可变为拓展的区间牛顿迭代，即</p><p>{ m k = m ( [ x ] k ) H ( [ x ] k ) = N L ⊔ N U [ x ] k + 1 = [ x ] k ∩ H ( [ x ] k ) (2.2)</p><p>下面给出 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 中证明 H ( [ x ] k ) = N L ⊔ N U 内部的部分零解区间 [ r ] 的存在性的三个定理：</p><p>定理2.1 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 假设f是定义1.1中定义含参数的非线性连续可微区间函数，设区间方程 f ( x , [ p ] ) = 0 的初始区间为 [ x ] 和零解区间为 [ x ] * ⊆ [ x ] 。如果 0 ∈ F ( m , [ p ] ) ，则内部区间</p><p>[ r ] = [ min { N L &#175; , N U &#175; } , max { N L _ , N U _ } ]</p><p>必定存在且 [ r ] ⊆ [ x ] * (情况分为四种，见图1)。</p><p>定理2.2 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 假设f是定义1.1中定义含参数的非线性连续可微区间函数，设区间方程 f ( x , [ p ] ) = 0 的初始区间为 [ x ] 及零解区间为 [ x ] * ⊆ [ x ] 。如果 0 ∉ F ( m , [ p ] ) 且 0 ∉ F ′ ( m , [ p ] ) ，且内部区间 [ r ] 存在则 [ r ] ⊆ [ x ] * (情况为两种，见图2)。</p><p>图1. 定理2.1的四种情况</p><p>图2. 定理2.2的两种情况(第二种中 [ r ] 情况不存在)</p><p>定理2.3 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 假设f是定义1.1中定义含参数的非线性连续可微区间函数，设区间方程 f ( x , [ p ] ) = 0 的初始区间为 [ x ] 及零解区间为 [ x ] * ⊆ [ x ] 。如果 0 ∉ F ( m , [ p ] ) 且 0 ∈ F ′ ( m , [ p ] ) ，此时 [ r ] 存在，但是 [ r ] ∉ [ x ] * ，由此可以将此区间排除(情况为两种，见图3)。</p><p>除了以上情况之外还有一种特殊情况，即当 0 ∈ F ′ ( m , [ p ] ) 和 F m _ = 0 或 F m &#175; = 0 时，由H算子所得的新搜索区间为实数轴上的一条直线，与原搜索区间的交依然是原搜索区间，搜索区间没有减小。对于这种情况，采用启发式技术，即采用二分法对搜索区间进行人工分割，旨在避免导致这种特殊情况的产生。</p></sec><sec id="s7"><title>3. 多步区间迭代及拓展形式</title><p>Nikas算法实质上是对含参数的非线性区间函数的上界函数 f U 与上界函数 f U 应用了点迭代的牛顿算子，容易证明，Nikas的算法收敛速度一般是有限的，只有在处理单调区间上的问题才具有二阶敛速。这启发我们将点迭代中加速牛顿算子的方法应用到Nikas算法中。下面我们介绍多步区间迭代法 [<xref ref-type="bibr" rid="hanspub.42827-ref8">8</xref>]：</p><sec id="s7_1"><title>3.1. 二步区间牛顿迭代 [<xref ref-type="bibr" rid="hanspub.42827-ref8">8</xref>]</title><p>对传统的二步牛顿迭代进行区间扩张，可以得到二步区间牛顿迭代：</p><p>图3. 定理2.3的两种情况</p><p>[ x ] k + 1 = [ x ] k ∩ P ( [ x ] k , [ y ] k )</p><p>其中，</p><p>P ( [ x ] k , [ y ] k ) = m ( [ y ] k ) − f ( m ( [ y ] k ) ) F ′ ( [ x ] k )</p><p>[ y ] k = [ x ] k ∩ N ( [ x ] k )</p><p>N ( [ x ] k ) = m ( [ x ] k ) − f ( m ( [ x ] k ) ) F ′ ( [ x ] k )</p></sec><sec id="s7_2"><title>3.2. 区间Ostrowski迭代 [<xref ref-type="bibr" rid="hanspub.42827-ref8">8</xref>]</title><p>[ x ] k + 1 = [ x ] k ∩ O ( [ x ] k , [ y ] k )</p><p>其中，</p><p>O ( [ x ] k , [ y ] k ) = m ( [ y ] k ) − f ( m ( [ x ] k ) ) ( f ( m ( [ x ] k ) ) − 2 f ( m ( [ y ] k ) ) ) F ′ ( [ x ] k ) f ( m ( [ y ] k ) )</p><p>[ y ] k = [ x ] k ∩ N ( [ x ] k )</p><p>N ( [ x ] k ) = m ( [ x ] k ) − f ( m ( [ x ] k ) ) F ′ ( [ x ] k )</p></sec><sec id="s7_3"><title>3.3. 区间King迭代 [<xref ref-type="bibr" rid="hanspub.42827-ref8">8</xref>]</title><p>对King迭代法坐区间扩张也可得到如下形式：</p><p>[ x ] k + 1 = [ x ] k ∩ K ( [ x ] k , [ y ] k )</p><p>其中，</p><p>K ( [ x ] k , [ y ] k ) = m ( [ y ] k ) − θ k f ( m ( [ y ] k ) ) F ′ ( [ x ] k )</p><p>[ y ] k = [ x ] k ∩ N ( [ x ] k )</p><p>N ( [ x ] k ) = m ( [ x ] k ) − f ( m ( [ x ] k ) ) F ′ ( [ x ] k )</p><p>θ k = f ( m ( [ x ] k ) ) − 1 2 f ( m ( [ y ] k ) ) f ( m ( [ x ] k ) ) − 5 2 f ( m ( [ y ] k ) )</p><p>由文献 [<xref ref-type="bibr" rid="hanspub.42827-ref8">8</xref>] 可知以上区间迭代法都是至少三阶收敛的，我们将其运用到拓展的区间牛顿法的零解区间端点的逼近上，可以将拓展的区间牛顿法的收敛阶予以提高，使其以更快的速度收敛到零解区间。</p></sec></sec><sec id="s8"><title>4. 拓展的多步区间迭代</title><p>拓展的区间牛顿算法为：</p><p>{ m k = m ( [ x ] k ) H ( [ x ] k ) = N L ⊔ N U [ x ] k + 1 = [ x ] k ∩ H ( [ x ] k )</p><p>其中 N L = m − F m _ [ d _ , d &#175; ] ， N U = m − F m &#175; [ d _ , d &#175; ] 。</p><p>运用二步区间牛顿迭代修改 N L , N U 算子为 P L , P U 算子：</p><p>P L ( [ x ] k , [ y ] k ) = m ( [ y ] k ) − inf ( F ( m ( [ y ] k ) ) ) F ′ ( [ x ] k )</p><p>[ y ] k = [ x ] k ∩ N L ( [ x ] k )</p><p>N L ( [ x ] k ) = m ( [ x ] k ) − inf ( F ( m ( [ x ] k ) ) ) F ′ ( [ x ] k )</p><p>以及</p><p>P U ( [ x ] k , [ y ] k ) = m ( [ y ] k ) − sup ( F ( m ( [ y ] k ) ) ) F ′ ( [ x ] k )</p><p>[ y ] k = [ x ] k ∩ N U ( [ x ] k )</p><p>N U ( [ x ] k ) = m ( [ x ] k ) − sup ( F ( m ( [ x ] k ) ) ) F ′ ( [ x ] k )</p><p>由此可以得到拓展的二步区间牛顿迭代(EIN_Multi)：</p><p>{ m k = m ( [ x ] k ) P ( [ x ] k ) = P L ⊔ P U [ x ] k + 1 = [ x ] k ∩ P ( [ x ] k )</p><p>其中， P L = P L ( [ x ] k , N L ( [ x ] k ) ) ， P U = P U ( [ x ] k , N U [ [ x ] k ] ) 。</p><p>相似的，我们也同样能得到拓展的区间Ostrowski迭代与拓展的区间King迭代：</p><p>拓展的区间Ostrowski迭代(EIN_Ostrowski)：</p><p>{ m k = m ( [ x ] k ) O ( [ x ] k ) = O L ⊔ O U [ x ] k + 1 = [ x ] k ∩ O ( [ x ] k )</p><p>其中， O L = O L ( [ x ] k , N L ( [ x ] k ) ) ， O U = O U ( [ x ] k , N U ( [ x ] k ) ) 。</p><p>拓展的区间King迭代(EIN_King)：</p><p>{ m k = m ( [ x ] k ) K ( [ x ] k ) = K L ⊔ K U [ x ] k + 1 = [ x ] k ∩ K ( [ x ] k )</p><p>其中， K L = K L ( [ x ] k , N L ( [ x ] k ) ) ， K U = K U ( [ x ] k , N U ( [ x ] k ) ) 。</p><p>引理4.1 [<xref ref-type="bibr" rid="hanspub.42827-ref5">5</xref>] 设 F ′ ( [ x ] ) 为Lipschitz区间函数， x * 为非线性方程的实根，则存在常数 0 &lt; c &lt; 1 ，使得：</p><p>F ′ ( [ x ] ) ⊆ f ′ ( x * ) + c w ( [ x ] ) ⋅ [ − 1 , 1 ]</p><p>因此，存在常数 K &gt; 0 ，使得：</p><p>w ( 1 F ′ ( [ x ] ) ) ≤ K w ( [ x ] )</p><p>引理4.2 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 零解区间 [ x ] * ⊆ [ x ] 的端点可以被 N L 与 N U 封闭到任意精度，零解区间可以被拓展的牛顿区间迭代封闭到任意精度，且在单调区间的收敛速度至少是二阶的。</p><p>定理4.1 零解区间 [ x ] * ⊆ [ x ] 的端点可以被 P L 与 P U 封闭到任意精度，也由此可知零解区间可以被拓展的二步区间牛顿迭代封闭到任意精度，且在单调区间上拓展的二步区间牛顿收敛速度至少是三阶的。</p><p>证明：由引理4.2可知 N L 算子与 N U 算子在求解非线性函数时是收敛的，且对于单调函数零点求解时具备二阶敛速，即存在 k 1 &gt; 0 ，使得：</p><p>w ( N L ( [ x ] k ) ) ≤ k 1 w ( [ x ] k ) 2</p><p>由中值定理可知，存在 ξ ∈ N L ( [ x ] k ) ，使得：</p><p>w ( P L ) ≤ | f L ( m ( [ y ] k ) ) F ′ ( [ x ] k ) | ≤ | f ′ L ( ξ ) | ⋅ | m ( [ y ] k ) − x * | ⋅ w ( 1 F ′ ( [ x ] k ) ) ≤ | f ′ L ( ξ ) | ⋅ w ( [ y ] k ) ⋅ w ( 1 F ′ ( [ x ] k ) ) ≤ | f ′ L ( ξ ) | ⋅ w ( N L ( [ x ] k ) ) ⋅ w ( 1 F ′ ( [ x ] k ) ) ≤ k 1 ⋅ | f ′ L ( ξ ) | ⋅ w ( 1 F ′ ( [ x ] k ) ) ⋅ w ( [ x ] k ) 2</p><p>其中 x * 为零解区间的一个端点。</p><p>因为 f ′ L 在区间 N L ( [ x ] k ) 上连续可微，所以存在 k 2 &gt; 0 ，使得 | f ′ L ( ξ ) | ≤ k 2 。</p><p>由引理4.1可知，存在 k 3 &gt; 0 ，使得</p><p>w ( 1 F ′ ( [ x ] k ) ) ≤ k 3 w ( [ x ] k )</p><p>即存在 k 0 &gt; 0 有</p><p>w ( P L ) ≤ k 1 k 2 k 3 w ( [ x ] k ) 3 ≤ 1 2 k 0 w ( [ x ] k ) 3</p><p>同理可以得到</p><p>w ( P U ) ≤ 1 2 k 0 w ( [ x ] k ) 3</p><p>所以</p><p>w ( [ x ] k + 1 ) ≤ w ( P L ∪ P U ) ≤ w ( P L ) + w ( P U ) ≤ k 0 w ( [ x ] k ) 3</p><p>上式表明拓展的二步区间牛顿在单调区间上至少具备三阶敛速，定理得证。</p><p>注：拓展的区间Ostrowski迭代和拓展的区间King迭代与拓展的区间二步牛顿迭代具有相同的收敛速度，证明方法相同，不再重复。</p><p>下面以EIN_Multi为例，给出求解含区间参数非线性方程零解区间的EIN_Multi算法，其中，S表示搜索区间(初始值为初始区间X<sub>0</sub>)，Z为零解区间(初始值为空集)，X为迭代过程中的搜索区间，K为迭代次数，B为搜索区间采用二分的次数。</p><p>注：第1步为初始化，第2~28步为函数主体，第二步判断搜索区间是否为空集，若非空则继续搜索，第4步判断区间宽度，若小于给定精度则归入Z (零解区间)，第7~9步计算P<sub>L</sub>与P<sub>U</sub>，形成虚拟的零解区间r (可能为空集)，若遇到特殊情况则将搜索区间采用二分法形成两个子区间，二分次数 相应增加一个单位，之后判断r是否为空，再将其传输到Z中，相应的将非空子区间X<sub>1</sub>与X<sub>2</sub>传输到S中，重复迭代，每迭代一次，K增加一个单位，直至所有零解区间传输到Z中。</p></sec><sec id="s9"><title>5. 数值算例</title><p>本节通过对比文献 [<xref ref-type="bibr" rid="hanspub.42827-ref7">7</xref>] 的12个带区间参数的非线性方程(见表1)来检验新算法的有效性，并给出了相应的函数图像(见图4)。计算精度<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/39-2621637x184_hanspub.png" xlink:type="simple"/></inline-formula>取为10<sup>−14</sup>，其中SI为初始区间，IT为迭代次数，B为二分次数，T为程序运行时间，I为区间解个数。下面我们通过数值实例来比较原始的HIN算法与新提出三种改进算法的差别。</p><table-wrap-group id="1"><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Test functio</title></caption><table-wrap id="1_1"><table><tbody><thead><tr><th align="center" valign="middle" >函数编号</th><th align="center" valign="middle" >函数形式</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >x 3 + [ p ] 2 ⋅ x 2 + [ p ] 1 ⋅ x + [ p ] 0 , [ p ] 0 = [ 1 , 1.8907 ] , [ p ] 1 = [ 2.8749 , 4.2501 ] , [ p ] 2 = [ 1.2499 , 2.2501 ]</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >x 2 − [ p ] , [ p ] = [ − 2 , 2 ]</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >sin ( [ p ] 2 + 2 ⋅ x 2 ) e − [ p ] 2 − x 2 , [ p ] = [ − 0.5 , 0.5 ]</td></tr></tbody></table></table-wrap><table-wrap id="1_2"><table><tbody><thead><tr><th align="center" valign="middle" >4</th><th align="center" valign="middle" >x 6 − p 5 ⋅ x 5 + p 4 ⋅ x 4 + [ p ] 3 ⋅ x 3 − p 2 ⋅ x 2 + [ p ] 1 ⋅ x + [ p ] 0 , [ p ] 0 = 16.1024 , [ p ] 1 = [ 15.8448 , 16.52 ] , p 2 = 7.872 , [ p ] 3 = [ − 4.0388 , − 3.875 ] , p 4 = 1.0256 , p 5 = 2</th></tr></thead><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >x 4 + [ p ] 1 3 ⋅ [ p ] 2 ⋅ x 3 + [ p ] 1 2 ⋅ [ p ] 2 2 ⋅ [ p ] 3 ⋅ x 2 + [ p ] 1 ⋅ [ p ] 2 3 ⋅ [ p ] 3 2 ⋅ x 2 + [ p ] 3 , [ p ] 1 = [ 1.15 , 1.65 ] , [ p ] 2 = [ 1.3 , 1.7 ] , [ p ] 3 = [ 0.6 , 1.0 ]</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >[ ( x + 10 ⋅ [ p ] 0 ) 2 − 5 ⋅ ( x − [ p ] 1 ) 2 − ( x − 2 [ p ] 2 ) 4 ] ⋅ e − x 2 + 2 , [ p ] 0 = [ − 1 , 0 ] , [ p ] 1 = [ 0 , 0.5 ] , [ p ] 2 = [ − 0.25 , 0.25 ]</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >y = ( 5 π ⋅ x − ( 5.1 4 ⋅ π 2 ) ⋅ x 2 + a − 6 ) 2 + 10 ⋅ 1 1 − 1 8 π ⋅ cos ( x ) , [ p ] = [ − 2 , 0 ]</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >∑ j = 1 5 { j ⋅ sin ( ( j + 1 ) ⋅ [ p ] + j ) } ⋅ ∑ i = 1 5 { i ⋅ sin ( ( i + 1 ) ⋅ x + i ) } − 10 , [ p ] = [ − 0.1 , 0.2 ]</td></tr><tr><td align="center" valign="middle" >9</td><td align="center" valign="middle" >∑ j = 1 5     j ⋅ [ sin ( ( j + 1 ) ⋅ x + j ) + x ⋅ sin ( ( j + 1 ) ⋅ [ p ] + j ) ] , p = [ − 0.1 , 0.2 ]</td></tr><tr><td align="center" valign="middle" >10</td><td align="center" valign="middle" >100 ⋅ ( [ p ] − x 2 ) 2 + ( x − 1 ) 2 , p = [ − 5 , 5 ]</td></tr><tr><td align="center" valign="middle" >11</td><td align="center" valign="middle" >∑ i = 1 i ≠ 4 7 [ p ] i 2 4000 + x 2 4000 − ( ∏ i = 1 i ≠ 4 7 cos ( [ p ] i i ) + x 2 ) , [ p ] i = 1 , ⋯ , 7 = [ 1 , 2 ]</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >∑ i = 1 8 { Y i ( 1 + 10 ⋅ Z i + 1 ) } + Y 9 ⋅ ( 1 + 10 ⋅ sin 2 ( π ⋅ x ) ) + Z 1 + ( x − 1 4 ) 2 − c , Y i = ( [ p ] i − 1 ) 2 , Z i = sin 2 ( π ⋅ [ p ] i ) , [ p ] i = 1 , ⋯ , 9 = [ 0.9 , 1.1 ] , c = 05341615278415</td></tr></tbody></table></table-wrap></table-wrap-group><p>表1. 测试函数</p><p>图4. 测试函数图像</p><p>由于四种方法所求零解区间一致，数值结果表明四种方法确实有效地收敛到了零解区间，差异主要存在于迭代次数，程序运行时间，二分次数三个部分，下面我们仅展示EIN_Multi所得到的具体数值结果(见表2)，其余结果汇总至对比表(表3)。表3中T1表示EIN程序所运行的时间，T2表示EIN_Multi程序所运行的时间，T3表示EIN_Ostrowski程序所运行的时间，T4表示EIN_King程序所运行的时间;IT1表示EIN方法所用的迭代次数，IT2表示EIN_Multi方法所用的迭代次数，IT3表示EIN_Ostrowski方法所用的迭代次数，IT4表示EIN_King方法所用的迭代次数，B1，B2，B3，B4所对应的方法同上。</p><table-wrap-group id="2"><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Numerical results are calculated by EIN_Mult</title></caption><table-wrap id="2_1"><table><tbody><thead><tr><th align="center" valign="middle" >NO.</th><th align="center" valign="middle" >SI.</th><th align="center" valign="middle" >IT.</th><th align="center" valign="middle" >T.</th><th align="center" valign="middle" >B.</th><th align="center" valign="middle" >I.</th><th align="center" valign="middle" >零解区间</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >[ − 3 , 2 ]</td><td align="center" valign="middle" >36</td><td align="center" valign="middle" >0.274717</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >R = [ − 1.17326412409134 , − 0.24999180360996 ]</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >[ − 2 , 3 ]</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >0.04699</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >R = [ − 1.41421356237310 , 1.41421356237310 ]</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >[ − 2.5 , 2.5 ]</td><td align="center" valign="middle" >247</td><td align="center" valign="middle" >2.090558</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >9</td><td align="center" valign="middle" >R 1 = [ − 2.50000000000000 , − 2.48156912198301 ] R 2 = [ − 2.17080376367482 , − 2.14181908208529 ] R 3 = [ − 1.77245385090553 , − 1.73683408925256 ] R 4 = [ − 1.25331413731552 , − 1.20241271067587 ] R 5 = [ 1.20241271067587 , 1.25331413731552 ] R 6 = [ 1.73683408925256 , 1.77245385090553 ] R 7 = [ 2.14181908208529 , 2.17080376367482 ] R 8 = [ 2.48156912198301 , 2.50000000000000 ] R 9 = [ − 0.00000000000000 , 0.00000000000000 ]</td></tr></tbody></table></table-wrap><table-wrap id="2_2"><table><tbody><thead><tr><th align="center" valign="middle" >4</th><th align="center" valign="middle" >[ − 1.5 , 2.5 ]</th><th align="center" valign="middle" >56</th><th align="center" valign="middle" >0.687295</th><th align="center" valign="middle" >6</th><th align="center" valign="middle" >1</th><th align="center" valign="middle" >R = [ − 1.09407604482697 , − 0.90864276306268 ]</th></tr></thead><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >[ − 10 , 5 ]</td><td align="center" valign="middle" >57</td><td align="center" valign="middle" >0.719202</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >R = [ − 7.59915460917110 , − 0.07454800183027 ]</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >[ − 2 , 2 ]</td><td align="center" valign="middle" >302</td><td align="center" valign="middle" >3.329902</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >R 1 = [ − 1.25104523267424 , − 0.11197875777009 ] R 2 = [ 0.48452219866311 , 1.19533443162485 ]</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >[ 1 , 11 ]</td><td align="center" valign="middle" >41</td><td align="center" valign="middle" >0.322251</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >R 1 = [ 2.52814125034009 , 4.48890951702297 ] R 2 = [ 8.12229473437508 , 9.90982400896169 ]</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >[ − 2.5 , 2.5 ]</td><td align="center" valign="middle" >224</td><td align="center" valign="middle" >3.649435</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >R 1 = [ − 2.46715298055336 , − 2.08746025441081 ] R 2 = [ − 1.95892289962050 , − 1.51934276869069 ] R 3 = [ − 1.43694943975762 , − 0.80225735033705 ] R 4 = [ − 0.72978696702962 , − 0.22574758594195 ] R 5 = [ − 0.12074796475217 , 0.31358054472210 ] R 6 = [ 0.87171438824452 , 1.28070410572677 ] R 7 = [ 1.85830151425555 , 2.24466631398474 ]</td></tr><tr><td align="center" valign="middle" >9</td><td align="center" valign="middle" >[ − 2.5 , 2.5 ]</td><td align="center" valign="middle" >112</td><td align="center" valign="middle" >2.569604</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >R 1 = [ − 2.50000000000000 , − 1.92087574283388 ] R 2 = [ − 1.52723438255972 , − 1.25833986275812 ] R 3 = [ − 0.91204299203149 , − 0.75571311847233 ] R 4 = [ − 0.15616336985750 , − 0.12081187930700 ] R 5 = [ 0.32172903378594 , 0.95147407919507 ] R 6 = [ 1.15013654741199 , 2.50000000000000 ]</td></tr><tr><td align="center" valign="middle" >10</td><td align="center" valign="middle" >[ − 5 , 5 ]</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >0.430902</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >R = [ 0.99999999999998 , 1.00000000000001 ]</td></tr><tr><td align="center" valign="middle" >11</td><td align="center" valign="middle" >[ − 20 , 20 ]</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >0.072306</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >R = [ − 0.52631341531172 , 0.41987789619851 ]</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >[ − 3 , 4 ]</td><td align="center" valign="middle" >47</td><td align="center" valign="middle" >0.788452</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >R 1 = [ − 1.92345419759984 , − 1.06926475849962 ] R 2 = [ 3.06926475849960 , 3.92345419759984 ]</td></tr></tbody></table></table-wrap></table-wrap-group><p>表2. EIN_Multi得出的数值结果</p><table-wrap-group id="3"><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Comparison table of key data of four method</title></caption><table-wrap id="3_1"><table><tbody><thead><tr><th align="center" valign="middle" >NO.</th><th align="center" valign="middle" >T1.</th><th align="center" valign="middle" >T2.</th><th align="center" valign="middle" >T3.</th><th align="center" valign="middle" >T4.</th><th align="center" valign="middle" >IT1.</th><th align="center" valign="middle" >IT2.</th><th align="center" valign="middle" >IT3.</th><th align="center" valign="middle" >IT4.</th><th align="center" valign="middle" >B1</th><th align="center" valign="middle" >B2</th><th align="center" valign="middle" >B3</th><th align="center" valign="middle" >B4.</th></tr></thead><tr><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0.846536</td><td align="center" valign="middle" >0.274717</td><td align="center" valign="middle" >0.288354</td><td align="center" valign="middle" >0.363102</td><td align="center" valign="middle" >143</td><td align="center" valign="middle" >36</td><td align="center" valign="middle" >33</td><td align="center" valign="middle" >37</td><td align="center" valign="middle" >51</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td><td align="center" valign="middle" >4</td></tr><tr><td align="center" valign="middle" >2</td><td align="center" valign="middle" >0.083297</td><td align="center" valign="middle" >0.04699</td><td align="center" valign="middle" >0.050179</td><td align="center" valign="middle" >0.051712</td><td align="center" valign="middle" >26</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >11</td><td align="center" valign="middle" >7</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >3</td><td align="center" valign="middle" >3.993194</td><td align="center" valign="middle" >2.090558</td><td align="center" valign="middle" >1.377687</td><td align="center" valign="middle" >1.624863</td><td align="center" valign="middle" >675</td><td align="center" valign="middle" >247</td><td align="center" valign="middle" >173</td><td align="center" valign="middle" >185</td><td align="center" valign="middle" >242</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >8</td><td align="center" valign="middle" >8</td></tr><tr><td align="center" valign="middle" >4</td><td align="center" valign="middle" >3.533208</td><td align="center" valign="middle" >0.687295</td><td align="center" valign="middle" >0.798292</td><td align="center" valign="middle" >0.853034</td><td align="center" valign="middle" >356</td><td align="center" valign="middle" >56</td><td align="center" valign="middle" >57</td><td align="center" valign="middle" >57</td><td align="center" valign="middle" >153</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6</td><td align="center" valign="middle" >6</td></tr><tr><td align="center" valign="middle" >5</td><td align="center" valign="middle" >1.273925</td><td align="center" valign="middle" >0.719202</td><td align="center" valign="middle" >0.6883</td><td align="center" valign="middle" >0.645072</td><td align="center" valign="middle" >125</td><td align="center" valign="middle" >57</td><td align="center" valign="middle" >51</td><td align="center" valign="middle" >48</td><td align="center" valign="middle" >29</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td><td align="center" valign="middle" >2</td></tr><tr><td align="center" valign="middle" >6</td><td align="center" valign="middle" >3.309211</td><td align="center" valign="middle" >3.329902</td><td align="center" valign="middle" >3.353682</td><td align="center" valign="middle" >3.34104</td><td align="center" valign="middle" >302</td><td align="center" valign="middle" >302</td><td align="center" valign="middle" >302</td><td align="center" valign="middle" >302</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >7</td><td align="center" valign="middle" >1.133234</td><td align="center" valign="middle" >0.322251</td><td align="center" valign="middle" >0.376305</td><td align="center" valign="middle" >0.402133</td><td align="center" valign="middle" >213</td><td align="center" valign="middle" >41</td><td align="center" valign="middle" >41</td><td align="center" valign="middle" >40</td><td align="center" valign="middle" >80</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >1</td></tr><tr><td align="center" valign="middle" >8</td><td align="center" valign="middle" >3.65481</td><td align="center" valign="middle" >3.649435</td><td align="center" valign="middle" >3.631559</td><td align="center" valign="middle" >3.6014</td><td align="center" valign="middle" >224</td><td align="center" valign="middle" >224</td><td align="center" valign="middle" >224</td><td align="center" valign="middle" >224</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap><table-wrap id="3_2"><table><tbody><thead><tr><th align="center" valign="middle" >9</th><th align="center" valign="middle" >8.799273</th><th align="center" valign="middle" >2.569604</th><th align="center" valign="middle" >3.054859</th><th align="center" valign="middle" >3.61761</th><th align="center" valign="middle" >585</th><th align="center" valign="middle" >112</th><th align="center" valign="middle" >109</th><th align="center" valign="middle" >111</th><th align="center" valign="middle" >230</th><th align="center" valign="middle" >0</th><th align="center" valign="middle" >0</th><th align="center" valign="middle" >0</th></tr></thead><tr><td align="center" valign="middle" >10</td><td align="center" valign="middle" >0.42601</td><td align="center" valign="middle" >0.430902</td><td align="center" valign="middle" >0.424643</td><td align="center" valign="middle" >0.42413</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >99</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >11</td><td align="center" valign="middle" >0.118825</td><td align="center" valign="middle" >0.072306</td><td align="center" valign="middle" >0.089766</td><td align="center" valign="middle" >0.10952</td><td align="center" valign="middle" >13</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >5</td><td align="center" valign="middle" >3</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >12</td><td align="center" valign="middle" >2.984364</td><td align="center" valign="middle" >0.788452</td><td align="center" valign="middle" >1.086119</td><td align="center" valign="middle" >1.878941</td><td align="center" valign="middle" >284</td><td align="center" valign="middle" >47</td><td align="center" valign="middle" >52</td><td align="center" valign="middle" >67</td><td align="center" valign="middle" >122</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap></table-wrap-group><p>表3. 四种方法关键数据对比表</p><p>由上述对比可知在12个算例中，9个算例的收敛速度都有明显提升，对于大部分函数基于普通的二步迭代、区间Ostrowski以及区间king迭代改进的EIN相较于原有的EIN而言迭代次数以及二分步数显著减少，由于单调区间并不是贯穿整个初始区间，收敛速度在二阶与三阶之间，若求解单调函数的零解区间，则收敛速度可达三阶！第6、8、10个函数上的时间相差较小，这是由于非单调区间过多，迭代次数几乎不变，时间几乎相等。综上所述，改进的三种方法对于大多数函数都明显加快了收敛，收敛阶由二阶最高可提升至三阶速度。</p></sec><sec id="s10"><title>6. 总结</title><p>本文提出了以多步区间迭代法为基础的HIN加速算法，在理论上证明了改进的新算法相比于HIN算法具有高一阶的收敛速度，并通过几个典型的数值算例对改进算法的性能进行了测试，数值结果表明新的算法具有较好的稳健性，这为求解各种不定参数非线性方程的工程问题提供了一种更为完善的解决办法。如何对以区间牛顿算子为基础的其他区间算法进行有效加速改进，还需要进一步的研究与探索。</p></sec><sec id="s11"><title>文章引用</title><p>杨骐骏,陈 晋,王海军. 含区间参数非线性方程的多步区间迭代算法Multi-Step Interval Iteration Algorithm for Nonlinear Equations with Interval Parameters[J]. 应用数学进展, 2021, 10(05): 1776-1789. https://doi.org/10.12677/AAM.2021.105188</p></sec><sec id="s12"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.42827-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Ballmann, J. and Jeltsch, R. (2013) Nonlinear Hyperbolic Equations-Theory, Computation Methods, and Applications. Proceedings of the Second International Conference on Nonlinear Hyperbolic Problems, Aachen, 14-18 March 1988, Vol. 24. &lt;br&gt;https://doi.org/10.1007/978-3-322-87869-4</mixed-citation></ref><ref id="hanspub.42827-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Kim, S.-Y., Chun, H.-Y. and Baik, J.-J. (2007) Sensitivity of Typhoon-Induced Gravity Waves to Cumulus Parameterizations. Geophysical Research Letters, 34. &lt;br&gt;https://doi.org/10.1029/2007GL030592</mixed-citation></ref><ref id="hanspub.42827-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Frank, T. (2005) Nonlinear Fokker-Planck Equations: Fundamentals and Applications. Springer Series in Synergetics, Springer-Verlag, Berlin, Heidelberg.</mixed-citation></ref><ref id="hanspub.42827-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Tan, F., Feng, X.-T. and Hudson, J.A. (Eds.) (2013) Rock Characterisation, Modelling and Engineering Design Methods, CRC Press, London. &lt;br&gt;https://doi.org/10.1201/b14917</mixed-citation></ref><ref id="hanspub.42827-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Moore, R.E. (1966) Interval Analysis. Prentice Hall, Englewood Clifs.</mixed-citation></ref><ref id="hanspub.42827-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Hansen, E.R. (1979) Global Optimization Using Interval Analysis: The One-Dimensional Case. Journal of Optimization Theory and Applications, 29, 331-344. &lt;br&gt;https://doi.org/10.1007/BF00933139</mixed-citation></ref><ref id="hanspub.42827-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Nikas, I.A. and Grapsa, T.N. (2009) Bounding the Zeros of an Interval Equation. Applied Mathematics and Computation, 213, 466-478. &lt;br&gt;https://doi.org/10.1016/j.amc.2009.03.041.</mixed-citation></ref><ref id="hanspub.42827-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">楚雪, 肖旺, 王海军. 求解非线性方程的多步区间迭代法[J]. 应用数学进展, 2020, 9(8): 1124-1133. 
&lt;br&gt;https://doi.org/10.12677/AAM.2020.98132</mixed-citation></ref></ref-list></back></article>