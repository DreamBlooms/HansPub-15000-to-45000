<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">SEA</journal-id><journal-title-group><journal-title>Software Engineering and Applications</journal-title></journal-title-group><issn pub-type="epub">2325-2286</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/SEA.2020.94030</article-id><article-id pub-id-type="publisher-id">SEA-36983</article-id><article-categories><subj-group subj-group-type="heading"><subject>SEA20200400000_72623212.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>工程技术</subject></subj-group></article-categories><title-group><article-title>
 
 
  格子Boltzmann数值计算的性能优化
  Performance Optimization of Lattice Boltzmann Numerical Calculation
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>阳贵</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>吕</surname><given-names>莹</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>梁</surname><given-names>大成</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff4"><sup>4</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>黄</surname><given-names>笑冲</given-names></name><xref ref-type="aff" rid="aff5"><sup>5</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff3"><addr-line>岭南师范学院，机电工程学院，广东 湛江</addr-line></aff><aff id="aff5"><addr-line>湛江市爱周高级中学，广东 湛江</addr-line></aff><aff id="aff2"><addr-line>岭南师范学院，数学与统计学院，广东 湛江；中国科学院深圳先进技术研究院，合成生物学研究所，广东 深圳</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><aff id="aff4"><addr-line>广东茂名幼儿师范专科学校，数学系，广东 茂名</addr-line></aff><pub-date pub-type="epub"><day>24</day><month>07</month><year>2020</year></pub-date><volume>09</volume><issue>04</issue><fpage>272</fpage><lpage>277</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
  格子Boltzmann方法是科学与工程计算的重要模型与数值方法，该方法能够从底层描述和计算细尺度特征，同时计算量也较大。为了提高计算效率，本文主要从指令级别对格子Boltzmann数值计算进行性能优化。数值实验结果表明，优化后计算性能显著提高。&lt;br/&gt;Lattice Boltzmann method is an important model and numerical method in scientific and engi-neering calculation. It can describe and calculate the fine scale characteristics from the bottom layer, and the calculation cost is also large. In order to improve the computational efficiency, this paper mainly optimizes the performance of lattice Boltzmann numerical calculation from the in-struction level. The results of numerical experiments show that the computational performance is improved significantly after optimization.
 
</p></abstract><kwd-group><kwd>格子Boltzmann方法，性能优化，泰勒–格林涡流, Lattice Boltzmann Method</kwd><kwd> Performance Optimization</kwd><kwd> Taylor-Green Vortex</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>格子Boltzmann数值计算的性能优化</title><p>李阳贵<sup>1,2</sup>，吕莹<sup>3*</sup>，梁大成<sup>4</sup>，黄笑冲<sup>5</sup></p><p><sup>1</sup>岭南师范学院，数学与统计学院，广东 湛江</p><p><sup>2</sup>中国科学院深圳先进技术研究院，合成生物学研究所，广东 深圳</p><p><sup>3</sup>岭南师范学院，机电工程学院，广东 湛江</p><p><sup>4</sup>广东茂名幼儿师范专科学校，数学系，广东 茂名</p><p><sup>5</sup>湛江市爱周高级中学，广东 湛江</p><p>收稿日期：2020年7月22日；录用日期：2020年8月5日；发布日期：2020年8月12日</p><disp-formula id="hanspub.36983-formula48"><graphic xlink:href="//html.hanspub.org/file/3-2690455x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>格子Boltzmann方法是科学与工程计算的重要模型与数值方法，该方法能够从底层描述和计算细尺度特征，同时计算量也较大。为了提高计算效率，本文主要从指令级别对格子Boltzmann数值计算进行性能优化。数值实验结果表明，优化后计算性能显著提高。</p><p>关键词 :格子Boltzmann方法，性能优化，泰勒–格林涡流</p><disp-formula id="hanspub.36983-formula49"><graphic xlink:href="//html.hanspub.org/file/3-2690455x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/3-2690455x8_hanspub.png" /> <img src="//html.hanspub.org/file/3-2690455x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>随着数值计算方法成为研究科学与工程问题的重要手段，对计算效率的要求也越来越高。为了确保在尽可能短的时间内完成一项计算任务，在单机中我们主要有两个选择，第一个选择是设计一个更好的算法，可以用更少的步骤达到相同的结果。第二种方法是在指令级别执行优化，该方法是在需要较多时间完成的指令的位置上使用一个或多个更快的指令。</p><p>格子Boltzmann方法是模拟微观模型的数值计算方法。格子Boltzmann方法除了被应用于一般的流体力学问题之外，还在湍流 [<xref ref-type="bibr" rid="hanspub.36983-ref1">1</xref>]、多孔介质流 [<xref ref-type="bibr" rid="hanspub.36983-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.36983-ref3">3</xref>]、粒子悬浮流 [<xref ref-type="bibr" rid="hanspub.36983-ref4">4</xref>]、磁流体力学 [<xref ref-type="bibr" rid="hanspub.36983-ref5">5</xref>]、多相流 [<xref ref-type="bibr" rid="hanspub.36983-ref6">6</xref>] 等相关领域也取得了比较成功的应用。但格子Boltzmann方法的计算量较大，为提高计算效率，本文将探讨泰勒–格林涡流(Taylor-Green Vortex)格子Boltzmann数值计算的性能优化。</p></sec><sec id="s4"><title>2. 格子Boltzmann模型</title><p>格子Boltzmann方法的一个主要优点是基于Boltzmann方程而不是连续方程和动量方程，它的实现比传统方法简单。格子Boltzmann方法的基本量是离散速度分布函数 f i ( x , t ) ，通常称为粒子分布。可以通过此分布函数来求解质量密度和动量密度：</p><p>ρ ( x , t ) = ∑ i f i ( x , t ) (1)</p><p>ρ u ( x , t ) = ∑ i c i f i ( x , t ) (2)</p><p>f i 函数表示所有的参数变量都是离散的，下标i代表一个离散速度集，定义 f i 在空间中为正方形格子各个方向的分布。速度集通常用DdQq表示，d是速度集覆盖的空间维数，q是速度方向的个数。最常用的速度集是D1Q3、D2Q9、D3Q15、D3Q19和D3Q27。本文采用D2Q9模型，i取值范围是0，1，2，3，4，5，6，7，8九个方向。</p><p>通过在物理空间、速度空间和时间上离散Boltzmann方程，得到了格子Boltzmann方程：</p><p>f i ( x + c i Δ t , t + Δ t ) = f i ( x , t ) + Ω i ( x , t ) (3)</p><p>同时，粒子受到碰撞算符 Ω i ( x , t ) 的影响，该算符通过在每个位置的分布中重新分配粒子来模拟粒子碰撞。虽然有许多不同的碰撞算符可用，但最常用的一个算符是Bhatnagar-Gross-Krook (BGK)运算符 [<xref ref-type="bibr" rid="hanspub.36983-ref7">7</xref>]：</p><p>Ω i ( f ) = − f i − f i e q τ ⋅ Δ t (4)</p><p>它使分布 f i 以由松弛时间 τ 决定的速率趋于平衡分布 f i e q ，平衡分布为</p><p>f i e q ( x , t ) = w i ρ ( 1 + u ⋅ c i c s 2 + ( u ⋅ c i ) 2 2 c s 4 − u ⋅ u 2 c s 2 ) (5)</p><p>格子BGK (LBGK)方程(即用BGK碰撞算符完全离散的Boltzmann方程)可以表示为：</p><p>f i ( x + c i Δ t , t + Δ t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (6)</p><p>总的来说，格子Boltzmann方程由碰撞和迁移两部分组成。第一部分是碰撞(或松弛)：</p><p>f i ∗ ( x , t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (7)</p><p>第二部分是迁移(或传播)：</p><p>f i ( x + c i Δ t , t + Δ t ) = f i ∗ ( x , t ) (8)</p><p>碰撞只是一个代数局部运算，首先要计算密度，找到平衡分布后的宏观速度，碰撞后，将得到相邻节点的分布 f i ∗ ，当碰撞和迁移两个操作完成时，经过一个时间步，再重复这些操作。</p><p>格子Boltzmann数值计算的实现过程可分为碰撞和迁移两个子过程，通常格子Boltzmann方法的程序结构有两种形式：碰撞–迁移结构和迁移–碰撞结构。本文程序设计采用迁移–碰撞结构，这种程序结构可以看作是求解离散速度方程</p><p>∂ t f i + c i ⋅ ∇ f i = Ω i ( f ) (9)</p><p>的时间分裂方法 [<xref ref-type="bibr" rid="hanspub.36983-ref8">8</xref>]，具体步骤如下：</p><p>(I) 初始化分布函数 f i ( x , 0 )</p><p>(II) 执行迁移(stream)</p><p>f i ( x + c i Δ t , t + Δ t ) = f i ∗ ( x , t ) (10)</p><p>(III) 计算宏观量(computeRhoU)</p><p>ρ ( x , t ) = ∑ i f i ( x , t ) ， ρ u ( x , t ) = ∑ i c i f i ( x , t ) (11)</p><p>(IV) 执行碰撞(collide)</p><p>f i ∗ ( x , t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (12)</p><p>(V) 保存数据(save) (每saveN步保存一次)</p><p>(VI) 重复(II)~(V)直到满足终止条件。</p></sec><sec id="s5"><title>3. 计算与性能优化</title><p>本文计算泰勒–格林涡流问题，速度和压力的初始状态解析地设定，泰勒–格林涡流在 l x &#215; l y 区域内是非定常的全周期流动，其速度场和压力场在二维空间上表示为</p><p>u ( x , t ) = u 0 [ − k y / k x cos ( k x x ) sin ( k y y ) k x / k y sin ( k x x ) cos ( k y y ) ] e − t / t d (13)</p><p>t d = 1 υ ( k x 2 + k y 2 ) (14)</p><p>p ( x , t ) = p 0 − ρ u 0 2 4 ( k y k x cos ( 2 k x x ) + k x k y cos ( 2 k y y ) ) (15)</p><p>其中 u 0 为初始速度大小， k x , y = 2 π / l x , y 为波矢量分量， t d 为涡流衰减时间，平均压力 p 0 可以是任意的，计算区域为 l x &#215; l y = 640 &#215; 640 (格子单位)。计算采用标准平衡分布，平衡分布初始化采用Mei [<xref ref-type="bibr" rid="hanspub.36983-ref9">9</xref>] 的初始化方案。泰勒–格林涡流的速度 u x 和 u y 如图1所示。</p><p>图1. 泰勒–格林涡流速度：(a) x方向速度 u x ，(b) y方向速度 u y</p><p>上面的计算是根据格子Boltzmann方法典型计算步骤(I)~(VI)进行设计程序的，下面对该程序进行一些优化处理。我们首先注意到一个相对较小的优化：迁移步不需要复制0方向分布f<sub>0</sub>。为了避免这种不必要的内存访问，我们对0方向分布使用单独的变量f<sub>0</sub>，对其余八个方向的分布f<sub>1-8</sub>保留两个变量f<sub>1</sub>和f<sub>2</sub>。</p><p>第二个优化是注意到在迁移期间为每个节点存储的分布的值是在碰撞步期间读取的那些值。因此，四个函数stream、computeRhoU、collide和save可以组合成一个函数stream_computeRhoU_collide_save，该函数访问内存的频率显著降低。</p><p>第三个优化是循环展开。当循环的内部块计算很快完成时，递增计数器并检查其是否超过界限的开销构成了循环执行时间的一个显著部分。循环展开可以避免这些开销，这里将九个分布上迭代的所有循环展开，其展开公式如下：</p><p>ρ = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 (16)</p><p>u x = [ ( f 1 + f 5 + f 8 ) − ( f 3 + f 6 + f 7 ) ] / ρ (17)</p><p>u y = [ ( f 2 + f 5 + f 6 ) − ( f 4 + f 7 + f 8 ) ] / ρ (18)</p><p>f 0 e q = 2 ρ 9 ( 2 − 3 u 2 ) (19)</p><p>f 1 e q = ρ 18 ( 2 + 6 u x + 9 u x 2 − 3 u 2 ) (20)</p><p>f 2 e q = ρ 18 ( 2 + 6 u y + 9 u y 2 − 3 u 2 ) (21)</p><p>f 3 e q = ρ 18 ( 2 − 6 u x + 9 u x 2 − 3 u 2 ) (22)</p><p>f 4 e q = ρ 18 ( 2 − 6 u y + 9 u y 2 − 3 u 2 ) (23)</p><p>f 5 e q = ρ 36 [ 1 + 3 ( u x + u y ) + 9 u x u y + 3 u 2 ] (24)</p><p>f 6 e q = ρ 36 [ 1 − 3 ( u x − u y ) − 9 u x u y + 3 u 2 ] (25)</p><p>f 7 e q = ρ 36 [ 1 − 3 ( u x + u y ) + 9 u x u y + 3 u 2 ] (26)</p><p>f 8 e q = ρ 36 [ 1 + 3 ( u x − u y ) − 9 u x u y + 3 u 2 ] (27)</p><p>这里 u = ( u x + u y ) Τ ， u 2 = u x 2 + u y 2 。</p><p>还有其它的一些优化处理：将频繁调用的节点索引函数定义为内联函数，省去了函数调用的开销，从而提高函数的执行效率。另外，程序中包含一个布尔参数saveN，用于指示是否将该时刻的数据写入内存，通过选择saveN最优的值，定期保存中间密度场和速度场的数据，避免过多的内存写入。</p><p>表1是程序在未进行优化和优化后的执行的时间和速率。从表中可以看出，程序经过优化处理后，计算规模为64 &#215; 64、160 &#215; 160、160 &#215; 160和1920 &#215; 1920的计算时间分别减少到未优化的22.98%、22.21%、20.81%和20.74%，计算速率分别是未优化的4.35倍、4.50倍、4.80倍和4.82倍。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> Comparison of implementation results between unoptimized and optimize</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >计算区域</th><th align="center" valign="middle" >计算步数</th><th align="center" valign="middle" >是否优化</th><th align="center" valign="middle" >运行时间(s)</th><th align="center" valign="middle" >计算速率(Mlups)</th></tr></thead><tr><td align="center" valign="middle"  rowspan="2"  >64 &#215; 64</td><td align="center" valign="middle"  rowspan="2"  >100,000</td><td align="center" valign="middle" >未优化</td><td align="center" valign="middle" >206.056</td><td align="center" valign="middle" >1.99</td></tr><tr><td align="center" valign="middle" >优化后</td><td align="center" valign="middle" >47.358</td><td align="center" valign="middle" >8.65</td></tr><tr><td align="center" valign="middle"  rowspan="2"  >160 &#215; 160</td><td align="center" valign="middle"  rowspan="2"  >15,000</td><td align="center" valign="middle" >未优化</td><td align="center" valign="middle" >219.656</td><td align="center" valign="middle" >1.75</td></tr><tr><td align="center" valign="middle" >优化后</td><td align="center" valign="middle" >48.785</td><td align="center" valign="middle" >7.87</td></tr><tr><td align="center" valign="middle"  rowspan="2"  >640 &#215; 640</td><td align="center" valign="middle"  rowspan="2"  >1000</td><td align="center" valign="middle" >未优化</td><td align="center" valign="middle" >256.268</td><td align="center" valign="middle" >1.60</td></tr><tr><td align="center" valign="middle" >优化后</td><td align="center" valign="middle" >53.326</td><td align="center" valign="middle" >7.68</td></tr><tr><td align="center" valign="middle"  rowspan="2"  >1920 &#215; 1920</td><td align="center" valign="middle"  rowspan="2"  >100</td><td align="center" valign="middle" >未优化</td><td align="center" valign="middle" >239.491</td><td align="center" valign="middle" >1.54</td></tr><tr><td align="center" valign="middle" >优化后</td><td align="center" valign="middle" >49.675</td><td align="center" valign="middle" >7.42</td></tr></tbody></table></table-wrap><p>表1. 优化前后执行结果对比</p></sec><sec id="s6"><title>4. 总结</title><p>本文以泰勒–格林涡流作为算例给出了格子Boltzmann数值模拟的算法和计算实现，以及讨论了如何优化代码提高计算效率。计算结果表明，程序通过优化处理后，计算时间明显减少，计算速率明显提高，而且计算规模越大，这种优势越显著。</p></sec><sec id="s7"><title>基金项目</title><p>广东省教育厅青年创新人才项目(2017GkQNCX110)；国家自然科学基金(11804355, 31800083)。</p></sec><sec id="s8"><title>文章引用</title><p>李阳贵,吕 莹,梁大成,黄笑冲. 格子Boltzmann数值计算的性能优化Performance Optimization of Lattice Boltzmann Numerical Calculation[J]. 软件工程与应用, 2020, 09(04): 272-277. https://doi.org/10.12677/SEA.2020.94030</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.36983-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Teixeira, C.M. (1998) Incorporating Turbulence Models into the Lattice-Boltzmann Method. International Journal of Modern Physics C, 9, 1159-1175. &lt;br&gt;https://doi.org/10.1142/S0129183198001060</mixed-citation></ref><ref id="hanspub.36983-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Nabovati, A., Llewellin, E.W. and Sousa, A.C. (2009) A General Model for the Permeability of Fibrous Porous Media Based on Fluid Flow Simulations Using the Lattice Boltzmann Method. Composites Part A—Applied Science and Manufacturing, 40, 860-869. &lt;br&gt;https://doi.org/10.1016/j.compositesa.2009.04.009</mixed-citation></ref><ref id="hanspub.36983-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Cho, H., Jeong, N. and Sung, H.J. (2013) Permeability of Microscale Fibrous Porous Media Using the Lattice Boltzmann Method. International Journal of Heat and Fluid Flow, 44, 435-443.  
&lt;br&gt;https://doi.org/10.1016/j.ijheatfluidflow.2013.07.013</mixed-citation></ref><ref id="hanspub.36983-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Zhou, K., Hou, J., Sun, Q., Guo, L., Bing, S., Du, Q. and Yao, C. (2018) A Study on Particle Suspension Flow and Permeability Impairment in Porous Media Using LBM-DEM-IMB Simulation Method. Transport in Porous Media, 124, 681-698. &lt;br&gt;https://doi.org/10.1007/s11242-018-1089-z</mixed-citation></ref><ref id="hanspub.36983-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Sajjadi, H., Amiri Delouei, A., Sheikholeslami, M., Atashafrooz, M. and Succi, S. (2019) Simulation of Three Dimensional MHD Natural Convection Using Double MRT Lattice Boltzmann Method. Physica A: Statistical Mechanics and Its Applications, 515, 474-496.</mixed-citation></ref><ref id="hanspub.36983-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">李庆, 余悦, 唐诗. 多相格子Boltzmann方法及其在相变传热中的应用[J]. 科学通报, 2020, 65(17): 1677-1693.  
&lt;br&gt;https://doi.org/10.1360/TB-2019-0769</mixed-citation></ref><ref id="hanspub.36983-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Chen, L.-J. (2002). BGK Electron Solitary Waves in 3D Magnetized Plasma. Geophysical Research Letters, 29, 1331.  
&lt;br&gt;https://doi.org/10.1029/2001GL013385</mixed-citation></ref><ref id="hanspub.36983-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Guo, Z., Zheng, C. and Zhao, T.S. (2001) A Lattice BGK Scheme with General Propagation. Journal of Scientific Computing, 16, 569-585. &lt;br&gt;https://doi.org/10.1023/A:1013280900427</mixed-citation></ref><ref id="hanspub.36983-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Mei, R., Luo, L.S., Lallemand, P. and d’Humières, D. (2006) Consistent Initial Conditions for LBE Simulations. Computers &amp; Fluids, 35, 855-862. &lt;br&gt;https://doi.org/10.1016/j.compfluid.2005.08.008</mixed-citation></ref></ref-list></back></article>