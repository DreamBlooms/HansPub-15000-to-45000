<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.811183</article-id><article-id pub-id-type="publisher-id">CSA-27449</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20181100000_75331303.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  一种多分辨率体绘制中张量分解最佳秩选取算法
  An Algorithm for Choosing Optimal Rank in Tensor Approximation of Multi-Resolution Volume Rendering
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>聂</surname><given-names>小燕</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>鲁</surname><given-names>才</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>电子科技大学成都学院电子工程系，四川 成都</addr-line></aff><aff id="aff3"><addr-line>电子科技大学信息与通信工程学院，四川 成都</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>02</day><month>11</month><year>2018</year></pub-date><volume>08</volume><issue>11</issue><fpage>1665</fpage><lpage>1674</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   采用多分辨率体绘制是解决海量数据体绘制的一种有效方法，但是基于信息熵的多分辨率体绘制在解决信噪比低、细微结构复杂的物探领域内体数据时存在较大的缺陷。而数据的张量近似是通过高阶奇异值分解提取数据的特征基，并通过特征基的线性组合来近似包含细微结构的低信噪比体数据。因此可以在保证数据压缩率的情况下，保留数据的细微构造信息。本文针对基于张量近似的多分辨率体绘制中秩的选取问题开展研究，低秩实现了高的数据压缩，但峰值信噪比低；高秩实现了较好的绘制效果，但数据压缩率低。本文提出了一种张量近似中最佳秩的选取算法。其基本思想是在高秩分解的基础上，通过二分搜索选取满足误差门限的最佳秩。并且，数据分块处理，不同分块采用不同秩，实现了在满足数据压缩率的情况下，保证有较好的绘制效果。通过仿真结果表明，相比于统一秩的高秩分解而言，提升了数据压缩率，而整体绘制效果基本与高秩分解相当；相比于统一秩的中低秩分解而言，在增加少量的压缩率的情况下，提升了绘制效果。 Multi-resolution volume rendering is an effective method to solve the problem of massive data volume rendering. The comentropy based multi-resolution volume rendering has an obvious limitation when handling data of geophysical field which have a low SNR and complex microstructure characteristics. Tensor approximation can extract the characteristic bases of the data, and gain the data approximation with microstructure characteristics by means of the linear combination of the characteristic bases. We made a research about how to choose the rank in tensor approximation multi-resolution volume rendering. Low rank gained a high compression ratio, but low PSNR. High rank gained an ideal rendering effect, but low compression ratio. In this paper, we presented a method that could find the best rank adaptively for every block. Based on high rank decomposition, we did binary search to find the optimal rank which will exactly meet the error threshold. Mean-while, data were separated into blocks, different blocks have different ranks. Experimental results show that our method has a higher compression ratio and similar render result in comparison with high rank decomposition and our method has a significant better rendering result and a slightly lower compression ratio.
    
  
 
</p></abstract><kwd-group><kwd>体绘制，海量数据，多分辨率，秩截断，张量近似, Volume Rendering</kwd><kwd> Massive Data</kwd><kwd> Multi-Resolution</kwd><kwd> Rank Truncation</kwd><kwd> Tensor Approximation</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>一种多分辨率体绘制中张量分解最佳秩选取算法<sup> </sup></title><p>聂小燕<sup>1*</sup>，鲁才<sup>2</sup></p><p><sup>1</sup>电子科技大学成都学院电子工程系，四川 成都</p><p><sup>2</sup>电子科技大学信息与通信工程学院，四川 成都</p><disp-formula id="hanspub.27449-formula68"><graphic xlink:href="//html.hanspub.org/file/4-1541179x5_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2018年10月20日；录用日期：2018年11月1日；发布日期：2018年11月8日</p><disp-formula id="hanspub.27449-formula69"><graphic xlink:href="//html.hanspub.org/file/4-1541179x6_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>采用多分辨率体绘制是解决海量数据体绘制的一种有效方法，但是基于信息熵的多分辨率体绘制在解决信噪比低、细微结构复杂的物探领域内体数据时存在较大的缺陷。而数据的张量近似是通过高阶奇异值分解提取数据的特征基，并通过特征基的线性组合来近似包含细微结构的低信噪比体数据。因此可以在保证数据压缩率的情况下，保留数据的细微构造信息。本文针对基于张量近似的多分辨率体绘制中秩的选取问题开展研究，低秩实现了高的数据压缩，但峰值信噪比低；高秩实现了较好的绘制效果，但数据压缩率低。本文提出了一种张量近似中最佳秩的选取算法。其基本思想是在高秩分解的基础上，通过二分搜索选取满足误差门限的最佳秩。并且，数据分块处理，不同分块采用不同秩，实现了在满足数据压缩率的情况下，保证有较好的绘制效果。通过仿真结果表明，相比于统一秩的高秩分解而言，提升了数据压缩率，而整体绘制效果基本与高秩分解相当；相比于统一秩的中低秩分解而言，在增加少量的压缩率的情况下，提升了绘制效果。</p><p>关键词 :体绘制，海量数据，多分辨率，秩截断，张量近似</p><disp-formula id="hanspub.27449-formula70"><graphic xlink:href="//html.hanspub.org/file/4-1541179x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-1541179x8_hanspub.png" /> <img src="//html.hanspub.org/file/4-1541179x9_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>当前，基于GPU加速的直接体绘制技术 [<xref ref-type="bibr" rid="hanspub.27449-ref1">1</xref>] 已经成为交互处理体数据的标准方法。相比于传统表面绘制，体绘制技术可以反映物体的内部结构。因此能够被广泛应用于许多领域中，例如：医学领域、流体物理领域、气象领域、地质勘探领域等等。</p><p>尽管近几年图形硬件设备发展迅速，但是GPU存储空间的限制，依然是制约体绘制技术发展的主要瓶颈 [<xref ref-type="bibr" rid="hanspub.27449-ref1">1</xref>] 。在这种情况下，产生了多分辨率体绘制技术。多分辨率体绘制技术是通过将数据体划分为不同的分块，每一个分块赋予不同的分辨率来实现压缩数据量和减少绘制点数。每个分块的分辨率又被称为分块的LOD (level of detail, 细节水平)。因此，多分辨率技术的关键即为如何确定每一个分块的细节水平。</p><p>近年来常用的多分辨率的数据组织形式有两种：基于统一划分的形式和基于层次划分的形式。</p><p>Ljung P等 [<xref ref-type="bibr" rid="hanspub.27449-ref2">2</xref>] 提出了基于统一划分的多分辨率体绘制技术。在统一划分中，每个分块各自独立地确定自己的分辨率，分块与分块之间互不影响。Ljung等 [<xref ref-type="bibr" rid="hanspub.27449-ref3">3</xref>] 提出了基于CIELUV (CIE 1976 (L*, u*, v*) color space)空间的误差准则。并且在分块细节水平选择时，引入了传递函数的信息，以此来优化绘制效果。梁荣华等 [<xref ref-type="bibr" rid="hanspub.27449-ref4">4</xref>] 提出了基于信息熵的分块细节水平选择方法，并能够自适应的优化用户设定的阈值，以提高绘制效果。</p><p>Boada I [<xref ref-type="bibr" rid="hanspub.27449-ref5">5</xref>] 等首先提出了基于八叉树的多分辨率数据表示。用一颗八叉树来表示整个三维数据体。每一个节点代表一个分块。将空间中8个相邻的分块重采样成一个相同大小的分块，即构成了这8个分块的父分块。父分块对应八叉树中，这个8个分块所对应节点的父节点。因此，每个分块的点数相同，但其所代表的空间中的实际大小不同。通过对八叉树的遍历，能够很容易地实现对每个分块的随机访问。八叉树多分辨率的很多研究集中在，如何在硬件的限制下确定每一个节点的误差。砖块与视点的距离，感兴趣的区域和块内部数据的同质性以及近似后的误差 [<xref ref-type="bibr" rid="hanspub.27449-ref6">6</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref7">7</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref8">8</xref>] 通常被用来确定一个分块的细节水平。Guthe和Straber [<xref ref-type="bibr" rid="hanspub.27449-ref9">9</xref>] 提出了一种对失真误差的保守估计方法。他们将误差定义为最大的RGB误差和最大的不透明度误差的和。Ljung [<xref ref-type="bibr" rid="hanspub.27449-ref10">10</xref>] 用简化的1维直方图去近似每个分块和它原始分块的均方误差。</p><p>张量近似 [<xref ref-type="bibr" rid="hanspub.27449-ref11">11</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref12">12</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref13">13</xref>] 是用高阶奇异值分解等工具来实现对体数据的近似，其可以被看做是主成成分分析在高维数据中的推广。目前主流的张量近似技术是将一个体数据表示成一系列秩1张量的和或者是一个核心张量和三个因子矩阵的乘积。前者被称为CP (canonical decomposition)分解，后者被称为Tucker分解。被常用于体绘制中的是Tucker分解，因为其每一个因子矩阵就代表了原始数据的每一个方向上的结构特征，因而Tucker分解能够产生具有三维数据特征的基，对于特征提取有十分重要的作用。大量实验验证了Tucker模型比CP模型在大多数三维可视化中有更好地性能和效果，更具有实用性。Tucker分解的数据压缩通过秩截断来实现。Susanne K. Suter [<xref ref-type="bibr" rid="hanspub.27449-ref12">12</xref>] 等证明了秩截断张量近似与离散小波变换相比，在相同数量的系数下，更能够捕获到数据体任意方向上的三维特征。因此，张量近似能够很好应用于体数据的压缩和特征提取当中。</p><p>但是，秩截断技术中，一个关键的问题是如何选取张量分解的秩。如果选取的秩太大，会直接影响数据的压缩率和噪声的过滤；如果选取的秩太小，又可能会导致表征数据的基向量的个数不足，信息量不够，近似误差太大。同时，对于一个三维数据体来说，其微结构特征可能呈区域状分布。这就意味着，对于不同的分块来说，其蕴含的结构特征的多少可能差别很大。如果对所有分块用相同的基向量个数，即统一大小的秩，则对有些分块来说，可能会导致误差过大；对另外一些分块来说，可能会造成不必要的压缩率损失。因此，我们需要对每一个分块赋予其最合适的秩。因此，本文提出一种能够自适应地为每一个分块寻找最佳秩的方法。</p></sec><sec id="s4"><title>2. 高阶张量近似原理</title><p>张量近似是一种基于高阶奇异值分解(HOSVD) [<xref ref-type="bibr" rid="hanspub.27449-ref11">11</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref12">12</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref13">13</xref>] 的一种数据近似算法。目前常用的三阶张量近似主要有两种方式：Tucker模型和CP模型。由于Tucker模型产生的三个因子矩阵恰好和三维体数据的三个维度有关，再加上大量文献 [<xref ref-type="bibr" rid="hanspub.27449-ref13">13</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref14">14</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref15">15</xref>] 已经证明了Tucker模型比CP模型在体绘制中具有更好的表现。因此，本文所选用的张量近似模型为Tucker模型。</p><p>张量分解其实可以看作是矩阵奇异值分解在更高维度上的推广。如图1所示，基于Tucker模型的3阶张量分解能够将一个3阶张量分解为一个核心张量和3个因子矩阵。</p><p>对于一个n阶的张量A，其维度为 I 1 &#215; I 2 &#215; ⋯ &#215; I n ，我们可以将其用一个核心张量B和n个因子矩阵 U ( 1 ) , U ( 2 ) , ⋯ , U ( n ) 的TTM [<xref ref-type="bibr" rid="hanspub.27449-ref10">10</xref>] 乘积来表示，其中核心张量B的维度为 R 1 &#215; R 2 &#215; ⋯ &#215; R n ，因子矩阵 U ( i ) ( 1 ≤ i ≤ n ) 的大小为 I i &#215; R i ：</p><p>A ≈ B &#215; 1 U ( 1 ) &#215; 2 U ( 2 ) &#215; 3 ⋯ &#215; n U ( n ) (1)</p><p>其中， ( R 1 , R 2 , ⋯ , R n ) 称为Tucker分解的秩，上述的过程我们称为对张量A的秩 ( R 1 , R 2 , ⋯ , R n ) 分解。因子矩阵U<sup>(n)</sup> 的大小为 I n &#215; R n ，其行数I<sub>n</sub>代表原始数据体I<sub>n</sub>方向上点的个数，即数据体在方向n上的基的维数，其列数R<sub>n</sub>代表该方向上的基的个数。其每一列r，则表示数据体在方向n上的一个基。因此，</p><p>图1. 基于Tucker模型的张量分解</p><p>整个因子矩阵U<sup>(n)</sup> 组成了数据在方向n上的一组基。</p></sec><sec id="s5"><title>3. 秩截断技术分析</title><p>从前面可知，因子矩阵的列数代表了基的个数，即该方向信息量的大小，基的个数越多，信息量越大，重构越精确。并且越前面的列，所包含的信息越重要，越能反应出数据体的结构特征；对应的，越后面的列，越能反应数据体的细节 [<xref ref-type="bibr" rid="hanspub.27449-ref16">16</xref>] 。因此，为了凸显数据体的结构特征，同时增加压缩率，我们可以进行秩截断，即选取因子矩阵的前r列构成的子矩阵作为新的因子矩阵，同时，选取核心张量中对应的子块作为新的核心张量。由这样的子因子矩阵和子核心张量重构出的数据体，能够忽略掉部分无关紧要的细节特征，同时最大程度的凸显结构特征，如图2所示：秩由(R<sub>1</sub>, R<sub>2</sub>, R<sub>3</sub>) 截断为(K<sub>1</sub>, K<sub>2</sub>, K<sub>3</sub>) 。</p><p>图2. 张量近似秩截断</p><p>张量重构的过程相比于张量分解就简单得多，只需要根据式(1)将核心张量B和因子矩阵 U ( 1 ) , U ( 2 ) , ⋯ , U ( n ) 依次作TTM乘积，就能够重构出原始张量的近似值。</p><p>目前，秩截断技术的主要限制是，统一秩分解会导致某些分块误差过大，而另一些分块压缩率不足 [<xref ref-type="bibr" rid="hanspub.27449-ref17">17</xref>] [<xref ref-type="bibr" rid="hanspub.27449-ref18">18</xref>] 。我们用峰值信噪比(PSNR)来表示处理后的数据和原始数据的差异大小，PSNR的定义如式(2)，(3)所示：</p><p>MSE = ∑ n = 0 N ( a n − b n ) 2 N (2)</p><p>PSNR = 10 &#215; log 10 K 2 MSE (3)</p><p>其中，N为数据的总点数，a<sub>n</sub>，b<sub>n</sub> 分别表示某一数据点经过处理前后的值，K表示数据体的变化范围。据此，可以得到对某一地震数据进行秩截断后，峰值信噪比大小如表1所示。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> PSNR and compression rati</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >秩(16, 16, 16)分解</th><th align="center" valign="middle" >秩(8, 8, 8)分解</th><th align="center" valign="middle" >秩(4, 4, 4)分解</th></tr></thead><tr><td align="center" valign="middle" >PSNR (db)</td><td align="center" valign="middle" >29.55</td><td align="center" valign="middle" >25.76</td><td align="center" valign="middle" >24.49</td></tr><tr><td align="center" valign="middle" >压缩率(%)</td><td align="center" valign="middle" >17.19</td><td align="center" valign="middle" >3.9</td><td align="center" valign="middle" >1.37</td></tr></tbody></table></table-wrap><p>表1. PSNR与压缩率</p><p>可见，高秩分解具有高峰值信噪比，但压缩率不足，低秩分解具有理想的压缩率，但峰值信噪比低。所以，如果对所有分块用统一大小的秩，则对有些分块来说，可能会导致误差过大；对另外一些分块来说，可能会造成不必要的压缩率损失。因此，我们需要对每一个分块赋予其最合适的秩。</p></sec><sec id="s6"><title>4. 最佳秩选取算法</title><p>为了为每个分块寻找其最佳大小的秩，在保证其最终的绘制效果的基础之上尽可能多的压缩数据，我们从一个初始大小的秩开始，进行二分搜索，直到找到一个最佳的秩，即恰好满足误差门限的秩。</p><p>我们首先对分块数据进行初始的高秩分解。在初始的高秩分解的基础上，我们从设定好的初始秩开始，对张量分解的秩进行二分查找，从中找到该分块数据的最佳秩大小。</p><p>寻找分块的最佳秩的过程，是一个试探的过程。当然，我们可以通过从低到高遍历来找到最佳的秩。但是，当秩的个数很大时，这种搜索方式的效率太低。对于一个分块数据来说，最佳的秩大小即为刚好满足误差门限的秩。这就意味着，大小比最佳秩大的秩，其重构误差必然小于误差门限；大小比最佳秩小的秩，其重构误差必然大于误差门限。利用这一特性，我们可以采用二分搜索的思想来提高寻找最佳秩过程的效率。</p><p>图3展示了二分搜索最佳秩的流程。假设我们要从r<sub>1</sub> 到r<sub>n</sub> 中，寻找最佳大小的秩。我们首先判断r<sub>1</sub> 的重构误差是否小于误差门限。如果小于，则二分搜索结束，最佳秩为r<sub>1</sub>；否则，取r<sub>1</sub>和r<sub>n</sub> 的中点(r<sub>1</sub> + r<sub>n</sub>)/2作为下一个要判断的秩。若(r<sub>1</sub> + r<sub>n</sub>)/2的重构误差小于门限值，则说明最佳秩在r<sub>1</sub>到(r<sub>1</sub> + r<sub>n</sub>)/2之间，则取r<sub>1</sub> 到(r<sub>1</sub> + r<sub>n</sub>)/2的中点为下一个要判断的秩，继续上述过程；若(r<sub>1</sub> + r<sub>n</sub>)/2的重构误差大于门限值，则说明最佳秩在(r<sub>1</sub> + r<sub>n</sub>)/2到r<sub>n</sub>之间，则取(r<sub>1</sub> + r<sub>n</sub>)/2到r<sub>n</sub> 的中点为下一个要判断的秩，继续上述过程。搜索的结束条件为不能继续对两个端点进行二分取值。当结束条件满足时：如果当前秩的误差小于门限值，则当前秩为最佳秩；如果当前秩的误差大于门限值，则最佳秩为当前秩加1。</p><p>因此，我们将从r<sub>1</sub>到r<sub>n</sub>中搜索最佳秩的算法步骤归纳如下：</p><p>第一步：当前秩R = r<sub>1</sub> ，起点R<sub>s</sub> = r<sub>1</sub>，终点R<sub>e</sub> = r<sub>n</sub>；</p><p>第二步：对分块做秩R截断，计算重构误差；</p><p>第三步：若误差小于门限值，跳到步骤4；若误差大于门限值，跳到步骤5；</p><p>第四步：若R − R<sub>s</sub> &lt; 2，输出R，算法结束；否则，R<sub>e</sub> = R，R = (R<sub>s</sub> + R<sub>e</sub> )/2，跳到步骤2；</p><p>第五步：若R<sub>e</sub> − R &lt; 2，输出R +1，算法结束；否则，R<sub>s</sub> = R，R = (R<sub>s</sub> + R<sub>e</sub>)/2；跳到第二步；</p><p>如果在二分查找的每一次比较中都进行完整的张量分解和重构的话，对每一个块的秩选取会耗费大量不必要的时间。张量重构的过程很快，因此不需要做额外处理。对于张量分解，我们采用因子矩阵和</p><p>图3. 二分搜索最佳秩流程</p><p>核心张量秩截断的方式来替代对每一次秩试探所做的张量分解。如图3所示，根据因子矩阵的特性，越前面的列代表了该方向越重要的基，越后面的列对数据的贡献越小。因此，我们可以对因子矩阵的列和其对应的核心张量作截断，来达到减小秩的目的。根据上一节介绍的秩截断原理，对U<sup>(1)</sup>，U<sup>(2)</sup>和U<sup>(3)</sup>秩</p><p>截断后，得到新的低秩因子矩阵 U k 1 ( 1 ) ， U k 2 ( 2 ) 和 U k 3 ( 3 ) ，以及对应的核心张量 B<sub>k</sub><sub>1k2k3</sub>。于是我们将高秩分解(R<sub>1</sub>, R<sub>2</sub>, R<sub>3</sub>) 截断成了低秩分解(K<sub>1</sub>, K<sub>2</sub>, K<sub>3</sub>) 。</p><p>因此，我们的自适应秩选择过程从一个初始的高秩分解开始。从实践中，我们得到R = I/2无论从近似效果和压缩率来说，都是比较好的张量分解的秩的选择，因此我们也将它作为自适应秩选择的初始的高秩分解的秩。由于我们的分块大小一般设置为32，因此，我们初始时对块做秩16分解。另外，我们还需要设定秩截断的初始秩大小。在对地震数据的张量近似实验中，我们发现当R = 4时，因此，我们设定秩截断的初始秩大小为R = 4。</p><p>误差的计算可以根据实际的需要选择合适的标准。本文采用的是矩阵的Frobenius范数作为重构误差的标准：</p><p>e = ‖ A − A ˜ ‖ F ‖ A ‖ F (4)</p><p>其中，e代表重构后的归一化误差，A代表原始张量， A ˜ 代表重构后的近似张量，对大小为M&#215;N的矩阵B做 ‖     ‖ F 运算定义为：</p><p>‖ B ‖ F = ∑ i = 1 M ∑ j = 1 N b i j 2 (5)</p></sec><sec id="s7"><title>5. 仿真分析</title><p>在最佳秩选取的仿真中，在各个方向上我们采用相同的秩。搜索的初始秩为4，最高秩为16。为了验证本文的方法确实能够实现自适应地分块秩截断，在仿真过程中，我们记录了不同误差门限下每个秩大小下包含的分块数目。为了方便，我们只设置了4个不同的分块秩等级，分别为4，8，12和16。如表2所示，本文的方法确实能够实现分块最佳秩选取，并且误差门限越高，整体的分块秩大小越低，压缩效果也就越高。图5展示了不同误差门限值下的分块最佳秩选取效果图。从图4中可以看出，随着误差门限的增大，最佳秩选取后的整体绘制效果开始逐渐变差。</p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> Blocks distribution under different threshold by ran</title></caption><table><tbody><thead><tr><th align="center" valign="middle" ></th><th align="center" valign="middle" >4 &#215; 4 &#215; 4</th><th align="center" valign="middle" >8 &#215; 8 &#215; 8</th><th align="center" valign="middle" >12 &#215; 12 &#215; 12</th><th align="center" valign="middle" >16 &#215; 16 &#215; 16</th></tr></thead><tr><td align="center" valign="middle" >T<sub>e</sub> = T<sub>p</sub> = 0.1</td><td align="center" valign="middle" >528</td><td align="center" valign="middle" >15</td><td align="center" valign="middle" >16</td><td align="center" valign="middle" >5161</td></tr><tr><td align="center" valign="middle" >T<sub>e</sub> = T<sub>p</sub> = 0.2</td><td align="center" valign="middle" >536</td><td align="center" valign="middle" >463</td><td align="center" valign="middle" >2233</td><td align="center" valign="middle" >2488</td></tr><tr><td align="center" valign="middle" >T<sub>e</sub> = T<sub>p</sub> = 0.3</td><td align="center" valign="middle" >746</td><td align="center" valign="middle" >4440</td><td align="center" valign="middle" >534</td><td align="center" valign="middle" >0</td></tr><tr><td align="center" valign="middle" >T<sub>e</sub> = T<sub>p</sub> = 0.4</td><td align="center" valign="middle" >2416</td><td align="center" valign="middle" >3303</td><td align="center" valign="middle" >1</td><td align="center" valign="middle" >0</td></tr></tbody></table></table-wrap><p>表2. 不同误差门限下的秩对应分块个数分布</p><p>图4. 不同门限值的最佳秩选取效果图</p><p>为了对比本文的最佳秩选取算法与统一秩张量分解的性能差异，我们记录了它们各自的压缩率和预处理时间，为了使不同大小的秩的分块数近似满足正态分布的特点，我们选取T<sub>e</sub> = T<sub>p</sub> = 0.25作为秩截断的误差门限，如表3所示。在压缩率方面，误差门限为T<sub>e</sub> = T<sub>p</sub> = 0.25的最佳秩选取的压缩率远远优于统一的秩(16, 16, 16)分解，而比统一的秩(8, 8, 8)和秩(4, 4, 4)分解稍差。在预处理时间方面，误差门限为T<sub>e</sub> = T<sub>p</sub> = 0.25的最佳秩选取比统一秩(16, 16, 16)分解多不到20%，比统一秩(8, 8, 8)和秩(4, 4, 4)分解多60%左右。</p><p>同时，本文还对比了最佳秩选取和统一秩分解的效果差异，如图5所示。可以看出，误差门限为T<sub>e</sub> = T<sub>p</sub> = 0.25的最佳秩选取张量分解的整体绘制效果不逊于统一秩(16, 16, 16)分解，甚至在某些微结构特征的表现上还要优于统一秩(16, 16, 16)分解。而统一秩(8, 8, 8)分解和统一秩(4, 4, 4)分解的绘制效果则明显不如最佳秩选取。</p><table-wrap id="table3" ><label><xref ref-type="table" rid="table3">Table 3</xref></label><caption><title> Comparison between optimal rank and unified ran</title></caption><table><tbody><thead><tr><th align="center" valign="middle" >性能参数</th><th align="center" valign="middle" >最佳秩选取T<sub>e</sub> = T<sub>p</sub> = 0.25</th><th align="center" valign="middle" >秩(16, 16, 16)分解</th><th align="center" valign="middle" >秩(8, 8, 8)分解</th><th align="center" valign="middle" >秩(4, 4, 4)分解</th></tr></thead><tr><td align="center" valign="middle" >压缩率(%)</td><td align="center" valign="middle" >6.7</td><td align="center" valign="middle" >17.19</td><td align="center" valign="middle" >3.9</td><td align="center" valign="middle" >1.37</td></tr><tr><td align="center" valign="middle" >预处理时间(分)</td><td align="center" valign="middle" >32.7</td><td align="center" valign="middle" >21.5</td><td align="center" valign="middle" >15.2</td><td align="center" valign="middle" >14.9</td></tr></tbody></table></table-wrap><p>表3. 最佳秩选取和统一秩分解性能对比</p><p>图5. 最佳秩选取和统一秩张量分解效果对比</p><p>由此，我们可以得出结论：最佳秩选取相比与统一秩的高秩分解来说，牺牲了少量的预处理效率，换来了出色的压缩率提升，而且其整体绘制效果丝毫不逊于高秩分解，而且在某些微结构特征的表现方面还要优于高秩分解。而相比于统一秩的中低秩分解来说，最佳秩选取以少量的压缩率和不多的预处理效率为代价，获得了出色的绘制效果提升。</p></sec><sec id="s8"><title>6. 结束语</title><p>针对基于张量近似的多分辨率体绘制方法中，张量分解时秩选取的问题，本文提出了一种能够自适应地为每一个分块寻找最佳秩的方法。该方法可以在牺牲了少量的预处理效率的情况下，得以大幅提升压缩率，并且能够得到不逊于高秩分解的整体绘制效果，而且在某些微结构特征的表现方面还要优于高秩分解。对于本文方法所带来的预处理时间上的牺牲，可以采用并行计算、多线程计算、GPU加速等方法来提高本文方法的预处理时间。</p></sec><sec id="s9"><title>基金项目</title><p>四川省教育厅自然科学科研项目(16ZB0444)。</p></sec><sec id="s10"><title>文章引用</title><p>聂小燕,鲁 才. 一种多分辨率体绘制中张量分解最佳秩选取算法An Algorithm for Choosing Optimal Rank in Tensor Approximation of Multi-Resolution Volume Rendering[J]. 计算机科学与应用, 2018, 08(11): 1665-1674. https://doi.org/10.12677/CSA.2018.811183</p></sec><sec id="s11"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.27449-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Balsa Rodríguez, M., Gobbetti, E., Iglesias Guitián, J.A., et al. (2014) State-of-the-Art in Compressed GPU-Based Direct Volume Rendering. Computer Graphics Forum, 33, 77-100. &lt;br&gt;https://doi.org/10.1111/cgf.12280</mixed-citation></ref><ref id="hanspub.27449-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Hadwiger, M., Ljung, P., Salama, C.R., et al. (2009) Advanced Illumination Techniques for GPU-Based Volume Raycasting. Computer Graphics Proceedings, Annual Conference Series, ACM SIGGRAPH, New York, 12-53.</mixed-citation></ref><ref id="hanspub.27449-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Ljung, P., Lundstrom, C., Ynnerman, A., et al. (2004) Tansfer Func-tion Based Adaptive Decompression for Volume Rendering of Large Medical Data Sets. Proceedings of the IEEE Symposium on Vol-ume Visualization and Graphics, Los Alamitos, 25-32.</mixed-citation></ref><ref id="hanspub.27449-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">梁荣华, 薛剑锋, 马祥音. 自适应分块细节水平的多分辨率体绘制方法[J]. 计算机辅助设计与图形学学报, 2012, 24(3): 314-322.</mixed-citation></ref><ref id="hanspub.27449-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Boada, I., Navazo, I. and Scopigno, R. (2001) Multi-Resolution Volume Visualization with a Texture-Based Octree. The Visual Computer, 17, 185-197. &lt;br&gt;https://doi.org/10.1007/PL00013406</mixed-citation></ref><ref id="hanspub.27449-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">LaMar, E., Hamann, B. and Joy, K.I. (1999) Multiresolution Techniques for Interactive Texture-Based Volume Visualization. Proceedings of the IEEE Visualization, San Francisco, 24-29 October 1999, 355-362.  
&lt;br&gt;https://doi.org/10.1109/VISUAL.1999.809908</mixed-citation></ref><ref id="hanspub.27449-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Plate, J., Tirtasana, M., Carmona, R., et al. (2002) A Hierarchical Approach for Interactive Roaming through Very Large Volumes. Proceedings of the EUROGRAPHICS/IEEE TCVG Symposium on Visualization, Switzerland, 53-60.</mixed-citation></ref><ref id="hanspub.27449-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Wang, C.L., Gao, J.Z. and Shen, H.-W. (2004) Parallel Multiresolution Volume Rendering of Large Data Sets with Error-Guided Load Balancing. Proceedings of the EURO-GRAPHICS Symposium on Parallel Graphics &amp; Visualization, Switzerland, 23-30.</mixed-citation></ref><ref id="hanspub.27449-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Guthe, S. and Staßer, W. (2004) Advanced Techniques for High-Quality Multi-Resolution Volume Render-ing. Computers &amp; Graphics, 28, 51-58. &lt;br&gt;https://doi.org/10.1016/j.cag.2003.10.018</mixed-citation></ref><ref id="hanspub.27449-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Ljung, P., Lundstrom, C., Ynnerman, A., et al. (2004) Transfer Function Based Adaptive Decompression for Volume Rendering of Large Medical Data Sets. Proceedings of the IEEE Symposium on Volume Visualization and Graphics, Austin, TX, 12 October 2004, 25-32. &lt;br&gt;https://doi.org/10.1109/SVVG.2004.14</mixed-citation></ref><ref id="hanspub.27449-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Kolda, T.G. and Bader, B.W. (2009) Tensor Decompositions and Applications. SIAM Review, 51, 455-500.  
&lt;br&gt;https://doi.org/10.1137/07070111X</mixed-citation></ref><ref id="hanspub.27449-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Wu, Q., Xia, T., Chen, C., et al. (2008) Hierarchical Tensor Approximation of Multidi-mensional Visual Data. IEEE Transaction on Visualization and Computer Graphics, 14, 186-199. &lt;br&gt;https://doi.org/10.1109/TVCG.2007.70406</mixed-citation></ref><ref id="hanspub.27449-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Suter, S.K., Makhynia, M. and Pajarola, R. (2013) Tamresh-Tensor Approxima-tion Multiresolution Hierarchy for Interactive Volume Visualization. Computer Graphics Forum, 32, 151-160.</mixed-citation></ref><ref id="hanspub.27449-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Ballester-Ripoll, R., Suter, S.K. and Pajarola, R. (2015) Analysis of Tensor Approximation for Compression-Domain Volume Visualization. Computers &amp; Graphics, 47, 34-47. &lt;br&gt;https://doi.org/10.1016/j.cag.2014.10.002</mixed-citation></ref><ref id="hanspub.27449-ref15"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">Balsa Rodríguez, M., Gobbetti, E., Iglesias Guitián, J.A., et al. (2014) State-of-the-Art in Compressed GPU-Based Direct Volume Rendering. Computer Graphics Forum, 33, 77-100. &lt;br&gt;https://doi.org/10.1111/cgf.12280</mixed-citation></ref><ref id="hanspub.27449-ref16"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Piccand, S., Noumeir, R. and Paquette, E. (2008) Region of Interest and Multiresolution for Volume Rendering. IEEE Transactions on Information Technology in Biomedicine, 12, 561-568. &lt;br&gt;https://doi.org/10.1109/TITB.2007.907986</mixed-citation></ref><ref id="hanspub.27449-ref17"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Lorensen, W.E. and Cline, H.E. (1987) Marching Cubes: A High-Resolution 3D Surface Construction Algorithm. Computer Graphics, 21, 163-169. &lt;br&gt;https://doi.org/10.1145/37402.37422</mixed-citation></ref><ref id="hanspub.27449-ref18"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Grgic, S., Grgic, M. and Mrak, M. (2004) Reliability of Objective Picture Quality Measures. Journal of Electrical Engineering, 55, 3-10.</mixed-citation></ref></ref-list></back></article>