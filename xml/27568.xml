<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">CSA</journal-id><journal-title-group><journal-title>Computer Science and Application</journal-title></journal-title-group><issn pub-type="epub">2161-8801</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/CSA.2018.811186</article-id><article-id pub-id-type="publisher-id">CSA-27568</article-id><article-categories><subj-group subj-group-type="heading"><subject>CSA20181100000_58154469.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>信息通讯</subject></subj-group></article-categories><title-group><article-title>
 
 
  融合项目因素的用户部分特征协同过滤算法
  User Feature Collaborative Filtering Algorithm Integrating Item Factors
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>程</surname><given-names>文娟</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>云海</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib></contrib-group><aff id="aff2"><addr-line>合肥工业大学，安徽 合肥</addr-line></aff><aff id="aff1"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>02</day><month>11</month><year>2018</year></pub-date><volume>08</volume><issue>11</issue><fpage>1689</fpage><lpage>1695</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   
   为解决基于用户部分特征协同过滤算法中出现的项目分类不准确问题，本文提出了一种融合了近似项目的用户部分特征协同过滤算法(AICF)。该算法通过融合项目标签数据和用户评分数据来计算项目综合相似度，以获取待推荐项目的近似项目，然后在近似项目中计算待推荐用户最近邻，最后根据近邻用户对指定用户推荐。实验表明，通过结合项目标签数据改进近邻项目的选择，可以提高最终协同过滤算法的推荐效果。 In order to solve the problem of inaccuracy of project classification based on user partial feature collaborative filtering algorithm, a kind of user partial feature collaborative filtering algorithm is proposed, which combines the approximate item (AICF). The algorithm combines project label data and user score data to calculate the comprehensive similarity of the project to obtain the approximate items of the recommended items. Then, the nearest neighbor is calculated in the approximate project. Finally, the recommended user is recommended by the nearest neighbor to the designated user. Experiments show that by combining the project label data and improving the selection of neighbor items, the recommendation effect of the final collaborative filtering algorithm can be improved. 
  
 
</p></abstract><kwd-group><kwd>协同过滤推荐，项目标签，相似性, Collaborative Filtering</kwd><kwd> Item Label</kwd><kwd> Similarity</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>融合项目因素的用户部分特征协同过滤算法<sup> </sup></title><p>程文娟，刘云海</p><p>合肥工业大学，安徽 合肥</p><p><img src="//html.hanspub.org/file/7-1541187x1_hanspub.png" /></p><p>收稿日期：2018年10月28日；录用日期：2018年11月9日；发布日期：2018年11月16日</p><disp-formula id="hanspub.27568-formula69"><graphic xlink:href="//html.hanspub.org/file/7-1541187x5_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>为解决基于用户部分特征协同过滤算法中出现的项目分类不准确问题，本文提出了一种融合了近似项目的用户部分特征协同过滤算法(AICF)。该算法通过融合项目标签数据和用户评分数据来计算项目综合相似度，以获取待推荐项目的近似项目，然后在近似项目中计算待推荐用户最近邻，最后根据近邻用户对指定用户推荐。实验表明，通过结合项目标签数据改进近邻项目的选择，可以提高最终协同过滤算法的推荐效果。</p><p>关键词 :协同过滤推荐，项目标签，相似性</p><disp-formula id="hanspub.27568-formula70"><graphic xlink:href="//html.hanspub.org/file/7-1541187x6_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2018 by authors and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/7-1541187x7_hanspub.png" /> <img src="//html.hanspub.org/file/7-1541187x8_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>随着人类进入大数据时代，互联网上的信息呈指数爆炸式增长，如何从茫茫多数据中获取自己感兴趣的数据成为了人类当前所面临的巨大问题。于是便产生了能够主动帮助用户提供有效信息的推荐系统。而协同过滤技术作为最成功的推荐技术之一受到了越来越多的研究者的关注。目前，几乎所有的大型商务系统中都不同程度的使用了各种形式的推荐系统 [<xref ref-type="bibr" rid="hanspub.27568-ref1">1</xref>] 。</p><p>通常，协同过滤技术主要包括基于用户的协同过滤推荐，基于项目的协同过滤推荐和基于矩阵分解的协同过滤推荐 [<xref ref-type="bibr" rid="hanspub.27568-ref2">2</xref>] ，其中基于用户的协同过滤算法是目前运用最为广泛的算法。该算法首先需要找到和当前待推荐用户有相似兴趣的其他用户，然后根据这些用户的行为将他们感兴趣的内容推荐给该待推荐用户 [<xref ref-type="bibr" rid="hanspub.27568-ref3">3</xref>] 。但是该算法也面临着数据稀疏性，冷启动问题和系统延展性等问题。</p><p>为了解决以上问题，邓爱林等 [<xref ref-type="bibr" rid="hanspub.27568-ref1">1</xref>] 提出了一种基于项目评分预测的协同过滤算法Sarwar等 [<xref ref-type="bibr" rid="hanspub.27568-ref4">4</xref>] 提出通过矩阵奇异值分解来减少项目空间的维数，进而提高推荐效果。黄裕洋等 [<xref ref-type="bibr" rid="hanspub.27568-ref5">5</xref>] 提出了一种综合用户和项目因素的协同过滤算法，该算法在产生推荐时同时考虑了用户和项目的近邻结合，并能够自适应的调节目标用户和目标项目的最近邻集合。程高伟等 [<xref ref-type="bibr" rid="hanspub.27568-ref6">6</xref>] 提出结合项目标签和用户评分的协同过滤算法，该算法在传统协同过滤算法中引入了项目标签数据，提高了最终的推荐准确率。</p><p>其中李永超等 [<xref ref-type="bibr" rid="hanspub.27568-ref7">7</xref>] 认为虽然用户可能在某些项目类别中口味相似，但是在其他项目类别中口味可能大相径庭，所以需要基于用户部分特征进行推荐，故提出了一种基于用户部分特征的协同过滤算法。但是某些项目可能很难准确的分为某一个固定类别，或者某些项目可能处于该项目类别边缘，如果直接使用该聚类结果中的项目可能导致评分偏差。另一方面，在项目类别分类中，项目标签数据并没有完全发挥出作用。故上述基于用户部分特征协同过滤基础上，本文提出了一种融合了项目因素的用户部分特征协同过滤算法，该算法在基于用户部分特征的协同过滤基础上，通过融合了项目标签数据从而提高项目分类的准确性，进而提高用户近邻选择的准确性，同时可以避免在用户近邻选择中出现的因为只考虑全局相似性出现的误差，以此提高最终的推荐结果准确性。</p></sec><sec id="s4"><title>2. 融合项目因素的用户部分特征协同过滤算法</title><p>融合项目因素的用户部分特征协同过滤算法可分为以下四个阶段</p><p>1) 评分矩阵预处理</p><p>2) 近似项目选择</p><p>3) 近邻用户生成</p><p>4) 推荐生成</p><p>作为算法的输入数据，用户–项目评分矩阵通常可以表示为一个m*n矩阵R，其中m为用户数量，n为项目数量，矩阵元素rij表示第i个用户对第j个项目的评分值。</p><sec id="s4_1"><title>2.1. 评分矩阵预处理</title><p>相对于数目巨大的总项目数来说，往往用户只能对少量项目进行评分，这就导致评分矩阵极度稀疏，所以在进行项目分类之前首先要对评分矩阵预处理。</p><p>传统处理评分矩阵的方法包括矩阵缺失值预测填充，矩阵分解等方法。在这里，项目评分数量可能会影响到最终的推荐结果，举例来说：一部好莱坞大片有10,000个观众投票，一部小成本的文艺片只有100个观众投票。这两者的投票数量上的不同可能导致最终推荐上的偏差。故在这里采用了 [<xref ref-type="bibr" rid="hanspub.27568-ref6">6</xref>] 提出的未评分项目预测方法，该方法通过项目流行系数来解决热门项目评分偏差问题：</p><p>项目流行系数w：</p><p>w = 1 / ( log ( 1 + S ( i ) ) ) (1)</p><p>这里S(i)表示项目i已经被评分的总次数</p><p>r ˜ u i = R &#175; + b u + b i * w (2)</p><p>这里 r ˜ u i 表示预测填充值。 R &#175; 表示所有用户评分均值， b u 表示用户u和用户评分均值的偏差， b i 表示项目i和用户评分均值的评分偏差。</p></sec><sec id="s4_2"><title>2.2. 相似度计算</title><p>用户之间的相似度计算通常包含余弦相似性，相关相似性以及修正过的余弦相似度 [<xref ref-type="bibr" rid="hanspub.27568-ref8">8</xref>] ，在这里采用修正过的余弦相似度算法。该方法通过减去用户对项目的平均评分来解决传统余弦相似度中未考虑不同用户评分尺度的问题 [<xref ref-type="bibr" rid="hanspub.27568-ref1">1</xref>] ：</p><p>s i m ( u , v ) = ∑ i ∈ I u v ( r u i − R u &#175; ) * ( r v i − R v &#175; ) ∑ i ∈ I u v ( r u i − R u &#175; ) 2 ∑ i ∈ I u v ( r v i − R v &#175; ) 2 (3)</p><p>这里u，v表示用户u，v。 r u i 表示用户u对项目i的评分， R &#175; u 表示用户u的平均评分， I u ， 表示用户u，v已经评价过的项目集合， I u v 表示用户u和用户v的共同评分项目集合。</p><p>相似的，项目之间的相似度计算也可以采用类似的公式：</p><p>s i m ( i , j ) = ∑ u ∈ U i ∩ U j ( r u , i − r i &#175; ) * ( r u , j − r j &#175; ) ∑ u ∈ U i ∩ U j ( r u , i − r i &#175; ) 2 ∑ u ∈ U i ∩ U j ( r u , j − r j &#175; ) 2 (4)</p><p>其中， U i ， U j 表示项目i和项目j中存在评分值的用户集合。 r i 表示项目i的平均被评分值。 r u , i ， r u , j 表示用户u对项目i和j的评分值。</p><p>通常计算两个布尔变量之间的相似度使用Jaccard系数：</p><p>J ( A , B ) = | A ∩ B | | A | + | B | − | A ∩ B | (5)</p><p>这里采用Jaccard系数计算项目之间在标签上的相似度。</p></sec><sec id="s4_3"><title>2.3. 近似项目生成</title><p>基于用户的协同过滤算法基于以下假设：如果用户之间对一些项目的评分比较相似，则他们对其它项目的评分也将会比较相似 [<xref ref-type="bibr" rid="hanspub.27568-ref5">5</xref>] 。但是用户口味可能随着项目种类的不同而大相径庭 [<xref ref-type="bibr" rid="hanspub.27568-ref7">7</xref>] 。故需要先对项目进行分类，然后计算近邻用户过程中仅根据在相同类别项目中计算用户相似度。但是传统聚类算法中部分项目可能难以分为具体某一个类别或者可能该项目处于分类边缘，则此时基于该项目的推荐可能会有偏差。另外，仅仅使用用户评分矩阵并不能对项目作出准确客观的评价。故而在对项目分类过程中，需要综合考虑项目评分相似度和项目标签信息，最终加权计算项目综合相似度。这样保证了只有项目评分较多且标签相似的项目才具有较高的相似度，从而提高了项目分类的准确性。</p><p>首先用公式(4)计算各个项目和待推荐项目的评分相似度<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/7-1541187x28_hanspub.png" xlink:type="simple"/></inline-formula>，然后利用公式(5)计算各个项目和待推荐项目之间的标签相似度 s i m t ( i , j ) ，最终计算项目的综合相似度：</p><disp-formula id="hanspub.27568-formula71"><label>(6)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/7-1541187x30_hanspub.png"  xlink:type="simple"/></disp-formula><p>这里 α 用来调整评分相似度和标签相似度之间的影响权重。</p><p>综合相似度计算完毕后即可选择和待推荐项目相似度最大的n个项目，作为近似项目集合。</p></sec><sec id="s4_4"><title>2.4. 近邻用户生成</title><p>利用公式(3)：</p><p>s i m ( u , v ) = ∑ i ∈ I u v ( r u i − R u &#175; ) * ( r v i − R v &#175; ) ∑ i ∈ I u v ( r u i − R u &#175; ) 2 ∑ i ∈ I u v ( r v i − R v &#175; ) 2 (7)</p><p>计算用户和指定用户之间的相似度，但此时项目集合仅考虑2.3中计算生成的近似项目集合。计算完毕后选取相似度最大的k个项目，作为近邻用户集合。</p></sec><sec id="s4_5"><title>2.5. 推荐结果生成</title><p>利用2.4节计算生成的近邻用户集合来计算指定用户u对待推荐项目i的评分：</p><p>r ⌢ u i = R &#175; u + ∑ v ∈ N u s i m ( u , v ) * ( r v i − R &#175; v ) ∑ v ∈ N u | s i m ( u , v ) | (8)</p><p>这里 R &#175; u 表示用户u的评价项目评分， N u 为用户u的最近邻用户集合。这样便最终得到了u关于项目i的评分。</p></sec></sec><sec id="s5"><title>3. 实验结果和分析</title><sec id="s5_1"><title>3.1. 数据集</title><p>实验采用的数据集是目前衡量推荐算法质量时比较常用的MovieLens 100K数据集，由美国明尼苏达大学GroupLens研究小组创建并维护。该数据中包括100,004个评分数据，其中包括671个用户和包括9125个电影的1296个标签数据。数据集中评分范围为1~5，数值越大表示用户对评分电影兴趣越大。本次实验按照5折交叉实验，取5次实验平均值作为最终结果。</p></sec><sec id="s5_2"><title>3.2. 评价标准</title><p>学术研究中通常使用平均绝对误差MAE (mean absolute error)来评价推荐系统的推荐质量：</p><p>MAE = ∑ i = 1 N | p i − r i | N (9)</p><p>这里N表示测试集的数据个数，pi为预测值，ri为实际评分值。其最终MAE值越小表示预测结果越准确。</p></sec><sec id="s5_3"><title>3.3. 实验结果分析</title><sec id="s5_3_1"><title>3.3.1. 参数调整</title><p>首先讨论公式(6)中的 α 取值。 α 和 1 − α 表示计算项目综合相似度中项目的评分相似度和项目标签相似度所占的比重。其取值会影响到近似项目计算的准确性，进而影响到最终的推荐效果。在这里，对 α 取不同值，观察其对最终MAE值的影响。</p><p>图1. α 取值结果图</p><p>由图1可以看出，当 α 取0.5~0.8之间时，最终评分准确度最高。</p></sec><sec id="s5_3_2"><title>3.3.2. 实验结果比较</title><p>这里使用本文提出的算法和传统的基于用户聚类的协同过滤算法(UBCF)，综合用户和项目因素的协同过滤算法(HCFR)，基于用户部分特征的协同过滤算法(UPCF)的平均绝对误差MAE进行对比观察实验：</p><p>由图2可以看出，该算法和基于用户部分特征的协同过滤算法有最高的MAE值，因为其考虑了用户的部分相似性而非用户的全局相似性。于此同时，本文提出的融合项目因素的用户部分特征协同过滤算法(AICF)由于在计算过程中融合了项目标签数据来计算近似项目，提高了近似项目选择的准确性，故</p><p>图2. 实验结果图</p><p>最终平均绝对误差要低于基于用户部分特征的协同过滤算法。</p><p>计算性能上，项目近似计算可以通过hadoop或cuda并行加速 [<xref ref-type="bibr" rid="hanspub.27568-ref9">9</xref>] [<xref ref-type="bibr" rid="hanspub.27568-ref10">10</xref>] [<xref ref-type="bibr" rid="hanspub.27568-ref11">11</xref>] [<xref ref-type="bibr" rid="hanspub.27568-ref12">12</xref>] [<xref ref-type="bibr" rid="hanspub.27568-ref13">13</xref>] ，也可事先离线计算完毕。用户近邻计算因为是在近似项目集合中，故复杂度远小于传统的基于用户的协同过滤算法。</p></sec></sec></sec><sec id="s6"><title>4. 结语</title><p>本文在基于用户部分特征的协同过滤基础上对其作出了改进，通过综合标签数据和用户评分数据的方法来提高近邻项目选择的准确率。最终实验表明，通过融合项目评分数据和项目标签数据来计算近似项目集合，可以有效避免简单项目聚类所导致的近似项目选择不准确问题，故最终可以有效提高最终用户近邻选择的准确率，进而提高最终推荐准确率。</p><p>但是由于针对每个待推荐项目都要计算其相似项目，其计算效率仍然不是十分理想。现在也出现了很多利用GPU并行加速的方法 [<xref ref-type="bibr" rid="hanspub.27568-ref9">9</xref>] 。此外，公式(6)中 α 值的选取是事先人为指定，不够灵活。而 [<xref ref-type="bibr" rid="hanspub.27568-ref14">14</xref>] 中也提到了一种参数自适应的方法。如何利用计算并行化和GPU加速提升算法效率，进一步简化算法，提升算法灵活性，将是下一阶段研究的方向。</p></sec><sec id="s7"><title>基金项目</title><p>安徽省质量工程项目(2016ckjh141)。</p></sec><sec id="s8"><title>文章引用</title><p>程文娟,刘云海. 融合项目因素的用户部分特征协同过滤算法User Feature Collaborative Filtering Algorithm Integrating Item Factors[J]. 计算机科学与应用, 2018, 08(11): 1689-1695. https://doi.org/10.12677/CSA.2018.811186</p></sec><sec id="s9"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.27568-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">邓爱林, 朱扬勇, 施伯乐. 基于项目评分预测的协同过滤推荐算法[J]. 软件学报, 2003, 14(9): 1621-1628.</mixed-citation></ref><ref id="hanspub.27568-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Bobadilla, J., Ortega, F., Hernando, A., et al. (2013) Recommender Systems Survey. Knowledge-Based Systems, 46, 109-132. &lt;br&gt;https://doi.org/10.1016/j.knosys.2013.03.012</mixed-citation></ref><ref id="hanspub.27568-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Deshpande, M. and Karypis, G. (2004) Item-Based Top-N Recommendation Algorithms. ACM Transactions on Information Systems, 22, 143-177. &lt;br&gt;https://doi.org/10.1145/963770.963776</mixed-citation></ref><ref id="hanspub.27568-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Sarwar, B.M., Karypis, G., Konstan, J.A., et al. (2000) Application of Dimensionality Reduction in Recommender System—A Case Study. ACM Webkdd Workshop. &lt;br&gt;https://doi.org/10.21236/ADA439541</mixed-citation></ref><ref id="hanspub.27568-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">黄裕洋, 金远平. 一种综合用户和项目因素的协同过滤推荐算法[J]. 东南大学学报(自然科学版), 2010, 40(5): 917-921.</mixed-citation></ref><ref id="hanspub.27568-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">程高伟, 丁亦喆, 吴振强. 结合用户评分和项目标签的协同过滤算法[J]. 计算机技术与发展, 2015(3): 71-75.</mixed-citation></ref><ref id="hanspub.27568-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">李永超, 罗军. 基于用户部分特征的协同过滤算法[J]. 计算机系统应用, 2017, 26(3): 204-208.</mixed-citation></ref><ref id="hanspub.27568-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Breese, J.S., Heckerman, D. and Kadie, C. (1998) Empirical Analysis of Predictive Algorithms for Collab-orative Filtering. 14th Conference on Uncertainty in Artificial Intelligence, Morgan Kaufmann Publishers Inc., 43-52.</mixed-citation></ref><ref id="hanspub.27568-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">许建, 林泳, 秦勇, 等. 基于GPU的并行协同过滤算法[J]. 计算机应用研究, 2013, 30(9): 2656-2659.</mixed-citation></ref><ref id="hanspub.27568-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">闫永刚, 马廷淮, 王建. KNN分类算法的MapReduce并行化实现[J]. 南京航空航天大学学报, 2013, 45(4): 550-555.</mixed-citation></ref><ref id="hanspub.27568-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">韦泽鲲, 夏靖波, 付凯, 等. 并行MapReduce模型下的一种改进型KNN分类算法[J]. 空军工程大学学报•自然科学版, 2017, 18(1): 92-98.</mixed-citation></ref><ref id="hanspub.27568-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">陈薇. 基于MapReduce的机器学习并行化研究与实现[J]. 产业与科技论坛, 2017, 16(9): 69-70.</mixed-citation></ref><ref id="hanspub.27568-ref13"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">涂敬伟, 皮建勇. 基于MapReduce和分布式缓存的KNN分类算法研究[J]. 微型机与应用, 2015, 34(2): 18-21.</mixed-citation></ref><ref id="hanspub.27568-ref14"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">黄创光, 印鉴, 汪静, 等. 不确定近邻的协同过滤推荐算法[J]. 计算机学报, 2010, 33(8): 1369-1377.</mixed-citation></ref></ref-list></back></article>