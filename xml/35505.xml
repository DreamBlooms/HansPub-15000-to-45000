<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd"><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="3.0" xml:lang="en" article-type="research article"><front><journal-meta><journal-id journal-id-type="publisher-id">PM</journal-id><journal-title-group><journal-title>Pure  Mathematics</journal-title></journal-title-group><issn pub-type="epub">2160-7583</issn><publisher><publisher-name>Scientific Research Publishing</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.12677/PM.2020.105052</article-id><article-id pub-id-type="publisher-id">PM-35505</article-id><article-categories><subj-group subj-group-type="heading"><subject>PM20200500000_61402119.pdf</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>数学与物理</subject></subj-group></article-categories><title-group><article-title>
 
 
  迭代精化下求解三对角Toeplitz线性方程组的快速算法
  A Fast Algorithm for Solving Tridiagonal Toeplitz Linear Systems with Iterative Refinement
 
</article-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>李</surname><given-names>姗</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>刘</surname><given-names>仲云</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>张</surname><given-names>育林</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib></contrib-group><aff id="aff1"><addr-line>长沙理工大学数学与统计学院，湖南 长沙</addr-line></aff><aff id="aff3"><addr-line>Minho大学数学中心，布拉加，葡萄牙</addr-line></aff><aff id="aff2"><addr-line>null</addr-line></aff><pub-date pub-type="epub"><day>30</day><month>04</month><year>2020</year></pub-date><volume>10</volume><issue>05</issue><fpage>425</fpage><lpage>432</lpage><permissions><copyright-statement>&#169; Copyright  2014 by authors and Scientific Research Publishing Inc. </copyright-statement><copyright-year>2014</copyright-year><license><license-p>This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/</license-p></license></permissions><abstract><p>
 
 
   本文主要讨论如何对三对角Toeplitz线性方程组 进行高精度数值求解。由于系数矩阵A这种比较特殊的结构，使得我们可以设计出快速求解 的直接算法。我们将该算法应用到实际例子的计算过程中，发现大部分例子计算效果显著，但部分例子的计算精度还不能达到计算机机器精度。针对这类达不到计算机机器精度的例子，本文将在快速求解三对角Toeplitz线性方程组 的直接算法基础上，进一步进行迭代精化，从而提高这类例子的计算精度。数值实验表明通过迭代精化，我们算法计算精度可以达到计算机机器精度。 This paper mainly discusses how to numerically solve tridiagonal Toeplitz linear systems   efficiently. Since the coefficient matrix A has a special structure, we can design a direct algorithm to quickly solve  . We will apply the above algorithm to the calculation of practical examples and find that the calculation precision of some examples is not as high as that of computer's ma-chine accuracy. In order to improve the precision of algorithm, this paper further carries out iter-ative refinement to quickly solve the tridiagonal Toeplitz linear equations of  . Numerical experiments show that the computational accuracy of our algorithm can reach computer's machine accuracy by iterative refinement. 
 
</p></abstract><kwd-group><kwd>Toeplitz矩阵，迭代精化，快速算法, Toeplitz Matrices</kwd><kwd> Iterative Refinement</kwd><kwd> Fast Algorithm</kwd></kwd-group></article-meta></front><body><sec id="s1"><title>迭代精化下求解三对角Toeplitz线性方程组的快速算法<sup> </sup></title><p>李姗<sup>1</sup>，刘仲云<sup>1</sup>，张育林<sup>2</sup></p><p><sup>1</sup>长沙理工大学数学与统计学院，湖南 长沙</p><p><sup>2</sup>Minho大学数学中心，布拉加，葡萄牙</p><disp-formula id="hanspub.35505-formula27"><graphic xlink:href="//html.hanspub.org/file/4-1251049x7_hanspub.png"  xlink:type="simple"/></disp-formula><p>收稿日期：2020年4月16日；录用日期：2020年5月5日；发布日期：2020年5月12日</p><disp-formula id="hanspub.35505-formula28"><graphic xlink:href="//html.hanspub.org/file/4-1251049x8_hanspub.png"  xlink:type="simple"/></disp-formula></sec><sec id="s2"><title>摘 要</title><p>本文主要讨论如何对三对角Toeplitz线性方程组 A x = b 进行高精度数值求解。由于系数矩阵A这种比较特殊的结构，使得我们可以设计出快速求解 A x = b 的直接算法。我们将该算法应用到实际例子的计算过程中，发现大部分例子计算效果显著，但部分例子的计算精度还不能达到计算机机器精度。针对这类达不到计算机机器精度的例子，本文将在快速求解三对角Toeplitz线性方程组 A x = b 的直接算法基础上，进一步进行迭代精化，从而提高这类例子的计算精度。数值实验表明通过迭代精化，我们算法计算精度可以达到计算机机器精度 [<xref ref-type="bibr" rid="hanspub.35505-ref1">1</xref>]。</p><p>关键词 :Toeplitz矩阵，迭代精化，快速算法</p><disp-formula id="hanspub.35505-formula29"><graphic xlink:href="//html.hanspub.org/file/4-1251049x12_hanspub.png"  xlink:type="simple"/></disp-formula><p>Copyright &#169; 2020 by author(s) and Hans Publishers Inc.</p><p>This work is licensed under the Creative Commons Attribution International License (CC BY 4.0).</p><p>http://creativecommons.org/licenses/by/4.0/</p><p><img src="//html.hanspub.org/file/4-1251049x13_hanspub.png" /> <img src="//html.hanspub.org/file/4-1251049x14_hanspub.png" /></p></sec><sec id="s3"><title>1. 引言</title><p>本文考虑迭代精化下求解三对角Toeplitz线性方程组</p><p>A x = b , (1.1)</p><p>A = [ α γ β ⋱ ⋱ ⋱ ⋱ γ β α ]</p><p>其中 A = Tritoep ( β , α , γ ) 为三对角Toeplitz矩阵。</p><p>关于三对角Toeplitz线性方程组的求解方法主要分为两类：一类是直接法如高斯消元法、循环约简法和特殊LU分解法 [<xref ref-type="bibr" rid="hanspub.35505-ref2">2</xref>] [<xref ref-type="bibr" rid="hanspub.35505-ref3">3</xref>] [<xref ref-type="bibr" rid="hanspub.35505-ref4">4</xref>] 等等。另一类就是迭代法如古典迭代法(Smith迭代法，ADI迭代法 [<xref ref-type="bibr" rid="hanspub.35505-ref5">5</xref>] [<xref ref-type="bibr" rid="hanspub.35505-ref6">6</xref>] [<xref ref-type="bibr" rid="hanspub.35505-ref7">7</xref>] [<xref ref-type="bibr" rid="hanspub.35505-ref8">8</xref>] 等)和投影迭代法(Krylov子空间法等)。在不考虑舍入误差的情况下，对于小型稀疏求解线性方程组的问题，我们通常使用直接法求解。因为直接法可以通过改善置换策略，引入尽量少的填充，充分利用硬件的性能设计算法。但当遇到大型稀疏求解线性方程组的问题时，直接解法计算量太大且数值不稳定，而迭代解法数值稳定且易于并行计算，所以这时我们通常使用迭代法求解。</p><p>Toeplitz矩阵是一类特殊结构的矩阵，它在数学、科学计算和工程中有着广泛的应用，如信号处理中的图像恢复存储问题、代数微分方程、时间序列和控制理论等。本文主要讨论如何对三对角Toeplitz线性方程组 A x = b 进行高精度数值求解。由于系数矩阵A这种比较特殊的结构，我们在前面一篇论文中已经设计出快速求解 A x = b 的直接算法。其系数矩阵主要是上次对角占优、下次对角占优、若对角占优。具体情况如下：</p><p>我们首先从系数矩阵为次对角占优情况开始考虑。</p><p>C = [ 0 1 0 1 ⋱ ⋱ 0 1 1 0 ]</p><p>我们容易得到 A ^ = C A 并且具有如下 2 &#215; 2 的块结构</p><p>A ^ = [ β α γ β α ⋱ ⋱ ⋱ γ β α α γ 0 ] ≡ [ A 11 p w T 0 ] . (1.2)</p><p>我们对 A ^ 作如下的 2 &#215; 2 的块LU分解</p><p>A ^ = [ I w T A 11 − 1 1 ] [ A 11 p − w T A 11 − 1 p ] . (1.3)</p><p>− w T A 11 − 1 p 是叫做 A ^ 的Schur补。</p><p>同样地，要求问题(1.1)的解也就变成了求如下线性方程组的解</p><p>A ^ x = b ^ (1.4)</p><p>其中 b ^ = C b = ( b 2 , b 3 , ⋯ , b n , b 1 ) T 。对x和 b ^ 做如下格式的划分</p><p>x = [ x 1 x n ] ,       b ^ = [ b 2 b 1 ] .</p><p>用块LU分解法分解(1.3)，我们就可以通过求下面方程的解来获得方程(1.1)的解</p><p>( A 11 x 1 + x n p = b 2 , w T x 1 = b 1 . (1.5)</p><p>( x n = ( w T v − b 1 ) / w T u , x 1 = v − x n u . (1.6)</p><p>为了获得 x = [ x 1 T x n ] T 的解，我们首先求解如下方程中的 u 和 v</p><p>( A 11 u = p , A 11 v = b 2 . (1.7)</p><p>通过如下算法，我们得到式(1.7)中方程组的解 u 和 v ，具体算法如下：</p><p>我们注意到，为了得到(1.6)的解 x 1 和 x n ，我们需要解(1.7)中的两个线性方程组，其中 A 11 是一个上三对角矩阵。显然，向量 u 和 v 可以通过向后代入法求解。此外，由于 A 11 是对角占优的，计算出的向量 u 和 v 都是稳定可靠的。</p><p>基于以上分析，我们现在可以重新设计求解(1.1)的算法如下</p><p>算法2的稳定性取决于第三步的求解 x n = ( w T v − b 1 ) / w T u 。如果 w T u 不是足够小，那么 x n 的就是相当精确的。因此，我们可以得出结论，我们求解这类线性方程组的算法在数值上是稳定的，计算出的解是可靠的，如果A是下次对角占优的并且 w T u 不是足够小。</p><p>对于计算复杂度，我们的算法需要大约12n (flops)的浮点运算，选主元的LU分解法需要13n (flops)浮点运算，我们的方法与选主元的LU分解法相比需要更少的浮点运算量。对于内存存储空间，我们的算法只需要存储2个大小为n向量，少于选主元的LU分解法需要存储5个大小为n向量。特别是，我们的算法需要较少的数据传输。在数据传输过程中它只需要读取1个向量即右边的向量并写入一个向量(即方程的解)。但是选主元的LU分解法需要读取个向量。正如我们所知，现代计算机有多层的内存结构，有不同的存储级别，如较小的高速缓存和较大的低速磁盘存储。在计算过程中，数据在不同级别的高速缓存中传输。因此，较少数据传输的算法可能会显示出更好的计算性能。这使得该算法比选主元的LU分解方法更有效。</p><p>现在，我们考虑上次对角占优的情况。设J为交换对角矩阵，在交叉对角上为1 (从左下到右上)，其他地方为0，即</p><p>J = [ 0 0 ⋯ 0 1 0 0 ⋯ 1 0 ⋮ ⋮ ⋱ ⋮ ⋮ 0 1 ⋯ 0 0 1 0 ⋯ 0 0 ] , (1.8)</p><p>因为A是上次对角占优的， A ˜ = J A J = Tritoep ( γ , α , β ) 是下次对角占优的。因此，我们可以将原来的线性线性方程组(1.1)转化为以下新的线性方程组</p><p>A ˜ x ˜ = b ˜ (1.9)</p><p>x ˜ = J x ， b ˜ = J b 。因此，结合算法2得到下面的算法3用于求解方程(1.1)。</p><p>由于J是一个置换矩阵，因此算法3的稳定性、计算复杂度和内存存储都与算法2相同。</p><p>最后，我们讨论了不可约对角占优的情形。已知，在这种情况下，A是一个H矩阵，使用LU分解法不需要选主元。显然，这种情况下LU分解法不会导致任何非零元素的填充，但需要更多的内存存储空间。为了避免这个问题，我们采用以下方法：</p><p>如果 β &gt; γ ，那么我们选择算法2解方程(1.1)，如果 β &lt; γ ，然后调用算法3解解方程(1.1)。我们把以上情况总结，得到综合算法如下：</p><p>算法4的计算复杂度和内存存储与算法2或3基本相同。</p><p>与选主元LU分解法相比，我们提出的三对角Toeplitz线性方程组快速直接算法(算法4)具有以下优点：不仅需要更少的计算时间和存储空间以及数据传输，而且具有更高的计算精度。我们将该算法应用到实际例子的计算过程中，发现大部分例子计算效果显著，但部分例子的计算精度还不能达到计算机机器精度。为解决这类问题，我们将在快速求解三对角Toeplitz线性方程组 A x = b 的直接算法基础上进行迭代精化(详情见算法5)，从而减小我们的计算误差，提高解的精度。</p></sec><sec id="s4"><title>2. 迭代精化算法及收敛性分析</title><p>求解(1.1)的精化迭代法的迭代格式 [<xref ref-type="bibr" rid="hanspub.35505-ref12">12</xref>] 为：</p><p>x ( k + 1 ) = x ( k ) + d ( k ) (2.1)</p><p>A d ( k ) = r ( k ) , r ( k ) = b − A x ( k ) (2.2)</p><p>其中 x ( 0 ) 为初始迭代向量， k = 0,1, ⋯ 。当 d ( k ) 为(2.2)的精确解时，迭代格式(2.1)~(2.2)退化为单步迭代精化。不难看出，该迭代格式可以提高解 x ( k ) 的精度。另外，如果我们用高精度方法求解(2.2)，那么我们把迭代格式(2.1)~(2.2)称为迭代精化。</p><p>引理2.1 [<xref ref-type="bibr" rid="hanspub.35505-ref12">12</xref>] 假设不考虑舍入误差，精确计算残差 r ( k ) ， d ( k ) 为(2.2)的精确解，则 x ( k + 1 ) 为(1.1)的精确解 [<xref ref-type="bibr" rid="hanspub.35505-ref9">9</xref>]。</p><p>证明：由(2.2)式知 A d ( k ) = r ( k ) ， r ( k ) = b − A x ( k ) ，从而 A x ( k + 1 ) = A x ( k ) + A d ( k ) = b 。这意味着 x ( k + 1 ) 是(1.1)的精确解，证毕。</p><p>结合引理2.1与算法4，我们得到迭代精化 [<xref ref-type="bibr" rid="hanspub.35505-ref10">10</xref>] 的具体算法如下：</p><p>定理2.1 [<xref ref-type="bibr" rid="hanspub.35505-ref12">12</xref>] 假设r是双精度并且 κ ( A ) ⋅ ε &lt; c ≡ 1 3 n 3 g + 1 &lt; 1 ，n表示矩阵A的阶数，g表示主元增长</p><p>因子， κ ( A ) = ‖ A ‖ ⋅ ‖ A − 1 ‖ 。那么迭代精化收敛于：</p><p>‖ x i − A − 1 b ‖ ‖ A − 1 b ‖ = o ( ε ) . (2.3)</p><p>定理2.2 [<xref ref-type="bibr" rid="hanspub.35505-ref12">12</xref>] 令 x * 为线性方程组(1.1)的精确解。对第k步迭代，用算法5求解(2.2)的初始迭代向量均为 d ( 0 ) = x ( 0 ) (其中 x ( 0 ) 为用算法4求得的线性方程组(1.1)的解)，相应的迭代序列为 d ( k ) ，且 d ( k ) 满足终止检验公式</p><p>η = ‖ r ( k ) − A d ( k ) ‖ ‖ r ( k ) ‖ &lt; ε (2.4)</p><p>则迭代序列 x ( k ) 满足</p><p>‖ x ( k + 1 ) − x * ‖ ≤ κ ( A ) ε ‖ x ( k ) − x * ‖ (2.5)</p><p>特别地，当 κ ( A ) ε &lt; 1 ，迭代序列 x ( k ) 收敛到 x ( ∗ ) [<xref ref-type="bibr" rid="hanspub.35505-ref11">11</xref>]。</p><p>证明：由(2.1)、(2.2)及(2.4)式知</p><disp-formula id="hanspub.35505-formula30"><label>(2.6)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/4-1251049x131_hanspub.png"  xlink:type="simple"/></disp-formula><p>从而</p><disp-formula id="hanspub.35505-formula31"><label>(2.7)</label><graphic position="anchor" xlink:href="//html.hanspub.org/file/4-1251049x132_hanspub.png"  xlink:type="simple"/></disp-formula><p>当<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x133_hanspub.png" xlink:type="simple"/></inline-formula>时，迭代序列<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x134_hanspub.png" xlink:type="simple"/></inline-formula>收敛，证毕。</p><p>针对算法5，只要<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x135_hanspub.png" xlink:type="simple"/></inline-formula>，则<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x136_hanspub.png" xlink:type="simple"/></inline-formula>满足终止检验公式(2.4)，那么<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x137_hanspub.png" xlink:type="simple"/></inline-formula>就是满足计算机机器精度的解 [<xref ref-type="bibr" rid="hanspub.35505-ref12">12</xref>]。</p></sec><sec id="s5"><title>3. 数值实验</title><p>下面我们用一些例子证明我们算法的有效性。本文所有数值实验的电脑运行环境为：Intel(R) Core(TM) i3-2310M CPU @2.10 by Matlab 7.4.0.287 (R2014a)。分别用快速直接算法和加迭代精化的快速直接法分别对三对角Toeplitz线性方程组进行求解。选取典型代表例子如下：</p><p>例1：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x138_hanspub.png" xlink:type="simple"/></inline-formula>；</p><p>例2：<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x139_hanspub.png" xlink:type="simple"/></inline-formula>。</p><p>在例1、例2中的矩阵A是由一维对流扩散方程离散差分得到的方程的系数矩阵。在所有例子中二阶差分都采用中心差分格式。但在例1和例2中一阶差分分别使用中心差分格式和向后差分格式。在数值实验中，我们计算了许多不同n和参数c的例子。我们可以得到共同的结论。接下来我们展示一些有代表性的例子结果。在实验中，n表示矩阵A的阶数，Iter表示迭代次数，CPU表示计算时间，右端向量</p><p><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x140_hanspub.png" xlink:type="simple"/></inline-formula>，R表示计算相对残差，即(<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x141_hanspub.png" xlink:type="simple"/></inline-formula>)，Fast algorithm表示快速算法，Iter algorithm表示对快</p><p>速算法进行迭代精化。</p><p>数值结果表1是例1取<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x142_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x143_hanspub.png" xlink:type="simple"/></inline-formula>的两个例子，数值结果表2是例2取<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x144_hanspub.png" xlink:type="simple"/></inline-formula>和<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x145_hanspub.png" xlink:type="simple"/></inline-formula>的两个例子。我们发现当我们用直接算法1计算三对角Toeplitz线性方程组<inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x146_hanspub.png" xlink:type="simple"/></inline-formula>时，存在计算精度无法达到机器精度的情况。但是通过我们进一步迭代精化，当迭代一定次数(本例Iter = 10)时，我们的计算精度就可以达到计算机机器精度。</p><table-wrap id="table1" ><label><xref ref-type="table" rid="table1">Table 1</xref></label><caption><title> <img src="//html.hanspub.org/file/4-1251049x147_hanspub.png" /></title></caption><table><tbody><thead><tr><th align="center" valign="middle"  colspan="5"  ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x149_hanspub.png" xlink:type="simple"/></inline-formula></th><th align="center" valign="middle"  colspan="4"  ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x150_hanspub.png" xlink:type="simple"/></inline-formula></th></tr></thead><tr><td align="center" valign="middle" >n</td><td align="center" valign="middle"  colspan="2"  >Fast algorithm</td><td align="center" valign="middle"  colspan="2"  >Iter algorithm</td><td align="center" valign="middle"  colspan="2"  >Fast algorithm</td><td align="center" valign="middle"  colspan="2"  >Iter algorithm</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td></tr><tr><td align="center" valign="middle" >2<sup>19</sup></td><td align="center" valign="middle" >2.155e−2</td><td align="center" valign="middle" >4.612e−13</td><td align="center" valign="middle" >4.906e−1</td><td align="center" valign="middle" >6.614e−16</td><td align="center" valign="middle" >2.381e−2</td><td align="center" valign="middle" >1.021e−13</td><td align="center" valign="middle" >3.987e−1</td><td align="center" valign="middle" >7.111e−16</td></tr><tr><td align="center" valign="middle" >2<sup>20</sup></td><td align="center" valign="middle" >4.449e−2</td><td align="center" valign="middle" >6.523e−13</td><td align="center" valign="middle" >9.057e−1</td><td align="center" valign="middle" >9.353e−16</td><td align="center" valign="middle" >4.512e−2</td><td align="center" valign="middle" >1.444e−13</td><td align="center" valign="middle" >8.595e−1</td><td align="center" valign="middle" >9.944e−16</td></tr><tr><td align="center" valign="middle" >2<sup>21</sup></td><td align="center" valign="middle" >9.401e−2</td><td align="center" valign="middle" >9.225e−13</td><td align="center" valign="middle" >1.827e+0</td><td align="center" valign="middle" >1.323e−16</td><td align="center" valign="middle" >9.031e−2</td><td align="center" valign="middle" >2.042e−13</td><td align="center" valign="middle" >1.551e+0</td><td align="center" valign="middle" >1.463e−16</td></tr></tbody></table></table-wrap><p>表1. <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x148_hanspub.png" xlink:type="simple"/></inline-formula></p><table-wrap id="table2" ><label><xref ref-type="table" rid="table2">Table 2</xref></label><caption><title> <img src="//html.hanspub.org/file/4-1251049x151_hanspub.png" /></title></caption><table><tbody><thead><tr><th align="center" valign="middle"  colspan="5"  ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x153_hanspub.png" xlink:type="simple"/></inline-formula></th><th align="center" valign="middle"  colspan="4"  ><inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x154_hanspub.png" xlink:type="simple"/></inline-formula></th></tr></thead><tr><td align="center" valign="middle" >n</td><td align="center" valign="middle"  colspan="2"  >Fast algorithm</td><td align="center" valign="middle"  colspan="2"  >Iter algorithm</td><td align="center" valign="middle"  colspan="2"  >Fast algorithm</td><td align="center" valign="middle"  colspan="2"  >Iter algorithm</td></tr><tr><td align="center" valign="middle" ></td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td><td align="center" valign="middle" >CPU</td><td align="center" valign="middle" >R</td></tr><tr><td align="center" valign="middle" >2<sup>19</sup></td><td align="center" valign="middle" >2.113e−2</td><td align="center" valign="middle" >1.081e−12</td><td align="center" valign="middle" >4.298e−1</td><td align="center" valign="middle" >1.072e−16</td><td align="center" valign="middle" >2.237e−2</td><td align="center" valign="middle" >7.241e−13</td><td align="center" valign="middle" >4.285e−1</td><td align="center" valign="middle" >1.104e−16</td></tr><tr><td align="center" valign="middle" >2<sup>20</sup></td><td align="center" valign="middle" >4.152e−2</td><td align="center" valign="middle" >1.439e−12</td><td align="center" valign="middle" >8.010e−1</td><td align="center" valign="middle" >1.797e−16</td><td align="center" valign="middle" >4.132e−2</td><td align="center" valign="middle" >1.024e−12</td><td align="center" valign="middle" >7.914e−1</td><td align="center" valign="middle" >1.561e−16</td></tr><tr><td align="center" valign="middle" >2<sup>21</sup></td><td align="center" valign="middle" >8.451e−2</td><td align="center" valign="middle" >2.036e−12</td><td align="center" valign="middle" >1.550e+0</td><td align="center" valign="middle" >2.219e−16</td><td align="center" valign="middle" >8.942e−2</td><td align="center" valign="middle" >1.448e−12</td><td align="center" valign="middle" >1.539e+0</td><td align="center" valign="middle" >2.371e−16</td></tr></tbody></table></table-wrap><p>表2. <inline-formula><inline-graphic xlink:href="//html.hanspub.org/file/4-1251049x151_hanspub.png" xlink:type="simple"/></inline-formula></p><p>数值实验表明，当采用直接算法求解三对角Toeplitz线性方程组的时候，存在计算精度达不到计算机机器精度的情况。但是通过我们的迭代精化算法，可以使三对角Toeplitz线性方程组的解都能够达到计算机机器精度。</p></sec><sec id="s6"><title>基金项目</title><p>2019年硕士研究生校级科研创新项目(CX2019SS34)。</p></sec><sec id="s7"><title>文章引用</title><p>李 姗,刘仲云,张育林. 迭代精化下求解三对角Toeplitz线性方程组的快速算法A Fast Algorithm for Solving Tridiagonal Toeplitz Linear Systems with Iterative Refinement[J]. 理论数学, 2020, 10(05): 425-432. https://doi.org/10.12677/PM.2020.105052</p></sec><sec id="s8"><title>参考文献</title></sec></body><back><ref-list><title>References</title><ref id="hanspub.35505-ref1"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Saad, Y. (2000) Iterative Methods for Sparse Linear Systems. 2nd Edition, SIAM, Philadelphia, PA.</mixed-citation></ref><ref id="hanspub.35505-ref2"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Yan, W.-M. and Chung, K.-L. (1994) A Fast Algorithm for Solving Special Tridiagonal Systems. Computing, 52, 203-211.&lt;br&gt;https://doi.org/10.1007/bf02238076</mixed-citation></ref><ref id="hanspub.35505-ref3"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Garey, L.E. and Shaw, R.E. (2001) A Parallel Method for Linear Equa-tions with Tridiagonal Toeplitz Coefficient Matrices. Computer &amp; Mathematics with Applications, 42, 1-11. &lt;br&gt;https://doi.org/10.1016/s0898-1221(01)00125-0</mixed-citation></ref><ref id="hanspub.35505-ref4"><label>4</label><mixed-citation publication-type="other" xlink:type="simple">Kim, H.J. (1990) A Parallel Algorithm Solving a Tridiagonal Toeplitz Linear System. Parallel Computing, 13, 289-294. &lt;br&gt;https://doi.org/10.1016/0167-8191(90)90131-r</mixed-citation></ref><ref id="hanspub.35505-ref5"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Benner, P., Li, R.C. and Truhar, N. (2009) On the ADI Method for Sylvester Equations. Journal of Computational and Applied Mathematics, 233, 1035-1045. &lt;br&gt;https://doi.org/10.1016/j.cam.2009.08.108</mixed-citation></ref><ref id="hanspub.35505-ref6"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Kurschner, P., Benner, P. and Saak, J. (2014) Self-Generating and Efficient Shift Parameters in ADI Methods for Large Lyapunov and Sylvester Equations. Electronic Transactions on Numerical Analysis, 43, 142-162.</mixed-citation></ref><ref id="hanspub.35505-ref7"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Levenberg, N. and Reichel, L. (1993) A Generalized ADI Iterative Method. Numerische Mathematik, 66, 215-233. &lt;br&gt;https://doi.org/10.1007/bf01385695</mixed-citation></ref><ref id="hanspub.35505-ref8"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Lu, A. and Wachspress, E.L. (1991) Solution of Lyapunov Equations by Alternating Direction Implicit Iteration. Computers and Mathematics with Applications, 21, 43-58. &lt;br&gt;https://doi.org/10.1016/0898-1221(91)90124-m</mixed-citation></ref><ref id="hanspub.35505-ref9"><label>9</label><mixed-citation publication-type="other" xlink:type="simple">Horn, R.A. and Johnson, C.R. (1985) Matrix Analysis. Cambridge University Press, Cambridge.</mixed-citation></ref><ref id="hanspub.35505-ref10"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Bai, Z.-Z., Golub, G.H. and Ng, M.K. (2003) Hermitian and Skew-Hermitian Splitting Methods for Non-Hermitian Positive Definite Linear Systems. SIAM Journal on Matrix Analysis and Applications, 24, 603-626. &lt;br&gt;https://doi.org/10.1137/s0895479801395458</mixed-citation></ref><ref id="hanspub.35505-ref11"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Garey, L.E., Majedi, M. and Shaw, R.E. (2008) A Parallel Sewing Method for Solving Tridiagonal Toeplitz Strictly Diagonally Dominant Systems. I.P.D.P.S., 1-8. &lt;br&gt;https://doi.org/10.1109/ipdps.2008.4536466</mixed-citation></ref><ref id="hanspub.35505-ref12"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Demmel, J.W. 应用数值线性代数[M]. 王国荣, 译. 北京: 人民邮电出版社, 2007.</mixed-citation></ref></ref-list></back></article>