"通过把给定部分特征对的非负逆特征值问题转化为一个凸可行性问题，提出交替投影算法求解该问题。建立了这一算法的线性收敛性。最后，通过数值例子，比较了交替投影算法和非光滑牛顿法(白等人2011年提出)的收敛效率。数值实验结果表明，交替投影算法总是能收敛到问题的解，而非光滑牛顿法在一些情形下求不出解。此外，交替投影算法收敛的效率也比非光滑牛顿法高。"
"非负逆特征值问题来源非常广泛，它主要来自于离散的数学物理反问题、系统参数识别、地震断层成像技术、主成分分析与勘测、结构分析、电路理论、机械系统模拟等许多应用领域，有着重要的应用背景 [ 1 ] - [ 6 ] 。这类问题提出来的几十年里，吸引了大量学者，取得到了重要研究成果。非负逆特征值问题可以分为以下两大类：1) 已知n个特征值 λ 1 , λ 2 , ⋯ , λ n ，求一个非负n阶非负矩阵 1 (或者非负对称矩阵/ 随机矩阵)；2) 已知部分特征对 { λ k , x k } k = 1 p ( p ≤ n ) ，其中 λ k 是特征值， x k 是其对应的特征向量，求一个n 阶非负矩阵(或者非负对称矩阵/随机矩阵)。关于这两类问题的研究主要包括两方面 [ 7 ] ，一方面是关于问题解的存在性；另一反面是求解这些问题的数值算法。例如，求解第一类问题的等光谱流动算法 [ 8 ] 以及交替投影算法 [ 9 ] 等。关于第二类问题的数值算法求解见文献 [ 10 ] [ 11 ] [ 12 ] ，其中文献 [ 10 ] 通过把非负逆特征值问题转化为优化问题，提出了非光滑牛顿法。在满足某种非退化的条件下，证明了算法是二阶收敛的。但该算法在求解子问题的计算量大，收敛的效率并不理想。 本文主要研究第二类非负逆特征值问题。通过把这一问题转化为凸可行性问题，提出了交替投影算法，并给出了投影的计算式。同时，我们证明了算法的(线性)收敛性。最后，通过数值例子比较了交替投影算法和非光滑牛顿法的收敛效率。数值实验结果表明，交替投影算法总能收敛到问题的解，而非光滑牛顿法在一些情形下不收敛。此外，非光滑牛顿法虽然在一定条件下二阶收敛，但是因为子问题计算量大，非光滑牛顿法的实际运算效率不如交替投影算法。 本文的结构如下。第二节是预备知识，包括一些相关的概念和记号。文章的主要结果在第三节，我们提出求解非负逆特征问题的交替投影算法，并证明了算法的线性收敛性。第四节是数值实验及与非光滑牛顿法的比较。"
"这节主要介绍矩阵分析中的一些符号，概念和结论，参考 [ 13 ] [ 14 ] [ 15 ] 。设 R n 和 C n 分别表示n维实向量空间和复向量空间， R m × n 和 C m × n 分别表示 m × n 阶实矩阵空间和 m × n 阶复矩阵空间。矩阵 A ∈ R m × n 的 转置，共轭转置，迹分别记为 A T ， A H ， tr ( A ) ，其中 tr ( A ) = ∑ i = 1 n a i i 。在 R n × n 中，定义内积 〈 ⋅ , ⋅ 〉 如下： 〈 A , B 〉 = tr ( A T B ) , ∀ A , B ∈ R n × n . 其诱导Frobenius模记为 ‖ ⋅ ‖ F ，即 ‖ A ‖ F = 〈 A , A 〉 = ∑ i , j = 1 n a i j 2 , A ∈ R n × n . 设矩阵 A ∈ C m × n 。如果矩阵 X ∈ C m × n 满足以下四个方程： A X A = A , X A X = X , ( A X ) H = A X , ( X A ) H = X A . 则称矩阵X为矩阵A的广义逆矩阵，记作 A + 。 假设 S ⊆ R n × n 为 R n × n 中非空子集。设 X ∈ R n × n ，点X到集合S上的距离和投影分别记为 d S ( ⋅ ) , P S ( ⋅ ) 即 d S ( X ) : = inf Y ∈ S ‖ X − Y ‖ 和 P S ( X ) = arg min Y ∈ S ‖ X − Y ‖ = { Y ∈ S | d S ( X ) : = ‖ X − Y ‖ } . 如果任意两点 x 1 , x 2 ∈ S ，都有 λ 1 x 1 + ( 1 − λ ) x 2 ∈ S , ∀ λ ∈ ( 0 , 1 ) , 则称S为 R n × n 中的凸集。设 A ∈ R n × n , b ∈ R ，我们称集合 H = { X ∈ R n × n | 〈 A , X 〉 ≤ b } 为 R n × n 中的半空间，几个半空间的交称为 R n × n 中的多面体，容易验证半空间和多面体都是凸集。"
"本文主要研究以下非负逆特征值问题(下面简记为NIEP)。已知p个特征对 { λ k , x k } k = 1 p ( p ≤ n ) 是A的p 个特征对，其中 λ k ∈ C ， x k ∈ C n 是特征值 λ k 对应的特征向量，求一个非负矩阵A。为此我们先引进一些记号。不失一般性，我们不妨假设前2s个是共轭特征对，其余是实特征对，即对任意 1 ≤ i ≤ s ， λ 2 i − 1 = a i + b i − 1 , λ 2 i = a i − b i − 1 , x 2 i − 1 = x i R + x i I − 1 , x 2 i = x i R − x i I − 1 , 其中 a i , b i ∈ R , x i R , x i I ∈ R n 。记 Λ = d i a g ( λ 1 [ 2 ] , ⋯ , λ s [ 2 ] , λ 2 s + 1 , ⋯ , λ p ) ∈ R P × P 和 X = [ x 1 R , x 1 I , ⋯ , x s R , x s I , x 2 s + 1 , ⋯ , x p ] ∈ R n × p , 其中 λ i [ 2 ] = [ a i b i − b i a i ] 。则NIEP是求一个非负矩阵 A ∈ R n × n ，使得 A X = X Λ . (1) 设 C 1 = { A ∈ R n × n | A X = X Λ } , C 2 = R + n × n (2) ( R + n × n 是全体n阶非负矩阵的集合)。容易验证 C 1 , C 2 都是多面体，从而是凸集.则NIEP可以转化为以下凸可行性问题： 求矩阵 A ∈ R n × n ，使得 A ∈ C 1 ∩ C 2 。 (3) 通过把NIEP转化为问题(3)，我们用以下交替投影算法求解NIEP。关于交替投影算法的其他应用和研究结果可见参考文献 [ 16 ] 。 算法3.1 (交替投影算法) Step 0 给定初始矩阵 A 0 ∈ R n × n ， ε > 0 ，令 k = 0 。 Step 1令 A k + 1 = P C 2 ( P C 1 ( Y k ) ) 。 Step 2 若 ‖ A k + 1 X − X Λ ‖ F ≤ ε ，算法终止；否则，进入下一步。 Step 3 令 k = k + 1 ，转Step 1。 下面分别给出 P C 1 ( ⋅ ) 和 P C 2 ( ⋅ ) 的计算式。由定义容易验证，对任意 A = ( a i j ) ∈ R n × n ，有 P C 2 ( A ) = ( a ¯ i j ) n × n ，其中 a ¯ i j = { a i j , a i j ≥ 0 0 , a i j < 0 ,     i , j = 1 , 2 , ⋯ , n . 为得到 P C 1 ( ⋅ ) 的计算式，我们引用以下结论，见 [ 10 ] 。 引理3.1设 B 1 ∈ R q × m , B 2 ∈ R n × t , B 3 ∈ R q × t ，其中 p , q , t 为正整数。则集合 C = { A ∈ R m × n | B 1 A B 2 = B 3 } 非空的充分必要条件是 B 1 , B 2 , B 3 满足 B 1 B 1 + B 3 B 2 + B 2 = B 3 。并且当C非空时有 P C ( Y ) = B 1 + B 3 B 2 + + A − B 1 + B 1 A B 2 B 2 + ,     ∀ Y ∈ R m × n . 引理3.2设集合 C 1 由(2)定义，则 C 1 非空的充分必要条件是 X Λ X + X = X Λ 。并且当 C 1 非空时有 P C 1 ( Y ) = X Λ X + + Y ( I − X X + ) ,     ∀ Y ∈ R n × n . 证：由定义有 C 1 = { A ∈ R n × n | E A X = X Λ } ，其中E是n阶单位阵。令 B 1 = E , B 2 = X , B 3 = X Λ ，由引理3.1， C 1 非空的充分必要条件是 B 1 B 1 + B 3 B 2 + B 2 = B 3 ，即 X Λ X + X = X Λ 。并且此时对任意 Y ∈ R n × n ，有 P C 1 ( Y ) = B 1 + B 3 B 2 + + Y − B 1 + B 1 Y B 2 B 2 + = X Λ X + + Y ( I − X X + ) 。证毕。 定理3.3设NIEP解集非空， { A k } 是算法3.1产生的点列。则 { A k } 线性收敛到NIEP的一个的解。 证：用定义容易验证 C 1 , C 2 是多面体。从而由 [ 17 ] (或 [ 16 ] )，知 { C 1 , C 2 } 线性正则。再由 [ 17 ] (或 [ 16 ] )，可知算法3.1产生的点列 { A k } 线性收敛到问题(3)的一个解。从而 { A k } 线性收敛到NIEP的一个解。证毕。"
"在这一节，我们将用数值实验验证算法3.1的收敛性，并比较该算法和非光滑牛顿法 [ 10 ] 的收敛效率。注意到，在文献 [ 10 ] 中，作者证明了非光滑牛顿法在某种非退化的条件下二阶收敛。所以非光滑牛顿法不能保证对所有初始点算法收敛。此外，因为非光滑牛顿法求解子问题要花费很多时间，其实际运算效率并不高。下面的数值例子也表明，非光滑牛顿法不一定收敛，并且算法3.1比非光滑牛顿法收敛效率更快。 Table 1n = 100 [1, Algorithm 3.23] 算法3.1 p iter time (s) Err iter time (s) Err 5 6 4.517442 1.7456e−11 13 0.016215 4.6289e−11 10 7 4.908612 1.3431e−11 17 0.013479 5.1610e−11 30 6 6.855834 1.4866e−10 29 0.022077 5.0924e−11 50 - - - 42 0.043567 8.5412e−11 80 - - - 51 0.080054 6.5243e−11 表1.] Table 2p = 10 [1, Algorithm 3.23] 算法3.1 n iter time (s) Err iter time (s) Err 50 6 0.595174 3.4059e−12 22 0.011063 4.0982e−11 100 6 4.777698 1.5139e−11 18 0.013948 8.1422e−11 200 8 60.806629 1.1491e−11 13 0.018709 4.4342e−11 500 - - - 11 0.110257 7.9334e−11 1000 - - - 10 0.525770 2.2849e−11 2000 - - - 9 2.278633 9.5312e−11 表2.] Table 3n = 100 [1, Algorithm 3.23] 算法3.1 p iter time (s) Err iter time (s) Err 5 7 5.423762 1.1381e−12 14 0.012463 2.5491e−11 10 7 5.883010 2.4050e−12 18 0.018164 3.3000e−11 30 9 8.100601 4.0955e−11 24 0.031359 6.4918e−11 50 - - - 33 0.047918 4.7110e−11 80 - - - 65 0.133463 9.4886e−11 表3.] Table 4p = 10 [1, Algorithm 3.23] 算法3.1 n iter time (s) Err iter time (s) Err 50 7 0.415174 2.4052e−12 26 0.012588 5.0536e−11 100 7 5.895048 2.8359e−11 18 0.019039 9.0355e−11 200 7 53.993690 9.6016e−11 15 0.022489 2.0537e−11 500 - - - 12 0.108383 5.5093e−11 1000 - - - 13 0.645196 2.1937e−11 2000 - - - 10 2.830784 1.0495e−11 表4.] 在以下数值实验中，我们采用编程软件为Matlab2016a。初始矩阵 A 0 ∈ R n × n 为随机产生的n阶矩阵，iter，Err和time (s)分别表示算法的迭代次数，误差( Err = ‖ A k X − X Λ ‖ F )和CPU运行时间(以秒为单位)。在每次实验时，我们随机生成一个 n × n 矩阵，其元素均匀分布在 [ a , b ] 之间，并取其前p个特征对为给定特征对。其中第1，2个数值实验在随机生成的元素均匀分布在[0, 1]之间；第3，4个数值实验在随机生成的元素均匀分布在[1, 10]之间。具体的实验结果分别见表1~4。其中“−”表示算法迭代10,000次没有达到精度。此时，我们认为算法不收敛。"
