"为了解决捷联惯导系统中存在的不可交换误差的问题，本文提出了一种改进的圆锥误差优化算法来提高解算精度。该算法对重叠式圆锥误差优化算法进行了进一步优化。首先对经典圆锥运动建立误差准则，其次推导出优化的补偿算法的公式，给出了优化补偿系数，最后，在某一圆锥运动环境下对改进的算法进行仿真。结果表明，改进的算法得到的姿态解算精度与传统算法和重叠式算法相比，都得到了一定的提高，并且与二子样和三子样相比，四子样的解算精度效果最好。 关键词 :捷联惯导系统，等效旋转矢量，不可交换误差，补偿系数 Copyright © 2018 by authors and Hans Publishers Inc. This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/"
"在捷联惯导系统中，姿态解算在整个惯性导航系统中是非常重要的 [ 1 ] 。在载体上固联着的导航系统，可以直接敏感载体的运动 [ 2 ] ，因此，姿态实时解算和更新是捷联惯导的尤为关键的技术之一。在载体运动过程中，刚体的有限转动会产生不可交换误差。锥运动是捷联惯导系统最恶劣的工作环境，这一不可交换误差作为整个姿态解算过程中的主要误差源，很多学者都用对这一误差优化的结果来评价一个姿态更新算法的优劣。由此可见，有效抑制圆锥误差对提高导航精度有显著的意义。 目前，大量国内外学者都对圆锥误差的优化算法这一领域进行了深入研究：等效旋转矢量的概念由外国学者Bortz和Jordon提出，这一概念的提出为之后研究的大量关于姿态更新的多子样算法提供了强有力的理论依据 [ 3 ] [ 4 ] ；秦永元等人在旋转矢量法的基础上,推导出了二子样到四子样等多子样算法的公式 [ 5 ] ；陈建锋等 [ 6 ] 提出一种基于角速率输入的进一步优化的补偿算法；丁杨斌通过已经得到的当前时刻之前的两个周期的姿态数据对结果进行优化修正 [ 7 ] ；肖胜从运动学角度给出了圆锥误差的诠释，提出了流水式旋转矢量姿态更新算法 [ 8 ] ；王真等主要针对三子样，提出了二次迭代优化算法 [ 9 ] ；杨浩天利用前两个计算周期陀螺输出的角增量信息和当前时刻陀螺采样值通过重叠式采样的方式进行圆锥误差补偿 [ 10 ] 。 目前研究出的的圆锥补偿算已经比较成熟，但是还存在一些问题，如在相同的采样频率下，增加子样数，会降低导航系统的姿态更新频率，但同时会增加导航计算机的计算量，给硬件造成一定的负担。 本文在抑制圆锥误差的传统算法的基础上，提出一种改进的补偿算法，即对重叠式采样算法的周期项进行优化，分别对二子样，三子样和四子样进行仿真，验证所提算法的正确性。"
"圆锥效应是刚体运动中一种比较常见的现象。若某一载体作锥运动时，此时的不可交换误差所反映出的情况最为恶劣。 模拟载体角运动时，我们通常用锥运动来进行建模。用如下的单位矢量表示： a ( t ) / a = [ cos ω t     sin ω t     0 ] T (1) 其中， ω = 2 π f ， f 为锥运动频率，半锥角 a = ( a ⋅ a ) 1 / 2 。 在我们所表示的经典圆锥运动的环境下，表示坐标系相对运动的姿态四元数 q ( t ) 和角速率 ω ( t ) 通常可以用下列公式来表示： q ( t ) = [ cos ( a / 2 )     sin a 2 cos ω t     sin a 2 sin ω t     0 ] (2) ω ( t ) = [ − ω sin a sin γ t     ω sin a cos ω t     − 2 ω sin 2 a 2 ] (3)"
"载体运动过程中的姿态四元数，通常以如下形式进行姿态更新 q ( t + Δ t ) = q ( t ) ∘ q ( Δ t ) (4) 其中， q ( t + Δ t ) 为 t + Δ t 时刻的姿态四元数， q ( t ) 为 t 时刻的姿态四元数， q ( Δ t ) 为这一时间间隔 [ t , t + Δ t ] 内姿态四元数的变化量，可以由下式得到： q ( Δ t ) = [ cos Δ σ 2     Δ σ Δ σ sin Δ σ 2 ] T (5) 这个公式中， Δ σ 为这一时间间隔 Δ t 内旋转矢量的变化量，其大小为 Δ σ = ( Δ σ ⋅ Δ σ ) 1 / 2 。 在这一时间间隔 [ t , t + Δ t ] 内，对Bortz方程积分并取近似，可以得到 Δ σ 的理想值 Δ σ ¯ ： Δ σ ¯ ≈ θ + 1 2 ∫ t t + Δ t θ ( τ ) × ω d τ (6) 经典圆锥运动下， Δ σ ¯ 可以表示为： Δ σ ¯ = [ Δ σ ¯ x Δ σ ¯ y Δ σ ¯ z ] = [ − 2 ( sin ω h 2 + ( − ω h cos ω h 2 + 2 sin ω h 2 ) sin 2 a 2 ) sin a sin ω ( t + h 2 ) 2 ( sin ω h 2 + ( − ω h cos ω h 2 + 2 sin ω h 2 ) sin 2 a 2 ) sin a cos ω ( t + h 2 ) − 2 ω h sin 2 a 2 + 1 2 sin 2 a ( ω h − sin ω h ) ] (7) 若将时间间隔 [ t , t + Δ t ] 分为N个宽度，则可以得到N个角增量信号，传统圆锥算法以及改进的重叠式优化算法针对的都是非周期项，本文在此基础上，提出一种基于重叠式采样的二次优化算法。 假设旋转矢量的变化量为： Δ σ = [ Δ σ x     Δ σ y     Δ σ z ] T         = ∑ i = 1 N θ i + ∑ i = 1 N − 1 K i ( θ i × θ N ) + G ( θ ′ × θ ) (8) 其中， K i = d i a g [ κ i     λ i     λ i ] ， κ i 为重叠式算法的优化系数， λ i 为本文算法的优化补偿系数。 θ i × θ N = [ − 8 ω h N sin 2 a 2 sin a sin ω h 2 N sin N − i 2 N ω h sin ω ( t + N + i − 1 2 N h ) 8 ω h N sin 2 a 2 sin a sin ω h 2 N sin N − i 2 N ω h cos ω ( t + N + i − 1 2 N h ) 4 sin 2 a sin 2 ω h 2 N sin ω ( N − i ) h N ] (9) ∑ i = 1 N θ i = [ − 2 sin a sin ω h 2 sin ω ( t + h 2 ) 2 sin a sin ω h 2 cos ω ( t + h 2 ) − 2 ω h sin 2 a 2 ] (10) θ ′ × θ = [ − 8 ω h sin 2 a 2 sin a sin 2 ω h 2 sin ω t 8 ω h sin 2 a 2 sin a sin 2 ω h 2 cos ω t 4 sin 2 a sin 2 ω h 2 sin ω h ] (11) 具体的二次优化的误差准则定义为： ε = | Δ σ ¯ x − Δ σ x | (12) 将(9) (10) (11)代入(8)，并将(7) (8)代入(12)得： ε = A | ( − ω h cos ω h 2 + 2 sin ω h 2 ) sin ω ( t + h 2 )     − 4 ω h N sin ω h 2 N ∑ i = 1 N − 1 λ i sin N − i 2 N ω h sin ω ( t + N + i − 1 2 N h )     − 4 G ω h sin 2 ω h 2 sin ω t | (13) 其中， A = 2 sin 2 a 2 sin a (14)"
"当 λ i = κ i 时，式(8)是未进行优化的重叠式算法的表达式。对重叠式算法进行优化后的系数如表1所示。 本文所提出的新算法的补偿系数可以通过以下步骤来确定： 1) 将式(13)中的正弦函数全都展开成关于 ω ( t + h 2 ) 的三角函数，并对同类项进行合并； 2) 令关于 ω ( t + h 2 ) 的余弦函数项的系数为0，得到： Table 1 N G K1 K2 K3 2 −1/180 32/45 —— —— 3 1/3360 243/560 1539/1120 —— 4 −1/69,300 8992/17,325 14,912/17,325 1696/825 表1. 重叠式算法的优化系数 4 ω h N sin ω h 2 N ∑ i = 1 N − 1 λ i sin N − i 2 N ω h sin i − 1 2 N ω h + 4 G ω h sin 2 ω h 2 sin ω h 2 = 0 (15) 3) 对下述公式中关于 ω ( t + h 2 ) 的正弦函数项的系数X进行幂级数展开，即： X = − ω h cos ω h 2 + 2 sin ω h 2 − 4 ω h N sin ω h 2 N ∑ i = 1 N − 1 λ i cos i − 1 2 N ω h sin N − i 2 N ω h     − 4 G ω h sin 2 ω h 2 cos ω h 2 = [ 1 12 ( ω h ) 3 − 1 480 ( ω h ) 5 + ⋅ ⋅ ⋅ ]     − ∑ i = 1 N − 1 λ i ( N − i ) [ ( ω h N ) 3 − 1 + ( N − i ) 2 + 3 ( i − 1 ) 2 24 ( ω h N ) 5 + ⋅ ⋅ ⋅ ]     − [ G ( ω h ) 3 − G 5 24 ( ω h ) 5 + ⋅ ⋅ ⋅ ] (16) 4) 对上述公式中的同类项进行合并，并且令与 λ i 有关且阶次不超过(2N − 3)的各项的系数均为0，即： { 1 12 − ∑ i = 1 N − 1 λ i N − i N 3 − G = 0 1 480 − ∑ i = 1 N − 1 λ i ( N − i ) [ 1 + ( N − i ) 2 + 3 ( i − 1 ) 2 ] 24 N 5 − 5 24 G = 0                                       ⋮ (17) 5) 根据式(15) (17)确定二次优化补偿系数 λ i 。 通过计算，将N = 2 − 4时的优化结果列于表2。"
"假设某一载体运动的锥运动频率 f = 2   Hz ，半锥角 a = 1 deg ，算法更新周期 h = 0.01   s ，仿真时间为 t = 30 N   s ， N = 2 , 3 , 4 。 在这一运动环境下，对传统算法、重叠式优化算法以及本文所提出的优化算法的二子样(图1，图2)、三子样(图3，图4)、四子样(图5，图6)进行仿真，结果如图1~图6所示。"
"从图1~图6可以看出，传统算法随着子样数N的增加，姿态误差不仅没有提高，反而出现停滞甚至下降的趋势。本文所提出的算法和重叠式算法相比，对于二子样而言，两者的优化系数相同，因此两者的二子样的姿态误差相同，但比传统的算法误差要小很多。除了二子样外，三子样和四子样的仿真结果 Table 2 N λ 1 λ 2 λ 3 2 32/45 —— —— 3 285/257 92/3823 —— 4 10,662/6397 633/2138 −361/1399 表2. 本文算法的优化补偿系数 图1. 传统的二子样算法姿态误差 图2. 重叠式算法与本文算法的二子样姿态误差对比 图3. 传统的三子样算法姿态误差 图4. 重叠式算法与本文算法的三子样姿态误差对比 图5. 传统的四子样算法姿态误差 图6. 重叠式算法与本文算法的四子样姿态误差对比 都表明，本文所提出的算法要优于重叠式优化算法和传统算法，尤其是四子样算法，姿态误差比相应的传统算法和重叠式算法优化了1~2个数量级。"
