"本文考虑一类带有符号的线性乘积和规划问题。利用二级松弛技术，得到原问题中目标函数的一个新的下逼近函数，进而将原来的非凸规划问题转化为一系列的线性规划问题。进一步，采用超矩形的缩减技术提出了确定此类问题全局最优值下界的分支定界缩减方法。最后，通过数值算例验证了本文所给算法的可行性与有效性。 关键词 :全局最优值，线性乘积规划，分支定界 Copyright © 2017 by authors and Hans Publishers Inc. This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/"
"本文考虑如下带有符号的线性乘积和规划问题： ( G L M P ) { min f ( x ) = ∑ j = 1 p δ j n j ( x ) d j ( x ) s . t . x ∈ D = { x ∈ R n | A x ≤ b } 其中 n j ( x ) , d j ( x ) ( j = 1 , 2 , ⋯ , p ) 为 R n 上的线性函数， δ j = + 1 或 − 1 ， j = 1 , 2 , ⋯ , p ， A ∈ R m × n ， b ∈ R m ，p，m，n都是正整数，D是非空有界的凸多面体。 乘积规划问题在用于经济、交通等众多领域具有广泛的使用价值，如金融优化 [ 1 ] 、鲁棒优化 [ 2 ] 、证券投资 [ 3 ] 等。乘积规划问题的多极值性(多个局部最优解)，使得求其全局最优解变得十分困难。所以，有许多学者关注于乘积规划问题的全局最优值的求解。近年来，一些求解乘积规划问题的方法相继被提出，包括外逼近方法 [ 4 ] ，割平面法 [ 5 ] ，分支定界方法 [ 5 ] [ 6 ] [ 7 ] 等。本文针对一类带有符号的线性乘积和规划问题(GLMP)，采用二级松弛技术和超矩形缩减策略，提出了一种新的分支定界算法，并进行了数值分析。 本文的结构安排如下：第2节利用二级松弛技术，确定(GLMP)问题全局最优值的下界；第3节利用超矩形的剖分与缩减技术，给出分支定界算法，通过数值算例验证算法的可行性与有效性。"
"本节首先利用凸包络技术给出(GLMP)问题中乘积函数的一个下界函数，进一步，通过二次松弛得到原问题的线性松弛规划问题，进而给出(GLMP)问题的下界。 不失一般性，我们假定 δ j = + 1 ， j = 1 , 2 , ⋯ , p 1 ； δ j = − 1 ， j = p 1 + 1 , p 1 + 2 , ⋯ , p 。因(GLMP)问题的可行域D是非空有界集，我们可构造包含D的超矩形 H 0 = [ v 0 , h 0 ] ， v 0 = ( v 1 0 , v 2 0 , ⋯ , v n 0 ) T ， h 0 = ( h 1 0 , h 2 0 , ⋯ , h n 0 ) T ，其中 v i 0 = min x ∈ D ∩ H 0 x i ， h i 0 = max x ∈ D ∩ H 0 x i ， i = 1 , 2 , ⋯ , n . 下面确定乘积函数 n j ( x ) d j ( x ) 的凸包络，首先求解如下线性规划问题： { min n j ( x ) s . t . x ∈ D ∩ H 0 ， { max n j ( x ) s . t . x ∈ D ∩ H 0 ， { min d j ( x ) s . t . x ∈ D ∩ H 0 和 { max d j ( x ) s . t . x ∈ D ∩ H 0 (1) 设问题(1)的最优解分别为 x j 1 ， x j 2 ， x j 3 ， x j 4 ，最优值分别为 ε _ j ， ε ¯ j ， η _ j ， η ¯ j ( j = 1 , 2 , ⋯ , p )，从而有 ε _ j ≤ n j ( x ) ≤ ε ¯ j ， η _ j ≤ d j ( x ) ≤ η ¯ j (2) 显然 x j 1 ， x j 2 ， x j 3 ， x j 4 均为(GLMP)问题的可行解，设 Q = Q ∪ { x j 1 , x j 2 , x j 3 , x j 4 : j = 1 , ⋯ , p } ，其中Q表示(GLMP)问题目前可行解的集合。 令 Ω j = [ ε _ j , ε ¯ j ] × [ η _ j , η ¯ j ] ， j = 1 , 2 , ⋯ , p 。下面确定乘积函数 n j ( x ) d j ( x ) 在 Ω j 上的凸包络 [ 8 ] ： 由(2)式可得： 1) 若 ( n j − ε _ j ) ≥ 0 且 ( d j − η _ j ) ≥ 0 ，则 ( n j − ε _ j ) ( d j − η _ j ) ≥ 0 展开得 n j d j ≥ η _ j n j + ε _ j d j − ε _ j η _ j 2) 若 ( n j − ε ¯ j ) ≤ 0 且 ( d j − η ¯ j ) ≤ 0 ，则 n j d j ≥ η ¯ j n j + ε ¯ j d j − ε ¯ j η ¯ j 3) 若 ( n j − ε _ j ) ≥ 0 且 ( d j − η ¯ j ) ≤ 0 ，则 n j d j ≤ η ¯ j n j + ε _ j d j − ε _ j η ¯ j 4) 若 ( n j − ε ¯ j ) ≤ 0 且 ( d j − η _ j ) ≥ 0 ，则 n j d j ≤ η _ j n j + ε ¯ j d j − ε ¯ j η _ j 为了表达方便，令： η _ j n j + ε _ j d j − ε _ j η _ j ≜ f _   j 1 ( x ) ， η ¯ j n j + ε ¯ j d j − ε ¯ j η ¯ j ≜ f _   j 2 ( x ) η ¯ j n j + ε _ j d j − ε _ j η ¯ j ≜ f ¯ j 1 ( x ) ， η _ j n j + ε ¯ j d j − ε ¯ j η _ j ≜ f ¯ j 2 ( x ) 即 max { f _   j 1 ( x ) , f _   j 2 ( x ) } ≤ n j d j ≤ min { f ¯ j 1 ( x ) , f ¯ j 2 ( x ) } 由此，我们可以得到(GLMP)问题在超矩形 H k ⊆ H 0 上的松弛规划问题(SLMP)： ( S L M P ) { min ∑ j = 1 p 1 max { f _   j 1 ( x ) , f _   j 2 ( x ) } − ∑ j = p 1 + 1 p min { f ¯ j 1 ( x ) , f ¯ j 2 ( x ) } s . t . x ∈ D ∩ H k 又因 ∑ j = 1 p 1 max { f _   j 1 ( x ) , f _   j 2 ( x ) } ≥ max { ∑ j = 1 p 1 f _   j 1 ( x ) , ∑ j = 1 p 1 f _   j 2 ( x ) } ∑ j = p 1 + 1 p min { f ¯ j 1 ( x ) , f ¯ j 2 ( x ) } ≤ min { ∑ j = p 1 + 1 p f ¯ j 1 ( x ) , ∑ j = p 1 + 1 p f ¯ j 2 ( x ) } 所以我们可得到(GLMP)问题在超矩形 H k ⊆ H 0 上的二级松弛规划问题(SSLP): ( S S L P ) { min f _ ( x ) = max { ∑ j = 1 p 1 f _   j 1 ( x ) , ∑ j = 1 p 1 f _   j 2 ( x ) } − min { ∑ j = p 1 + 1 p f ¯ j 1 ( x ) , ∑ j = p 1 + 1 p f ¯ j 2 ( x ) } s . t . x ∈ D ∩ H k (SSLP)问题的最优解为(GLMP)问题的一个可行解，其最优值恰好为(GLMP)问题在超矩形 H k 上全局最优值的一个下界，该可行解记为 x k ，令 Q = Q ∪ { x k } ，其中Q表示(GLMP)问题目前所有可行解构成的集合。 进一步，我们可以得到与(GLMP)问题等价的线性规划问题(LP)： ( L P ) { min f _ ( x , t 1 , t 2 ) = t 1 − t 2 s . t . ∑ j = 1 p 1 f _   j 1 ( x ) − t 1 ≤ 0 , ∑ j = 1 p 1 f _   j 2 ( x ) − t 1 ≤ 0 , ∑ j = p 1 + 1 p f ¯ j 1 ( x ) − t 2 ≥ 0 , ∑ j = p 1 + 1 p f ¯ j 2 ( x ) − t 2 ≥ 0 , x ∈ D = { x ∈ R n | A x ≤ b } ∩ H k = [ v k , h k ] 显然，(LP)问题在 H k 上的最优值是(GLMP)问题全局最优值的一个下界，它也是(GLMP)问题在 H k 上全局最优值的一个下界。"
"本节利用超矩形的剖分与缩减技术，给出确定(GLMP)问题全局最优值的分支定界算法，并进行数值实验。  不失一般性，假设第k次剖分的超矩形为 H k = [ v k , h k ] ⊆ H 0 ： 步骤1： 1) 选择 H k 的最长边，即 h ξ k − v ξ k = max { h i k − v i k : i = 1 , 2 , ⋯ , n } ； 2) 令 x ξ k = v ξ k + h ξ k 2 ， x ¯ = ( v 1 k , v 2 k , ⋯ , v i − 1 k , x ξ k , v i + 1 k , ⋯ , v n k ) 步骤2：将超矩形 H k 沿着 x ¯ 剖分为子超矩形 H 1 k + 1 = [ v k + 1 , 1 , h k + 1 , 1 ] , H 2 k + 1 = [ v k + 1 , 2 , h k + 1 , 2 ] 其中 v k + 1 , 1 = ( v 1 k + 1 , 1 , v 2 k + 1 , 1 , ⋯ , v n k + 1 , 1 ) T ， h k + 1 , 1 = ( h 1 k + 1 , 1 , ⋯ , h i − 1 k + 1 , 1 , x ξ k , h i + 1 k + 1 , 1 , ⋯ , h n k + 1 , 1 ) T ， h k + 1 , 2 = ( h 1 k + 1 , 2 , h 2 k + 1 , 2 , ⋯ , h n k + 1 , 2 ) T ， v k + 1 , 2 = ( v 1 k + 1 , 2 , ⋯ , v i − 1 k + 1 , 2 , x ξ k , v i + 1 k + 1 , 2 , ⋯ , v n k + 1 , 2 ) T 。 令 P = { H 1 k + 1 , H 2 k + 1 } ， T = ( T \ { H k } ) ∪ P 。  为了叙述方便，缩减后的超矩形仍记为 H k 。对(GLMP)问题中的线性不等式约束条件 ∑ j = 1 n a i j x j ≤ b i ( i = 1 , 2 , ⋯ , m )，利用文献 [ 6 ] [ 9 ] 中超矩形缩减技术进行缩减。  给出以下记号(假定算法迭代到第k步)： D：(GLMP)问题的可行域；Q：当前可行解的集合； H k ：选择剖分的超矩形； T：剪支剩余超矩形的集合； τ ：(GLMP)问题全局最优值的上界； η ：(GLMP)问题全局最优值的下界。 下面给出算法过程的具体描述。 步骤1：(初始化) 构造包含 D 的超矩形 H 0 = [ v 0 , h 0 ] ，在超矩形 H 0 上求解问题(LP)，其对应最优解和最优值分别记为 x d 和 η ， η 就是(GLMP)问题全局最优值的一个下界，显然 x d ∈ D ，令 Q = Q ∪ { x d } ，初始上界为 γ = min { f ( x ) : x ∈ Q } ，并找一个当前最优解 x * ∈ arg min γ ，给定精度 σ ， T = { H 0 } ，置k = 1。 步骤2：(终止规则) 若 γ − η ≤ σ 或 T = Φ ，则终止，输出(GLMP)问题的全局最优解 x * 、全局最优值 f ( x * ) ; 否则，转步骤3； 步骤3：(选择规则) 在 T 中选择 H k ， H k 为 η 所对应的超矩形，即 η = η ( H k ) ； 步骤4：(剖分及缩减技术) 运用2.1中超矩形的剖分方法，将 H k 剖分为 H 1 k + 1 与 H 2 k + 1 两部分， int H 1 k + 1 ∩ int H 2 k + 1 = Φ ；再应用2.2 中超矩形的缩减技术，将 H 1 k + 1 和 H 2 k + 1 缩减后的超矩形仍记为 H i k + 1 ，令 T = T ∪ { H i k + 1 } ( i ∈ Γ )，缩减后的超矩形的指标集，记为 Γ ⊆ { 1 , 2 } 。 步骤5：(剪支规则)让 T = T \ { H : η ¯ ¯ ( H ) ≥ γ , H ∈ T } 。 步骤6：(定界)定下界： η = min { f _ ( H ) : H ∈ T } ； 定上界： γ = min { f ( x ) : x ∈ Q } ，当前最好的可行解： x * ∈ arg min { f ( x ) : x ∈ Q } 置 k ← k + 1 ，转步骤2。"
"为了检测新算法的可行性与有效性，做以下的数值实验，算法编程在Pentium(R)4，CPU3.20 GHZ，1.00 GB内存微机上运行，精度取为 σ = 10 − 6 。 例1 [ 7 ] { min ( 2 x 1 − 2 x 2 + x 3 + 2 ) × ( − 2 x 1 + 3 x 2 + x 3 − 4 ) + ( − 2 x 1 + x 2 + x 3 + 2 )                 × ( x 1 + x 2 − 3 x 3 + 5 ) + ( − 2 x 1 − x 2 + 2 x 3 + 7 ) × ( 4 x 1 − x 2 − 2 x 3 − 5 ) s . t . x 1 + x 2 + x 3 ≤ 10   x 1 − 2 x 2 + 3 x 3 ≤ 10 − 2 x 1 + 2 x 2 + 3 x 3 ≤ 10 − x 1 + 2 x 2 − 3 x 3 ≤ 10 − x 1 + 2 x 2 + 3 x 3 ≥ 6 x 1 ≥ 1 , x 2 ≥ 1 , x 3 ≥ 1 运用本文所提出的算法得到：最优解为(5.5556; 1.7778; 2.6667)，最优值为−112.7531，迭代次数为3，计算时间为1.586198。文献 [ 7 ] 的最优解为(5.5556; 1.7778; 2.6667)，最优值为−112.7531，迭代次数为54。 通过以上计算所得结果显示，本文所提出的方法是有效可行的。"
