"格子Boltzmann方法是科学与工程计算的重要模型与数值方法，该方法能够从底层描述和计算细尺度特征，同时计算量也较大。为了提高计算效率，本文主要从指令级别对格子Boltzmann数值计算进行性能优化。数值实验结果表明，优化后计算性能显著提高。 关键词 :格子Boltzmann方法，性能优化，泰勒–格林涡流 Copyright © 2020 by author(s) and Hans Publishers Inc. This work is licensed under the Creative Commons Attribution International License (CC BY 4.0). http://creativecommons.org/licenses/by/4.0/"
"随着数值计算方法成为研究科学与工程问题的重要手段，对计算效率的要求也越来越高。为了确保在尽可能短的时间内完成一项计算任务，在单机中我们主要有两个选择，第一个选择是设计一个更好的算法，可以用更少的步骤达到相同的结果。第二种方法是在指令级别执行优化，该方法是在需要较多时间完成的指令的位置上使用一个或多个更快的指令。 格子Boltzmann方法是模拟微观模型的数值计算方法。格子Boltzmann方法除了被应用于一般的流体力学问题之外，还在湍流 [ 1 ]、多孔介质流 [ 2 ] [ 3 ]、粒子悬浮流 [ 4 ]、磁流体力学 [ 5 ]、多相流 [ 6 ] 等相关领域也取得了比较成功的应用。但格子Boltzmann方法的计算量较大，为提高计算效率，本文将探讨泰勒–格林涡流(Taylor-Green Vortex)格子Boltzmann数值计算的性能优化。"
"格子Boltzmann方法的一个主要优点是基于Boltzmann方程而不是连续方程和动量方程，它的实现比传统方法简单。格子Boltzmann方法的基本量是离散速度分布函数 f i ( x , t ) ，通常称为粒子分布。可以通过此分布函数来求解质量密度和动量密度： ρ ( x , t ) = ∑ i f i ( x , t ) (1) ρ u ( x , t ) = ∑ i c i f i ( x , t ) (2) f i 函数表示所有的参数变量都是离散的，下标i代表一个离散速度集，定义 f i 在空间中为正方形格子各个方向的分布。速度集通常用DdQq表示，d是速度集覆盖的空间维数，q是速度方向的个数。最常用的速度集是D1Q3、D2Q9、D3Q15、D3Q19和D3Q27。本文采用D2Q9模型，i取值范围是0，1，2，3，4，5，6，7，8九个方向。 通过在物理空间、速度空间和时间上离散Boltzmann方程，得到了格子Boltzmann方程： f i ( x + c i Δ t , t + Δ t ) = f i ( x , t ) + Ω i ( x , t ) (3) 同时，粒子受到碰撞算符 Ω i ( x , t ) 的影响，该算符通过在每个位置的分布中重新分配粒子来模拟粒子碰撞。虽然有许多不同的碰撞算符可用，但最常用的一个算符是Bhatnagar-Gross-Krook (BGK)运算符 [ 7 ]： Ω i ( f ) = − f i − f i e q τ ⋅ Δ t (4) 它使分布 f i 以由松弛时间 τ 决定的速率趋于平衡分布 f i e q ，平衡分布为 f i e q ( x , t ) = w i ρ ( 1 + u ⋅ c i c s 2 + ( u ⋅ c i ) 2 2 c s 4 − u ⋅ u 2 c s 2 ) (5) 格子BGK (LBGK)方程(即用BGK碰撞算符完全离散的Boltzmann方程)可以表示为： f i ( x + c i Δ t , t + Δ t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (6) 总的来说，格子Boltzmann方程由碰撞和迁移两部分组成。第一部分是碰撞(或松弛)： f i ∗ ( x , t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (7) 第二部分是迁移(或传播)： f i ( x + c i Δ t , t + Δ t ) = f i ∗ ( x , t ) (8) 碰撞只是一个代数局部运算，首先要计算密度，找到平衡分布后的宏观速度，碰撞后，将得到相邻节点的分布 f i ∗ ，当碰撞和迁移两个操作完成时，经过一个时间步，再重复这些操作。 格子Boltzmann数值计算的实现过程可分为碰撞和迁移两个子过程，通常格子Boltzmann方法的程序结构有两种形式：碰撞–迁移结构和迁移–碰撞结构。本文程序设计采用迁移–碰撞结构，这种程序结构可以看作是求解离散速度方程 ∂ t f i + c i ⋅ ∇ f i = Ω i ( f ) (9) 的时间分裂方法 [ 8 ]，具体步骤如下： (I) 初始化分布函数 f i ( x , 0 ) (II) 执行迁移(stream) f i ( x + c i Δ t , t + Δ t ) = f i ∗ ( x , t ) (10) (III) 计算宏观量(computeRhoU) ρ ( x , t ) = ∑ i f i ( x , t ) ， ρ u ( x , t ) = ∑ i c i f i ( x , t ) (11) (IV) 执行碰撞(collide) f i ∗ ( x , t ) = f i ( x , t ) − Δ t τ ( f i ( x , t ) − f i e q ( x , t ) ) (12) (V) 保存数据(save) (每saveN步保存一次) (VI) 重复(II)~(V)直到满足终止条件。"
"本文计算泰勒–格林涡流问题，速度和压力的初始状态解析地设定，泰勒–格林涡流在 l x × l y 区域内是非定常的全周期流动，其速度场和压力场在二维空间上表示为 u ( x , t ) = u 0 [ − k y / k x cos ( k x x ) sin ( k y y ) k x / k y sin ( k x x ) cos ( k y y ) ] e − t / t d (13) t d = 1 υ ( k x 2 + k y 2 ) (14) p ( x , t ) = p 0 − ρ u 0 2 4 ( k y k x cos ( 2 k x x ) + k x k y cos ( 2 k y y ) ) (15) 其中 u 0 为初始速度大小， k x , y = 2 π / l x , y 为波矢量分量， t d 为涡流衰减时间，平均压力 p 0 可以是任意的，计算区域为 l x × l y = 640 × 640 (格子单位)。计算采用标准平衡分布，平衡分布初始化采用Mei [ 9 ] 的初始化方案。泰勒–格林涡流的速度 u x 和 u y 如图1所示。 图1. 泰勒–格林涡流速度：(a) x方向速度 u x ，(b) y方向速度 u y 上面的计算是根据格子Boltzmann方法典型计算步骤(I)~(VI)进行设计程序的，下面对该程序进行一些优化处理。我们首先注意到一个相对较小的优化：迁移步不需要复制0方向分布f 0 。为了避免这种不必要的内存访问，我们对0方向分布使用单独的变量f 0 ，对其余八个方向的分布f 1-8 保留两个变量f 1 和f 2 。 第二个优化是注意到在迁移期间为每个节点存储的分布的值是在碰撞步期间读取的那些值。因此，四个函数stream、computeRhoU、collide和save可以组合成一个函数stream_computeRhoU_collide_save，该函数访问内存的频率显著降低。 第三个优化是循环展开。当循环的内部块计算很快完成时，递增计数器并检查其是否超过界限的开销构成了循环执行时间的一个显著部分。循环展开可以避免这些开销，这里将九个分布上迭代的所有循环展开，其展开公式如下： ρ = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 (16) u x = [ ( f 1 + f 5 + f 8 ) − ( f 3 + f 6 + f 7 ) ] / ρ (17) u y = [ ( f 2 + f 5 + f 6 ) − ( f 4 + f 7 + f 8 ) ] / ρ (18) f 0 e q = 2 ρ 9 ( 2 − 3 u 2 ) (19) f 1 e q = ρ 18 ( 2 + 6 u x + 9 u x 2 − 3 u 2 ) (20) f 2 e q = ρ 18 ( 2 + 6 u y + 9 u y 2 − 3 u 2 ) (21) f 3 e q = ρ 18 ( 2 − 6 u x + 9 u x 2 − 3 u 2 ) (22) f 4 e q = ρ 18 ( 2 − 6 u y + 9 u y 2 − 3 u 2 ) (23) f 5 e q = ρ 36 [ 1 + 3 ( u x + u y ) + 9 u x u y + 3 u 2 ] (24) f 6 e q = ρ 36 [ 1 − 3 ( u x − u y ) − 9 u x u y + 3 u 2 ] (25) f 7 e q = ρ 36 [ 1 − 3 ( u x + u y ) + 9 u x u y + 3 u 2 ] (26) f 8 e q = ρ 36 [ 1 + 3 ( u x − u y ) − 9 u x u y + 3 u 2 ] (27) 这里 u = ( u x + u y ) Τ ， u 2 = u x 2 + u y 2 。 还有其它的一些优化处理：将频繁调用的节点索引函数定义为内联函数，省去了函数调用的开销，从而提高函数的执行效率。另外，程序中包含一个布尔参数saveN，用于指示是否将该时刻的数据写入内存，通过选择saveN最优的值，定期保存中间密度场和速度场的数据，避免过多的内存写入。 表1是程序在未进行优化和优化后的执行的时间和速率。从表中可以看出，程序经过优化处理后，计算规模为64 × 64、160 × 160、160 × 160和1920 × 1920的计算时间分别减少到未优化的22.98%、22.21%、20.81%和20.74%，计算速率分别是未优化的4.35倍、4.50倍、4.80倍和4.82倍。 Table 1 计算区域 计算步数 是否优化 运行时间(s) 计算速率(Mlups) 64 × 64 100,000 未优化 206.056 1.99 优化后 47.358 8.65 160 × 160 15,000 未优化 219.656 1.75 优化后 48.785 7.87 640 × 640 1000 未优化 256.268 1.60 优化后 53.326 7.68 1920 × 1920 100 未优化 239.491 1.54 优化后 49.675 7.42 表1. 优化前后执行结果对比"
"本文以泰勒–格林涡流作为算例给出了格子Boltzmann数值模拟的算法和计算实现，以及讨论了如何优化代码提高计算效率。计算结果表明，程序通过优化处理后，计算时间明显减少，计算速率明显提高，而且计算规模越大，这种优势越显著。"
