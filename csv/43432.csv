"本文主要研究对称随机矩阵的逆特征值问题。通过将该问题转化为求两个集合交点的可行性问题，提出用交替投影法进行求解。因为其中一个集合不是凸集，关于凸可行性问题的收敛性结果不能用来分析算法的收敛性。对于算法的收敛性，本文在已有关于两个黎曼流形的交替投影算法收敛性的研究结果上，建立了交替投影算法在一定条件下的线性收敛性。最后数值例子也表明了算法的有效性。"
"求一个 n 阶非负矩阵(所有元素都是非负数)，使得它的特征值是给定的 n 个常数 λ i     ( i = 1 , ⋯ , n ) 的问题称为非负逆特征值问题(简称 N I E P )。 N I E P 在很多领域有广泛的应用，例如在博弈论，数值分析，数据分析，群论和经济学等领域中，详见( [ 1 ] - [ 20 ] )及其参考文献。1937年Kolmogorov [ 1 ] 提出逆特征值问题：一个复数 z 何时为某个非负矩阵的特征值的问题？后来，Suleimanova ( [ 2 ] )在1949年提出了更一般的非负逆特征值问题，并证明了当 { λ i } 中只有一个数大于0 (其他数小于等于0)时， N I E P 有解的充分必要条件是这些数的和大于0。此后， N I E P 有解的充分和必要条件一直是学者们研究的热点问题之一。一些学者研究了 N I E P 有解的必要条件，取得了一些重要的研究成果。例如，Loewy和Johnson ( [ 3 ] )、Johnson ( [ 4 ] )建立了 N I E P 有解的四个必要条件。1998年，Laffey和Meehan给出了奇数阶非负矩阵迹为零的必要条件。此外，一些学者对低阶的情形进行研究，1978年Loewy和Londow给出了 n = 3 时， N I E P 有解的四个充分必要条件。此外，1996年Reams解决了 n = 4 时非负矩阵迹为零的问题，1999年Laffey和Meehan解决了 n = 5 时同样的问题(详见 [ 5 ] )。其他研究成果参考( [ 6 ] - [ 20 ] )及其参考文献。 本文主要关注求解 N I E P 的有效算法。据我们所知，目前关于 N I E P 的算法并不多，主要有梯度流下降算法，交替投影算法，非光滑牛顿法以及共轭梯度法。在 [ 21 ] 中，Chu和Guo将 N I E P 转化为以下优化问题： min P , R ∈ R n × n       F ( P , R ) = 1 2 ‖ P Λ P − 1 − R ∘ R ‖ 2 , (1.1) 其中 Λ 是以给定的 n 个常数为主对角元的 n 阶对角矩阵，“ ∘ ”表示Hadamard积(详见 [ 21 ] )。他们提出了求解问题(1.1)的基于微分方程的梯度流下降算法，并通过一些应用说明了算法的有效性。文献 [ 22 ] 中，Orsi将 N I E P 转化为含两个集合的可行性问题： 求 X ∈ E ∩ N (1.2) 其中 E 是以给定的 n 个常数为特征值的 n 阶实对称矩阵集合， N 是 n 阶非负矩阵的集合。在 [ 22 ] 中，Orsi给出了集合 E 上的投影算子的计算式，并提出了求解 N I E P (即问题(1.2))的交替投影算法(交替地在集合 E 和 N 上进行投影)。因为集合 E 不是凸集，所以问题(1.2)不是凸可行问题。关于非凸的可行性问题的交替投影算法的收敛性分析非常困难，收敛性结果也非常少。在 [ 22 ] 中，作者证明了当 E ∩ int     N ≠ ϕ ，且迭代点充分接近 x ∈ E ∩ int     N 时，算法再经过一次迭代得到的 N I E P 解，其中 int     N 是集合 N 的内点集。类似地假设条件也被用在 [ 23 ] 算法的分析中。此外，参考文献 [ 24 ] 和 [ 25 ] 研究了已知部分特征对的 N I E P 问题的算法，即已知矩阵的部分特征值及其特征向量，求一个非负矩阵。这两篇文献分别通过将这类问题转化为欧氏空间和黎曼流形上的优化问题进行求解。 [ 24 ] 提出了求解该问题的非光滑牛顿法，并证明了算法的二阶收敛性； [ 25 ] 中提出求解该问题的黎曼流形上的共轭梯度法，并证明了算法的收敛性。 本文主要研究一类特殊的 N I E P 问题的数值算法——对称随机逆特征值问题(简称 S t I E P )，即求解一个对称随机矩阵(行/列和为1的非负实对称矩阵)，使得它的特征值是给定的 n 个常数。受 [ 22 ] 启发，我们将问题转化为含两个集合的可行性问题： 求 X ∈ E ∩ F (1.3) 其中集合 E 的定义同问题(1.2)，集合 F 是双随机矩阵集合(即行和、列和均为1的非负矩阵)，并提出交替投影算法进行求解。在算法运行中，我们采用 [ 22 ] 中计算式计算集合 E 上投影 P E ( ⋅ ) ，而集合 F 上的投影 P F ( ⋅ ) ，我们采用同时投影的子迭代计算，详见算法3.2。正如我们在上面提到集合 E 不是凸集，所以问题(1.3)也是非凸可行性问题，凸可行问题的交替投影算法的收敛性分析方法不能用来分析算法的收敛性。注意到集合 F 没有内点，不满足 [ 22 ] 中的假设条件： E ∩ int     N ≠ ϕ 。所以这一假设条件不能用来分析求解问题(1.3) (即 S t I E P )的交替投影算法的收敛性。注意到Lewis在( [ 26 ], Theorem 13)中研究了当两个集合在解的附近是光滑黎曼流形时(不一定是凸集)，交替投影算法的收敛性，并建立了算法线性收敛性条件。结合集合 E 和 F 的特性以及对算法产生的迭代点列的分析(注意集合 F 并不是黎曼流形)，用 [ 26 ] 中的结论建立了交替投影算法线性收敛的条件。 本文结构如下。第一节是预备知识，包括一些记号，概念和一些重要引理。论文的主要结果在第二节，我们提出求解 S t I E P 的交替投影算法，给出了一些集合上投影的计算式，并建立了算法线性收敛的条件。第三节的数值实验结果表明交替投影算法是有效的算法。最后是对本文的总结以及展望。"
"这一节介绍本文用到的一些记号，概念和重要引理。设 R n ， R n × n 分别表示实数域上的 n 维向量， n 阶方阵构成的欧氏空间。设 E ⊂ R n × n 是 R n × n 中子集，点 X ∈ R n × n 到集合 E 的距离和投影分别记为 d E ( ⋅ ) 和 P E ( ⋅ ) ，即 d E ( X ) = inf Y ∈ E ‖ X − Y ‖ ， P E ( X ) = A r g min Y ∈ E ‖ X − Y ‖ = { Y ∈ E | d E ( X ) = ‖ X − Y ‖ } , 其中 ‖ ‖   表示 R n × n 中的 F − 范数。 下面介绍黎曼流形上一些概念和结论，关于黎曼流形更多的结果可以参考( [ 27 ] [ 28 ] [ 29 ] [ 30 ] )。设 f : R n × n → R d 为定义在 R n × n 上的光滑函数，其中 d 是正整数。设 X ∈ R n × n ，函数 f 在点 X 处的Jacobi矩阵记为 J f ( X ) 。 定义2.1 设 M ⊂ R n × n 是 R n × n 中子集， X ∈ M 。我们称 M 在点 X 附近是光滑黎曼流形，如果存在光滑函数 f : R n × n → R d 和 X 的邻域 U ，使得 J f 在 U 上是满射且以下式子成立： M ∩ U : = { Y ∈ U : f ( Y ) = 0 } . 设 M 在点 X 附近是光滑黎曼流形， M 在点 X ∈ M 处的切空间记为 T X M 。则有 T X M = ker J   f ( X ) : = { Z ∈ R n × n , 〈 Z , J f ( X ) 〉 = 0 } , 其中 〈     ⋅         ,         ⋅     〉 是 R n × n 中内积，即 〈 A ,       B 〉 = t r a c e ( A T B )       ,                                           ∀ A , B ∈ R n × n . 当 M 和 N 都是 R n × n 中光滑子流形时，Lewis在 [ 26 ] 中证明了以下求这两个集合交点的交替投影算法的线性收敛性，它在我们后面算法收敛性分析中非常重要。需要指出的是，以下引理将( [ 26 ]，Theorem 13)中的假设条件： T M ( X ¯ ) + T N ( X ¯ ) = R n × n . (2.1) 减弱为 T M ∩ N ( X ¯ ) = T M ( X ¯ ) ∩ T N ( X ¯ ) . (2.2) (注意(2.1) ⇒ (2.2), 见 [ 30 ] )，这是仔细检查( [ 26 ]，Theorem 13)的证明得到的(也见 [ 30 ] )。同时，由( [ 26 ]，Theorem 13)的证明也有下面(2.3)成立。 引理2.1 ( [ 26 ]，Theorem 13)设 M , N ∈ R n × n ，点 X ¯ ∈ M ∩ N 。设 M 和 N 在点 X ¯ 附近都是光滑黎曼流形，且满足(2.2)。设 { X k } 是由以下交替投影法产生的点列，即 X k + 1 : = P N P M ( X k ) ,                                                   ∀ k = 0 , 1 , ⋯ . 则存在 δ > δ ' > 0 ，使得当初始点 X 0 ∈ U ( X ¯ , δ ′ ) 时，点列 { X k } 满足 { X k } ⊂ U ( X ¯ , δ ) , (2.3) 且线性收敛到 M ∩ N 中一点 X ∗ ，即存在 α ∈ R ， c ∈ ( 0 , 1 ) ，使得 ‖ X k − X * ‖ ≤ α c k ,             k = 1 , 2 , ⋯   。"
"设 λ : = { λ 1 , λ 2 ， ⋯ , λ n } 是给定的 n 个实数。考虑对称随机逆特征值问题( S t I E P )，即求一个 n 阶对称随机矩阵 X ∈ R n × n ，使得它的特征值是 λ 。不失一般性，设 λ 1 ≥ λ 2 ≥ ⋯ ≥ λ n ，并记对角阵 Λ 为 Λ = d i a g ( λ 1 , λ 2 , ⋯ , λ n ) ，即 d i a g ( λ ) = [ λ 1 0 ⋯ 0 0 λ 2 ⋯ 0 ⋮ ⋮ ⋮ ⋮ 0 0 ⋯ λ n ] . 在 R n × n 中定义以下集合 E ， F 和 F 1 如下： E : = { A ∈ R n × n | A = V Λ V T ,       V ∈ R n × n 是 正 交 矩 阵 }   , F : = { A ∈ R n × n | A T = A , ∑ j = 1 n A i j = 1 , A i j ≥ 0 , i , j = 1 , 2 , ⋯ , n } F 1 : = { A ∈ R n × n | ∑ j = 1 n A i j = 1 , A i j ≥ 0 , i , j = 1 , 2 , ⋯ , n } , 其中 B T 表示矩阵 B ∈ R n × n 的转置， A i j 表示矩阵 A 的第 i 行第 j 列元素。下面我们先讨论集合 E 和 F 1 上投影算子 P E ( ⋅ ) 和 P F 1 ( ⋅ ) 的计算。首先，我们有以下关于 P E ( ⋅ ) 的计算式。 引理3.1 ( [ 22 ],Theorem 3.2) 设实对称矩阵 Y ∈ R n × n 的正交分解为 Y = V d i a g ( μ 1 , ⋯ , μ n ) V Τ ，其中 μ 1 ≥ ⋯ ≥ μ n 。则 P E ( Y ) = V Λ V Τ 。 下面讨论 P F 1 ( ⋅ ) ，为此设向量 a = ( a 1 , ⋯ , a n ) Τ 。考虑以下严格凸优化问题： min x ∈ R n 1 2 ‖ x − a ‖ 2 2 s . t . ∑ i = 1 n x i = 1 , − x i ≤ 0 , i = 1 , ⋯ , n , (3.1) 其中 ‖ ‖ 2 表示 R n 中的 2 − 范数。设 x a * = ( ( x a * ) i ) ∈ R n 为问题(3.1)的唯一全局最优解，同时也是它的唯一KKT点。所以存在 λ * = ( λ i * ) ∈ R n , μ * ∈ R ，满足以下KKT条件： { x a * − a − μ * e − ∑ i = 1 n λ i * e i = 0 ,                                                                                                                                                                                                                                                                                                                                               ( 3.2 ) ∑ i = 1 n ( x a * ) i = 1 ,                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( 3.3 ) ( x a * ) i ≥ 0 , λ i * ≥ 0 , ( x a * ) i λ i * = 0 , i = 1 , ⋯ , n ,                                                                                                                                                                                                               ( 3.4 ) 其中 e = ( 1 , ⋯ , 1 ) ， e i = ( 0 , ⋯ 0 , 1 , 0 , ⋯ , 0 ) ∈ R n ,     ( 第 i 个 分 量 为 1   , 其 他 为 0 )   。为了方便运算，我们设向量的 a 分量满足 a 1 ≤ a 2 ≤ ⋯ ≤ a n 。 引理3.2 设向量 a 的分量满足 a 1 ≤ a 2 ≤ ⋯ ≤ a n ，则问题(3.1)的唯一最优解为： x a * = ( 0, ⋯ , 0 , b l + 1 + 1 n − l ∑ j = 1 l b j , ⋯ , b n + 1 n − l ∑ j = 1 l b j ) , (3.5) 其中对任意 i = 1 , ⋯ , n ， b i = a i + 1 n − 1 n ∑ i = 1 n a i ， c i = b i + 1 n − i + 1 ∑ j = 1 i − 1 b j ， l ∈ { 0 , 1 , ⋯ , n − 1 } 使得 c i ≤ 0 ( ∀ i ≤ l ) 且 c l + 1 > 0 。 证明由 { b i } 和 { c i } 的定义，容易证明 b 1 ≤ ⋯ ≤ b n , (3.6) 且存在 l ∈ { 0 , 1 , ⋯ , n − 1 } ，使得 c i ≤ 0 ( ∀ i ≤ l ) ，且 c l + 1 > 0 ，令 ( x a * ) i = { 0 , i ≤ l , b i + 1 n − l ∑ j = 1 l b j , i ≥ l + 1. (3.7) λ i * = { − b i − 1 n − l ∑ j = 1 l b j , i ≤ l , 0 , i ≥ l + 1. (3.8) 下面验证 x a * , λ * 满足KKT条件(3.2)~(3.4)。首先，我们有 λ i * ⋅ ( x a * ) i = 0 , ∀ i = 1 , ⋯ , n . 另外，由(3.6)，显然有 λ 1 * ≥ λ 2 * ≥ ⋯ ≥ λ l * 。要证 λ i * ≥ 0 ( i = 1 , 2 , ⋯ , n ) ，只需证明 λ l ≥ 0 。根据 l 的定义，有 c i ≤ 0 。于是由(3.8)有： λ l * = − b l − 1 n − l ∑ j = 1 l b j = − b l − 1 n − l + 1 ∑ j = 1 l − 1 b j + 1 n − l + 1 ∑ j = 1 l − 1 b j − 1 n − l ∑ j = 1 l b j = − c l − 1 n − l c l ≥ 0. 下面证明 ( x a * ) i ≥ 0       ( i = 1 , 2 , ⋯ , n ) 。类似地，由(3.6)和(3.7)，显然有 ( x a * ) l + 1 ≤ ( x a * ) l + 2 ≤ ⋯ ≤ ( x a * ) n ，所以只需证明 ( x a * ) l + 1 ≥ 0 。根据 l 的定义，有 c l + 1 > 0 。又 { b i } 单调不减，我们有 ( x a * ) l + 1 = b l + 1 + 1 n − l ∑ j = 1 l b j = c l + 1 > 0. 所以 x a * , λ a * 满足KKT条件(3.4)。又 ∑ i = 1 n ( x a * ) i = ∑ i = 1 l ( x a * ) i + ∑ i = l + 1 n ( x a * ) i = ∑ i = l + 1 n b i = 1. 所以(3.3)成立。令 μ * = { − a i − ∑ i = 1 n ( − b i − 1 n − l ∑ j = 1 l b j ) ,                   i ≤ l , b i + 1 n − l ∑ j = 1 l b j − a i ,     i ≥ l + 1. 则有 ( x a * ) i − a i − ∑ i = 1 n λ i * − μ * = { b i + 1 n − l ∑ j = 1 l b j − a i − ( b i + 1 n − l ∑ j = 1 l b j − a i ) = 0 , i ≥ l + 1 , 0 − a i + a i + ∑ i = 1 n ( − b i − 1 n − l ∑ j = 1 l b j ) − ∑ i = 1 n ( − b i − 1 n − l ∑ j = 1 l b j ) = 0 , i ≤ l + 1 . 即 x a * − a − μ * e − ∑ i = 1 n λ i * e i = 0. 所以 x a * , λ * 满足KKT条件(3.2)。综上， x a * 是问题(3.1)的KKT点，从而是问题(3.1)最优解。 注 3.1 如果向量 a 的分量不满足 a 1 ≤ a 2 ≤ ⋯ ≤ a n ，可以先将 a 的分量按从小到大顺序排列，记为向量 a ¯ 。设 x a ¯ ∗ 是由(3.5)定义的向量， x a ∗ 是 x a ¯ ∗ 按照分量所在位置还原后得到的向量。则 x a ∗ 是问题(3.1)的唯一最优解。 结合引理3.2和注3.1，将矩阵 X ∈ R n × n 按行分块，即 X = ( X 1 Τ X 2 Τ           ⋮ X n Τ ) ，则 X 在集合 F 1 上的投影 P F 1 ( ⋅ ) 有以下表达式，其中 x X i T ∗ 是按注3.1中计算，即先将 X i T 的分量按从小到大排序得到 X i T ¯ ，再令 a : = X i T ¯ 按(3.5)计算后，排回原来的位置得到。 引理 3.3 设 X ∈ R n × n ，且 X 按行分块为 X = ( X 1 Τ X 2 Τ           ⋮ X n Τ ) ，则 X 在集合 F 1 上的投影为 P F 1 ( X ) = ( ( x X 1 T ∗ ) T ( x X 2 T ∗ ) T           ⋮ ( x X n T ∗ ) T ) 。  显然 S t I E P 等价于可行性问题(1.3)，即求 X ∈ E ∩ F 。我们提出以下求解 S t I E P 的交替投影算法。 交替投影算法3.1 交替投影算法1要计算两个集合 E 和 F 上的投影，其中 P E ( ⋅ ) 按引理3.1计算，而 P F ( ⋅ ) 用同时投影算法计算，具体见以下交替投影算法3.2和注3.2。 交替投影算法3.2 注 3.2 交替投影算法3.2给出了投影的计算式。由引理3.1，Step 4计算了 P E ( W k ) ，即 P E ( W k ) : = X k + 1 。而算法的Steps 2-3用同时投影算法计算 P F ( X k ) 。事实上，记 F 2 : = { A ∈ R n × n | ∑ i = 1 n A i j = 1 ,         A i j ≥ 0 ,           i , j = 1 , 2 , ⋯ , n } . 则 P F ( X ) = P F 1 ∩ F 2 ( X ) ，且容易验证 P F 2 ( X ) = ( P F 1 ( X ) ) T 。所以交替投影算法3.2的Steps 3-4实际上是子迭代： Y k , l + 1 : = P F 1 ( Y k , l ) + P F 2 ( Y k , l ) 2                                                         ∀ l ∈ 0 , 1 , ⋯ , (3.9) 直到满足精度要求 ‖ Y k , l − Y k , l + 1 ‖ < ε 2 。因为集合 F 1 和 F 2 都是多面体，求解凸可行问题：求 X ∈ F 1 ∩ F 2 的同时投影算法(3.9)是线性收敛的(见 [ 30 ]，Corollary 3.14)，所以交替投影算法2的Steps 2-3迭代的次数不多。 下面我们分析交替投影算法3.1的收敛性。因为集合 E 不是凸集，所以凸可行性问题的研究方法不能用来分析交替投影算法3.1的收敛性。我们将用 [ 22 ] 中的求两个黎曼子流形交点的交替投影算法的收敛性研究结果进行研究。因为集合 F 不是 R n × n 的子流形。为此，我们定义集合 F ∘ 如下： F ∘ : = { A ∈ R n × n | A = A T     ,       ∑ j = 1 n A i j = 1 ,         A i j > 0 ,                                       i , j = 1 , 2 , ⋯ , n } . 由集合 F ∘ 的定义，对任意 X ∈ F ∘ ，存在点 X 的邻域 U ( X ) 使得 F ∘ ∩ U ( X ) : = { A ∈ U ( X ) | A i j = A j i     ,       ∑ j = 1 n A i j = 1 ,           i , j = 1 , 2 , ⋯ , n } . 由定义2.1容易验证以下结论。 引理 3.4 F ∘ 在任意点 X ∈ F ∘ 附近是光滑黎曼流形。 关于集合 E ，由定义知对任意 X ∈ E ， λ : = { λ 1 , λ 2 ， ⋯ , λ n } 是它的 n 个特征值，即 λ 1 , λ 2 ， ⋯ , λ n 是关于 λ 的 n 次方程 | λ I − X | = 0 的 n 个根，其中 I 是 n 阶单位阵。由根与系数的关系以及集合 E 的定义有 E : = { A ∈ R n × n | A i j = A j i     ,       f ( A ) = 0 , i , j = 1 , 2 , ⋯ , n } , 其中 f : R n × n → R n 是定义在 R n × n 上的多项式函数。设 X ¯ ∈ E ∩ F ∘ ，下面的讨论需要用到以下假设： E 在点 X ¯ 附近是光滑黎曼流形，且满足 T E ∩ F ∘ ( X ¯ ) = T E ( X ¯ ) ∩ T F ∘ ( X ¯ ) .(3.10) 下面仅对当 n = 2 时，说明 E 在任意点 X ¯ ∈ E ∩ F ∘ 附近是光滑黎曼流形，而当 n > 2 时，类似地可以知道很多情形下相同的结论也成立。事实上容易验证， n = 2 时 S t I E P 有解(即 E ∩ F ≠ ∅ )的充分必要条件是 λ = { 1 , t } ，其中 t ∈ [ − 1 , 1 ] ，且解为 X * : = [ 1 2 + t 2 1 2 − t 2 1 2 − t 2 1 2 + t 2 ] 。而当 t ∈ ( − 1 , 1 ) 时， E ∩ F o ≠ ∅ 。设 t ∈ ( − 1 , 1 ) ， X ¯ = [ 1 2 + t 2 1 2 − t 2 1 2 − t 2 1 2 + t 2 ] ∈ E ∩ F ∘ ，并记 E : = { A ∈ R n × n | A 12 = A 21 ,   A 11 + A 22 = 1 + t ,     A 11 A 22 − A 12 A 21 = t } = { A ∈ R n × n | g ( A ) = 0 } . 直接计算知 J g ( X ¯ ) 满秩，所以由定义2.1， E 在点 X ¯ 附近是光滑黎曼流形。 考虑以下可行性问题： 求 X ∈ E ∩ F ∘ . (3.11) 由引理2.1和引理3.4，有以下结论(其中 M : = F 0 , N : = E )。 引理 3.5 设 x ¯ ∈ E ∩ F ∘ 满足假设(3.10)。设 { X k } 是由以下交替投影法产生的点列，即 X k + 1 : = P E P F 0 ( X k )                                                   ∀ k = 0 , 1 , ⋯ . (3.12) 则存在 δ > δ ′ > 0 ，使得当初始点 X 0 ∈ U ( X ¯ , δ ′ ) 时，点列 { X k } 满足 { X k } ⊂ U ( X ¯ , δ ) ，且线性收敛到 E ∩ F ∘ 中一点 X ∗ 。 关于交替投影算法3.1，我们有以下线性收敛的结论。 定理 3.1设 X ¯ ∈ E ∩ F ∘ 满足假设(3.10)。则当初始点 X 0 充分接近 X ¯ 时，交替投影算法3.1产生的点列 { X k } 线性收敛到 E ∩ F 中一点。 证明 设 { X ˜ k } 是以 X 0 为初始点(即 X ˜ 0 = X 0 )，用交替投影算法(3.12)产生的点列。由引理3.5，存在 δ > δ ′ > 0 ，使得当初始点 X 0 ∈ U ( X ¯ , δ ′ ) 时，点列 { X ˜ k } 满足 { X ˜ k } ⊂ U ( X ¯ , δ ) ，且线性收敛到 E ∩ F ∘ ( ⊂ E ∩ F ) 中一点。所以，要证明定理的结论，只需证明当初始点 X 0 充分接近 X ¯ 时，算法3.1和算法(3.12)产生相同的点列，即 { X k } 和 { X ˜ k } 相同。设 X ¯ 到集合 F 的边界 ∂ F : = F \ F ∘ 的距离为 d 0 ，则由 F ∘ 的定义知 d 0 > 0 。不妨设 δ < d 0 2 (否则取更小的 δ 即可)。因为 X ¯ ∈ E ∩ F ∘ ⊂ E ∩ F ，所以对任意 X ∈ U ( X ¯ , δ ) ，我们有 P F ( X ) = P F ∘ ( X ) 。注意到 X ˜ 0 = X 0 和 { X ˜ k } ⊂ U ( X ¯ , δ ) ，容易得到算法3.1和算法(3.12)产生相同的点列。证毕。"
"本节我们用交替投影算法3.2求解StIEP问题。在数值实验中，初始值 X 0 ∈ R n × n 为随机产生的 n 阶矩阵，iter和time(s)分别表示算法的迭代次数和CPU运行时间(单位为秒)。在每次实验时，我们先随机生成 n 阶对称随机矩阵 A ，并求出矩阵 A 的 n 个特征值作为 λ 。然后用交替投影算法3.2进行求解。算法采用 Matlab     R2018b 实现，实验结果如下。 例给定 5 × 5 阶矩阵的特征值为 λ = { 1 .0000 , 0 .0021,0 .0051,0 .0954,0 .1004 } . 用算法3.2求一个 5 × 5 阶对称双随机矩阵 X ，使其特征值为 λ 。算法中的 ε 1 和 ε 2 分别取作 10 − 14 和 10 − 5 ，实验结果为： X = [ 0.9435                 0.0066                   0.0058                     0.0236                     0.0205 0.0066                 0.9501                   0.0165                     0.0123                     0.0145 0.0058                 0.0165                   0.9524                     0.0035                     0.0218 0.0236                 0.0123                   0.0035                       0.9510                   0.0096 0.0205                   0.0145                   0.0218                       0.0096                   0.9336 ] . 更高阶的数值实验结果见表1，其中 n 是矩阵的阶数，iter和time(s)是实验10次的平均迭代次数和时间。 Table 1n ε 1 , ε 2 time(s) iter 10 ε 1 = 10 − 8 , ε 2 = 10 − 5 0.0214 11 ε 1 = 10 − 9 , ε 2 = 10 − 5 0.0215 12 100 ε 1 = 10 − 10 , ε 2 = 10 − 5 0.1240 18 ε 1 = 10 − 11 , ε 2 = 10 − 5 0.1320 21 300 ε 1 = 10 − 12 , ε 2 = 10 − 5 1.0340 25 ε 1 = 10 − 13 , ε 2 = 10 − 5 1.1630 28 500 ε 1 = 10 − 14 , ε 2 = 10 − 5 4.1470 31 表1. 不同阶数的实验结果"
"对称随机逆特征值问题( S t I E P )是非负逆特征值问题( N I E P )的一种特殊情形，通过将问题转化为可行性问题，本文提出的交替投影算法。因为该问题不是凸可行性问题，其收敛性分析非常困难。我们运用黎曼流形上可行性问题的线性收敛分析结果，在一定条件下建立算法的线性收敛性。未来我们将继续研究交替投影法求解其他 N I E P 问题，同时进一步研究非凸可行性问题的交替投影算法的收敛性条件。"
