"为了克服协同过滤算法的稀疏性问题和传统相似度计算方法过度依赖共同评分的问题，本文引入巴氏系数改进修正余弦相似度，进而提出基于巴氏系数的协同过滤算法（CFBC）。改进的算法考虑了项目全局评分信息和局部评分信息，克服了对于共同评分项的依赖。为了证明CFBC算法的有效性，我们基于已有的相似度计算方法实现了协同过滤算法，实验结果表明CFBC算法提高了推荐的准确性。 关键词 :协同过滤算法，修正余弦相似度，巴氏系数，稀疏性问题 Copyright © 2017 by authors and Hans Publishers Inc. This work is licensed under the Creative Commons Attribution International License (CC BY). http://creativecommons.org/licenses/by/4.0/"
"推荐系统 [ 1 ] 成功帮助人们解决了“信息过载” [ 1 ] 问题，并成功运用于商业领域。推荐系统的核心是推荐算法，协同过滤算法是其中最为广泛使用的协同过滤算法，其优点是它与领域知识无关并且准确性也比其他算法高 [ 2 ] 。可分为：基于用户的的协同过滤推荐算法 [ 3 ] 和基于项目的协同过滤推荐算法 [ 4 ] 。协同过滤推荐算法的基本思想是：与目标用户相似的用户喜欢的项目目标用户也可能喜欢 [ 5 ] ，其核心是相似度计算。传统的相似度计算方法大都依赖共同评分项来计算目标用户的近邻，而稀疏性 [ 6 ] 使得这些方法失效甚至适得其反。经过多年的发展，出现了各种不同的相似度计算方法：皮尔森相关系数(PC)是衡量两个用户(项目)的线性相关性。皮尔森相关系数(PC) [ 7 ] 在共同评分项较少的情形下无法判定两个用户的相似性，而且没有充分利用全局评分信息；Ahn [ 8 ] 提出了PIP (Proximity-Impact-Popularity)只考虑评分的片面信息：接近、影响度和普及度，而没有考虑全局评分信息的利用；Jaccard相似度 [ 9 ] 计算方法考虑到使用全局评分信息，但是没有考虑评分的数值的大小，而是简单的处理为0和1；Bobadilla等 [ 10 ] 提出了多个相似度计算方法来克服其之前的相似度计算方法的缺点。1) 结合了均方差(Mean squared-difference, MSD)和Jaccard提出JMSD [ 11 ] 计算方法，让两者克服彼此的缺点；2) 他们提出Mean-Jaccard-Difference (MJD) [ 12 ] ，在一定程度上克服了稀疏性问题。但上述的所有相似度计算方法在共同评分项较少的时候性能变得很差。 由前面的讨论可以看出传统的相似性计算方法并不适用于稀疏用户–项目评分的场景，因为它们都依赖共同评分项。在此，我们提出一个基于巴氏系数的协同过滤算法(Collaborative Filtering Based on Bhattacharyya Coefficient, CFBC)，该算法通过巴氏系数来度量项目间的相似度，巴氏系数通过计算项目的全局评分信息从而克服对共同评分项的依赖问题。CFBC算法有效缓解传统相似度在用户–项目评分数据非常稀疏场景下推荐质量低的问题。"
"推荐系统中，用户–项目评分矩阵 [ 13 ] 是一个包含了 个用户 和 个项目 二维矩阵，表示如下： 其中： 表示用户 对项目 的评分，体现用户 对项目 的喜好程度。  1) 皮尔森相关系数(Pearson’s Correlation, PC) 皮尔森相关系数经常使用在基于用户的协同过滤算法中。PC能够度量两个用户或项目的线性相关性。皮尔森相关系数取值范围[−1,+1]，值+1表示两个用户相关性最高，而−1表示两个用户相关性最低。同样，它也可以度量两个项目间的相似度。用户 和用户 相似度由下式确定： (1) 其中： 表示用户 在项目 上的评分， 表示用户 在所有项目上的平均评分； 表示用户 和用户 共同评分项集。 2) PIP相似度(Proximity-Impact-Popularity, PIP) PIP相似度综合了接近度、影响度和流行度三个因子来确定最终相似度。计算公式如下： (2) 其中： 表示用户 对项目 的评分。 表示用户 和用户 的共同评分项集合。 表示两个评分 和 的 值。对于两个评分 和 来说，它们的 值由下式表示， 仅考虑两个评分 和 的算数差异，依据它们是否一致来确定一个惩罚值，一致性的判定标准是评分区间的中位数，比如评分区间为[1, 5]，那么就依据两个评分在3的同一侧还是另一侧来决定惩罚值。如果评分都在同一侧则它俩是一致的，如果在两侧则是不一致的。公式如下： 表示用户对项目的喜好程度。如果两个用户非常喜欢一个项目，那么这个喜好程度能够增加他们之间的相似度。当两个评分的 值相同时， 能够体现出它们相似的程度。公式如下： 考察的是流行项目和非流行项目评分对相似度的影响，如果两个用户对非流行项目都表现出兴趣来，那么他们相似度肯定较高。公式如下： 所有等式中 表示项目评分最大值， 表示项目评分最小值， 表示所有评分的中位数， 表示对项目 评分的平均值。 3) MJD相似度 MJD按某种比例来组合相关的共同评分项目、不相关共同评分项目的均方差值，用评分数值信息来代替评分的分布。计算公式如下： (3) 其中： 表示用户 和用户 评分为 的项目差集。 表示用户 和用户 的均方根差，由公式 确定。 表示权重。 表示用户 对项目 的评分。 表示用户 和用户 的共同评分项集合， 表示用户 评分项集合。 4) JMSD相似度 JMSD相似度既考虑了共同评分的占比又考虑了评分绝对值，计算公式如下： (4) 其中： 表示用户 对项目 的评分。 表示用户 和用户 的共同评分项集合。 表示用户 评分项集合。  余弦相似度未考虑到用户评分量纲问题 [ 3 ] ，为了消除这个问题，修正的余弦相似性在基本余弦相似性的基础上减去了用户对所有项目的平均评分。计算公式如下： (5) 其中： 表示用户 在项目 上的评分， 表示用户 在所有项目上的平均评分； 表示用户 和用户 共同评分项集。  巴氏系数 [ 5 ] 大量应用于信号处理、图像处理以及模式识别领域。基于离散区间的巴氏距离公式定义如下： (6) 和 表示评分数据矩阵中项目 和项目 的离散密度估计。那么，项目 和项目 的巴氏相似度可以表示成： (7) 其中， 是项目的评分最大值； ， 是评价过项目 的用户总数， 是给项目 评分数为 的用户总数， 。 下面我们举个例子， 和 表示项目 和项目 的用户评分向量，且评分范围为 ，根据公式(3) 而从评分向量中我们可以看出没有一个用户同时评价过项目 和项目 ，现有的相似度计算公式是无法在这种情形下进行项目相似度计算的。"
"协同过滤算法中的关键步骤是根据相似度来确定目标用户的近邻。而传统的相似度计算公式，在共同平分项很少甚至没有共同评分项时很难取得令人满意的结果。在此，本文通过结合巴氏系数提出的相似度计算方法不仅考虑了项目的局部评分信息，还考虑了项目的全局评分信息，这样在共同评分项较少甚至没有共同评分项时，仍能有效计算出两个用户的相似度，进而提高协同过滤算法准确性。  传统的相似度计算方法依赖共同评分项目，在共同评分项目很少甚至没有的时候往往产生很差的效果。本文通过结合巴氏系数，在计算一对用户相似度时既考虑他们的局部评分信息，又考虑了非共同评分项目，两者结合起来确定最终的相似度。 和 分别表示用户 和 评价过的项目集。实际应用中，用户 和用户 可能没有共同评分项目，即 。因此，用户 和 的相似度既体现 和 的共同评分项目也要考虑他们对于其他项目的评分。本文中，我们将用户 和 的相似度定义为： (8) 其中， 表示项目 和项目 的全局相似度，通过2.2节介绍可知即便没有用户既对项目 又对项目 进行评分，仍能从其他用户对这两个项目的评分中计算得到项目全局相似度，有效利用了一对项目的全局评分信息，而 表示在项目 和项目 的上评分的局部相似度，只考察当前用户对项目的评分。如果两个项目在全局的角度上比较相似，那么 会提高它们的局部相似度所占的比重。如果他们在全局角度上不相似，那么 会减少它们局部相似度的比重。 由公式(5)的变形得到： (9)  根据本文提出的相似度计算方法得到目标用户的近邻，下一步是得到Top-N推荐列表。通过相关文献了解到，推荐列表的排序大多是基于评分产生的，在此，本文通过下式来预测评分： (10) 其中： 表示用户 的相似近邻； 表示用户 对项目的平均评分； 表示用户 和用户 之间的相似度，由公式(4)确定； 表示用户近邻中的 对项目的平均评分； 表示近邻中第 个用户对项目 的评分。  通过前面的讨论，我们了解到，尽管许多文献提出了各种不同的相似度计算方法，但这些相似度计算方法都在一定程度上依赖共同评分项。本文通过结合巴氏系数和修正余弦相似度提出了基于巴氏系数的相似度计算方法，在为某个目标用户推荐项目时，我们采用公式(8)来搜索目标用户的k-近邻，然后在根据公式(9)计算邻居的对目标用户没有评价过的项目预测评分，并按评分由高到低排序，将前N个项目推荐给目标用户。算法流程见表1。"
"为了验证CFBC算法的有效性，我们用基于4种不同相似度计算方法实现的协同过滤推荐算法对比本文算法，算法以及采用的相似度公式见表2。  本文的实验环境见表3。  研究推荐技术的各个组织及人员在推荐系统中一般使用的评价指标是预测准确度。预测准确度一般用来评价目标项目评分的预测精度。有两个比较流行的评价指标：平均绝对误差( )和均方根误差( )。 Table 1 基于巴氏系数的协同过滤算法 输入：用户-项目评分矩阵R，目标用户U，目标项目I 输出：目标用户 对 的评分 步骤： (1) 在整个用户-项目评分矩阵R中计算对项目I评分过的用户数 、评分为v的用户数 (2) 结合公式(5)和公式(8)计算目标用户与其他用户的相似度值； (3) 相似度值由小到大排序，选出 个目标用户的近邻 ； (4) 根据公式(10)预测评分 表1. 基于巴氏系数的协同过滤算法 Table 2 算法名 相似度公式 CFPIP PIP CFJMSD JMSD CFPC PC CFMJD MJD 表2. 相似度及其对应算法 Table 3 CPU Intel(R) Xeon(R) CPU E5-1607 v2 内存 8G 硬盘 1T 操作系统 CentOs操作系统 开发语言 Python 表3. 实验环境 1) 平均绝对偏差 推荐系统中最简单但也是最常用的一种性能评价标准，它通过比较系统中所有用户的预测评分值与实际评分值之间的偏差来衡量预测的准确程度。 值越低，评分偏差越小，准确度越高。 (11) 其中， 为用户 对项目 预测评分， 为用户 对项目 实际评分， 表示测试集的所有项目。 2) 均方根误差 均方根误差对一组测量中的特大或特小误差非常敏感，所以，均方根误差能够很好地反映出测量的精密度，反映了测量数据偏离真实值的程度， 越小，表示测量精度越高。 (12) 其中， 为用户 对项目 预测评分， 为用户 对项目 实际评分， 表示测试集的所有项目。  在实验中我们使用的MovieLens数据集，为了方便大家理解，我们首先简单介绍下这个数据集。该数据集包含了6040个用户、3706部电影、评分数据条数40,955，评分最小值为1，最大值为5。在这6040个用户中只有275个用户有1个共同评分项，只有6个用户有2个共同评分项，由此可见，我们选取的数据集非常稀疏。  图1和图2显示了在实验数据集上不同的协同过滤算法时的MAE和RMSE值在不同的k-近邻时的变化，这两个值反映了算法评分预测值与实际评分的接近程度。从图中1和图2可以看出，CFPIP、CFJMSD、CFPC和CFMJD算法的MAE值和RMSE值都要远大于CFBC算法的。由图1可以看出在共同评分很少时，本文的CFBC算法的MAE值小于0.75，而其他算法的值在0.82以上。由图2可以看出CFBC算法的RMSE值随着k-近邻数在0.97到1之间变化，而其他算法的值在1.07以上。综合各个算法的MAE值和RMSE值可以看出本文的算法在共同评分项较少(实验数据中只有275个用户有1个共同评分项，只有6个用户有2个共同评分项)的情形下仍能较为准确预测评分值，本文算法在克服了对共同评分项的依赖。 图1. k近邻的MAE值对比 图2. k近邻RMSE值对比"
"本文提出了基于巴氏系数的协同过滤算法，通过利用项目的全部评分信息摆脱了相似度计算对共同评分项的依赖。对比实验结果表明CFBC算法在几乎没有共同评分项时，仍能做出较为准确的评分预测，进而有效提高了推荐准确度。由于推荐系统数据量庞大，今后考虑结合聚类算法提高CFBC算法的扩展性。"
