"针对航空机务维修工作由于人员主观性大、不按规程操作以及可追溯性差等诸多问题，基于React Native框架对航空机务维修终端的功能需求、总体框架、UI、详细功能等工作开展初步分析和设计。结合维修工作流程和软件设计方法，以任务管理、专业管理、业务工作为典型模块进行功能实现，应用Spring Boot框架完成航空机务维修智能终端移动端与后台的互联以及整个系统的数据传输。通过研究，探索了航空机务维修智能终端的实现可行性，应用React Native框架实现了移动端和后台两个平台的开发，初步证明了所提终端系统的功能符合性，为后续开发其他军事智能终端提供参考。 关键词 :机务维修，移动智能终端，React Native框架，Android Copyright © 2020 by author(s) and Hans Publishers Inc. This work is licensed under the Creative Commons Attribution International License (CC BY 4.0). http://creativecommons.org/licenses/by/4.0/"
"航空机务维修中由于个别保障人员依托自身经验，不按流程操作，存在误操作、漏操作、违规操作等现象 [ 1 ]。这类维修差错轻则耽误飞行训练，重则造成系列飞机事故以及飞机事故症候，严重制约和限制了装备完好水平的保持和战斗力的提升。当前，世界各国军队都在大力推进信息化转型，装备保障模式也正在由传统的保障模式向信息化、网络化、智能化保障模式转变 [ 2 ]。作为现代空军战斗力的重要保障，航空机务维修是航空装备保障的主要内容。将移动智能终端技术应用在航空装备维修作业领域，开发并应用交互式电子技术手册、便携式维修辅助设备等维修辅助工具，能够满足信息化战争的时效性、准确性和高质量，提高装备保障能力 [ 3 ]。 各行各业都在应用智能终端解决规范性、流程性和可追溯性问题 [ 4 ]，华中科技大学的曾侃基于手持终端建立的固定资产管理系统结合工作流技术，应用手持终端开发出客户端/服务器加网页/服务器的条码识别系统，完成资产清点工作 [ 5 ]。南京理工大学的张立研以平板电脑为终端平台，研究炮兵射击指挥平台的设计开发 [ 6 ]。电子科技大学的包江奇将维修工作与终端技术相结合，针对民用航空维修领域中大量使用数字化信息的特点，采用无线网络技术，探究了一款PMA终端系统的设计开发方法 [ 7 ]。 上述这些文献对维修保障信息化进行了理论研究，建立了完整的技术模型，也给出了相应解决方案，但未深入基层实际操作，与当前航空兵机务部队实际问题有所差距。因此，本课题结合当前理论研究以及成果，在此基础上将基于Android的终端技术应用于外场机务质量检查工作，具有实际意义。 本文将紧紧围绕航空机务维修保障业务，分析基层机务维修作业的实际需求。初步构建出基于Android的机务维修终端的流程体系，应用互联网技术，实现文字、图片通信、拍照摄像等功能，完成机务维修流程电子指令发放、机务维修故障实时反馈、维修进度实时监控、辅助指挥决策等操作。提高工作效率，减少人为出错率，以创新为驱动来提高空军部队的战斗力。"
"智能终端是集硬件、软件、通信协议于一体，能够通过(WI-FI)等无线网络实现前后端服务器、数据相连及设备之间互联 [ 8 ]。基于开放式操作系统，用户可根据自身特定需求开发出应用程序和软件，实现工作、学习等相应功能的移动设备 [ 9 ]。智能终端从个人计算机发展而来，满足了人们对于小型化、便携化、智能化的需求，通常包括：智能手机、笔记本电脑、平板电脑、PDA智能终端、可穿戴设备 [ 10 ]。随着终端的迅猛发展和不断更新换代，智能手机成为一个功能强大、可靠性高的手持设备，占据着终端市场的半壁江山。特别是，当前可用于航空维修领域的智能终端拥有流畅的系统，可靠的防水、防摔、防抖能力，大容量电池的长效续航能力，适应场站内机务维修作业环境。  React Native框架(简称RN)不是一个新型模式，而是将React框架应用在移动应用领域的派生物，由Facebook公司最先提出并开源化应用，它具有跨平台的优势，能够在IOS和Android两大平台应用 [ 10 ]。React Native APP由JavaScript语言编写，依托Bridge实现与Native的调用 [ 10 ]。随着React Native的发展越来越多互联网大公司都采用此模式，如：百度、淘宝、腾讯、Face Book，Instgram等。其具有如下优点： (1) 可跨终端系统，代码复用率高，统一运用一套JavaScript代码，封装程度高 [ 11 ]； (2) 性能接近于原生应用； (3) 单一技术栈，只需学习JavaScript一门语言，开发社区活跃，帮助指导多 [ 12 ]。 结合现行开发趋势和实际需求，考虑到航空机务维修终端需要在一定程度上的交互及性能需求上，兼并可靠稳定特性，并且降低开发难度，所以应用React Native框架。  基层机务维修作业环境概略地分为内场和外场，内场主要负责飞机定检及修理等主要工作，在修理厂内工作，工作环境较为干净、有序。室内工作环境能够较好地排除天气因素影响，智能终端设备能够顺利完成工作。外场主要负责保障飞行，完成简单更换件、调试工作，主要在机场跑道附近工作，要求具备全天候作业能力。根据目前智能终端使用情况来看，其能够适应气候环境的影响，正常工作 [ 13 ]。"
"当前多数航空机务维修人员在维修过程中仍然缺乏信息化手段，多依托纸质介质或电子卡片，通过维修作业卡片、履历本、登记簿等文档，实现任务发放、情况登记、责任人签字、问题反馈等功能。容易出现填写不规范、填写错误、填写问题纠正、反馈不及时等现象，从而导致维修差错发生。 因此，航空机务维修终端系统主要分为面向作业人员的移动端APP和面向管理者的后台端维修管理系统 [ 14 ]。基层机务工作人员作为用户通过移动端主要完成验证登录、专业选择、任务选择、业务操作、故障反馈等工作。室内值班员负责运营后台维修管理系统收集数据监督整个机务工作的完成情况、各架飞机的健康状态、以及飞机故障处理情况等工作。结构如图1所示。 图1. 航空机务维修终端系统业务结构图 各主要功能模块需求如下： (1) 任务管理模块要具备稳定、可靠的性能，并且满足在未来能够增添内容的要求； (2) 专业选择模块具有正确链接作业内容的能力，确保工作内容不混淆，达到可靠、准确的目标，并且可扩展、可合并； (3) 根据规定的顺序正确显示维修作业任务，合理的人机交互界面，方便基层维修人员的使用。顺利地完成信息录入，可靠地调用拍照、录像、录音等功能，可更新、升级。  航空机务维修终端分为两级结构，分为智能终端和后台。后台置于总值班室内，既包括智能终端的服务器，又配套相应Web软件。后台接收前端传来的信息，负责监控整机机务维修工作进度，对反馈问题进行处理后，将解决结果返回至手持端。智能终端则交由各专业分队，由作业人员手持终端，进行信息采集，辅助完成作业。  航空机务维修终端配套软件UI设计总体秉持便于操作、重点突出、使用简单等理念。总体结构由一个MainActivity包含若干Activity组件和ReactRootView类构成 [ 15 ]。软件的主页面是经典的登录验证界面，由Android提供的两个TextView和一个Button组件构成，从上至下是账号、密码、登录。其他页面均由RN层构成，包括任务选择界面、专业选择界面、检查界面、故障反馈界面，都存储ReactRootView类中。  (1) 终端配套软件 结合终端需求分析，本文中航空机务维修智能终端软件典型功能结构的设计如图2所示，总共分为业务工作、任务管理、专业管理、健康状态管理四大模块。 任务管理模块主要功能是结合实际工作情况，在进行维修业务操作之前，进行任务选择。任务管理模块分为飞行日任务、机械日任务、安全警示日任务三部分，每一部分链接着当日不同的作业任务。通过任务管理模块，对工作业务进行选择，减少了任务内容纸质化记录，防止失泄密，更加保密安全。由后台控制当日作业内容，实现作业任务电子化记录。未来可基于作战装备保障模式的更新进行内容重新规划，加载新的任务记录。 图2. 终端配套软件功能结构图 专业管理模块主要根据目前飞机保障模式划分，根据不同类型的专业构成。机务维修人员通过对专业的选择，进入对应专业的作业模块，是完成下一步工作的承接模块。各个专业在同一任务下，对应不同的工作内容，且根据作业计划，在相应时间内完成。 业务工作模块是机务维修人员进行作业的主要功能模块，包含着机务作业的主要内容。业务工作模块由业务流程功能、信息采集功能、异常及故障上报功能三部分组成。在信息采集方面，机务维修人员手持终端设备，根据工作流程，按照顺序逐步进行操作，避免出现未按步骤操作现象。与此同时，维修作业的流程化、电子化固定，减少了人为因素的干扰。给机务维修人员做到了提醒、辅助的功效，简化了持卡、读卡操作等步骤，提高了机组作业效率。机务维修人员在使用时，根据终端界面内容显示，利用终端触屏、拍照、摄像、录音功能，实现实时信息采集。相对于传统的填写纸质文档，内容更加丰富、多样、纪实、完整，采集速度更快，实时记录的方式，给予工作更清楚的追溯情况，有效地防范了以往的事中不填、事后补填、乱填、无法追责的现象。并且采集到的信息都存储在后台数据库，减少了纸质文档存储，电子化存储容量更大，存储效果更好，占地面积更小，成本更低。在异常及故障上报方面，当机务维修人员在作业过程中，遇到特殊情况，无法在现场及时做出明确的决定时，机务维修终端提供利用照片、文本形式将现场问题反馈至后台。后台可结合专家系统或有经验处理类似问题的人给出初步判读，为操作人员提供辅助，指导机务维修人员继续作业，完成其余各项工作，将工作计划尽量按时完成。实时的功能上传、反馈，相比于传统登记问题反馈过程，更加简便，反馈内容更加丰富，缩短了问题处理时间，增强了机务保障能力。 (2) 后台软件 后台软件由数据库管理、系统通信、任务完成情况监督、问题反馈接收、问题处理结果下达、作业任务下达六个功能模块构成，其结构如图3所示。 数据库管理功能基于后台服务器，整个终端数据存储在后台服务器上，前端访问服务器，调用数据，更改后传回后台存储 [ 16 ]。系统通信功能是后台服务器与智能终端之间进行数据传输的基础，实现后台服务器与智能终端相连 [ 17 ]。作业任务下达功能是根据前端的选择，针对不同的专业不同的飞机，下达给用户今日的作业任务，实现任务下达的信息化过程。任务完成情况监督功能主要由智能终端传来实时完成进度，后台软件基于数据进行可视化操作，形成任务完成进度条，提供后台实时监督任务完成情况。问题反馈接受功能和问题处理结果下达功能是对前端反馈的作业问题进行接受，再由后台值班人员寻找其他力量去帮助处理，并将结果下达至终端。 图3. 后台软件功能图"
"根据功能流程实现界面跳转流程如图4所示，在手持终端打开应用软件后进入应用登录界面，输入账号和密码后进入任务选择页面。选择完成后进入专业选择界面。然后进入任务界面，逐步操作，遇到异常或故障，进入故障上报界面或异常上报界面。随后利用终端拍照功能，进入拍照界面，反馈完成后继续操作，直至任务完成。 图4. 页面流程图  点击军事航空装备智能保障终端图标后，进入登录界面，键入机检人员的工作账号和其密码便可登录至终端的移动端，其后进行当日任务的选择与专业的选择，如图5。 图5. 初始界面图 后台Web应用程序部署在浏览器上，开机后，显示用户名、用户密码、登录指令框，登录以后，系统经过初始化(自主入网、部件互连、同步通讯录及共享数据列表、统一时钟、自动定位)后进入主界面如图6，界面顶端显示飞机基本状态、操作注意事项、时间信息、单位名称、终端编号信息、故障处理与各专业处理情况等。界面下方还有工作的总进度条，方便机务总指挥对进程的判断与决策。 图6. 初始界面图 选择相应的专业后进入相对应的定检界面，根据页面提示，连续进行每一步的检查，完成检查后会有相应专业提示。 机务维修人员作业过程中遇到特殊情况时，需手动退出工作流程。即可点击下方“终止检查”按钮退出检查工作。若检查其中某一步发现了异常，即可点击“故障”按钮进入故障汇报功能。此时智能终端弹出了故障上报界面，可进行故障的拍照与文字状况描述，及时将故障状况传送到后台。 当智能终端将现场故障或异常情况通过照片和文字描述返回至后台时，后台界面实时接受到信息。后台值班人员对信息进行查看、分析，通过采取查询资料、应用专家系统、咨询等方式，单击“去处理”，进入故障处理界面，给出处理意见。 智能终端实时接受后台处理信息，获取了故障解决方案或者下一步指令。根据终端界面所显示的解决方案，排查故障后，可继续进行下一步操作。 在作业完成后，智能终端又跳回专业选择界面。在已完成专业进行标记，机务维修人员可单击界面下方“查看检查记录”对检查情况进行查看。同时，后台指挥人员也可以在后台软件界面右上方进行查询，对排查故障情况进行记录。"
"软件测试是软件开发过程中必不可少的部分，不仅仅包括代码结构检查，而是按照规定的标准原则对软件各方面、各种情况进行系统、严谨的验证和确认 [ 18 ]。白盒测试主要是对软件代码进行检测，在软件开发过程中应用IDEA等规范化编辑器，软件代码结构完整规范，纠错及时。并且Android studio自带Android Device Monitor工具对软件进行检看，包括UI结构、应用线程等。因此，本系统主要进行软件黑盒测试，主要根据软件功能顺序，验证功能是否正确、界面是否错误、输入输出是否错误、访问数据库是否存在问题等。最后按照实验运行结果，是否达到预期成果。如果某个模块出现错误，进行修复后，在进行回归测试。 根据功能分析，设计终端软件测试内容主要为：登录界面初始化、账号登录、任务选择、专业选择、工作检查、故障上报、处理信息接收、查看检查记录。测试结果显示软件系统能够顺利实现预期设计功能，各功能模块使用正常，页面显示正常，功能跳转正常，按照预计标准运行，运行状况稳定，无特殊情况，达到预期效果。"
"以智能手机为依托，结合机务检查工作，辅助开发了React Native应用程序，进行了系统需求分析，划分系统功能模块。通过初步设计终端系统框架，最终实现部分功能，完成机务工作案例的演示，实现机务维修终端的设计初想。论证智能手机与机务工作结合的可能性，为后续终端开发提供思路。 相信在5G时代，智能终端远不止于此，功能会更加强大与完美。未来必定是基于终端的时代，航空机务维修终端的功能也会更加丰富饱满，在后期的开发过程中还可以加入新的功能模块，如：在线学习、备件管理等。"
